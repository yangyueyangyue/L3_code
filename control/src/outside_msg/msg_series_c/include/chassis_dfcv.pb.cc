// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_dfcv.proto

#include "chassis_dfcv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace phoenix {
namespace msg {
namespace control {
class ChassisDFCVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisDFCV> _instance;
} _ChassisDFCV_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_ChassisDFCV_chassis_5fdfcv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::control::_ChassisDFCV_default_instance_;
    new (ptr) ::phoenix::msg::control::ChassisDFCV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::ChassisDFCV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisDFCV_chassis_5fdfcv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChassisDFCV_chassis_5fdfcv_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chassis_5fdfcv_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chassis_5fdfcv_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chassis_5fdfcv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chassis_5fdfcv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, source_address_brake_control_device_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, vehicle_mass_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, brake_pressure_lf_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, current_gear_ratio_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, transmission_selected_gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, clutch_switch_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, nominal_fricton_troque_percent_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, estimated_lossed_torque_percent_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, actual_engine_torque_percent_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, driver_damand_torque_percent_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, source_address_engine_control_device_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, transmission_shift_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, transmission_engage_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, tcu_engine_control_mode_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisDFCV, trailer_connected_status_),
  2,
  0,
  1,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::phoenix::msg::control::ChassisDFCV)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::control::_ChassisDFCV_default_instance_),
};

const char descriptor_table_protodef_chassis_5fdfcv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022chassis_dfcv.proto\022\023phoenix.msg.contro"
  "l\"\227\004\n\013ChassisDFCV\022+\n#source_address_brak"
  "e_control_device\030\001 \001(\r\022\024\n\014vehicle_mass\030\002"
  " \001(\001\022\031\n\021brake_pressure_lf\030\003 \001(\001\022\032\n\022curre"
  "nt_gear_ratio\030\004 \001(\001\022\"\n\032transmission_sele"
  "cted_gear\030\005 \001(\005\022\025\n\rclutch_switch\030\006 \001(\r\022&"
  "\n\036nominal_fricton_troque_percent\030\007 \001(\005\022\'"
  "\n\037estimated_lossed_torque_percent\030\010 \001(\005\022"
  "$\n\034actual_engine_torque_percent\030\t \001(\005\022$\n"
  "\034driver_damand_torque_percent\030\n \001(\005\022,\n$s"
  "ource_address_engine_control_device\030\013 \001("
  "\r\022!\n\031transmission_shift_status\030\014 \001(\r\022\"\n\032"
  "transmission_engage_status\030\r \001(\r\022\037\n\027tcu_"
  "engine_control_mode\030\016 \001(\r\022 \n\030trailer_con"
  "nected_status\030\017 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chassis_5fdfcv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chassis_5fdfcv_2eproto_sccs[1] = {
  &scc_info_ChassisDFCV_chassis_5fdfcv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chassis_5fdfcv_2eproto_once;
static bool descriptor_table_chassis_5fdfcv_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_5fdfcv_2eproto = {
  &descriptor_table_chassis_5fdfcv_2eproto_initialized, descriptor_table_protodef_chassis_5fdfcv_2eproto, "chassis_dfcv.proto", 579,
  &descriptor_table_chassis_5fdfcv_2eproto_once, descriptor_table_chassis_5fdfcv_2eproto_sccs, descriptor_table_chassis_5fdfcv_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_chassis_5fdfcv_2eproto::offsets,
  file_level_metadata_chassis_5fdfcv_2eproto, 1, file_level_enum_descriptors_chassis_5fdfcv_2eproto, file_level_service_descriptors_chassis_5fdfcv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chassis_5fdfcv_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chassis_5fdfcv_2eproto), true);
namespace phoenix {
namespace msg {
namespace control {

// ===================================================================

void ChassisDFCV::InitAsDefaultInstance() {
}
class ChassisDFCV::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisDFCV>()._has_bits_);
  static void set_has_source_address_brake_control_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_pressure_lf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_gear_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transmission_selected_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clutch_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_nominal_fricton_troque_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_estimated_lossed_torque_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_actual_engine_torque_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_driver_damand_torque_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_source_address_engine_control_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_transmission_shift_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_transmission_engage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tcu_engine_control_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trailer_connected_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

ChassisDFCV::ChassisDFCV()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.ChassisDFCV)
}
ChassisDFCV::ChassisDFCV(const ChassisDFCV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_mass_, &from.vehicle_mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&trailer_connected_status_) -
    reinterpret_cast<char*>(&vehicle_mass_)) + sizeof(trailer_connected_status_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.ChassisDFCV)
}

void ChassisDFCV::SharedCtor() {
  ::memset(&vehicle_mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailer_connected_status_) -
      reinterpret_cast<char*>(&vehicle_mass_)) + sizeof(trailer_connected_status_));
}

ChassisDFCV::~ChassisDFCV() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.ChassisDFCV)
  SharedDtor();
}

void ChassisDFCV::SharedDtor() {
}

void ChassisDFCV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisDFCV& ChassisDFCV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisDFCV_chassis_5fdfcv_2eproto.base);
  return *internal_default_instance();
}


void ChassisDFCV::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.ChassisDFCV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_mass_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_lossed_torque_percent_) -
        reinterpret_cast<char*>(&vehicle_mass_)) + sizeof(estimated_lossed_torque_percent_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&actual_engine_torque_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trailer_connected_status_) -
        reinterpret_cast<char*>(&actual_engine_torque_percent_)) + sizeof(trailer_connected_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChassisDFCV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_address_brake_control_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_address_brake_control_device(&has_bits);
          source_address_brake_control_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_mass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_vehicle_mass(&has_bits);
          vehicle_mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_pressure_lf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_brake_pressure_lf(&has_bits);
          brake_pressure_lf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_gear_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_current_gear_ratio(&has_bits);
          current_gear_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 transmission_selected_gear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_transmission_selected_gear(&has_bits);
          transmission_selected_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 clutch_switch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_clutch_switch(&has_bits);
          clutch_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nominal_fricton_troque_percent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nominal_fricton_troque_percent(&has_bits);
          nominal_fricton_troque_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 estimated_lossed_torque_percent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_estimated_lossed_torque_percent(&has_bits);
          estimated_lossed_torque_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 actual_engine_torque_percent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_actual_engine_torque_percent(&has_bits);
          actual_engine_torque_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 driver_damand_torque_percent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_driver_damand_torque_percent(&has_bits);
          driver_damand_torque_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_address_engine_control_device = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_source_address_engine_control_device(&has_bits);
          source_address_engine_control_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transmission_shift_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_transmission_shift_status(&has_bits);
          transmission_shift_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transmission_engage_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_transmission_engage_status(&has_bits);
          transmission_engage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tcu_engine_control_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tcu_engine_control_mode(&has_bits);
          tcu_engine_control_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trailer_connected_status = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_trailer_connected_status(&has_bits);
          trailer_connected_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChassisDFCV::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.ChassisDFCV)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_address_brake_control_device = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_source_address_brake_control_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_address_brake_control_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_mass = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_vehicle_mass(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pressure_lf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_brake_pressure_lf(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_lf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double current_gear_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_current_gear_ratio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_gear_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_selected_gear = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_transmission_selected_gear(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_selected_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clutch_switch = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_clutch_switch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clutch_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nominal_fricton_troque_percent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_nominal_fricton_troque_percent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nominal_fricton_troque_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_lossed_torque_percent = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_estimated_lossed_torque_percent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_lossed_torque_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 actual_engine_torque_percent = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_actual_engine_torque_percent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_engine_torque_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 driver_damand_torque_percent = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_driver_damand_torque_percent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &driver_damand_torque_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_address_engine_control_device = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_source_address_engine_control_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_address_engine_control_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transmission_shift_status = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_transmission_shift_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmission_shift_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transmission_engage_status = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_transmission_engage_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmission_engage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tcu_engine_control_mode = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_tcu_engine_control_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcu_engine_control_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trailer_connected_status = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_trailer_connected_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trailer_connected_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.ChassisDFCV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.ChassisDFCV)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChassisDFCV::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.ChassisDFCV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_address_brake_control_device = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->source_address_brake_control_device(), output);
  }

  // optional double vehicle_mass = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vehicle_mass(), output);
  }

  // optional double brake_pressure_lf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->brake_pressure_lf(), output);
  }

  // optional double current_gear_ratio = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->current_gear_ratio(), output);
  }

  // optional int32 transmission_selected_gear = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->transmission_selected_gear(), output);
  }

  // optional uint32 clutch_switch = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->clutch_switch(), output);
  }

  // optional int32 nominal_fricton_troque_percent = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->nominal_fricton_troque_percent(), output);
  }

  // optional int32 estimated_lossed_torque_percent = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->estimated_lossed_torque_percent(), output);
  }

  // optional int32 actual_engine_torque_percent = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->actual_engine_torque_percent(), output);
  }

  // optional int32 driver_damand_torque_percent = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->driver_damand_torque_percent(), output);
  }

  // optional uint32 source_address_engine_control_device = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->source_address_engine_control_device(), output);
  }

  // optional uint32 transmission_shift_status = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->transmission_shift_status(), output);
  }

  // optional uint32 transmission_engage_status = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->transmission_engage_status(), output);
  }

  // optional uint32 tcu_engine_control_mode = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->tcu_engine_control_mode(), output);
  }

  // optional uint32 trailer_connected_status = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->trailer_connected_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.ChassisDFCV)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisDFCV::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.ChassisDFCV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_address_brake_control_device = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_address_brake_control_device(), target);
  }

  // optional double vehicle_mass = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vehicle_mass(), target);
  }

  // optional double brake_pressure_lf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->brake_pressure_lf(), target);
  }

  // optional double current_gear_ratio = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->current_gear_ratio(), target);
  }

  // optional int32 transmission_selected_gear = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->transmission_selected_gear(), target);
  }

  // optional uint32 clutch_switch = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->clutch_switch(), target);
  }

  // optional int32 nominal_fricton_troque_percent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->nominal_fricton_troque_percent(), target);
  }

  // optional int32 estimated_lossed_torque_percent = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->estimated_lossed_torque_percent(), target);
  }

  // optional int32 actual_engine_torque_percent = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->actual_engine_torque_percent(), target);
  }

  // optional int32 driver_damand_torque_percent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->driver_damand_torque_percent(), target);
  }

  // optional uint32 source_address_engine_control_device = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_address_engine_control_device(), target);
  }

  // optional uint32 transmission_shift_status = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->transmission_shift_status(), target);
  }

  // optional uint32 transmission_engage_status = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->transmission_engage_status(), target);
  }

  // optional uint32 tcu_engine_control_mode = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->tcu_engine_control_mode(), target);
  }

  // optional uint32 trailer_connected_status = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->trailer_connected_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.ChassisDFCV)
  return target;
}

size_t ChassisDFCV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.ChassisDFCV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double vehicle_mass = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure_lf = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 source_address_brake_control_device = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->source_address_brake_control_device());
    }

    // optional int32 transmission_selected_gear = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->transmission_selected_gear());
    }

    // optional double current_gear_ratio = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 clutch_switch = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->clutch_switch());
    }

    // optional int32 nominal_fricton_troque_percent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nominal_fricton_troque_percent());
    }

    // optional int32 estimated_lossed_torque_percent = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->estimated_lossed_torque_percent());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 actual_engine_torque_percent = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->actual_engine_torque_percent());
    }

    // optional int32 driver_damand_torque_percent = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->driver_damand_torque_percent());
    }

    // optional uint32 source_address_engine_control_device = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->source_address_engine_control_device());
    }

    // optional uint32 transmission_shift_status = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->transmission_shift_status());
    }

    // optional uint32 transmission_engage_status = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->transmission_engage_status());
    }

    // optional uint32 tcu_engine_control_mode = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tcu_engine_control_mode());
    }

    // optional uint32 trailer_connected_status = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trailer_connected_status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisDFCV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.ChassisDFCV)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisDFCV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisDFCV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.ChassisDFCV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.ChassisDFCV)
    MergeFrom(*source);
  }
}

void ChassisDFCV::MergeFrom(const ChassisDFCV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.ChassisDFCV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_mass_ = from.vehicle_mass_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_pressure_lf_ = from.brake_pressure_lf_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_address_brake_control_device_ = from.source_address_brake_control_device_;
    }
    if (cached_has_bits & 0x00000008u) {
      transmission_selected_gear_ = from.transmission_selected_gear_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_gear_ratio_ = from.current_gear_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      clutch_switch_ = from.clutch_switch_;
    }
    if (cached_has_bits & 0x00000040u) {
      nominal_fricton_troque_percent_ = from.nominal_fricton_troque_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      estimated_lossed_torque_percent_ = from.estimated_lossed_torque_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      actual_engine_torque_percent_ = from.actual_engine_torque_percent_;
    }
    if (cached_has_bits & 0x00000200u) {
      driver_damand_torque_percent_ = from.driver_damand_torque_percent_;
    }
    if (cached_has_bits & 0x00000400u) {
      source_address_engine_control_device_ = from.source_address_engine_control_device_;
    }
    if (cached_has_bits & 0x00000800u) {
      transmission_shift_status_ = from.transmission_shift_status_;
    }
    if (cached_has_bits & 0x00001000u) {
      transmission_engage_status_ = from.transmission_engage_status_;
    }
    if (cached_has_bits & 0x00002000u) {
      tcu_engine_control_mode_ = from.tcu_engine_control_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      trailer_connected_status_ = from.trailer_connected_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisDFCV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.ChassisDFCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDFCV::CopyFrom(const ChassisDFCV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.ChassisDFCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDFCV::IsInitialized() const {
  return true;
}

void ChassisDFCV::InternalSwap(ChassisDFCV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_mass_, other->vehicle_mass_);
  swap(brake_pressure_lf_, other->brake_pressure_lf_);
  swap(source_address_brake_control_device_, other->source_address_brake_control_device_);
  swap(transmission_selected_gear_, other->transmission_selected_gear_);
  swap(current_gear_ratio_, other->current_gear_ratio_);
  swap(clutch_switch_, other->clutch_switch_);
  swap(nominal_fricton_troque_percent_, other->nominal_fricton_troque_percent_);
  swap(estimated_lossed_torque_percent_, other->estimated_lossed_torque_percent_);
  swap(actual_engine_torque_percent_, other->actual_engine_torque_percent_);
  swap(driver_damand_torque_percent_, other->driver_damand_torque_percent_);
  swap(source_address_engine_control_device_, other->source_address_engine_control_device_);
  swap(transmission_shift_status_, other->transmission_shift_status_);
  swap(transmission_engage_status_, other->transmission_engage_status_);
  swap(tcu_engine_control_mode_, other->tcu_engine_control_mode_);
  swap(trailer_connected_status_, other->trailer_connected_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisDFCV::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::control::ChassisDFCV* Arena::CreateMaybeMessage< ::phoenix::msg::control::ChassisDFCV >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::control::ChassisDFCV >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
