// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_dfcv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chassis_5fdfcv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chassis_5fdfcv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_5fdfcv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_5fdfcv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_5fdfcv_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class ChassisDFCV;
class ChassisDFCVDefaultTypeInternal;
extern ChassisDFCVDefaultTypeInternal _ChassisDFCV_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::control::ChassisDFCV* Arena::CreateMaybeMessage<::phoenix::msg::control::ChassisDFCV>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace control {

// ===================================================================

class ChassisDFCV :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.control.ChassisDFCV) */ {
 public:
  ChassisDFCV();
  virtual ~ChassisDFCV();

  ChassisDFCV(const ChassisDFCV& from);
  ChassisDFCV(ChassisDFCV&& from) noexcept
    : ChassisDFCV() {
    *this = ::std::move(from);
  }

  inline ChassisDFCV& operator=(const ChassisDFCV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisDFCV& operator=(ChassisDFCV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisDFCV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisDFCV* internal_default_instance() {
    return reinterpret_cast<const ChassisDFCV*>(
               &_ChassisDFCV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChassisDFCV& a, ChassisDFCV& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisDFCV* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisDFCV* New() const final {
    return CreateMaybeMessage<ChassisDFCV>(nullptr);
  }

  ChassisDFCV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisDFCV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisDFCV& from);
  void MergeFrom(const ChassisDFCV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisDFCV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.control.ChassisDFCV";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chassis_5fdfcv_2eproto);
    return ::descriptor_table_chassis_5fdfcv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleMassFieldNumber = 2,
    kBrakePressureLfFieldNumber = 3,
    kSourceAddressBrakeControlDeviceFieldNumber = 1,
    kTransmissionSelectedGearFieldNumber = 5,
    kCurrentGearRatioFieldNumber = 4,
    kClutchSwitchFieldNumber = 6,
    kNominalFrictonTroquePercentFieldNumber = 7,
    kEstimatedLossedTorquePercentFieldNumber = 8,
    kActualEngineTorquePercentFieldNumber = 9,
    kDriverDamandTorquePercentFieldNumber = 10,
    kSourceAddressEngineControlDeviceFieldNumber = 11,
    kTransmissionShiftStatusFieldNumber = 12,
    kTransmissionEngageStatusFieldNumber = 13,
    kTcuEngineControlModeFieldNumber = 14,
    kTrailerConnectedStatusFieldNumber = 15,
  };
  // optional double vehicle_mass = 2;
  bool has_vehicle_mass() const;
  void clear_vehicle_mass();
  double vehicle_mass() const;
  void set_vehicle_mass(double value);

  // optional double brake_pressure_lf = 3;
  bool has_brake_pressure_lf() const;
  void clear_brake_pressure_lf();
  double brake_pressure_lf() const;
  void set_brake_pressure_lf(double value);

  // optional uint32 source_address_brake_control_device = 1;
  bool has_source_address_brake_control_device() const;
  void clear_source_address_brake_control_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_address_brake_control_device() const;
  void set_source_address_brake_control_device(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 transmission_selected_gear = 5;
  bool has_transmission_selected_gear() const;
  void clear_transmission_selected_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_selected_gear() const;
  void set_transmission_selected_gear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double current_gear_ratio = 4;
  bool has_current_gear_ratio() const;
  void clear_current_gear_ratio();
  double current_gear_ratio() const;
  void set_current_gear_ratio(double value);

  // optional uint32 clutch_switch = 6;
  bool has_clutch_switch() const;
  void clear_clutch_switch();
  ::PROTOBUF_NAMESPACE_ID::uint32 clutch_switch() const;
  void set_clutch_switch(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 nominal_fricton_troque_percent = 7;
  bool has_nominal_fricton_troque_percent() const;
  void clear_nominal_fricton_troque_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 nominal_fricton_troque_percent() const;
  void set_nominal_fricton_troque_percent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 estimated_lossed_torque_percent = 8;
  bool has_estimated_lossed_torque_percent() const;
  void clear_estimated_lossed_torque_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_lossed_torque_percent() const;
  void set_estimated_lossed_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 actual_engine_torque_percent = 9;
  bool has_actual_engine_torque_percent() const;
  void clear_actual_engine_torque_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 actual_engine_torque_percent() const;
  void set_actual_engine_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 driver_damand_torque_percent = 10;
  bool has_driver_damand_torque_percent() const;
  void clear_driver_damand_torque_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_damand_torque_percent() const;
  void set_driver_damand_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 source_address_engine_control_device = 11;
  bool has_source_address_engine_control_device() const;
  void clear_source_address_engine_control_device();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_address_engine_control_device() const;
  void set_source_address_engine_control_device(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 transmission_shift_status = 12;
  bool has_transmission_shift_status() const;
  void clear_transmission_shift_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_shift_status() const;
  void set_transmission_shift_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 transmission_engage_status = 13;
  bool has_transmission_engage_status() const;
  void clear_transmission_engage_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_engage_status() const;
  void set_transmission_engage_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tcu_engine_control_mode = 14;
  bool has_tcu_engine_control_mode() const;
  void clear_tcu_engine_control_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcu_engine_control_mode() const;
  void set_tcu_engine_control_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 trailer_connected_status = 15;
  bool has_trailer_connected_status() const;
  void clear_trailer_connected_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 trailer_connected_status() const;
  void set_trailer_connected_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.control.ChassisDFCV)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double vehicle_mass_;
  double brake_pressure_lf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_address_brake_control_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_selected_gear_;
  double current_gear_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clutch_switch_;
  ::PROTOBUF_NAMESPACE_ID::int32 nominal_fricton_troque_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_lossed_torque_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 actual_engine_torque_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_damand_torque_percent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_address_engine_control_device_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_shift_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_engage_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcu_engine_control_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trailer_connected_status_;
  friend struct ::TableStruct_chassis_5fdfcv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChassisDFCV

// optional uint32 source_address_brake_control_device = 1;
inline bool ChassisDFCV::has_source_address_brake_control_device() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisDFCV::clear_source_address_brake_control_device() {
  source_address_brake_control_device_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::source_address_brake_control_device() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.source_address_brake_control_device)
  return source_address_brake_control_device_;
}
inline void ChassisDFCV::set_source_address_brake_control_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  source_address_brake_control_device_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.source_address_brake_control_device)
}

// optional double vehicle_mass = 2;
inline bool ChassisDFCV::has_vehicle_mass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChassisDFCV::clear_vehicle_mass() {
  vehicle_mass_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ChassisDFCV::vehicle_mass() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.vehicle_mass)
  return vehicle_mass_;
}
inline void ChassisDFCV::set_vehicle_mass(double value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_mass_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.vehicle_mass)
}

// optional double brake_pressure_lf = 3;
inline bool ChassisDFCV::has_brake_pressure_lf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisDFCV::clear_brake_pressure_lf() {
  brake_pressure_lf_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ChassisDFCV::brake_pressure_lf() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.brake_pressure_lf)
  return brake_pressure_lf_;
}
inline void ChassisDFCV::set_brake_pressure_lf(double value) {
  _has_bits_[0] |= 0x00000002u;
  brake_pressure_lf_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.brake_pressure_lf)
}

// optional double current_gear_ratio = 4;
inline bool ChassisDFCV::has_current_gear_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisDFCV::clear_current_gear_ratio() {
  current_gear_ratio_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ChassisDFCV::current_gear_ratio() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.current_gear_ratio)
  return current_gear_ratio_;
}
inline void ChassisDFCV::set_current_gear_ratio(double value) {
  _has_bits_[0] |= 0x00000010u;
  current_gear_ratio_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.current_gear_ratio)
}

// optional int32 transmission_selected_gear = 5;
inline bool ChassisDFCV::has_transmission_selected_gear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisDFCV::clear_transmission_selected_gear() {
  transmission_selected_gear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisDFCV::transmission_selected_gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.transmission_selected_gear)
  return transmission_selected_gear_;
}
inline void ChassisDFCV::set_transmission_selected_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  transmission_selected_gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.transmission_selected_gear)
}

// optional uint32 clutch_switch = 6;
inline bool ChassisDFCV::has_clutch_switch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisDFCV::clear_clutch_switch() {
  clutch_switch_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::clutch_switch() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.clutch_switch)
  return clutch_switch_;
}
inline void ChassisDFCV::set_clutch_switch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  clutch_switch_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.clutch_switch)
}

// optional int32 nominal_fricton_troque_percent = 7;
inline bool ChassisDFCV::has_nominal_fricton_troque_percent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisDFCV::clear_nominal_fricton_troque_percent() {
  nominal_fricton_troque_percent_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisDFCV::nominal_fricton_troque_percent() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.nominal_fricton_troque_percent)
  return nominal_fricton_troque_percent_;
}
inline void ChassisDFCV::set_nominal_fricton_troque_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  nominal_fricton_troque_percent_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.nominal_fricton_troque_percent)
}

// optional int32 estimated_lossed_torque_percent = 8;
inline bool ChassisDFCV::has_estimated_lossed_torque_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisDFCV::clear_estimated_lossed_torque_percent() {
  estimated_lossed_torque_percent_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisDFCV::estimated_lossed_torque_percent() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.estimated_lossed_torque_percent)
  return estimated_lossed_torque_percent_;
}
inline void ChassisDFCV::set_estimated_lossed_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  estimated_lossed_torque_percent_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.estimated_lossed_torque_percent)
}

// optional int32 actual_engine_torque_percent = 9;
inline bool ChassisDFCV::has_actual_engine_torque_percent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisDFCV::clear_actual_engine_torque_percent() {
  actual_engine_torque_percent_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisDFCV::actual_engine_torque_percent() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.actual_engine_torque_percent)
  return actual_engine_torque_percent_;
}
inline void ChassisDFCV::set_actual_engine_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  actual_engine_torque_percent_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.actual_engine_torque_percent)
}

// optional int32 driver_damand_torque_percent = 10;
inline bool ChassisDFCV::has_driver_damand_torque_percent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisDFCV::clear_driver_damand_torque_percent() {
  driver_damand_torque_percent_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisDFCV::driver_damand_torque_percent() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.driver_damand_torque_percent)
  return driver_damand_torque_percent_;
}
inline void ChassisDFCV::set_driver_damand_torque_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  driver_damand_torque_percent_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.driver_damand_torque_percent)
}

// optional uint32 source_address_engine_control_device = 11;
inline bool ChassisDFCV::has_source_address_engine_control_device() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisDFCV::clear_source_address_engine_control_device() {
  source_address_engine_control_device_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::source_address_engine_control_device() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.source_address_engine_control_device)
  return source_address_engine_control_device_;
}
inline void ChassisDFCV::set_source_address_engine_control_device(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  source_address_engine_control_device_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.source_address_engine_control_device)
}

// optional uint32 transmission_shift_status = 12;
inline bool ChassisDFCV::has_transmission_shift_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisDFCV::clear_transmission_shift_status() {
  transmission_shift_status_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::transmission_shift_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.transmission_shift_status)
  return transmission_shift_status_;
}
inline void ChassisDFCV::set_transmission_shift_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  transmission_shift_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.transmission_shift_status)
}

// optional uint32 transmission_engage_status = 13;
inline bool ChassisDFCV::has_transmission_engage_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisDFCV::clear_transmission_engage_status() {
  transmission_engage_status_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::transmission_engage_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.transmission_engage_status)
  return transmission_engage_status_;
}
inline void ChassisDFCV::set_transmission_engage_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  transmission_engage_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.transmission_engage_status)
}

// optional uint32 tcu_engine_control_mode = 14;
inline bool ChassisDFCV::has_tcu_engine_control_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisDFCV::clear_tcu_engine_control_mode() {
  tcu_engine_control_mode_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::tcu_engine_control_mode() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.tcu_engine_control_mode)
  return tcu_engine_control_mode_;
}
inline void ChassisDFCV::set_tcu_engine_control_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  tcu_engine_control_mode_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.tcu_engine_control_mode)
}

// optional uint32 trailer_connected_status = 15;
inline bool ChassisDFCV::has_trailer_connected_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisDFCV::clear_trailer_connected_status() {
  trailer_connected_status_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChassisDFCV::trailer_connected_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisDFCV.trailer_connected_status)
  return trailer_connected_status_;
}
inline void ChassisDFCV::set_trailer_connected_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  trailer_connected_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisDFCV.trailer_connected_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chassis_5fdfcv_2eproto
