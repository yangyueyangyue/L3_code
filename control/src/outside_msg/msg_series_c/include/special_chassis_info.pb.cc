// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: special_chassis_info.proto

#include "special_chassis_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chassis_5fft_5fauman_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisFtAuman_chassis_5fft_5fauman_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class SpecialChassisInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecialChassisInfo> _instance;
} _SpecialChassisInfo_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::control::_SpecialChassisInfo_default_instance_;
    new (ptr) ::phoenix::msg::control::SpecialChassisInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::SpecialChassisInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_ChassisFtAuman_chassis_5fft_5fauman_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_special_5fchassis_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_special_5fchassis_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_special_5fchassis_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_special_5fchassis_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, start_adas_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_lka_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_acc_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_aeb_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_alc_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_isl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, enable_ngp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_velocity_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_velocity_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_acc_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_acc_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_time_gap_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, target_time_gap_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, changing_lane_req_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_frame_loss_can0_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_frame_loss_can1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_frame_loss_can2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_frame_loss_can3_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_gtw_to_veh_can0_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_gtw_to_veh_can1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_gtw_to_veh_can2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_gtw_to_veh_can3_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_ctl_to_gtw_can0_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_ctl_to_gtw_can1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_ctl_to_gtw_can2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_ctl_to_gtw_can3_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, cnt_stu_ctl_to_gtw_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::SpecialChassisInfo, ft_auman_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  11,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 34, sizeof(::phoenix::msg::control::SpecialChassisInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::control::_SpecialChassisInfo_default_instance_),
};

const char descriptor_table_protodef_special_5fchassis_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032special_chassis_info.proto\022\023phoenix.ms"
  "g.control\032\014header.proto\032\026chassis_ft_auma"
  "n.proto\"\301\007\n\022SpecialChassisInfo\022*\n\006header"
  "\030\001 \001(\0132\032.phoenix.msg.common.Header\022\025\n\nst"
  "art_adas\030\002 \001(\005:\0010\022\025\n\nenable_lka\030\003 \001(\005:\0010"
  "\022\025\n\nenable_acc\030\004 \001(\005:\0010\022\025\n\nenable_aeb\030\005 "
  "\001(\005:\0010\022\025\n\nenable_alc\030\006 \001(\005:\0010\022\025\n\nenable_"
  "isl\030\007 \001(\005:\0010\022\025\n\nenable_ngp\030\010 \001(\005:\0010\022$\n\025t"
  "arget_velocity_valid\030\t \001(\010:\005false\022\032\n\017tar"
  "get_velocity\030\n \001(\001:\0010\022\037\n\020target_acc_vali"
  "d\030\013 \001(\010:\005false\022\025\n\ntarget_acc\030\014 \001(\001:\0010\022$\n"
  "\025target_time_gap_valid\030\r \001(\010:\005false\022\032\n\017t"
  "arget_time_gap\030\016 \001(\001:\0010\022\034\n\021changing_lane"
  "_req\030\017 \001(\005:\0010\022\"\n\027cnt_stu_frame_loss_can0"
  "\030\020 \001(\005:\0010\022\"\n\027cnt_stu_frame_loss_can1\030\021 \001"
  "(\005:\0010\022\"\n\027cnt_stu_frame_loss_can2\030\022 \001(\005:\001"
  "0\022\"\n\027cnt_stu_frame_loss_can3\030\023 \001(\005:\0010\022\"\n"
  "\027cnt_stu_gtw_to_veh_can0\030\024 \001(\005:\0010\022\"\n\027cnt"
  "_stu_gtw_to_veh_can1\030\025 \001(\005:\0010\022\"\n\027cnt_stu"
  "_gtw_to_veh_can2\030\026 \001(\005:\0010\022\"\n\027cnt_stu_gtw"
  "_to_veh_can3\030\027 \001(\005:\0010\022\"\n\027cnt_stu_ctl_to_"
  "gtw_can0\030\030 \001(\005:\0010\022\"\n\027cnt_stu_ctl_to_gtw_"
  "can1\030\031 \001(\005:\0010\022\"\n\027cnt_stu_ctl_to_gtw_can2"
  "\030\032 \001(\005:\0010\022\"\n\027cnt_stu_ctl_to_gtw_can3\030\033 \001"
  "(\005:\0010\022\035\n\022cnt_stu_ctl_to_gtw\030\034 \001(\005:\0010\0225\n\010"
  "ft_auman\030\035 \001(\0132#.phoenix.msg.control.Cha"
  "ssisFtAuman"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_special_5fchassis_5finfo_2eproto_deps[2] = {
  &::descriptor_table_chassis_5fft_5fauman_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_special_5fchassis_5finfo_2eproto_sccs[1] = {
  &scc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_special_5fchassis_5finfo_2eproto_once;
static bool descriptor_table_special_5fchassis_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_special_5fchassis_5finfo_2eproto = {
  &descriptor_table_special_5fchassis_5finfo_2eproto_initialized, descriptor_table_protodef_special_5fchassis_5finfo_2eproto, "special_chassis_info.proto", 1051,
  &descriptor_table_special_5fchassis_5finfo_2eproto_once, descriptor_table_special_5fchassis_5finfo_2eproto_sccs, descriptor_table_special_5fchassis_5finfo_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_special_5fchassis_5finfo_2eproto::offsets,
  file_level_metadata_special_5fchassis_5finfo_2eproto, 1, file_level_enum_descriptors_special_5fchassis_5finfo_2eproto, file_level_service_descriptors_special_5fchassis_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_special_5fchassis_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_special_5fchassis_5finfo_2eproto), true);
namespace phoenix {
namespace msg {
namespace control {

// ===================================================================

void SpecialChassisInfo::InitAsDefaultInstance() {
  ::phoenix::msg::control::_SpecialChassisInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
  ::phoenix::msg::control::_SpecialChassisInfo_default_instance_._instance.get_mutable()->ft_auman_ = const_cast< ::phoenix::msg::control::ChassisFtAuman*>(
      ::phoenix::msg::control::ChassisFtAuman::internal_default_instance());
}
class SpecialChassisInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecialChassisInfo>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const SpecialChassisInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_adas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_lka(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_aeb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_alc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_isl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_ngp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_velocity_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_target_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_acc_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_target_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_target_time_gap_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_target_time_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_changing_lane_req(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cnt_stu_frame_loss_can0(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_cnt_stu_frame_loss_can1(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cnt_stu_frame_loss_can2(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_cnt_stu_frame_loss_can3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_cnt_stu_gtw_to_veh_can0(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_cnt_stu_gtw_to_veh_can1(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_cnt_stu_gtw_to_veh_can2(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cnt_stu_gtw_to_veh_can3(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cnt_stu_ctl_to_gtw_can0(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_cnt_stu_ctl_to_gtw_can1(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_cnt_stu_ctl_to_gtw_can2(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_cnt_stu_ctl_to_gtw_can3(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_cnt_stu_ctl_to_gtw(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::phoenix::msg::control::ChassisFtAuman& ft_auman(const SpecialChassisInfo* msg);
  static void set_has_ft_auman(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::phoenix::msg::common::Header&
SpecialChassisInfo::_Internal::header(const SpecialChassisInfo* msg) {
  return *msg->header_;
}
const ::phoenix::msg::control::ChassisFtAuman&
SpecialChassisInfo::_Internal::ft_auman(const SpecialChassisInfo* msg) {
  return *msg->ft_auman_;
}
void SpecialChassisInfo::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SpecialChassisInfo::clear_ft_auman() {
  if (ft_auman_ != nullptr) ft_auman_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SpecialChassisInfo::SpecialChassisInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.SpecialChassisInfo)
}
SpecialChassisInfo::SpecialChassisInfo(const SpecialChassisInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_ft_auman()) {
    ft_auman_ = new ::phoenix::msg::control::ChassisFtAuman(*from.ft_auman_);
  } else {
    ft_auman_ = nullptr;
  }
  ::memcpy(&start_adas_, &from.start_adas_,
    static_cast<size_t>(reinterpret_cast<char*>(&cnt_stu_ctl_to_gtw_) -
    reinterpret_cast<char*>(&start_adas_)) + sizeof(cnt_stu_ctl_to_gtw_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.SpecialChassisInfo)
}

void SpecialChassisInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cnt_stu_ctl_to_gtw_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cnt_stu_ctl_to_gtw_));
}

SpecialChassisInfo::~SpecialChassisInfo() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.SpecialChassisInfo)
  SharedDtor();
}

void SpecialChassisInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ft_auman_;
}

void SpecialChassisInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecialChassisInfo& SpecialChassisInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecialChassisInfo_special_5fchassis_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SpecialChassisInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.SpecialChassisInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ft_auman_ != nullptr);
      ft_auman_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&start_adas_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_isl_) -
        reinterpret_cast<char*>(&start_adas_)) + sizeof(enable_isl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&target_velocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changing_lane_req_) -
        reinterpret_cast<char*>(&target_velocity_)) + sizeof(changing_lane_req_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&cnt_stu_frame_loss_can0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnt_stu_gtw_to_veh_can3_) -
        reinterpret_cast<char*>(&cnt_stu_frame_loss_can0_)) + sizeof(cnt_stu_gtw_to_veh_can3_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&cnt_stu_ctl_to_gtw_can0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnt_stu_ctl_to_gtw_) -
        reinterpret_cast<char*>(&cnt_stu_ctl_to_gtw_can0_)) + sizeof(cnt_stu_ctl_to_gtw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpecialChassisInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_adas = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_adas(&has_bits);
          start_adas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_lka = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_lka(&has_bits);
          enable_lka_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_acc = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_acc(&has_bits);
          enable_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_aeb = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_aeb(&has_bits);
          enable_aeb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_alc = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_alc(&has_bits);
          enable_alc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_isl = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enable_isl(&has_bits);
          enable_isl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enable_ngp = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enable_ngp(&has_bits);
          enable_ngp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool target_velocity_valid = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_target_velocity_valid(&has_bits);
          target_velocity_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_velocity = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_target_velocity(&has_bits);
          target_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool target_acc_valid = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_target_acc_valid(&has_bits);
          target_acc_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_acc = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_target_acc(&has_bits);
          target_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool target_time_gap_valid = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_target_time_gap_valid(&has_bits);
          target_time_gap_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_time_gap = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_target_time_gap(&has_bits);
          target_time_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 changing_lane_req = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_changing_lane_req(&has_bits);
          changing_lane_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_frame_loss_can0 = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_cnt_stu_frame_loss_can0(&has_bits);
          cnt_stu_frame_loss_can0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_frame_loss_can1 = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_cnt_stu_frame_loss_can1(&has_bits);
          cnt_stu_frame_loss_can1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_frame_loss_can2 = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_cnt_stu_frame_loss_can2(&has_bits);
          cnt_stu_frame_loss_can2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_frame_loss_can3 = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_cnt_stu_frame_loss_can3(&has_bits);
          cnt_stu_frame_loss_can3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_gtw_to_veh_can0 = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can0(&has_bits);
          cnt_stu_gtw_to_veh_can0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_gtw_to_veh_can1 = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can1(&has_bits);
          cnt_stu_gtw_to_veh_can1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_gtw_to_veh_can2 = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can2(&has_bits);
          cnt_stu_gtw_to_veh_can2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_gtw_to_veh_can3 = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can3(&has_bits);
          cnt_stu_gtw_to_veh_can3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_ctl_to_gtw_can0 = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can0(&has_bits);
          cnt_stu_ctl_to_gtw_can0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_ctl_to_gtw_can1 = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can1(&has_bits);
          cnt_stu_ctl_to_gtw_can1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_ctl_to_gtw_can2 = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can2(&has_bits);
          cnt_stu_ctl_to_gtw_can2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_ctl_to_gtw_can3 = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can3(&has_bits);
          cnt_stu_ctl_to_gtw_can3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cnt_stu_ctl_to_gtw = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw(&has_bits);
          cnt_stu_ctl_to_gtw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisFtAuman ft_auman = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_ft_auman(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpecialChassisInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.SpecialChassisInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_adas = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_adas(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_adas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_lka = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_enable_lka(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_lka_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_acc = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_enable_acc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_aeb = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_enable_aeb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_aeb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_alc = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_enable_alc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_alc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_isl = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_enable_isl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_isl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable_ngp = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_enable_ngp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_ngp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_velocity_valid = 9 [default = false];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_target_velocity_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_velocity_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double target_velocity = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          _Internal::set_has_target_velocity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_acc_valid = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_target_acc_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_acc_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double target_acc = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {
          _Internal::set_has_target_acc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_time_gap_valid = 13 [default = false];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_target_time_gap_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_time_gap_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double target_time_gap = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {
          _Internal::set_has_target_time_gap(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_time_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 changing_lane_req = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_changing_lane_req(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &changing_lane_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_frame_loss_can0 = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_cnt_stu_frame_loss_can0(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_frame_loss_can0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_frame_loss_can1 = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_cnt_stu_frame_loss_can1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_frame_loss_can1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_frame_loss_can2 = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_cnt_stu_frame_loss_can2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_frame_loss_can2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_frame_loss_can3 = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_cnt_stu_frame_loss_can3(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_frame_loss_can3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_gtw_to_veh_can0 = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can0(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_gtw_to_veh_can0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_gtw_to_veh_can1 = 21 [default = 0];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_gtw_to_veh_can1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_gtw_to_veh_can2 = 22 [default = 0];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_gtw_to_veh_can2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_gtw_to_veh_can3 = 23 [default = 0];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_cnt_stu_gtw_to_veh_can3(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_gtw_to_veh_can3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_ctl_to_gtw_can0 = 24 [default = 0];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can0(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_ctl_to_gtw_can0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_ctl_to_gtw_can1 = 25 [default = 0];
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_ctl_to_gtw_can1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_ctl_to_gtw_can2 = 26 [default = 0];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_ctl_to_gtw_can2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_ctl_to_gtw_can3 = 27 [default = 0];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw_can3(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_ctl_to_gtw_can3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt_stu_ctl_to_gtw = 28 [default = 0];
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_cnt_stu_ctl_to_gtw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_stu_ctl_to_gtw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisFtAuman ft_auman = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ft_auman()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.SpecialChassisInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.SpecialChassisInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpecialChassisInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.SpecialChassisInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional int32 start_adas = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start_adas(), output);
  }

  // optional int32 enable_lka = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->enable_lka(), output);
  }

  // optional int32 enable_acc = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->enable_acc(), output);
  }

  // optional int32 enable_aeb = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->enable_aeb(), output);
  }

  // optional int32 enable_alc = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->enable_alc(), output);
  }

  // optional int32 enable_isl = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->enable_isl(), output);
  }

  // optional int32 enable_ngp = 8 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->enable_ngp(), output);
  }

  // optional bool target_velocity_valid = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->target_velocity_valid(), output);
  }

  // optional double target_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->target_velocity(), output);
  }

  // optional bool target_acc_valid = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->target_acc_valid(), output);
  }

  // optional double target_acc = 12 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->target_acc(), output);
  }

  // optional bool target_time_gap_valid = 13 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->target_time_gap_valid(), output);
  }

  // optional double target_time_gap = 14 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->target_time_gap(), output);
  }

  // optional int32 changing_lane_req = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->changing_lane_req(), output);
  }

  // optional int32 cnt_stu_frame_loss_can0 = 16 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->cnt_stu_frame_loss_can0(), output);
  }

  // optional int32 cnt_stu_frame_loss_can1 = 17 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->cnt_stu_frame_loss_can1(), output);
  }

  // optional int32 cnt_stu_frame_loss_can2 = 18 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->cnt_stu_frame_loss_can2(), output);
  }

  // optional int32 cnt_stu_frame_loss_can3 = 19 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->cnt_stu_frame_loss_can3(), output);
  }

  // optional int32 cnt_stu_gtw_to_veh_can0 = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->cnt_stu_gtw_to_veh_can0(), output);
  }

  // optional int32 cnt_stu_gtw_to_veh_can1 = 21 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->cnt_stu_gtw_to_veh_can1(), output);
  }

  // optional int32 cnt_stu_gtw_to_veh_can2 = 22 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->cnt_stu_gtw_to_veh_can2(), output);
  }

  // optional int32 cnt_stu_gtw_to_veh_can3 = 23 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->cnt_stu_gtw_to_veh_can3(), output);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can0 = 24 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->cnt_stu_ctl_to_gtw_can0(), output);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can1 = 25 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->cnt_stu_ctl_to_gtw_can1(), output);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can2 = 26 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->cnt_stu_ctl_to_gtw_can2(), output);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can3 = 27 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(27, this->cnt_stu_ctl_to_gtw_can3(), output);
  }

  // optional int32 cnt_stu_ctl_to_gtw = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->cnt_stu_ctl_to_gtw(), output);
  }

  // optional .phoenix.msg.control.ChassisFtAuman ft_auman = 29;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::ft_auman(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.SpecialChassisInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecialChassisInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.SpecialChassisInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional int32 start_adas = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start_adas(), target);
  }

  // optional int32 enable_lka = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->enable_lka(), target);
  }

  // optional int32 enable_acc = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->enable_acc(), target);
  }

  // optional int32 enable_aeb = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->enable_aeb(), target);
  }

  // optional int32 enable_alc = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->enable_alc(), target);
  }

  // optional int32 enable_isl = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->enable_isl(), target);
  }

  // optional int32 enable_ngp = 8 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->enable_ngp(), target);
  }

  // optional bool target_velocity_valid = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->target_velocity_valid(), target);
  }

  // optional double target_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->target_velocity(), target);
  }

  // optional bool target_acc_valid = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->target_acc_valid(), target);
  }

  // optional double target_acc = 12 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->target_acc(), target);
  }

  // optional bool target_time_gap_valid = 13 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->target_time_gap_valid(), target);
  }

  // optional double target_time_gap = 14 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->target_time_gap(), target);
  }

  // optional int32 changing_lane_req = 15 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->changing_lane_req(), target);
  }

  // optional int32 cnt_stu_frame_loss_can0 = 16 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->cnt_stu_frame_loss_can0(), target);
  }

  // optional int32 cnt_stu_frame_loss_can1 = 17 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->cnt_stu_frame_loss_can1(), target);
  }

  // optional int32 cnt_stu_frame_loss_can2 = 18 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->cnt_stu_frame_loss_can2(), target);
  }

  // optional int32 cnt_stu_frame_loss_can3 = 19 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->cnt_stu_frame_loss_can3(), target);
  }

  // optional int32 cnt_stu_gtw_to_veh_can0 = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->cnt_stu_gtw_to_veh_can0(), target);
  }

  // optional int32 cnt_stu_gtw_to_veh_can1 = 21 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->cnt_stu_gtw_to_veh_can1(), target);
  }

  // optional int32 cnt_stu_gtw_to_veh_can2 = 22 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->cnt_stu_gtw_to_veh_can2(), target);
  }

  // optional int32 cnt_stu_gtw_to_veh_can3 = 23 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->cnt_stu_gtw_to_veh_can3(), target);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can0 = 24 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->cnt_stu_ctl_to_gtw_can0(), target);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can1 = 25 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->cnt_stu_ctl_to_gtw_can1(), target);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can2 = 26 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->cnt_stu_ctl_to_gtw_can2(), target);
  }

  // optional int32 cnt_stu_ctl_to_gtw_can3 = 27 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->cnt_stu_ctl_to_gtw_can3(), target);
  }

  // optional int32 cnt_stu_ctl_to_gtw = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->cnt_stu_ctl_to_gtw(), target);
  }

  // optional .phoenix.msg.control.ChassisFtAuman ft_auman = 29;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::ft_auman(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.SpecialChassisInfo)
  return target;
}

size_t SpecialChassisInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.SpecialChassisInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.control.ChassisFtAuman ft_auman = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ft_auman_);
    }

    // optional int32 start_adas = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->start_adas());
    }

    // optional int32 enable_lka = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_lka());
    }

    // optional int32 enable_acc = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_acc());
    }

    // optional int32 enable_aeb = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_aeb());
    }

    // optional int32 enable_alc = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_alc());
    }

    // optional int32 enable_isl = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_isl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double target_velocity = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int32 enable_ngp = 8 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->enable_ngp());
    }

    // optional bool target_velocity_valid = 9 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool target_acc_valid = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool target_time_gap_valid = 13 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional double target_acc = 12 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double target_time_gap = 14 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 changing_lane_req = 15 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->changing_lane_req());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 cnt_stu_frame_loss_can0 = 16 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_frame_loss_can0());
    }

    // optional int32 cnt_stu_frame_loss_can1 = 17 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_frame_loss_can1());
    }

    // optional int32 cnt_stu_frame_loss_can2 = 18 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_frame_loss_can2());
    }

    // optional int32 cnt_stu_frame_loss_can3 = 19 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_frame_loss_can3());
    }

    // optional int32 cnt_stu_gtw_to_veh_can0 = 20 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_gtw_to_veh_can0());
    }

    // optional int32 cnt_stu_gtw_to_veh_can1 = 21 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_gtw_to_veh_can1());
    }

    // optional int32 cnt_stu_gtw_to_veh_can2 = 22 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_gtw_to_veh_can2());
    }

    // optional int32 cnt_stu_gtw_to_veh_can3 = 23 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_gtw_to_veh_can3());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional int32 cnt_stu_ctl_to_gtw_can0 = 24 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_ctl_to_gtw_can0());
    }

    // optional int32 cnt_stu_ctl_to_gtw_can1 = 25 [default = 0];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_ctl_to_gtw_can1());
    }

    // optional int32 cnt_stu_ctl_to_gtw_can2 = 26 [default = 0];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_ctl_to_gtw_can2());
    }

    // optional int32 cnt_stu_ctl_to_gtw_can3 = 27 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_ctl_to_gtw_can3());
    }

    // optional int32 cnt_stu_ctl_to_gtw = 28 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cnt_stu_ctl_to_gtw());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecialChassisInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.SpecialChassisInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecialChassisInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecialChassisInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.SpecialChassisInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.SpecialChassisInfo)
    MergeFrom(*source);
  }
}

void SpecialChassisInfo::MergeFrom(const SpecialChassisInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.SpecialChassisInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ft_auman()->::phoenix::msg::control::ChassisFtAuman::MergeFrom(from.ft_auman());
    }
    if (cached_has_bits & 0x00000004u) {
      start_adas_ = from.start_adas_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_lka_ = from.enable_lka_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_acc_ = from.enable_acc_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_aeb_ = from.enable_aeb_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_alc_ = from.enable_alc_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_isl_ = from.enable_isl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      target_velocity_ = from.target_velocity_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_ngp_ = from.enable_ngp_;
    }
    if (cached_has_bits & 0x00000400u) {
      target_velocity_valid_ = from.target_velocity_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      target_acc_valid_ = from.target_acc_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      target_time_gap_valid_ = from.target_time_gap_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      target_acc_ = from.target_acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      target_time_gap_ = from.target_time_gap_;
    }
    if (cached_has_bits & 0x00008000u) {
      changing_lane_req_ = from.changing_lane_req_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      cnt_stu_frame_loss_can0_ = from.cnt_stu_frame_loss_can0_;
    }
    if (cached_has_bits & 0x00020000u) {
      cnt_stu_frame_loss_can1_ = from.cnt_stu_frame_loss_can1_;
    }
    if (cached_has_bits & 0x00040000u) {
      cnt_stu_frame_loss_can2_ = from.cnt_stu_frame_loss_can2_;
    }
    if (cached_has_bits & 0x00080000u) {
      cnt_stu_frame_loss_can3_ = from.cnt_stu_frame_loss_can3_;
    }
    if (cached_has_bits & 0x00100000u) {
      cnt_stu_gtw_to_veh_can0_ = from.cnt_stu_gtw_to_veh_can0_;
    }
    if (cached_has_bits & 0x00200000u) {
      cnt_stu_gtw_to_veh_can1_ = from.cnt_stu_gtw_to_veh_can1_;
    }
    if (cached_has_bits & 0x00400000u) {
      cnt_stu_gtw_to_veh_can2_ = from.cnt_stu_gtw_to_veh_can2_;
    }
    if (cached_has_bits & 0x00800000u) {
      cnt_stu_gtw_to_veh_can3_ = from.cnt_stu_gtw_to_veh_can3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      cnt_stu_ctl_to_gtw_can0_ = from.cnt_stu_ctl_to_gtw_can0_;
    }
    if (cached_has_bits & 0x02000000u) {
      cnt_stu_ctl_to_gtw_can1_ = from.cnt_stu_ctl_to_gtw_can1_;
    }
    if (cached_has_bits & 0x04000000u) {
      cnt_stu_ctl_to_gtw_can2_ = from.cnt_stu_ctl_to_gtw_can2_;
    }
    if (cached_has_bits & 0x08000000u) {
      cnt_stu_ctl_to_gtw_can3_ = from.cnt_stu_ctl_to_gtw_can3_;
    }
    if (cached_has_bits & 0x10000000u) {
      cnt_stu_ctl_to_gtw_ = from.cnt_stu_ctl_to_gtw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecialChassisInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.SpecialChassisInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialChassisInfo::CopyFrom(const SpecialChassisInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.SpecialChassisInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialChassisInfo::IsInitialized() const {
  return true;
}

void SpecialChassisInfo::InternalSwap(SpecialChassisInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(ft_auman_, other->ft_auman_);
  swap(start_adas_, other->start_adas_);
  swap(enable_lka_, other->enable_lka_);
  swap(enable_acc_, other->enable_acc_);
  swap(enable_aeb_, other->enable_aeb_);
  swap(enable_alc_, other->enable_alc_);
  swap(enable_isl_, other->enable_isl_);
  swap(target_velocity_, other->target_velocity_);
  swap(enable_ngp_, other->enable_ngp_);
  swap(target_velocity_valid_, other->target_velocity_valid_);
  swap(target_acc_valid_, other->target_acc_valid_);
  swap(target_time_gap_valid_, other->target_time_gap_valid_);
  swap(target_acc_, other->target_acc_);
  swap(target_time_gap_, other->target_time_gap_);
  swap(changing_lane_req_, other->changing_lane_req_);
  swap(cnt_stu_frame_loss_can0_, other->cnt_stu_frame_loss_can0_);
  swap(cnt_stu_frame_loss_can1_, other->cnt_stu_frame_loss_can1_);
  swap(cnt_stu_frame_loss_can2_, other->cnt_stu_frame_loss_can2_);
  swap(cnt_stu_frame_loss_can3_, other->cnt_stu_frame_loss_can3_);
  swap(cnt_stu_gtw_to_veh_can0_, other->cnt_stu_gtw_to_veh_can0_);
  swap(cnt_stu_gtw_to_veh_can1_, other->cnt_stu_gtw_to_veh_can1_);
  swap(cnt_stu_gtw_to_veh_can2_, other->cnt_stu_gtw_to_veh_can2_);
  swap(cnt_stu_gtw_to_veh_can3_, other->cnt_stu_gtw_to_veh_can3_);
  swap(cnt_stu_ctl_to_gtw_can0_, other->cnt_stu_ctl_to_gtw_can0_);
  swap(cnt_stu_ctl_to_gtw_can1_, other->cnt_stu_ctl_to_gtw_can1_);
  swap(cnt_stu_ctl_to_gtw_can2_, other->cnt_stu_ctl_to_gtw_can2_);
  swap(cnt_stu_ctl_to_gtw_can3_, other->cnt_stu_ctl_to_gtw_can3_);
  swap(cnt_stu_ctl_to_gtw_, other->cnt_stu_ctl_to_gtw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecialChassisInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::control::SpecialChassisInfo* Arena::CreateMaybeMessage< ::phoenix::msg::control::SpecialChassisInfo >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::control::SpecialChassisInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
