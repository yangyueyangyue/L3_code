// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacles_5fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacles_5fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacles_5fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacles_5fcamera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5fcamera_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleCamera;
class ObstacleCameraDefaultTypeInternal;
extern ObstacleCameraDefaultTypeInternal _ObstacleCamera_default_instance_;
class ObstacleCameraList;
class ObstacleCameraListDefaultTypeInternal;
extern ObstacleCameraListDefaultTypeInternal _ObstacleCameraList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::ObstacleCamera* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleCamera>(Arena*);
template<> ::phoenix::msg::perception::ObstacleCameraList* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleCameraList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum ObstacleCamera_ObjType : int {
  ObstacleCamera_ObjType_OBJ_TYPE_UNKNOWN = 0,
  ObstacleCamera_ObjType_OBJ_TYPE_PASSENGER_VEHICLE = 1,
  ObstacleCamera_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE = 2,
  ObstacleCamera_ObjType_OBJ_TYPE_SPECIAL_VEHICLE = 3,
  ObstacleCamera_ObjType_OBJ_TYPE_OTHER_VEHICLE = 4,
  ObstacleCamera_ObjType_OBJ_TYPE_PEDESTRIAN = 5,
  ObstacleCamera_ObjType_OBJ_TYPE_BICYCLE = 6,
  ObstacleCamera_ObjType_OBJ_TYPE_ANIMAL = 7,
  ObstacleCamera_ObjType_OBJ_TYPE_DISCARD = 8,
  ObstacleCamera_ObjType_OBJ_TYPE_CURB = 9,
  ObstacleCamera_ObjType_OBJ_TYPE_TRAFFIC_CONE = 10
};
bool ObstacleCamera_ObjType_IsValid(int value);
constexpr ObstacleCamera_ObjType ObstacleCamera_ObjType_ObjType_MIN = ObstacleCamera_ObjType_OBJ_TYPE_UNKNOWN;
constexpr ObstacleCamera_ObjType ObstacleCamera_ObjType_ObjType_MAX = ObstacleCamera_ObjType_OBJ_TYPE_TRAFFIC_CONE;
constexpr int ObstacleCamera_ObjType_ObjType_ARRAYSIZE = ObstacleCamera_ObjType_ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_ObjType_descriptor();
template<typename T>
inline const std::string& ObstacleCamera_ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleCamera_ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleCamera_ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleCamera_ObjType_descriptor(), enum_t_value);
}
inline bool ObstacleCamera_ObjType_Parse(
    const std::string& name, ObstacleCamera_ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleCamera_ObjType>(
    ObstacleCamera_ObjType_descriptor(), name, value);
}
enum ObstacleCamera_ObjStatus : int {
  ObstacleCamera_ObjStatus_OBJ_STATUS_UNKNOWN = 0,
  ObstacleCamera_ObjStatus_OBJ_STATUS_STANDING = 1,
  ObstacleCamera_ObjStatus_OBJ_STATUS_STOPPED = 2,
  ObstacleCamera_ObjStatus_OBJ_STATUS_MOVING = 3,
  ObstacleCamera_ObjStatus_OBJ_STATUS_ONCOMING = 4,
  ObstacleCamera_ObjStatus_OBJ_STATUS_PARKED = 5
};
bool ObstacleCamera_ObjStatus_IsValid(int value);
constexpr ObstacleCamera_ObjStatus ObstacleCamera_ObjStatus_ObjStatus_MIN = ObstacleCamera_ObjStatus_OBJ_STATUS_UNKNOWN;
constexpr ObstacleCamera_ObjStatus ObstacleCamera_ObjStatus_ObjStatus_MAX = ObstacleCamera_ObjStatus_OBJ_STATUS_PARKED;
constexpr int ObstacleCamera_ObjStatus_ObjStatus_ARRAYSIZE = ObstacleCamera_ObjStatus_ObjStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_ObjStatus_descriptor();
template<typename T>
inline const std::string& ObstacleCamera_ObjStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleCamera_ObjStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleCamera_ObjStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleCamera_ObjStatus_descriptor(), enum_t_value);
}
inline bool ObstacleCamera_ObjStatus_Parse(
    const std::string& name, ObstacleCamera_ObjStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleCamera_ObjStatus>(
    ObstacleCamera_ObjStatus_descriptor(), name, value);
}
enum ObstacleCamera_CutInType : int {
  ObstacleCamera_CutInType_CUT_IN_TYPE_UNKNOWN = 0,
  ObstacleCamera_CutInType_CUT_IN_TYPE_IN_HOST_LANE = 1,
  ObstacleCamera_CutInType_CUT_IN_TYPE_OUT_HOST_LANE = 2,
  ObstacleCamera_CutInType_CUT_IN_TYPE_CUT_IN = 3,
  ObstacleCamera_CutInType_CUT_IN_TYPE_CUT_OUT = 4
};
bool ObstacleCamera_CutInType_IsValid(int value);
constexpr ObstacleCamera_CutInType ObstacleCamera_CutInType_CutInType_MIN = ObstacleCamera_CutInType_CUT_IN_TYPE_UNKNOWN;
constexpr ObstacleCamera_CutInType ObstacleCamera_CutInType_CutInType_MAX = ObstacleCamera_CutInType_CUT_IN_TYPE_CUT_OUT;
constexpr int ObstacleCamera_CutInType_CutInType_ARRAYSIZE = ObstacleCamera_CutInType_CutInType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_CutInType_descriptor();
template<typename T>
inline const std::string& ObstacleCamera_CutInType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleCamera_CutInType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleCamera_CutInType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleCamera_CutInType_descriptor(), enum_t_value);
}
inline bool ObstacleCamera_CutInType_Parse(
    const std::string& name, ObstacleCamera_CutInType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleCamera_CutInType>(
    ObstacleCamera_CutInType_descriptor(), name, value);
}
enum ObstacleCamera_BlinkerType : int {
  ObstacleCamera_BlinkerType_BLINKER_UNKNOWN = 0,
  ObstacleCamera_BlinkerType_BLINKER_OFF = 1,
  ObstacleCamera_BlinkerType_BLINKER_LEFT = 2,
  ObstacleCamera_BlinkerType_BLINKER_RIGHT = 3,
  ObstacleCamera_BlinkerType_BLINKER_BOTH = 4
};
bool ObstacleCamera_BlinkerType_IsValid(int value);
constexpr ObstacleCamera_BlinkerType ObstacleCamera_BlinkerType_BlinkerType_MIN = ObstacleCamera_BlinkerType_BLINKER_UNKNOWN;
constexpr ObstacleCamera_BlinkerType ObstacleCamera_BlinkerType_BlinkerType_MAX = ObstacleCamera_BlinkerType_BLINKER_BOTH;
constexpr int ObstacleCamera_BlinkerType_BlinkerType_ARRAYSIZE = ObstacleCamera_BlinkerType_BlinkerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_BlinkerType_descriptor();
template<typename T>
inline const std::string& ObstacleCamera_BlinkerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleCamera_BlinkerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleCamera_BlinkerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleCamera_BlinkerType_descriptor(), enum_t_value);
}
inline bool ObstacleCamera_BlinkerType_Parse(
    const std::string& name, ObstacleCamera_BlinkerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleCamera_BlinkerType>(
    ObstacleCamera_BlinkerType_descriptor(), name, value);
}
enum ObstacleCameraList_CamType : int {
  ObstacleCameraList_CamType_CAM_TYPE_UNKNOWN = 0,
  ObstacleCameraList_CamType_CAM_TYPE_MOBILEYE_Q2 = 1,
  ObstacleCameraList_CamType_CAM_TYPE_MAXIEYE_D500 = 2
};
bool ObstacleCameraList_CamType_IsValid(int value);
constexpr ObstacleCameraList_CamType ObstacleCameraList_CamType_CamType_MIN = ObstacleCameraList_CamType_CAM_TYPE_UNKNOWN;
constexpr ObstacleCameraList_CamType ObstacleCameraList_CamType_CamType_MAX = ObstacleCameraList_CamType_CAM_TYPE_MAXIEYE_D500;
constexpr int ObstacleCameraList_CamType_CamType_ARRAYSIZE = ObstacleCameraList_CamType_CamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCameraList_CamType_descriptor();
template<typename T>
inline const std::string& ObstacleCameraList_CamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleCameraList_CamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleCameraList_CamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleCameraList_CamType_descriptor(), enum_t_value);
}
inline bool ObstacleCameraList_CamType_Parse(
    const std::string& name, ObstacleCameraList_CamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleCameraList_CamType>(
    ObstacleCameraList_CamType_descriptor(), name, value);
}
// ===================================================================

class ObstacleCamera :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleCamera) */ {
 public:
  ObstacleCamera();
  virtual ~ObstacleCamera();

  ObstacleCamera(const ObstacleCamera& from);
  ObstacleCamera(ObstacleCamera&& from) noexcept
    : ObstacleCamera() {
    *this = ::std::move(from);
  }

  inline ObstacleCamera& operator=(const ObstacleCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleCamera& operator=(ObstacleCamera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleCamera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleCamera* internal_default_instance() {
    return reinterpret_cast<const ObstacleCamera*>(
               &_ObstacleCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleCamera& a, ObstacleCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleCamera* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleCamera* New() const final {
    return CreateMaybeMessage<ObstacleCamera>(nullptr);
  }

  ObstacleCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleCamera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleCamera& from);
  void MergeFrom(const ObstacleCamera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleCamera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleCamera";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5fcamera_2eproto);
    return ::descriptor_table_obstacles_5fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleCamera_ObjType ObjType;
  static constexpr ObjType OBJ_TYPE_UNKNOWN =
    ObstacleCamera_ObjType_OBJ_TYPE_UNKNOWN;
  static constexpr ObjType OBJ_TYPE_PASSENGER_VEHICLE =
    ObstacleCamera_ObjType_OBJ_TYPE_PASSENGER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_COMMERCIAL_VEHICLE =
    ObstacleCamera_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_SPECIAL_VEHICLE =
    ObstacleCamera_ObjType_OBJ_TYPE_SPECIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_OTHER_VEHICLE =
    ObstacleCamera_ObjType_OBJ_TYPE_OTHER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_PEDESTRIAN =
    ObstacleCamera_ObjType_OBJ_TYPE_PEDESTRIAN;
  static constexpr ObjType OBJ_TYPE_BICYCLE =
    ObstacleCamera_ObjType_OBJ_TYPE_BICYCLE;
  static constexpr ObjType OBJ_TYPE_ANIMAL =
    ObstacleCamera_ObjType_OBJ_TYPE_ANIMAL;
  static constexpr ObjType OBJ_TYPE_DISCARD =
    ObstacleCamera_ObjType_OBJ_TYPE_DISCARD;
  static constexpr ObjType OBJ_TYPE_CURB =
    ObstacleCamera_ObjType_OBJ_TYPE_CURB;
  static constexpr ObjType OBJ_TYPE_TRAFFIC_CONE =
    ObstacleCamera_ObjType_OBJ_TYPE_TRAFFIC_CONE;
  static inline bool ObjType_IsValid(int value) {
    return ObstacleCamera_ObjType_IsValid(value);
  }
  static constexpr ObjType ObjType_MIN =
    ObstacleCamera_ObjType_ObjType_MIN;
  static constexpr ObjType ObjType_MAX =
    ObstacleCamera_ObjType_ObjType_MAX;
  static constexpr int ObjType_ARRAYSIZE =
    ObstacleCamera_ObjType_ObjType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjType_descriptor() {
    return ObstacleCamera_ObjType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjType_Name.");
    return ObstacleCamera_ObjType_Name(enum_t_value);
  }
  static inline bool ObjType_Parse(const std::string& name,
      ObjType* value) {
    return ObstacleCamera_ObjType_Parse(name, value);
  }

  typedef ObstacleCamera_ObjStatus ObjStatus;
  static constexpr ObjStatus OBJ_STATUS_UNKNOWN =
    ObstacleCamera_ObjStatus_OBJ_STATUS_UNKNOWN;
  static constexpr ObjStatus OBJ_STATUS_STANDING =
    ObstacleCamera_ObjStatus_OBJ_STATUS_STANDING;
  static constexpr ObjStatus OBJ_STATUS_STOPPED =
    ObstacleCamera_ObjStatus_OBJ_STATUS_STOPPED;
  static constexpr ObjStatus OBJ_STATUS_MOVING =
    ObstacleCamera_ObjStatus_OBJ_STATUS_MOVING;
  static constexpr ObjStatus OBJ_STATUS_ONCOMING =
    ObstacleCamera_ObjStatus_OBJ_STATUS_ONCOMING;
  static constexpr ObjStatus OBJ_STATUS_PARKED =
    ObstacleCamera_ObjStatus_OBJ_STATUS_PARKED;
  static inline bool ObjStatus_IsValid(int value) {
    return ObstacleCamera_ObjStatus_IsValid(value);
  }
  static constexpr ObjStatus ObjStatus_MIN =
    ObstacleCamera_ObjStatus_ObjStatus_MIN;
  static constexpr ObjStatus ObjStatus_MAX =
    ObstacleCamera_ObjStatus_ObjStatus_MAX;
  static constexpr int ObjStatus_ARRAYSIZE =
    ObstacleCamera_ObjStatus_ObjStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjStatus_descriptor() {
    return ObstacleCamera_ObjStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjStatus_Name.");
    return ObstacleCamera_ObjStatus_Name(enum_t_value);
  }
  static inline bool ObjStatus_Parse(const std::string& name,
      ObjStatus* value) {
    return ObstacleCamera_ObjStatus_Parse(name, value);
  }

  typedef ObstacleCamera_CutInType CutInType;
  static constexpr CutInType CUT_IN_TYPE_UNKNOWN =
    ObstacleCamera_CutInType_CUT_IN_TYPE_UNKNOWN;
  static constexpr CutInType CUT_IN_TYPE_IN_HOST_LANE =
    ObstacleCamera_CutInType_CUT_IN_TYPE_IN_HOST_LANE;
  static constexpr CutInType CUT_IN_TYPE_OUT_HOST_LANE =
    ObstacleCamera_CutInType_CUT_IN_TYPE_OUT_HOST_LANE;
  static constexpr CutInType CUT_IN_TYPE_CUT_IN =
    ObstacleCamera_CutInType_CUT_IN_TYPE_CUT_IN;
  static constexpr CutInType CUT_IN_TYPE_CUT_OUT =
    ObstacleCamera_CutInType_CUT_IN_TYPE_CUT_OUT;
  static inline bool CutInType_IsValid(int value) {
    return ObstacleCamera_CutInType_IsValid(value);
  }
  static constexpr CutInType CutInType_MIN =
    ObstacleCamera_CutInType_CutInType_MIN;
  static constexpr CutInType CutInType_MAX =
    ObstacleCamera_CutInType_CutInType_MAX;
  static constexpr int CutInType_ARRAYSIZE =
    ObstacleCamera_CutInType_CutInType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CutInType_descriptor() {
    return ObstacleCamera_CutInType_descriptor();
  }
  template<typename T>
  static inline const std::string& CutInType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CutInType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CutInType_Name.");
    return ObstacleCamera_CutInType_Name(enum_t_value);
  }
  static inline bool CutInType_Parse(const std::string& name,
      CutInType* value) {
    return ObstacleCamera_CutInType_Parse(name, value);
  }

  typedef ObstacleCamera_BlinkerType BlinkerType;
  static constexpr BlinkerType BLINKER_UNKNOWN =
    ObstacleCamera_BlinkerType_BLINKER_UNKNOWN;
  static constexpr BlinkerType BLINKER_OFF =
    ObstacleCamera_BlinkerType_BLINKER_OFF;
  static constexpr BlinkerType BLINKER_LEFT =
    ObstacleCamera_BlinkerType_BLINKER_LEFT;
  static constexpr BlinkerType BLINKER_RIGHT =
    ObstacleCamera_BlinkerType_BLINKER_RIGHT;
  static constexpr BlinkerType BLINKER_BOTH =
    ObstacleCamera_BlinkerType_BLINKER_BOTH;
  static inline bool BlinkerType_IsValid(int value) {
    return ObstacleCamera_BlinkerType_IsValid(value);
  }
  static constexpr BlinkerType BlinkerType_MIN =
    ObstacleCamera_BlinkerType_BlinkerType_MIN;
  static constexpr BlinkerType BlinkerType_MAX =
    ObstacleCamera_BlinkerType_BlinkerType_MAX;
  static constexpr int BlinkerType_ARRAYSIZE =
    ObstacleCamera_BlinkerType_BlinkerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BlinkerType_descriptor() {
    return ObstacleCamera_BlinkerType_descriptor();
  }
  template<typename T>
  static inline const std::string& BlinkerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BlinkerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BlinkerType_Name.");
    return ObstacleCamera_BlinkerType_Name(enum_t_value);
  }
  static inline bool BlinkerType_Parse(const std::string& name,
      BlinkerType* value) {
    return ObstacleCamera_BlinkerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kCutInFieldNumber = 4,
    kBlinkerFieldNumber = 5,
    kBrakeLightsFieldNumber = 6,
    kAgeFieldNumber = 7,
    kLaneFieldNumber = 8,
    kLengthFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kXFieldNumber = 12,
    kYFieldNumber = 13,
    kHeadingFieldNumber = 14,
    kVXFieldNumber = 15,
    kVYFieldNumber = 16,
    kAccelXFieldNumber = 17,
    kAccelYFieldNumber = 18,
    kYawRateFieldNumber = 19,
    kScaleChangeFieldNumber = 20,
  };
  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::phoenix::msg::perception::ObstacleCamera_ObjType type() const;
  void set_type(::phoenix::msg::perception::ObstacleCamera_ObjType value);

  // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
  bool has_status() const;
  void clear_status();
  ::phoenix::msg::perception::ObstacleCamera_ObjStatus status() const;
  void set_status(::phoenix::msg::perception::ObstacleCamera_ObjStatus value);

  // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
  bool has_cut_in() const;
  void clear_cut_in();
  ::phoenix::msg::perception::ObstacleCamera_CutInType cut_in() const;
  void set_cut_in(::phoenix::msg::perception::ObstacleCamera_CutInType value);

  // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
  bool has_blinker() const;
  void clear_blinker();
  ::phoenix::msg::perception::ObstacleCamera_BlinkerType blinker() const;
  void set_blinker(::phoenix::msg::perception::ObstacleCamera_BlinkerType value);

  // optional bool brake_lights = 6 [default = false];
  bool has_brake_lights() const;
  void clear_brake_lights();
  bool brake_lights() const;
  void set_brake_lights(bool value);

  // optional int32 age = 7 [default = 0];
  bool has_age() const;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lane = 8 [default = 0];
  bool has_lane() const;
  void clear_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 lane() const;
  void set_lane(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float length = 9 [default = 0];
  bool has_length() const;
  void clear_length();
  float length() const;
  void set_length(float value);

  // optional float width = 10 [default = 0];
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // optional float height = 11 [default = 0];
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // optional float x = 12 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 13 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float heading = 14 [default = 0];
  bool has_heading() const;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // optional float v_x = 15 [default = 0];
  bool has_v_x() const;
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 16 [default = 0];
  bool has_v_y() const;
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);

  // optional float accel_x = 17 [default = 0];
  bool has_accel_x() const;
  void clear_accel_x();
  float accel_x() const;
  void set_accel_x(float value);

  // optional float accel_y = 18 [default = 0];
  bool has_accel_y() const;
  void clear_accel_y();
  float accel_y() const;
  void set_accel_y(float value);

  // optional float yaw_rate = 19 [default = 0];
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // optional float scale_change = 20 [default = 0];
  bool has_scale_change() const;
  void clear_scale_change();
  float scale_change() const;
  void set_scale_change(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleCamera)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  int status_;
  int cut_in_;
  int blinker_;
  bool brake_lights_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_;
  float length_;
  float width_;
  float height_;
  float x_;
  float y_;
  float heading_;
  float v_x_;
  float v_y_;
  float accel_x_;
  float accel_y_;
  float yaw_rate_;
  float scale_change_;
  friend struct ::TableStruct_obstacles_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class ObstacleCameraList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleCameraList) */ {
 public:
  ObstacleCameraList();
  virtual ~ObstacleCameraList();

  ObstacleCameraList(const ObstacleCameraList& from);
  ObstacleCameraList(ObstacleCameraList&& from) noexcept
    : ObstacleCameraList() {
    *this = ::std::move(from);
  }

  inline ObstacleCameraList& operator=(const ObstacleCameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleCameraList& operator=(ObstacleCameraList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleCameraList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleCameraList* internal_default_instance() {
    return reinterpret_cast<const ObstacleCameraList*>(
               &_ObstacleCameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObstacleCameraList& a, ObstacleCameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleCameraList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleCameraList* New() const final {
    return CreateMaybeMessage<ObstacleCameraList>(nullptr);
  }

  ObstacleCameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleCameraList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleCameraList& from);
  void MergeFrom(const ObstacleCameraList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleCameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleCameraList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5fcamera_2eproto);
    return ::descriptor_table_obstacles_5fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleCameraList_CamType CamType;
  static constexpr CamType CAM_TYPE_UNKNOWN =
    ObstacleCameraList_CamType_CAM_TYPE_UNKNOWN;
  static constexpr CamType CAM_TYPE_MOBILEYE_Q2 =
    ObstacleCameraList_CamType_CAM_TYPE_MOBILEYE_Q2;
  static constexpr CamType CAM_TYPE_MAXIEYE_D500 =
    ObstacleCameraList_CamType_CAM_TYPE_MAXIEYE_D500;
  static inline bool CamType_IsValid(int value) {
    return ObstacleCameraList_CamType_IsValid(value);
  }
  static constexpr CamType CamType_MIN =
    ObstacleCameraList_CamType_CamType_MIN;
  static constexpr CamType CamType_MAX =
    ObstacleCameraList_CamType_CamType_MAX;
  static constexpr int CamType_ARRAYSIZE =
    ObstacleCameraList_CamType_CamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CamType_descriptor() {
    return ObstacleCameraList_CamType_descriptor();
  }
  template<typename T>
  static inline const std::string& CamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CamType_Name.");
    return ObstacleCameraList_CamType_Name(enum_t_value);
  }
  static inline bool CamType_Parse(const std::string& name,
      CamType* value) {
    return ObstacleCameraList_CamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kCamTypeFieldNumber = 2,
    kObstaclesNumFieldNumber = 3,
  };
  // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
  int obstacles_size() const;
  void clear_obstacles();
  ::phoenix::msg::perception::ObstacleCamera* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleCamera >*
      mutable_obstacles();
  const ::phoenix::msg::perception::ObstacleCamera& obstacles(int index) const;
  ::phoenix::msg::perception::ObstacleCamera* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleCamera >&
      obstacles() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
  bool has_cam_type() const;
  void clear_cam_type();
  ::phoenix::msg::perception::ObstacleCameraList_CamType cam_type() const;
  void set_cam_type(::phoenix::msg::perception::ObstacleCameraList_CamType value);

  // optional int32 obstacles_num = 3 [default = 0];
  bool has_obstacles_num() const;
  void clear_obstacles_num();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacles_num() const;
  void set_obstacles_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleCameraList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleCamera > obstacles_;
  ::phoenix::msg::common::Header* header_;
  int cam_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacles_num_;
  friend struct ::TableStruct_obstacles_5fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleCamera

// optional int32 id = 1 [default = 0];
inline bool ObstacleCamera::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleCamera::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleCamera::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.id)
  return id_;
}
inline void ObstacleCamera::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.id)
}

// optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
inline bool ObstacleCamera::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleCamera::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::ObstacleCamera_ObjType ObstacleCamera::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.type)
  return static_cast< ::phoenix::msg::perception::ObstacleCamera_ObjType >(type_);
}
inline void ObstacleCamera::set_type(::phoenix::msg::perception::ObstacleCamera_ObjType value) {
  assert(::phoenix::msg::perception::ObstacleCamera_ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.type)
}

// optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
inline bool ObstacleCamera::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleCamera::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::perception::ObstacleCamera_ObjStatus ObstacleCamera::status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.status)
  return static_cast< ::phoenix::msg::perception::ObstacleCamera_ObjStatus >(status_);
}
inline void ObstacleCamera::set_status(::phoenix::msg::perception::ObstacleCamera_ObjStatus value) {
  assert(::phoenix::msg::perception::ObstacleCamera_ObjStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.status)
}

// optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
inline bool ObstacleCamera::has_cut_in() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleCamera::clear_cut_in() {
  cut_in_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::perception::ObstacleCamera_CutInType ObstacleCamera::cut_in() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.cut_in)
  return static_cast< ::phoenix::msg::perception::ObstacleCamera_CutInType >(cut_in_);
}
inline void ObstacleCamera::set_cut_in(::phoenix::msg::perception::ObstacleCamera_CutInType value) {
  assert(::phoenix::msg::perception::ObstacleCamera_CutInType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  cut_in_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.cut_in)
}

// optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
inline bool ObstacleCamera::has_blinker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleCamera::clear_blinker() {
  blinker_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::phoenix::msg::perception::ObstacleCamera_BlinkerType ObstacleCamera::blinker() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.blinker)
  return static_cast< ::phoenix::msg::perception::ObstacleCamera_BlinkerType >(blinker_);
}
inline void ObstacleCamera::set_blinker(::phoenix::msg::perception::ObstacleCamera_BlinkerType value) {
  assert(::phoenix::msg::perception::ObstacleCamera_BlinkerType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  blinker_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.blinker)
}

// optional bool brake_lights = 6 [default = false];
inline bool ObstacleCamera::has_brake_lights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObstacleCamera::clear_brake_lights() {
  brake_lights_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObstacleCamera::brake_lights() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.brake_lights)
  return brake_lights_;
}
inline void ObstacleCamera::set_brake_lights(bool value) {
  _has_bits_[0] |= 0x00000020u;
  brake_lights_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.brake_lights)
}

// optional int32 age = 7 [default = 0];
inline bool ObstacleCamera::has_age() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObstacleCamera::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleCamera::age() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.age)
  return age_;
}
inline void ObstacleCamera::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  age_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.age)
}

// optional int32 lane = 8 [default = 0];
inline bool ObstacleCamera::has_lane() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObstacleCamera::clear_lane() {
  lane_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleCamera::lane() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.lane)
  return lane_;
}
inline void ObstacleCamera::set_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.lane)
}

// optional float length = 9 [default = 0];
inline bool ObstacleCamera::has_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObstacleCamera::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ObstacleCamera::length() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.length)
  return length_;
}
inline void ObstacleCamera::set_length(float value) {
  _has_bits_[0] |= 0x00000100u;
  length_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.length)
}

// optional float width = 10 [default = 0];
inline bool ObstacleCamera::has_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObstacleCamera::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ObstacleCamera::width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.width)
  return width_;
}
inline void ObstacleCamera::set_width(float value) {
  _has_bits_[0] |= 0x00000200u;
  width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.width)
}

// optional float height = 11 [default = 0];
inline bool ObstacleCamera::has_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObstacleCamera::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ObstacleCamera::height() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.height)
  return height_;
}
inline void ObstacleCamera::set_height(float value) {
  _has_bits_[0] |= 0x00000400u;
  height_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.height)
}

// optional float x = 12 [default = 0];
inline bool ObstacleCamera::has_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObstacleCamera::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ObstacleCamera::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.x)
  return x_;
}
inline void ObstacleCamera::set_x(float value) {
  _has_bits_[0] |= 0x00000800u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.x)
}

// optional float y = 13 [default = 0];
inline bool ObstacleCamera::has_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObstacleCamera::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ObstacleCamera::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.y)
  return y_;
}
inline void ObstacleCamera::set_y(float value) {
  _has_bits_[0] |= 0x00001000u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.y)
}

// optional float heading = 14 [default = 0];
inline bool ObstacleCamera::has_heading() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObstacleCamera::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ObstacleCamera::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.heading)
  return heading_;
}
inline void ObstacleCamera::set_heading(float value) {
  _has_bits_[0] |= 0x00002000u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.heading)
}

// optional float v_x = 15 [default = 0];
inline bool ObstacleCamera::has_v_x() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ObstacleCamera::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ObstacleCamera::v_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.v_x)
  return v_x_;
}
inline void ObstacleCamera::set_v_x(float value) {
  _has_bits_[0] |= 0x00004000u;
  v_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.v_x)
}

// optional float v_y = 16 [default = 0];
inline bool ObstacleCamera::has_v_y() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ObstacleCamera::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ObstacleCamera::v_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.v_y)
  return v_y_;
}
inline void ObstacleCamera::set_v_y(float value) {
  _has_bits_[0] |= 0x00008000u;
  v_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.v_y)
}

// optional float accel_x = 17 [default = 0];
inline bool ObstacleCamera::has_accel_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ObstacleCamera::clear_accel_x() {
  accel_x_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ObstacleCamera::accel_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.accel_x)
  return accel_x_;
}
inline void ObstacleCamera::set_accel_x(float value) {
  _has_bits_[0] |= 0x00010000u;
  accel_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.accel_x)
}

// optional float accel_y = 18 [default = 0];
inline bool ObstacleCamera::has_accel_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ObstacleCamera::clear_accel_y() {
  accel_y_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ObstacleCamera::accel_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.accel_y)
  return accel_y_;
}
inline void ObstacleCamera::set_accel_y(float value) {
  _has_bits_[0] |= 0x00020000u;
  accel_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.accel_y)
}

// optional float yaw_rate = 19 [default = 0];
inline bool ObstacleCamera::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ObstacleCamera::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ObstacleCamera::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.yaw_rate)
  return yaw_rate_;
}
inline void ObstacleCamera::set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00040000u;
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.yaw_rate)
}

// optional float scale_change = 20 [default = 0];
inline bool ObstacleCamera::has_scale_change() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ObstacleCamera::clear_scale_change() {
  scale_change_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float ObstacleCamera::scale_change() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCamera.scale_change)
  return scale_change_;
}
inline void ObstacleCamera::set_scale_change(float value) {
  _has_bits_[0] |= 0x00080000u;
  scale_change_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCamera.scale_change)
}

// -------------------------------------------------------------------

// ObstacleCameraList

// optional .phoenix.msg.common.Header header = 1;
inline bool ObstacleCameraList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& ObstacleCameraList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCameraList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ObstacleCameraList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.ObstacleCameraList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* ObstacleCameraList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleCameraList.header)
  return header_;
}
inline void ObstacleCameraList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.ObstacleCameraList.header)
}

// optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
inline bool ObstacleCameraList::has_cam_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleCameraList::clear_cam_type() {
  cam_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::ObstacleCameraList_CamType ObstacleCameraList::cam_type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCameraList.cam_type)
  return static_cast< ::phoenix::msg::perception::ObstacleCameraList_CamType >(cam_type_);
}
inline void ObstacleCameraList::set_cam_type(::phoenix::msg::perception::ObstacleCameraList_CamType value) {
  assert(::phoenix::msg::perception::ObstacleCameraList_CamType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  cam_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCameraList.cam_type)
}

// optional int32 obstacles_num = 3 [default = 0];
inline bool ObstacleCameraList::has_obstacles_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleCameraList::clear_obstacles_num() {
  obstacles_num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleCameraList::obstacles_num() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCameraList.obstacles_num)
  return obstacles_num_;
}
inline void ObstacleCameraList::set_obstacles_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  obstacles_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleCameraList.obstacles_num)
}

// repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
inline int ObstacleCameraList::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstacleCameraList::clear_obstacles() {
  obstacles_.Clear();
}
inline ::phoenix::msg::perception::ObstacleCamera* ObstacleCameraList::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleCameraList.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleCamera >*
ObstacleCameraList::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.ObstacleCameraList.obstacles)
  return &obstacles_;
}
inline const ::phoenix::msg::perception::ObstacleCamera& ObstacleCameraList::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleCameraList.obstacles)
  return obstacles_.Get(index);
}
inline ::phoenix::msg::perception::ObstacleCamera* ObstacleCameraList::add_obstacles() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.ObstacleCameraList.obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleCamera >&
ObstacleCameraList::obstacles() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.ObstacleCameraList.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleCamera_ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleCamera_ObjType>() {
  return ::phoenix::msg::perception::ObstacleCamera_ObjType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleCamera_ObjStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleCamera_ObjStatus>() {
  return ::phoenix::msg::perception::ObstacleCamera_ObjStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleCamera_CutInType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleCamera_CutInType>() {
  return ::phoenix::msg::perception::ObstacleCamera_CutInType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleCamera_BlinkerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleCamera_BlinkerType>() {
  return ::phoenix::msg::perception::ObstacleCamera_BlinkerType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleCameraList_CamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleCameraList_CamType>() {
  return ::phoenix::msg::perception::ObstacleCameraList_CamType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacles_5fcamera_2eproto
