// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_story.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_5fstory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fstory_2eproto;
namespace phoenix {
namespace msg {
namespace routing {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class CloseToClearArea;
class CloseToClearAreaDefaultTypeInternal;
extern CloseToClearAreaDefaultTypeInternal _CloseToClearArea_default_instance_;
class CloseToCrosswalk;
class CloseToCrosswalkDefaultTypeInternal;
extern CloseToCrosswalkDefaultTypeInternal _CloseToCrosswalk_default_instance_;
class CloseToCurveRoad;
class CloseToCurveRoadDefaultTypeInternal;
extern CloseToCurveRoadDefaultTypeInternal _CloseToCurveRoad_default_instance_;
class CloseToDestination;
class CloseToDestinationDefaultTypeInternal;
extern CloseToDestinationDefaultTypeInternal _CloseToDestination_default_instance_;
class CloseToJunction;
class CloseToJunctionDefaultTypeInternal;
extern CloseToJunctionDefaultTypeInternal _CloseToJunction_default_instance_;
class CloseToParkingSpaces;
class CloseToParkingSpacesDefaultTypeInternal;
extern CloseToParkingSpacesDefaultTypeInternal _CloseToParkingSpaces_default_instance_;
class CloseToSignal;
class CloseToSignalDefaultTypeInternal;
extern CloseToSignalDefaultTypeInternal _CloseToSignal_default_instance_;
class CloseToSpeedBumps;
class CloseToSpeedBumpsDefaultTypeInternal;
extern CloseToSpeedBumpsDefaultTypeInternal _CloseToSpeedBumps_default_instance_;
class CloseToStopSign;
class CloseToStopSignDefaultTypeInternal;
extern CloseToStopSignDefaultTypeInternal _CloseToStopSign_default_instance_;
class CloseToYieldSign;
class CloseToYieldSignDefaultTypeInternal;
extern CloseToYieldSignDefaultTypeInternal _CloseToYieldSign_default_instance_;
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class ControlLine;
class ControlLineDefaultTypeInternal;
extern ControlLineDefaultTypeInternal _ControlLine_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Scene_Stories;
class Scene_StoriesDefaultTypeInternal;
extern Scene_StoriesDefaultTypeInternal _Scene_Stories_default_instance_;
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::routing::Action* Arena::CreateMaybeMessage<::phoenix::msg::routing::Action>(Arena*);
template<> ::phoenix::msg::routing::CloseToClearArea* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToClearArea>(Arena*);
template<> ::phoenix::msg::routing::CloseToCrosswalk* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToCrosswalk>(Arena*);
template<> ::phoenix::msg::routing::CloseToCurveRoad* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToCurveRoad>(Arena*);
template<> ::phoenix::msg::routing::CloseToDestination* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToDestination>(Arena*);
template<> ::phoenix::msg::routing::CloseToJunction* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToJunction>(Arena*);
template<> ::phoenix::msg::routing::CloseToParkingSpaces* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToParkingSpaces>(Arena*);
template<> ::phoenix::msg::routing::CloseToSignal* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToSignal>(Arena*);
template<> ::phoenix::msg::routing::CloseToSpeedBumps* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToSpeedBumps>(Arena*);
template<> ::phoenix::msg::routing::CloseToStopSign* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToStopSign>(Arena*);
template<> ::phoenix::msg::routing::CloseToYieldSign* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToYieldSign>(Arena*);
template<> ::phoenix::msg::routing::Condition* Arena::CreateMaybeMessage<::phoenix::msg::routing::Condition>(Arena*);
template<> ::phoenix::msg::routing::ControlLine* Arena::CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(Arena*);
template<> ::phoenix::msg::routing::Point* Arena::CreateMaybeMessage<::phoenix::msg::routing::Point>(Arena*);
template<> ::phoenix::msg::routing::Scene_Stories* Arena::CreateMaybeMessage<::phoenix::msg::routing::Scene_Stories>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace routing {

// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class ControlLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.ControlLine) */ {
 public:
  ControlLine();
  virtual ~ControlLine();

  ControlLine(const ControlLine& from);
  ControlLine(ControlLine&& from) noexcept
    : ControlLine() {
    *this = ::std::move(from);
  }

  inline ControlLine& operator=(const ControlLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlLine& operator=(ControlLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlLine* internal_default_instance() {
    return reinterpret_cast<const ControlLine*>(
               &_ControlLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlLine& a, ControlLine& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlLine* New() const final {
    return CreateMaybeMessage<ControlLine>(nullptr);
  }

  ControlLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlLine& from);
  void MergeFrom(const ControlLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.ControlLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPointFieldNumber = 1,
    kEndPointFieldNumber = 2,
  };
  // optional .phoenix.msg.routing.Point start_point = 1;
  bool has_start_point() const;
  void clear_start_point();
  const ::phoenix::msg::routing::Point& start_point() const;
  ::phoenix::msg::routing::Point* release_start_point();
  ::phoenix::msg::routing::Point* mutable_start_point();
  void set_allocated_start_point(::phoenix::msg::routing::Point* start_point);

  // optional .phoenix.msg.routing.Point end_point = 2;
  bool has_end_point() const;
  void clear_end_point();
  const ::phoenix::msg::routing::Point& end_point() const;
  ::phoenix::msg::routing::Point* release_end_point();
  ::phoenix::msg::routing::Point* mutable_end_point();
  void set_allocated_end_point(::phoenix::msg::routing::Point* end_point);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.ControlLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::Point* start_point_;
  ::phoenix::msg::routing::Point* end_point_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class Condition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Condition) */ {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(nullptr);
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.Condition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartSFieldNumber = 1,
    kEndSFieldNumber = 2,
    kSpeedHighFieldNumber = 3,
    kSpeedLowFieldNumber = 4,
  };
  // optional double start_s = 1 [default = 0];
  bool has_start_s() const;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 2 [default = 0];
  bool has_end_s() const;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // optional double speed_high = 3 [default = 0];
  bool has_speed_high() const;
  void clear_speed_high();
  double speed_high() const;
  void set_speed_high(double value);

  // optional double speed_low = 4 [default = 0];
  bool has_speed_low() const;
  void clear_speed_low();
  double speed_low() const;
  void set_speed_low(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Condition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double start_s_;
  double end_s_;
  double speed_high_;
  double speed_low_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kGearFieldNumber = 1,
    kTurnLampFieldNumber = 5,
    kRunTimeFieldNumber = 4,
    kBrakeLampFieldNumber = 6,
  };
  // optional double speed = 2 [default = 0];
  bool has_speed() const;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 3 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
  bool has_turn_lamp() const;
  void clear_turn_lamp();
  ::phoenix::msg::control::Chassis_SignalTurnLamp turn_lamp() const;
  void set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value);

  // optional double run_time = 4 [default = 0];
  bool has_run_time() const;
  void clear_run_time();
  double run_time() const;
  void set_run_time(double value);

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
  bool has_brake_lamp() const;
  void clear_brake_lamp();
  ::phoenix::msg::control::Chassis_SignalLamp brake_lamp() const;
  void set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Action)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_;
  double acceleration_;
  int gear_;
  int turn_lamp_;
  double run_time_;
  int brake_lamp_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToSpeedBumps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToSpeedBumps) */ {
 public:
  CloseToSpeedBumps();
  virtual ~CloseToSpeedBumps();

  CloseToSpeedBumps(const CloseToSpeedBumps& from);
  CloseToSpeedBumps(CloseToSpeedBumps&& from) noexcept
    : CloseToSpeedBumps() {
    *this = ::std::move(from);
  }

  inline CloseToSpeedBumps& operator=(const CloseToSpeedBumps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToSpeedBumps& operator=(CloseToSpeedBumps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToSpeedBumps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToSpeedBumps* internal_default_instance() {
    return reinterpret_cast<const CloseToSpeedBumps*>(
               &_CloseToSpeedBumps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CloseToSpeedBumps& a, CloseToSpeedBumps& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToSpeedBumps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToSpeedBumps* New() const final {
    return CreateMaybeMessage<CloseToSpeedBumps>(nullptr);
  }

  CloseToSpeedBumps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToSpeedBumps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToSpeedBumps& from);
  void MergeFrom(const CloseToSpeedBumps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToSpeedBumps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToSpeedBumps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToSpeedBumps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToParkingSpaces :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToParkingSpaces) */ {
 public:
  CloseToParkingSpaces();
  virtual ~CloseToParkingSpaces();

  CloseToParkingSpaces(const CloseToParkingSpaces& from);
  CloseToParkingSpaces(CloseToParkingSpaces&& from) noexcept
    : CloseToParkingSpaces() {
    *this = ::std::move(from);
  }

  inline CloseToParkingSpaces& operator=(const CloseToParkingSpaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToParkingSpaces& operator=(CloseToParkingSpaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToParkingSpaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToParkingSpaces* internal_default_instance() {
    return reinterpret_cast<const CloseToParkingSpaces*>(
               &_CloseToParkingSpaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CloseToParkingSpaces& a, CloseToParkingSpaces& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToParkingSpaces* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToParkingSpaces* New() const final {
    return CreateMaybeMessage<CloseToParkingSpaces>(nullptr);
  }

  CloseToParkingSpaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToParkingSpaces>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToParkingSpaces& from);
  void MergeFrom(const CloseToParkingSpaces& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToParkingSpaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToParkingSpaces";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToParkingSpaces)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToCrosswalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToCrosswalk) */ {
 public:
  CloseToCrosswalk();
  virtual ~CloseToCrosswalk();

  CloseToCrosswalk(const CloseToCrosswalk& from);
  CloseToCrosswalk(CloseToCrosswalk&& from) noexcept
    : CloseToCrosswalk() {
    *this = ::std::move(from);
  }

  inline CloseToCrosswalk& operator=(const CloseToCrosswalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToCrosswalk& operator=(CloseToCrosswalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToCrosswalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToCrosswalk* internal_default_instance() {
    return reinterpret_cast<const CloseToCrosswalk*>(
               &_CloseToCrosswalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CloseToCrosswalk& a, CloseToCrosswalk& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToCrosswalk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToCrosswalk* New() const final {
    return CreateMaybeMessage<CloseToCrosswalk>(nullptr);
  }

  CloseToCrosswalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToCrosswalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToCrosswalk& from);
  void MergeFrom(const CloseToCrosswalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToCrosswalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToCrosswalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToCrosswalk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToClearArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToClearArea) */ {
 public:
  CloseToClearArea();
  virtual ~CloseToClearArea();

  CloseToClearArea(const CloseToClearArea& from);
  CloseToClearArea(CloseToClearArea&& from) noexcept
    : CloseToClearArea() {
    *this = ::std::move(from);
  }

  inline CloseToClearArea& operator=(const CloseToClearArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToClearArea& operator=(CloseToClearArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToClearArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToClearArea* internal_default_instance() {
    return reinterpret_cast<const CloseToClearArea*>(
               &_CloseToClearArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloseToClearArea& a, CloseToClearArea& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToClearArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToClearArea* New() const final {
    return CreateMaybeMessage<CloseToClearArea>(nullptr);
  }

  CloseToClearArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToClearArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToClearArea& from);
  void MergeFrom(const CloseToClearArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToClearArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToClearArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToClearArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToJunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToJunction) */ {
 public:
  CloseToJunction();
  virtual ~CloseToJunction();

  CloseToJunction(const CloseToJunction& from);
  CloseToJunction(CloseToJunction&& from) noexcept
    : CloseToJunction() {
    *this = ::std::move(from);
  }

  inline CloseToJunction& operator=(const CloseToJunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToJunction& operator=(CloseToJunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToJunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToJunction* internal_default_instance() {
    return reinterpret_cast<const CloseToJunction*>(
               &_CloseToJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CloseToJunction& a, CloseToJunction& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToJunction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToJunction* New() const final {
    return CreateMaybeMessage<CloseToJunction>(nullptr);
  }

  CloseToJunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToJunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToJunction& from);
  void MergeFrom(const CloseToJunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToJunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToJunction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToJunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToSignal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToSignal) */ {
 public:
  CloseToSignal();
  virtual ~CloseToSignal();

  CloseToSignal(const CloseToSignal& from);
  CloseToSignal(CloseToSignal&& from) noexcept
    : CloseToSignal() {
    *this = ::std::move(from);
  }

  inline CloseToSignal& operator=(const CloseToSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToSignal& operator=(CloseToSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToSignal* internal_default_instance() {
    return reinterpret_cast<const CloseToSignal*>(
               &_CloseToSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseToSignal& a, CloseToSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToSignal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToSignal* New() const final {
    return CreateMaybeMessage<CloseToSignal>(nullptr);
  }

  CloseToSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToSignal& from);
  void MergeFrom(const CloseToSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToSignal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToSignal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToStopSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToStopSign) */ {
 public:
  CloseToStopSign();
  virtual ~CloseToStopSign();

  CloseToStopSign(const CloseToStopSign& from);
  CloseToStopSign(CloseToStopSign&& from) noexcept
    : CloseToStopSign() {
    *this = ::std::move(from);
  }

  inline CloseToStopSign& operator=(const CloseToStopSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToStopSign& operator=(CloseToStopSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToStopSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToStopSign* internal_default_instance() {
    return reinterpret_cast<const CloseToStopSign*>(
               &_CloseToStopSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CloseToStopSign& a, CloseToStopSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToStopSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToStopSign* New() const final {
    return CreateMaybeMessage<CloseToStopSign>(nullptr);
  }

  CloseToStopSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToStopSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToStopSign& from);
  void MergeFrom(const CloseToStopSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToStopSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToStopSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToStopSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToYieldSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToYieldSign) */ {
 public:
  CloseToYieldSign();
  virtual ~CloseToYieldSign();

  CloseToYieldSign(const CloseToYieldSign& from);
  CloseToYieldSign(CloseToYieldSign&& from) noexcept
    : CloseToYieldSign() {
    *this = ::std::move(from);
  }

  inline CloseToYieldSign& operator=(const CloseToYieldSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToYieldSign& operator=(CloseToYieldSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToYieldSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToYieldSign* internal_default_instance() {
    return reinterpret_cast<const CloseToYieldSign*>(
               &_CloseToYieldSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseToYieldSign& a, CloseToYieldSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToYieldSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToYieldSign* New() const final {
    return CreateMaybeMessage<CloseToYieldSign>(nullptr);
  }

  CloseToYieldSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToYieldSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToYieldSign& from);
  void MergeFrom(const CloseToYieldSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToYieldSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToYieldSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToYieldSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToCurveRoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToCurveRoad) */ {
 public:
  CloseToCurveRoad();
  virtual ~CloseToCurveRoad();

  CloseToCurveRoad(const CloseToCurveRoad& from);
  CloseToCurveRoad(CloseToCurveRoad&& from) noexcept
    : CloseToCurveRoad() {
    *this = ::std::move(from);
  }

  inline CloseToCurveRoad& operator=(const CloseToCurveRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToCurveRoad& operator=(CloseToCurveRoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToCurveRoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToCurveRoad* internal_default_instance() {
    return reinterpret_cast<const CloseToCurveRoad*>(
               &_CloseToCurveRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CloseToCurveRoad& a, CloseToCurveRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToCurveRoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToCurveRoad* New() const final {
    return CreateMaybeMessage<CloseToCurveRoad>(nullptr);
  }

  CloseToCurveRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToCurveRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToCurveRoad& from);
  void MergeFrom(const CloseToCurveRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToCurveRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToCurveRoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 4,
    kConditionFieldNumber = 5,
    kActionFieldNumber = 6,
    kDistanceFieldNumber = 2,
    kMaxCurveFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 4;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 5;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 6;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional double max_curve = 3 [default = 0];
  bool has_max_curve() const;
  void clear_max_curve();
  double max_curve() const;
  void set_max_curve(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToCurveRoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  double max_curve_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToDestination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToDestination) */ {
 public:
  CloseToDestination();
  virtual ~CloseToDestination();

  CloseToDestination(const CloseToDestination& from);
  CloseToDestination(CloseToDestination&& from) noexcept
    : CloseToDestination() {
    *this = ::std::move(from);
  }

  inline CloseToDestination& operator=(const CloseToDestination& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToDestination& operator=(CloseToDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToDestination* internal_default_instance() {
    return reinterpret_cast<const CloseToDestination*>(
               &_CloseToDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CloseToDestination& a, CloseToDestination& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToDestination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToDestination* New() const final {
    return CreateMaybeMessage<CloseToDestination>(nullptr);
  }

  CloseToDestination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToDestination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToDestination& from);
  void MergeFrom(const CloseToDestination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToDestination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToDestination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kDistanceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::ControlLine& control_line() const;
  ::phoenix::msg::routing::ControlLine* release_control_line();
  ::phoenix::msg::routing::ControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line);

  // optional .phoenix.msg.routing.Condition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::Condition& condition() const;
  ::phoenix::msg::routing::Condition* release_condition();
  ::phoenix::msg::routing::Condition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::Condition* condition);

  // optional .phoenix.msg.routing.Action action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::Action& action() const;
  ::phoenix::msg::routing::Action* release_action();
  ::phoenix::msg::routing::Action* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::Action* action);

  // optional double distance = 2 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToDestination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::ControlLine* control_line_;
  ::phoenix::msg::routing::Condition* condition_;
  ::phoenix::msg::routing::Action* action_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class Scene_Stories :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Scene_Stories) */ {
 public:
  Scene_Stories();
  virtual ~Scene_Stories();

  Scene_Stories(const Scene_Stories& from);
  Scene_Stories(Scene_Stories&& from) noexcept
    : Scene_Stories() {
    *this = ::std::move(from);
  }

  inline Scene_Stories& operator=(const Scene_Stories& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_Stories& operator=(Scene_Stories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene_Stories& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene_Stories* internal_default_instance() {
    return reinterpret_cast<const Scene_Stories*>(
               &_Scene_Stories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Scene_Stories& a, Scene_Stories& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_Stories* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene_Stories* New() const final {
    return CreateMaybeMessage<Scene_Stories>(nullptr);
  }

  Scene_Stories* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene_Stories>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene_Stories& from);
  void MergeFrom(const Scene_Stories& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_Stories* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.Scene_Stories";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseToCurveRoadFieldNumber = 1,
    kCloseToDestinationFieldNumber = 2,
    kCloseToCrosswalkFieldNumber = 3,
    kCloseToSpeedBumpsFieldNumber = 4,
    kCloseToParkingSpacesFieldNumber = 5,
    kCloseToClearAreaFieldNumber = 6,
    kCloseToJunctionFieldNumber = 7,
    kCloseToSignalFieldNumber = 8,
    kCloseToStopSignFieldNumber = 9,
    kCloseToYieldSignFieldNumber = 10,
  };
  // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
  int close_to_curve_road_size() const;
  void clear_close_to_curve_road();
  ::phoenix::msg::routing::CloseToCurveRoad* mutable_close_to_curve_road(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >*
      mutable_close_to_curve_road();
  const ::phoenix::msg::routing::CloseToCurveRoad& close_to_curve_road(int index) const;
  ::phoenix::msg::routing::CloseToCurveRoad* add_close_to_curve_road();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >&
      close_to_curve_road() const;

  // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
  int close_to_destination_size() const;
  void clear_close_to_destination();
  ::phoenix::msg::routing::CloseToDestination* mutable_close_to_destination(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >*
      mutable_close_to_destination();
  const ::phoenix::msg::routing::CloseToDestination& close_to_destination(int index) const;
  ::phoenix::msg::routing::CloseToDestination* add_close_to_destination();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >&
      close_to_destination() const;

  // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
  int close_to_crosswalk_size() const;
  void clear_close_to_crosswalk();
  ::phoenix::msg::routing::CloseToCrosswalk* mutable_close_to_crosswalk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >*
      mutable_close_to_crosswalk();
  const ::phoenix::msg::routing::CloseToCrosswalk& close_to_crosswalk(int index) const;
  ::phoenix::msg::routing::CloseToCrosswalk* add_close_to_crosswalk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >&
      close_to_crosswalk() const;

  // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
  int close_to_speed_bumps_size() const;
  void clear_close_to_speed_bumps();
  ::phoenix::msg::routing::CloseToSpeedBumps* mutable_close_to_speed_bumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >*
      mutable_close_to_speed_bumps();
  const ::phoenix::msg::routing::CloseToSpeedBumps& close_to_speed_bumps(int index) const;
  ::phoenix::msg::routing::CloseToSpeedBumps* add_close_to_speed_bumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >&
      close_to_speed_bumps() const;

  // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
  int close_to_parking_spaces_size() const;
  void clear_close_to_parking_spaces();
  ::phoenix::msg::routing::CloseToParkingSpaces* mutable_close_to_parking_spaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >*
      mutable_close_to_parking_spaces();
  const ::phoenix::msg::routing::CloseToParkingSpaces& close_to_parking_spaces(int index) const;
  ::phoenix::msg::routing::CloseToParkingSpaces* add_close_to_parking_spaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >&
      close_to_parking_spaces() const;

  // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
  int close_to_clear_area_size() const;
  void clear_close_to_clear_area();
  ::phoenix::msg::routing::CloseToClearArea* mutable_close_to_clear_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >*
      mutable_close_to_clear_area();
  const ::phoenix::msg::routing::CloseToClearArea& close_to_clear_area(int index) const;
  ::phoenix::msg::routing::CloseToClearArea* add_close_to_clear_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >&
      close_to_clear_area() const;

  // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
  int close_to_junction_size() const;
  void clear_close_to_junction();
  ::phoenix::msg::routing::CloseToJunction* mutable_close_to_junction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >*
      mutable_close_to_junction();
  const ::phoenix::msg::routing::CloseToJunction& close_to_junction(int index) const;
  ::phoenix::msg::routing::CloseToJunction* add_close_to_junction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >&
      close_to_junction() const;

  // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
  int close_to_signal_size() const;
  void clear_close_to_signal();
  ::phoenix::msg::routing::CloseToSignal* mutable_close_to_signal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >*
      mutable_close_to_signal();
  const ::phoenix::msg::routing::CloseToSignal& close_to_signal(int index) const;
  ::phoenix::msg::routing::CloseToSignal* add_close_to_signal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >&
      close_to_signal() const;

  // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
  int close_to_stop_sign_size() const;
  void clear_close_to_stop_sign();
  ::phoenix::msg::routing::CloseToStopSign* mutable_close_to_stop_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >*
      mutable_close_to_stop_sign();
  const ::phoenix::msg::routing::CloseToStopSign& close_to_stop_sign(int index) const;
  ::phoenix::msg::routing::CloseToStopSign* add_close_to_stop_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >&
      close_to_stop_sign() const;

  // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
  int close_to_yield_sign_size() const;
  void clear_close_to_yield_sign();
  ::phoenix::msg::routing::CloseToYieldSign* mutable_close_to_yield_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >*
      mutable_close_to_yield_sign();
  const ::phoenix::msg::routing::CloseToYieldSign& close_to_yield_sign(int index) const;
  ::phoenix::msg::routing::CloseToYieldSign* add_close_to_yield_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >&
      close_to_yield_sign() const;

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Scene_Stories)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad > close_to_curve_road_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination > close_to_destination_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk > close_to_crosswalk_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps > close_to_speed_bumps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces > close_to_parking_spaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea > close_to_clear_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction > close_to_junction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal > close_to_signal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign > close_to_stop_sign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign > close_to_yield_sign_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// optional double x = 1 [default = 0];
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Point.x)
}

// optional double y = 2 [default = 0];
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Point.y)
}

// -------------------------------------------------------------------

// ControlLine

// optional .phoenix.msg.routing.Point start_point = 1;
inline bool ControlLine::has_start_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlLine::clear_start_point() {
  if (start_point_ != nullptr) start_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::Point& ControlLine::start_point() const {
  const ::phoenix::msg::routing::Point* p = start_point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.ControlLine.start_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Point*>(
      &::phoenix::msg::routing::_Point_default_instance_);
}
inline ::phoenix::msg::routing::Point* ControlLine::release_start_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.ControlLine.start_point)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::Point* temp = start_point_;
  start_point_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Point* ControlLine::mutable_start_point() {
  _has_bits_[0] |= 0x00000001u;
  if (start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Point>(GetArenaNoVirtual());
    start_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.ControlLine.start_point)
  return start_point_;
}
inline void ControlLine::set_allocated_start_point(::phoenix::msg::routing::Point* start_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_point_;
  }
  if (start_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_point_ = start_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.ControlLine.start_point)
}

// optional .phoenix.msg.routing.Point end_point = 2;
inline bool ControlLine::has_end_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlLine::clear_end_point() {
  if (end_point_ != nullptr) end_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Point& ControlLine::end_point() const {
  const ::phoenix::msg::routing::Point* p = end_point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.ControlLine.end_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Point*>(
      &::phoenix::msg::routing::_Point_default_instance_);
}
inline ::phoenix::msg::routing::Point* ControlLine::release_end_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.ControlLine.end_point)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Point* temp = end_point_;
  end_point_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Point* ControlLine::mutable_end_point() {
  _has_bits_[0] |= 0x00000002u;
  if (end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Point>(GetArenaNoVirtual());
    end_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.ControlLine.end_point)
  return end_point_;
}
inline void ControlLine::set_allocated_end_point(::phoenix::msg::routing::Point* end_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_point_;
  }
  if (end_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_point_ = end_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.ControlLine.end_point)
}

// -------------------------------------------------------------------

// Condition

// optional double start_s = 1 [default = 0];
inline bool Condition::has_start_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Condition::clear_start_s() {
  start_s_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Condition::start_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Condition.start_s)
  return start_s_;
}
inline void Condition::set_start_s(double value) {
  _has_bits_[0] |= 0x00000001u;
  start_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Condition.start_s)
}

// optional double end_s = 2 [default = 0];
inline bool Condition::has_end_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Condition::clear_end_s() {
  end_s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Condition::end_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Condition.end_s)
  return end_s_;
}
inline void Condition::set_end_s(double value) {
  _has_bits_[0] |= 0x00000002u;
  end_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Condition.end_s)
}

// optional double speed_high = 3 [default = 0];
inline bool Condition::has_speed_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Condition::clear_speed_high() {
  speed_high_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Condition::speed_high() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Condition.speed_high)
  return speed_high_;
}
inline void Condition::set_speed_high(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_high_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Condition.speed_high)
}

// optional double speed_low = 4 [default = 0];
inline bool Condition::has_speed_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Condition::clear_speed_low() {
  speed_low_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Condition::speed_low() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Condition.speed_low)
  return speed_low_;
}
inline void Condition::set_speed_low(double value) {
  _has_bits_[0] |= 0x00000008u;
  speed_low_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Condition.speed_low)
}

// -------------------------------------------------------------------

// Action

// optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
inline bool Action::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::control::Chassis_GearPosition Action::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void Action::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.gear)
}

// optional double speed = 2 [default = 0];
inline bool Action::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Action::speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.speed)
  return speed_;
}
inline void Action::set_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.speed)
}

// optional double acceleration = 3 [default = 0];
inline bool Action::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Action::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.acceleration)
  return acceleration_;
}
inline void Action::set_acceleration(double value) {
  _has_bits_[0] |= 0x00000002u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.acceleration)
}

// optional double run_time = 4 [default = 0];
inline bool Action::has_run_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::clear_run_time() {
  run_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Action::run_time() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.run_time)
  return run_time_;
}
inline void Action::set_run_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  run_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.run_time)
}

// optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
inline bool Action::has_turn_lamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::clear_turn_lamp() {
  turn_lamp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_SignalTurnLamp Action::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.turn_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(turn_lamp_);
}
inline void Action::set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.turn_lamp)
}

// optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
inline bool Action::has_brake_lamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Action::clear_brake_lamp() {
  brake_lamp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::phoenix::msg::control::Chassis_SignalLamp Action::brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Action.brake_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(brake_lamp_);
}
inline void Action::set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalLamp_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Action.brake_lamp)
}

// -------------------------------------------------------------------

// CloseToSpeedBumps

// optional int32 id = 1;
inline bool CloseToSpeedBumps::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToSpeedBumps::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToSpeedBumps::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.id)
  return id_;
}
inline void CloseToSpeedBumps::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSpeedBumps.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToSpeedBumps::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToSpeedBumps::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToSpeedBumps::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.distance)
  return distance_;
}
inline void CloseToSpeedBumps::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSpeedBumps.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToSpeedBumps::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToSpeedBumps::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToSpeedBumps::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToSpeedBumps::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToSpeedBumps::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.control_line)
  return control_line_;
}
inline void CloseToSpeedBumps::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToSpeedBumps::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToSpeedBumps::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToSpeedBumps::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToSpeedBumps::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToSpeedBumps::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.condition)
  return condition_;
}
inline void CloseToSpeedBumps::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToSpeedBumps::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToSpeedBumps::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToSpeedBumps::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToSpeedBumps::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToSpeedBumps::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.action)
  return action_;
}
inline void CloseToSpeedBumps::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.action)
}

// -------------------------------------------------------------------

// CloseToParkingSpaces

// optional int32 id = 1;
inline bool CloseToParkingSpaces::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToParkingSpaces::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToParkingSpaces::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.id)
  return id_;
}
inline void CloseToParkingSpaces::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToParkingSpaces.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToParkingSpaces::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToParkingSpaces::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToParkingSpaces::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.distance)
  return distance_;
}
inline void CloseToParkingSpaces::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToParkingSpaces.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToParkingSpaces::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToParkingSpaces::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToParkingSpaces::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToParkingSpaces::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToParkingSpaces::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.control_line)
  return control_line_;
}
inline void CloseToParkingSpaces::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToParkingSpaces::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToParkingSpaces::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToParkingSpaces::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToParkingSpaces::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToParkingSpaces::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.condition)
  return condition_;
}
inline void CloseToParkingSpaces::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToParkingSpaces::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToParkingSpaces::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToParkingSpaces::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToParkingSpaces::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToParkingSpaces::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.action)
  return action_;
}
inline void CloseToParkingSpaces::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.action)
}

// -------------------------------------------------------------------

// CloseToCrosswalk

// optional int32 id = 1;
inline bool CloseToCrosswalk::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToCrosswalk::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToCrosswalk::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.id)
  return id_;
}
inline void CloseToCrosswalk::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCrosswalk.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToCrosswalk::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToCrosswalk::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToCrosswalk::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.distance)
  return distance_;
}
inline void CloseToCrosswalk::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCrosswalk.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToCrosswalk::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToCrosswalk::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToCrosswalk::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToCrosswalk::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToCrosswalk::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.control_line)
  return control_line_;
}
inline void CloseToCrosswalk::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToCrosswalk::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToCrosswalk::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToCrosswalk::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToCrosswalk::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToCrosswalk::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.condition)
  return condition_;
}
inline void CloseToCrosswalk::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToCrosswalk::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToCrosswalk::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToCrosswalk::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToCrosswalk::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToCrosswalk::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.action)
  return action_;
}
inline void CloseToCrosswalk::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.action)
}

// -------------------------------------------------------------------

// CloseToClearArea

// optional int32 id = 1;
inline bool CloseToClearArea::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToClearArea::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToClearArea::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.id)
  return id_;
}
inline void CloseToClearArea::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToClearArea.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToClearArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToClearArea::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToClearArea::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.distance)
  return distance_;
}
inline void CloseToClearArea::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToClearArea.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToClearArea::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToClearArea::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToClearArea::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToClearArea::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToClearArea::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.control_line)
  return control_line_;
}
inline void CloseToClearArea::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToClearArea::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToClearArea::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToClearArea::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToClearArea::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToClearArea::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.condition)
  return condition_;
}
inline void CloseToClearArea::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToClearArea::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToClearArea::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToClearArea::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToClearArea::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToClearArea::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.action)
  return action_;
}
inline void CloseToClearArea::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.action)
}

// -------------------------------------------------------------------

// CloseToJunction

// optional string id = 1;
inline bool CloseToJunction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToJunction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToJunction::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.id)
  return id_.GetNoArena();
}
inline void CloseToJunction::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToJunction.id)
}
inline std::string* CloseToJunction::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToJunction::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToJunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToJunction::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToJunction::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CloseToJunction::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.distance)
  return distance_;
}
inline void CloseToJunction::set_distance(double value) {
  _has_bits_[0] |= 0x00000010u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToJunction.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToJunction::has_control_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToJunction::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToJunction::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToJunction::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.control_line)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToJunction::mutable_control_line() {
  _has_bits_[0] |= 0x00000002u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.control_line)
  return control_line_;
}
inline void CloseToJunction::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToJunction::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToJunction::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Condition& CloseToJunction::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToJunction::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToJunction::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.condition)
  return condition_;
}
inline void CloseToJunction::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToJunction::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToJunction::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::Action& CloseToJunction::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToJunction::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToJunction::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.action)
  return action_;
}
inline void CloseToJunction::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.action)
}

// -------------------------------------------------------------------

// CloseToSignal

// optional int32 id = 1;
inline bool CloseToSignal::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToSignal::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToSignal::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.id)
  return id_;
}
inline void CloseToSignal::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSignal.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToSignal::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToSignal::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToSignal::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.distance)
  return distance_;
}
inline void CloseToSignal::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSignal.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToSignal::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToSignal::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToSignal::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToSignal::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToSignal::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.control_line)
  return control_line_;
}
inline void CloseToSignal::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToSignal::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToSignal::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToSignal::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToSignal::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToSignal::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.condition)
  return condition_;
}
inline void CloseToSignal::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToSignal::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToSignal::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToSignal::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToSignal::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToSignal::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.action)
  return action_;
}
inline void CloseToSignal::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.action)
}

// -------------------------------------------------------------------

// CloseToStopSign

// optional int32 id = 1;
inline bool CloseToStopSign::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToStopSign::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToStopSign::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.id)
  return id_;
}
inline void CloseToStopSign::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToStopSign.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToStopSign::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToStopSign::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToStopSign::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.distance)
  return distance_;
}
inline void CloseToStopSign::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToStopSign.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToStopSign::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToStopSign::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToStopSign::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToStopSign::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToStopSign::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.control_line)
  return control_line_;
}
inline void CloseToStopSign::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToStopSign::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToStopSign::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToStopSign::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToStopSign::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToStopSign::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.condition)
  return condition_;
}
inline void CloseToStopSign::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToStopSign::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToStopSign::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToStopSign::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToStopSign::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToStopSign::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.action)
  return action_;
}
inline void CloseToStopSign::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.action)
}

// -------------------------------------------------------------------

// CloseToYieldSign

// optional int32 id = 1;
inline bool CloseToYieldSign::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToYieldSign::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToYieldSign::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.id)
  return id_;
}
inline void CloseToYieldSign::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToYieldSign.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToYieldSign::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToYieldSign::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToYieldSign::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.distance)
  return distance_;
}
inline void CloseToYieldSign::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToYieldSign.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToYieldSign::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToYieldSign::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToYieldSign::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToYieldSign::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToYieldSign::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.control_line)
  return control_line_;
}
inline void CloseToYieldSign::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToYieldSign::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToYieldSign::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToYieldSign::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToYieldSign::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToYieldSign::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.condition)
  return condition_;
}
inline void CloseToYieldSign::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToYieldSign::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToYieldSign::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToYieldSign::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToYieldSign::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToYieldSign::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.action)
  return action_;
}
inline void CloseToYieldSign::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.action)
}

// -------------------------------------------------------------------

// CloseToCurveRoad

// optional int32 id = 1;
inline bool CloseToCurveRoad::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CloseToCurveRoad::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToCurveRoad::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.id)
  return id_;
}
inline void CloseToCurveRoad::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCurveRoad.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToCurveRoad::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToCurveRoad::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToCurveRoad::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.distance)
  return distance_;
}
inline void CloseToCurveRoad::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCurveRoad.distance)
}

// optional double max_curve = 3 [default = 0];
inline bool CloseToCurveRoad::has_max_curve() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToCurveRoad::clear_max_curve() {
  max_curve_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CloseToCurveRoad::max_curve() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.max_curve)
  return max_curve_;
}
inline void CloseToCurveRoad::set_max_curve(double value) {
  _has_bits_[0] |= 0x00000010u;
  max_curve_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCurveRoad.max_curve)
}

// optional .phoenix.msg.routing.ControlLine control_line = 4;
inline bool CloseToCurveRoad::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToCurveRoad::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToCurveRoad::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToCurveRoad::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToCurveRoad::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.control_line)
  return control_line_;
}
inline void CloseToCurveRoad::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 5;
inline bool CloseToCurveRoad::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToCurveRoad::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToCurveRoad::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToCurveRoad::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToCurveRoad::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.condition)
  return condition_;
}
inline void CloseToCurveRoad::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.condition)
}

// optional .phoenix.msg.routing.Action action = 6;
inline bool CloseToCurveRoad::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToCurveRoad::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToCurveRoad::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToCurveRoad::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToCurveRoad::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.action)
  return action_;
}
inline void CloseToCurveRoad::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.action)
}

// -------------------------------------------------------------------

// CloseToDestination

// optional int32 id = 1;
inline bool CloseToDestination::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToDestination::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseToDestination::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.id)
  return id_;
}
inline void CloseToDestination::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToDestination.id)
}

// optional double distance = 2 [default = 0];
inline bool CloseToDestination::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToDestination::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CloseToDestination::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.distance)
  return distance_;
}
inline void CloseToDestination::set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToDestination.distance)
}

// optional .phoenix.msg.routing.ControlLine control_line = 3;
inline bool CloseToDestination::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToDestination::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::ControlLine& CloseToDestination::control_line() const {
  const ::phoenix::msg::routing::ControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::ControlLine*>(
      &::phoenix::msg::routing::_ControlLine_default_instance_);
}
inline ::phoenix::msg::routing::ControlLine* CloseToDestination::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::ControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::ControlLine* CloseToDestination::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::ControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.control_line)
  return control_line_;
}
inline void CloseToDestination::set_allocated_control_line(::phoenix::msg::routing::ControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.control_line)
}

// optional .phoenix.msg.routing.Condition condition = 4;
inline bool CloseToDestination::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToDestination::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Condition& CloseToDestination::condition() const {
  const ::phoenix::msg::routing::Condition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Condition*>(
      &::phoenix::msg::routing::_Condition_default_instance_);
}
inline ::phoenix::msg::routing::Condition* CloseToDestination::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Condition* CloseToDestination::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.condition)
  return condition_;
}
inline void CloseToDestination::set_allocated_condition(::phoenix::msg::routing::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.condition)
}

// optional .phoenix.msg.routing.Action action = 5;
inline bool CloseToDestination::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToDestination::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::Action& CloseToDestination::action() const {
  const ::phoenix::msg::routing::Action* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Action*>(
      &::phoenix::msg::routing::_Action_default_instance_);
}
inline ::phoenix::msg::routing::Action* CloseToDestination::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Action* CloseToDestination::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.action)
  return action_;
}
inline void CloseToDestination::set_allocated_action(::phoenix::msg::routing::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.action)
}

// -------------------------------------------------------------------

// Scene_Stories

// repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
inline int Scene_Stories::close_to_curve_road_size() const {
  return close_to_curve_road_.size();
}
inline void Scene_Stories::clear_close_to_curve_road() {
  close_to_curve_road_.Clear();
}
inline ::phoenix::msg::routing::CloseToCurveRoad* Scene_Stories::mutable_close_to_curve_road(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_curve_road)
  return close_to_curve_road_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >*
Scene_Stories::mutable_close_to_curve_road() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_curve_road)
  return &close_to_curve_road_;
}
inline const ::phoenix::msg::routing::CloseToCurveRoad& Scene_Stories::close_to_curve_road(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_curve_road)
  return close_to_curve_road_.Get(index);
}
inline ::phoenix::msg::routing::CloseToCurveRoad* Scene_Stories::add_close_to_curve_road() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_curve_road)
  return close_to_curve_road_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >&
Scene_Stories::close_to_curve_road() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_curve_road)
  return close_to_curve_road_;
}

// repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
inline int Scene_Stories::close_to_destination_size() const {
  return close_to_destination_.size();
}
inline void Scene_Stories::clear_close_to_destination() {
  close_to_destination_.Clear();
}
inline ::phoenix::msg::routing::CloseToDestination* Scene_Stories::mutable_close_to_destination(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_destination)
  return close_to_destination_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >*
Scene_Stories::mutable_close_to_destination() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_destination)
  return &close_to_destination_;
}
inline const ::phoenix::msg::routing::CloseToDestination& Scene_Stories::close_to_destination(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_destination)
  return close_to_destination_.Get(index);
}
inline ::phoenix::msg::routing::CloseToDestination* Scene_Stories::add_close_to_destination() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_destination)
  return close_to_destination_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >&
Scene_Stories::close_to_destination() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_destination)
  return close_to_destination_;
}

// repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
inline int Scene_Stories::close_to_crosswalk_size() const {
  return close_to_crosswalk_.size();
}
inline void Scene_Stories::clear_close_to_crosswalk() {
  close_to_crosswalk_.Clear();
}
inline ::phoenix::msg::routing::CloseToCrosswalk* Scene_Stories::mutable_close_to_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_crosswalk)
  return close_to_crosswalk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >*
Scene_Stories::mutable_close_to_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_crosswalk)
  return &close_to_crosswalk_;
}
inline const ::phoenix::msg::routing::CloseToCrosswalk& Scene_Stories::close_to_crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_crosswalk)
  return close_to_crosswalk_.Get(index);
}
inline ::phoenix::msg::routing::CloseToCrosswalk* Scene_Stories::add_close_to_crosswalk() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_crosswalk)
  return close_to_crosswalk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >&
Scene_Stories::close_to_crosswalk() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_crosswalk)
  return close_to_crosswalk_;
}

// repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
inline int Scene_Stories::close_to_speed_bumps_size() const {
  return close_to_speed_bumps_.size();
}
inline void Scene_Stories::clear_close_to_speed_bumps() {
  close_to_speed_bumps_.Clear();
}
inline ::phoenix::msg::routing::CloseToSpeedBumps* Scene_Stories::mutable_close_to_speed_bumps(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_speed_bumps)
  return close_to_speed_bumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >*
Scene_Stories::mutable_close_to_speed_bumps() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_speed_bumps)
  return &close_to_speed_bumps_;
}
inline const ::phoenix::msg::routing::CloseToSpeedBumps& Scene_Stories::close_to_speed_bumps(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_speed_bumps)
  return close_to_speed_bumps_.Get(index);
}
inline ::phoenix::msg::routing::CloseToSpeedBumps* Scene_Stories::add_close_to_speed_bumps() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_speed_bumps)
  return close_to_speed_bumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >&
Scene_Stories::close_to_speed_bumps() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_speed_bumps)
  return close_to_speed_bumps_;
}

// repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
inline int Scene_Stories::close_to_parking_spaces_size() const {
  return close_to_parking_spaces_.size();
}
inline void Scene_Stories::clear_close_to_parking_spaces() {
  close_to_parking_spaces_.Clear();
}
inline ::phoenix::msg::routing::CloseToParkingSpaces* Scene_Stories::mutable_close_to_parking_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_parking_spaces)
  return close_to_parking_spaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >*
Scene_Stories::mutable_close_to_parking_spaces() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_parking_spaces)
  return &close_to_parking_spaces_;
}
inline const ::phoenix::msg::routing::CloseToParkingSpaces& Scene_Stories::close_to_parking_spaces(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_parking_spaces)
  return close_to_parking_spaces_.Get(index);
}
inline ::phoenix::msg::routing::CloseToParkingSpaces* Scene_Stories::add_close_to_parking_spaces() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_parking_spaces)
  return close_to_parking_spaces_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >&
Scene_Stories::close_to_parking_spaces() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_parking_spaces)
  return close_to_parking_spaces_;
}

// repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
inline int Scene_Stories::close_to_clear_area_size() const {
  return close_to_clear_area_.size();
}
inline void Scene_Stories::clear_close_to_clear_area() {
  close_to_clear_area_.Clear();
}
inline ::phoenix::msg::routing::CloseToClearArea* Scene_Stories::mutable_close_to_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_clear_area)
  return close_to_clear_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >*
Scene_Stories::mutable_close_to_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_clear_area)
  return &close_to_clear_area_;
}
inline const ::phoenix::msg::routing::CloseToClearArea& Scene_Stories::close_to_clear_area(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_clear_area)
  return close_to_clear_area_.Get(index);
}
inline ::phoenix::msg::routing::CloseToClearArea* Scene_Stories::add_close_to_clear_area() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_clear_area)
  return close_to_clear_area_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >&
Scene_Stories::close_to_clear_area() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_clear_area)
  return close_to_clear_area_;
}

// repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
inline int Scene_Stories::close_to_junction_size() const {
  return close_to_junction_.size();
}
inline void Scene_Stories::clear_close_to_junction() {
  close_to_junction_.Clear();
}
inline ::phoenix::msg::routing::CloseToJunction* Scene_Stories::mutable_close_to_junction(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_junction)
  return close_to_junction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >*
Scene_Stories::mutable_close_to_junction() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_junction)
  return &close_to_junction_;
}
inline const ::phoenix::msg::routing::CloseToJunction& Scene_Stories::close_to_junction(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_junction)
  return close_to_junction_.Get(index);
}
inline ::phoenix::msg::routing::CloseToJunction* Scene_Stories::add_close_to_junction() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_junction)
  return close_to_junction_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >&
Scene_Stories::close_to_junction() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_junction)
  return close_to_junction_;
}

// repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
inline int Scene_Stories::close_to_signal_size() const {
  return close_to_signal_.size();
}
inline void Scene_Stories::clear_close_to_signal() {
  close_to_signal_.Clear();
}
inline ::phoenix::msg::routing::CloseToSignal* Scene_Stories::mutable_close_to_signal(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_signal)
  return close_to_signal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >*
Scene_Stories::mutable_close_to_signal() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_signal)
  return &close_to_signal_;
}
inline const ::phoenix::msg::routing::CloseToSignal& Scene_Stories::close_to_signal(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_signal)
  return close_to_signal_.Get(index);
}
inline ::phoenix::msg::routing::CloseToSignal* Scene_Stories::add_close_to_signal() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_signal)
  return close_to_signal_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >&
Scene_Stories::close_to_signal() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_signal)
  return close_to_signal_;
}

// repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
inline int Scene_Stories::close_to_stop_sign_size() const {
  return close_to_stop_sign_.size();
}
inline void Scene_Stories::clear_close_to_stop_sign() {
  close_to_stop_sign_.Clear();
}
inline ::phoenix::msg::routing::CloseToStopSign* Scene_Stories::mutable_close_to_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_stop_sign)
  return close_to_stop_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >*
Scene_Stories::mutable_close_to_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_stop_sign)
  return &close_to_stop_sign_;
}
inline const ::phoenix::msg::routing::CloseToStopSign& Scene_Stories::close_to_stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_stop_sign)
  return close_to_stop_sign_.Get(index);
}
inline ::phoenix::msg::routing::CloseToStopSign* Scene_Stories::add_close_to_stop_sign() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_stop_sign)
  return close_to_stop_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >&
Scene_Stories::close_to_stop_sign() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_stop_sign)
  return close_to_stop_sign_;
}

// repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
inline int Scene_Stories::close_to_yield_sign_size() const {
  return close_to_yield_sign_.size();
}
inline void Scene_Stories::clear_close_to_yield_sign() {
  close_to_yield_sign_.Clear();
}
inline ::phoenix::msg::routing::CloseToYieldSign* Scene_Stories::mutable_close_to_yield_sign(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Scene_Stories.close_to_yield_sign)
  return close_to_yield_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >*
Scene_Stories::mutable_close_to_yield_sign() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.Scene_Stories.close_to_yield_sign)
  return &close_to_yield_sign_;
}
inline const ::phoenix::msg::routing::CloseToYieldSign& Scene_Stories::close_to_yield_sign(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Scene_Stories.close_to_yield_sign)
  return close_to_yield_sign_.Get(index);
}
inline ::phoenix::msg::routing::CloseToYieldSign* Scene_Stories::add_close_to_yield_sign() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.Scene_Stories.close_to_yield_sign)
  return close_to_yield_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >&
Scene_Stories::close_to_yield_sign() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.Scene_Stories.close_to_yield_sign)
  return close_to_yield_sign_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto
