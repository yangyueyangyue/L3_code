// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_mark_camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_5fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_5fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lane_5fmark_5fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lane_5fmark_5fcamera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lane_5fmark_5fcamera_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class LaneMarkCamera;
class LaneMarkCameraDefaultTypeInternal;
extern LaneMarkCameraDefaultTypeInternal _LaneMarkCamera_default_instance_;
class LaneMarkCameraList;
class LaneMarkCameraListDefaultTypeInternal;
extern LaneMarkCameraListDefaultTypeInternal _LaneMarkCameraList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::LaneMarkCamera* Arena::CreateMaybeMessage<::phoenix::msg::perception::LaneMarkCamera>(Arena*);
template<> ::phoenix::msg::perception::LaneMarkCameraList* Arena::CreateMaybeMessage<::phoenix::msg::perception::LaneMarkCameraList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum LaneMarkCamera_LaneMarkType : int {
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_INVALID = 0,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_UNKNOWN = 1,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_DASHED = 2,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_SOLID = 3,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_DOUBLE_LANE_MARK = 4,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_BOTTS_DOTS = 5,
  LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_ROAD_EDGE = 6
};
bool LaneMarkCamera_LaneMarkType_IsValid(int value);
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera_LaneMarkType_LaneMarkType_MIN = LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_INVALID;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera_LaneMarkType_LaneMarkType_MAX = LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_ROAD_EDGE;
constexpr int LaneMarkCamera_LaneMarkType_LaneMarkType_ARRAYSIZE = LaneMarkCamera_LaneMarkType_LaneMarkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneMarkCamera_LaneMarkType_descriptor();
template<typename T>
inline const std::string& LaneMarkCamera_LaneMarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneMarkCamera_LaneMarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneMarkCamera_LaneMarkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneMarkCamera_LaneMarkType_descriptor(), enum_t_value);
}
inline bool LaneMarkCamera_LaneMarkType_Parse(
    const std::string& name, LaneMarkCamera_LaneMarkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneMarkCamera_LaneMarkType>(
    LaneMarkCamera_LaneMarkType_descriptor(), name, value);
}
// ===================================================================

class LaneMarkCamera :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.LaneMarkCamera) */ {
 public:
  LaneMarkCamera();
  virtual ~LaneMarkCamera();

  LaneMarkCamera(const LaneMarkCamera& from);
  LaneMarkCamera(LaneMarkCamera&& from) noexcept
    : LaneMarkCamera() {
    *this = ::std::move(from);
  }

  inline LaneMarkCamera& operator=(const LaneMarkCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkCamera& operator=(LaneMarkCamera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarkCamera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarkCamera* internal_default_instance() {
    return reinterpret_cast<const LaneMarkCamera*>(
               &_LaneMarkCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneMarkCamera& a, LaneMarkCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkCamera* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarkCamera* New() const final {
    return CreateMaybeMessage<LaneMarkCamera>(nullptr);
  }

  LaneMarkCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarkCamera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarkCamera& from);
  void MergeFrom(const LaneMarkCamera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkCamera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.LaneMarkCamera";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_5fcamera_2eproto);
    return ::descriptor_table_lane_5fmark_5fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LaneMarkCamera_LaneMarkType LaneMarkType;
  static constexpr LaneMarkType LANE_MARK_TYPE_INVALID =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_INVALID;
  static constexpr LaneMarkType LANE_MARK_TYPE_UNKNOWN =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_UNKNOWN;
  static constexpr LaneMarkType LANE_MARK_TYPE_DASHED =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_DASHED;
  static constexpr LaneMarkType LANE_MARK_TYPE_SOLID =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_SOLID;
  static constexpr LaneMarkType LANE_MARK_TYPE_DOUBLE_LANE_MARK =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_DOUBLE_LANE_MARK;
  static constexpr LaneMarkType LANE_MARK_TYPE_BOTTS_DOTS =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_BOTTS_DOTS;
  static constexpr LaneMarkType LANE_MARK_TYPE_ROAD_EDGE =
    LaneMarkCamera_LaneMarkType_LANE_MARK_TYPE_ROAD_EDGE;
  static inline bool LaneMarkType_IsValid(int value) {
    return LaneMarkCamera_LaneMarkType_IsValid(value);
  }
  static constexpr LaneMarkType LaneMarkType_MIN =
    LaneMarkCamera_LaneMarkType_LaneMarkType_MIN;
  static constexpr LaneMarkType LaneMarkType_MAX =
    LaneMarkCamera_LaneMarkType_LaneMarkType_MAX;
  static constexpr int LaneMarkType_ARRAYSIZE =
    LaneMarkCamera_LaneMarkType_LaneMarkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LaneMarkType_descriptor() {
    return LaneMarkCamera_LaneMarkType_descriptor();
  }
  template<typename T>
  static inline const std::string& LaneMarkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LaneMarkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LaneMarkType_Name.");
    return LaneMarkCamera_LaneMarkType_Name(enum_t_value);
  }
  static inline bool LaneMarkType_Parse(const std::string& name,
      LaneMarkType* value) {
    return LaneMarkCamera_LaneMarkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLaneMarkTypeFieldNumber = 2,
    kQualityFieldNumber = 3,
    kViewRangeValidFieldNumber = 4,
    kMarkWidthFieldNumber = 5,
    kViewRangeStartFieldNumber = 6,
    kC0FieldNumber = 8,
    kC1FieldNumber = 9,
    kC2FieldNumber = 10,
    kC3FieldNumber = 11,
    kViewRangeEndFieldNumber = 7,
  };
  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
  bool has_lane_mark_type() const;
  void clear_lane_mark_type();
  ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType lane_mark_type() const;
  void set_lane_mark_type(::phoenix::msg::perception::LaneMarkCamera_LaneMarkType value);

  // optional int32 quality = 3 [default = 0];
  bool has_quality() const;
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool view_range_valid = 4 [default = false];
  bool has_view_range_valid() const;
  void clear_view_range_valid();
  bool view_range_valid() const;
  void set_view_range_valid(bool value);

  // optional float mark_width = 5 [default = 0];
  bool has_mark_width() const;
  void clear_mark_width();
  float mark_width() const;
  void set_mark_width(float value);

  // optional float view_range_start = 6 [default = 0];
  bool has_view_range_start() const;
  void clear_view_range_start();
  float view_range_start() const;
  void set_view_range_start(float value);

  // optional double c0 = 8 [default = 0];
  bool has_c0() const;
  void clear_c0();
  double c0() const;
  void set_c0(double value);

  // optional double c1 = 9 [default = 0];
  bool has_c1() const;
  void clear_c1();
  double c1() const;
  void set_c1(double value);

  // optional double c2 = 10 [default = 0];
  bool has_c2() const;
  void clear_c2();
  double c2() const;
  void set_c2(double value);

  // optional double c3 = 11 [default = 0];
  bool has_c3() const;
  void clear_c3();
  double c3() const;
  void set_c3(double value);

  // optional float view_range_end = 7 [default = 0];
  bool has_view_range_end() const;
  void clear_view_range_end();
  float view_range_end() const;
  void set_view_range_end(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.LaneMarkCamera)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int lane_mark_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  bool view_range_valid_;
  float mark_width_;
  float view_range_start_;
  double c0_;
  double c1_;
  double c2_;
  double c3_;
  float view_range_end_;
  friend struct ::TableStruct_lane_5fmark_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class LaneMarkCameraList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.LaneMarkCameraList) */ {
 public:
  LaneMarkCameraList();
  virtual ~LaneMarkCameraList();

  LaneMarkCameraList(const LaneMarkCameraList& from);
  LaneMarkCameraList(LaneMarkCameraList&& from) noexcept
    : LaneMarkCameraList() {
    *this = ::std::move(from);
  }

  inline LaneMarkCameraList& operator=(const LaneMarkCameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkCameraList& operator=(LaneMarkCameraList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarkCameraList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarkCameraList* internal_default_instance() {
    return reinterpret_cast<const LaneMarkCameraList*>(
               &_LaneMarkCameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneMarkCameraList& a, LaneMarkCameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkCameraList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarkCameraList* New() const final {
    return CreateMaybeMessage<LaneMarkCameraList>(nullptr);
  }

  LaneMarkCameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarkCameraList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarkCameraList& from);
  void MergeFrom(const LaneMarkCameraList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkCameraList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.LaneMarkCameraList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lane_5fmark_5fcamera_2eproto);
    return ::descriptor_table_lane_5fmark_5fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneMarkListFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
  int lane_mark_list_size() const;
  void clear_lane_mark_list();
  ::phoenix::msg::perception::LaneMarkCamera* mutable_lane_mark_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::LaneMarkCamera >*
      mutable_lane_mark_list();
  const ::phoenix::msg::perception::LaneMarkCamera& lane_mark_list(int index) const;
  ::phoenix::msg::perception::LaneMarkCamera* add_lane_mark_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::LaneMarkCamera >&
      lane_mark_list() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.LaneMarkCameraList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::LaneMarkCamera > lane_mark_list_;
  ::phoenix::msg::common::Header* header_;
  friend struct ::TableStruct_lane_5fmark_5fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneMarkCamera

// optional int32 id = 1 [default = 0];
inline bool LaneMarkCamera::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarkCamera::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarkCamera::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.id)
  return id_;
}
inline void LaneMarkCamera::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.id)
}

// optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
inline bool LaneMarkCamera::has_lane_mark_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneMarkCamera::clear_lane_mark_type() {
  lane_mark_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType LaneMarkCamera::lane_mark_type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.lane_mark_type)
  return static_cast< ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType >(lane_mark_type_);
}
inline void LaneMarkCamera::set_lane_mark_type(::phoenix::msg::perception::LaneMarkCamera_LaneMarkType value) {
  assert(::phoenix::msg::perception::LaneMarkCamera_LaneMarkType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  lane_mark_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.lane_mark_type)
}

// optional int32 quality = 3 [default = 0];
inline bool LaneMarkCamera::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneMarkCamera::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarkCamera::quality() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.quality)
  return quality_;
}
inline void LaneMarkCamera::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  quality_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.quality)
}

// optional bool view_range_valid = 4 [default = false];
inline bool LaneMarkCamera::has_view_range_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneMarkCamera::clear_view_range_valid() {
  view_range_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LaneMarkCamera::view_range_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.view_range_valid)
  return view_range_valid_;
}
inline void LaneMarkCamera::set_view_range_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  view_range_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.view_range_valid)
}

// optional float mark_width = 5 [default = 0];
inline bool LaneMarkCamera::has_mark_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneMarkCamera::clear_mark_width() {
  mark_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LaneMarkCamera::mark_width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.mark_width)
  return mark_width_;
}
inline void LaneMarkCamera::set_mark_width(float value) {
  _has_bits_[0] |= 0x00000010u;
  mark_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.mark_width)
}

// optional float view_range_start = 6 [default = 0];
inline bool LaneMarkCamera::has_view_range_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneMarkCamera::clear_view_range_start() {
  view_range_start_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float LaneMarkCamera::view_range_start() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.view_range_start)
  return view_range_start_;
}
inline void LaneMarkCamera::set_view_range_start(float value) {
  _has_bits_[0] |= 0x00000020u;
  view_range_start_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.view_range_start)
}

// optional float view_range_end = 7 [default = 0];
inline bool LaneMarkCamera::has_view_range_end() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaneMarkCamera::clear_view_range_end() {
  view_range_end_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float LaneMarkCamera::view_range_end() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.view_range_end)
  return view_range_end_;
}
inline void LaneMarkCamera::set_view_range_end(float value) {
  _has_bits_[0] |= 0x00000400u;
  view_range_end_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.view_range_end)
}

// optional double c0 = 8 [default = 0];
inline bool LaneMarkCamera::has_c0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneMarkCamera::clear_c0() {
  c0_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double LaneMarkCamera::c0() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.c0)
  return c0_;
}
inline void LaneMarkCamera::set_c0(double value) {
  _has_bits_[0] |= 0x00000040u;
  c0_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.c0)
}

// optional double c1 = 9 [default = 0];
inline bool LaneMarkCamera::has_c1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneMarkCamera::clear_c1() {
  c1_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LaneMarkCamera::c1() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.c1)
  return c1_;
}
inline void LaneMarkCamera::set_c1(double value) {
  _has_bits_[0] |= 0x00000080u;
  c1_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.c1)
}

// optional double c2 = 10 [default = 0];
inline bool LaneMarkCamera::has_c2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneMarkCamera::clear_c2() {
  c2_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double LaneMarkCamera::c2() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.c2)
  return c2_;
}
inline void LaneMarkCamera::set_c2(double value) {
  _has_bits_[0] |= 0x00000100u;
  c2_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.c2)
}

// optional double c3 = 11 [default = 0];
inline bool LaneMarkCamera::has_c3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneMarkCamera::clear_c3() {
  c3_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LaneMarkCamera::c3() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCamera.c3)
  return c3_;
}
inline void LaneMarkCamera::set_c3(double value) {
  _has_bits_[0] |= 0x00000200u;
  c3_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.LaneMarkCamera.c3)
}

// -------------------------------------------------------------------

// LaneMarkCameraList

// optional .phoenix.msg.common.Header header = 1;
inline bool LaneMarkCameraList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& LaneMarkCameraList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCameraList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* LaneMarkCameraList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.LaneMarkCameraList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* LaneMarkCameraList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.LaneMarkCameraList.header)
  return header_;
}
inline void LaneMarkCameraList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.LaneMarkCameraList.header)
}

// repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
inline int LaneMarkCameraList::lane_mark_list_size() const {
  return lane_mark_list_.size();
}
inline void LaneMarkCameraList::clear_lane_mark_list() {
  lane_mark_list_.Clear();
}
inline ::phoenix::msg::perception::LaneMarkCamera* LaneMarkCameraList::mutable_lane_mark_list(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.LaneMarkCameraList.lane_mark_list)
  return lane_mark_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::LaneMarkCamera >*
LaneMarkCameraList::mutable_lane_mark_list() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.LaneMarkCameraList.lane_mark_list)
  return &lane_mark_list_;
}
inline const ::phoenix::msg::perception::LaneMarkCamera& LaneMarkCameraList::lane_mark_list(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.LaneMarkCameraList.lane_mark_list)
  return lane_mark_list_.Get(index);
}
inline ::phoenix::msg::perception::LaneMarkCamera* LaneMarkCameraList::add_lane_mark_list() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.LaneMarkCameraList.lane_mark_list)
  return lane_mark_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::LaneMarkCamera >&
LaneMarkCameraList::lane_mark_list() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.LaneMarkCameraList.lane_mark_list)
  return lane_mark_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType>() {
  return ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lane_5fmark_5fcamera_2eproto
