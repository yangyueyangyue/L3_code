// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can_frame.proto

#include "can_frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_can_5fframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanFdFrame_can_5fframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_can_5fframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanFrame_can_5fframe_2eproto;
namespace phoenix {
namespace can_dev {
namespace perception {
class CanFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanFrame> _instance;
} _CanFrame_default_instance_;
class CanFrameListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanFrameList> _instance;
} _CanFrameList_default_instance_;
class CanFdFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanFdFrame> _instance;
} _CanFdFrame_default_instance_;
class CanFdFrameListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanFdFrameList> _instance;
} _CanFdFrameList_default_instance_;
}  // namespace perception
}  // namespace can_dev
}  // namespace phoenix
static void InitDefaultsscc_info_CanFdFrame_can_5fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::can_dev::perception::_CanFdFrame_default_instance_;
    new (ptr) ::phoenix::can_dev::perception::CanFdFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::can_dev::perception::CanFdFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanFdFrame_can_5fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CanFdFrame_can_5fframe_2eproto}, {}};

static void InitDefaultsscc_info_CanFdFrameList_can_5fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::can_dev::perception::_CanFdFrameList_default_instance_;
    new (ptr) ::phoenix::can_dev::perception::CanFdFrameList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::can_dev::perception::CanFdFrameList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanFdFrameList_can_5fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CanFdFrameList_can_5fframe_2eproto}, {
      &scc_info_CanFdFrame_can_5fframe_2eproto.base,}};

static void InitDefaultsscc_info_CanFrame_can_5fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::can_dev::perception::_CanFrame_default_instance_;
    new (ptr) ::phoenix::can_dev::perception::CanFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::can_dev::perception::CanFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanFrame_can_5fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CanFrame_can_5fframe_2eproto}, {}};

static void InitDefaultsscc_info_CanFrameList_can_5fframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::can_dev::perception::_CanFrameList_default_instance_;
    new (ptr) ::phoenix::can_dev::perception::CanFrameList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::can_dev::perception::CanFrameList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanFrameList_can_5fframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CanFrameList_can_5fframe_2eproto}, {
      &scc_info_CanFrame_can_5fframe_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_can_5fframe_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_can_5fframe_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_can_5fframe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_can_5fframe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, rtr_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, ext_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, data_len_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, data_1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrame, data_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrameList, can_frame_num_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFrameList, can_frame_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, fd_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, rtr_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, ext_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, brs_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, esi_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_len_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_3_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_4_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_5_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_6_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_7_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_8_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_9_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_10_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_11_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_12_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_13_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_14_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_15_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrame, data_16_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrameList, canfd_frame_num_),
  PROTOBUF_FIELD_OFFSET(::phoenix::can_dev::perception::CanFdFrameList, canfd_frame_list_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::phoenix::can_dev::perception::CanFrame)},
  { 19, 26, sizeof(::phoenix::can_dev::perception::CanFrameList)},
  { 28, 57, sizeof(::phoenix::can_dev::perception::CanFdFrame)},
  { 81, 88, sizeof(::phoenix::can_dev::perception::CanFdFrameList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::can_dev::perception::_CanFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::can_dev::perception::_CanFrameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::can_dev::perception::_CanFdFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::can_dev::perception::_CanFdFrameList_default_instance_),
};

const char descriptor_table_protodef_can_5fframe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017can_frame.proto\022\032phoenix.can_dev.perce"
  "ption\"|\n\010CanFrame\022\022\n\ntime_stamp\030\001 \001(\003\022\n\n"
  "\002id\030\002 \001(\r\022\013\n\003RTR\030\003 \001(\r\022\013\n\003EXT\030\004 \001(\r\022\020\n\010d"
  "ata_len\030\005 \001(\005\022\021\n\006data_1\030\006 \001(\r:\0010\022\021\n\006data"
  "_2\030\007 \001(\r:\0010\"f\n\014CanFrameList\022\030\n\rcan_frame"
  "_num\030\001 \001(\r:\0010\022<\n\016can_frame_list\030\002 \003(\0132$."
  "phoenix.can_dev.perception.CanFrame\"\312\003\n\n"
  "CanFdFrame\022\022\n\ntime_stamp\030\001 \001(\003\022\r\n\002id\030\002 \001"
  "(\r:\0010\022\r\n\002FD\030\003 \001(\r:\0010\022\016\n\003RTR\030\004 \001(\r:\0010\022\016\n\003"
  "EXT\030\005 \001(\r:\0010\022\016\n\003BRS\030\006 \001(\r:\0010\022\016\n\003ESI\030\007 \001("
  "\r:\0010\022\023\n\010data_len\030\010 \001(\005:\0010\022\021\n\006data_1\030\t \001("
  "\r:\0010\022\021\n\006data_2\030\n \001(\r:\0010\022\021\n\006data_3\030\013 \001(\r:"
  "\0010\022\021\n\006data_4\030\014 \001(\r:\0010\022\021\n\006data_5\030\r \001(\r:\0010"
  "\022\021\n\006data_6\030\016 \001(\r:\0010\022\021\n\006data_7\030\017 \001(\r:\0010\022\021"
  "\n\006data_8\030\020 \001(\r:\0010\022\021\n\006data_9\030\021 \001(\r:\0010\022\022\n\007"
  "data_10\030\022 \001(\r:\0010\022\022\n\007data_11\030\023 \001(\r:\0010\022\022\n\007"
  "data_12\030\024 \001(\r:\0010\022\022\n\007data_13\030\025 \001(\r:\0010\022\022\n\007"
  "data_14\030\026 \001(\r:\0010\022\022\n\007data_15\030\027 \001(\r:\0010\022\022\n\007"
  "data_16\030\030 \001(\r:\0010\"n\n\016CanFdFrameList\022\032\n\017ca"
  "nfd_frame_num\030\001 \001(\r:\0010\022@\n\020canfd_frame_li"
  "st\030\002 \003(\0132&.phoenix.can_dev.perception.Ca"
  "nFdFrame"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_can_5fframe_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_can_5fframe_2eproto_sccs[4] = {
  &scc_info_CanFdFrame_can_5fframe_2eproto.base,
  &scc_info_CanFdFrameList_can_5fframe_2eproto.base,
  &scc_info_CanFrame_can_5fframe_2eproto.base,
  &scc_info_CanFrameList_can_5fframe_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_can_5fframe_2eproto_once;
static bool descriptor_table_can_5fframe_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_can_5fframe_2eproto = {
  &descriptor_table_can_5fframe_2eproto_initialized, descriptor_table_protodef_can_5fframe_2eproto, "can_frame.proto", 848,
  &descriptor_table_can_5fframe_2eproto_once, descriptor_table_can_5fframe_2eproto_sccs, descriptor_table_can_5fframe_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_can_5fframe_2eproto::offsets,
  file_level_metadata_can_5fframe_2eproto, 4, file_level_enum_descriptors_can_5fframe_2eproto, file_level_service_descriptors_can_5fframe_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_can_5fframe_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_can_5fframe_2eproto), true);
namespace phoenix {
namespace can_dev {
namespace perception {

// ===================================================================

void CanFrame::InitAsDefaultInstance() {
}
class CanFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<CanFrame>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CanFrame::CanFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.can_dev.perception.CanFrame)
}
CanFrame::CanFrame(const CanFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_2_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_2_));
  // @@protoc_insertion_point(copy_constructor:phoenix.can_dev.perception.CanFrame)
}

void CanFrame::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_2_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_2_));
}

CanFrame::~CanFrame() {
  // @@protoc_insertion_point(destructor:phoenix.can_dev.perception.CanFrame)
  SharedDtor();
}

void CanFrame::SharedDtor() {
}

void CanFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanFrame& CanFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanFrame_can_5fframe_2eproto.base);
  return *internal_default_instance();
}


void CanFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.can_dev.perception.CanFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_2_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CanFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 RTR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rtr(&has_bits);
          rtr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 EXT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ext(&has_bits);
          ext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_len(&has_bits);
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_1 = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_data_1(&has_bits);
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_2 = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_data_2(&has_bits);
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CanFrame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.can_dev.perception.CanFrame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_stamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RTR = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rtr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 EXT = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ext(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_len = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_data_len(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_1 = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_data_1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_2 = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_data_2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.can_dev.perception.CanFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.can_dev.perception.CanFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CanFrame::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.can_dev.perception.CanFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_stamp(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 RTR = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->rtr(), output);
  }

  // optional uint32 EXT = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->ext(), output);
  }

  // optional int32 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->data_len(), output);
  }

  // optional uint32 data_1 = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->data_1(), output);
  }

  // optional uint32 data_2 = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->data_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.can_dev.perception.CanFrame)
}

::PROTOBUF_NAMESPACE_ID::uint8* CanFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.can_dev.perception.CanFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->time_stamp(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 RTR = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtr(), target);
  }

  // optional uint32 EXT = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->ext(), target);
  }

  // optional int32 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->data_len(), target);
  }

  // optional uint32 data_1 = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->data_1(), target);
  }

  // optional uint32 data_2 = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.can_dev.perception.CanFrame)
  return target;
}

size_t CanFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.can_dev.perception.CanFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 RTR = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rtr());
    }

    // optional uint32 EXT = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ext());
    }

    // optional int32 data_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_len());
    }

    // optional uint32 data_1 = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_1());
    }

    // optional uint32 data_2 = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_2());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.can_dev.perception.CanFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CanFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.can_dev.perception.CanFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.can_dev.perception.CanFrame)
    MergeFrom(*source);
  }
}

void CanFrame::MergeFrom(const CanFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.can_dev.perception.CanFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtr_ = from.rtr_;
    }
    if (cached_has_bits & 0x00000008u) {
      ext_ = from.ext_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_1_ = from.data_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_2_ = from.data_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.can_dev.perception.CanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanFrame::CopyFrom(const CanFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.can_dev.perception.CanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFrame::IsInitialized() const {
  return true;
}

void CanFrame::InternalSwap(CanFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_stamp_, other->time_stamp_);
  swap(id_, other->id_);
  swap(rtr_, other->rtr_);
  swap(ext_, other->ext_);
  swap(data_len_, other->data_len_);
  swap(data_1_, other->data_1_);
  swap(data_2_, other->data_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanFrameList::InitAsDefaultInstance() {
}
class CanFrameList::_Internal {
 public:
  using HasBits = decltype(std::declval<CanFrameList>()._has_bits_);
  static void set_has_can_frame_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CanFrameList::CanFrameList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.can_dev.perception.CanFrameList)
}
CanFrameList::CanFrameList(const CanFrameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      can_frame_list_(from.can_frame_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  can_frame_num_ = from.can_frame_num_;
  // @@protoc_insertion_point(copy_constructor:phoenix.can_dev.perception.CanFrameList)
}

void CanFrameList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CanFrameList_can_5fframe_2eproto.base);
  can_frame_num_ = 0u;
}

CanFrameList::~CanFrameList() {
  // @@protoc_insertion_point(destructor:phoenix.can_dev.perception.CanFrameList)
  SharedDtor();
}

void CanFrameList::SharedDtor() {
}

void CanFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanFrameList& CanFrameList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanFrameList_can_5fframe_2eproto.base);
  return *internal_default_instance();
}


void CanFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.can_dev.perception.CanFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_frame_list_.Clear();
  can_frame_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CanFrameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 can_frame_num = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_frame_num(&has_bits);
          can_frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.can_dev.perception.CanFrame can_frame_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_can_frame_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CanFrameList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.can_dev.perception.CanFrameList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 can_frame_num = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_can_frame_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.can_dev.perception.CanFrame can_frame_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_can_frame_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.can_dev.perception.CanFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.can_dev.perception.CanFrameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CanFrameList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.can_dev.perception.CanFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 can_frame_num = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->can_frame_num(), output);
  }

  // repeated .phoenix.can_dev.perception.CanFrame can_frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->can_frame_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->can_frame_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.can_dev.perception.CanFrameList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CanFrameList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.can_dev.perception.CanFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 can_frame_num = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->can_frame_num(), target);
  }

  // repeated .phoenix.can_dev.perception.CanFrame can_frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->can_frame_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->can_frame_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.can_dev.perception.CanFrameList)
  return target;
}

size_t CanFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.can_dev.perception.CanFrameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.can_dev.perception.CanFrame can_frame_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->can_frame_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->can_frame_list(static_cast<int>(i)));
    }
  }

  // optional uint32 can_frame_num = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->can_frame_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanFrameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.can_dev.perception.CanFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CanFrameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanFrameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.can_dev.perception.CanFrameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.can_dev.perception.CanFrameList)
    MergeFrom(*source);
  }
}

void CanFrameList::MergeFrom(const CanFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.can_dev.perception.CanFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  can_frame_list_.MergeFrom(from.can_frame_list_);
  if (from.has_can_frame_num()) {
    set_can_frame_num(from.can_frame_num());
  }
}

void CanFrameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.can_dev.perception.CanFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanFrameList::CopyFrom(const CanFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.can_dev.perception.CanFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFrameList::IsInitialized() const {
  return true;
}

void CanFrameList::InternalSwap(CanFrameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&can_frame_list_)->InternalSwap(CastToBase(&other->can_frame_list_));
  swap(can_frame_num_, other->can_frame_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanFrameList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanFdFrame::InitAsDefaultInstance() {
}
class CanFdFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<CanFdFrame>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ext(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_esi(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data_len(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_data_1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_data_2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_data_3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_data_4(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_data_5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_data_6(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_data_7(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_data_8(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_data_9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_data_10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_data_11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_data_12(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_data_13(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_data_14(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_data_15(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_data_16(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

CanFdFrame::CanFdFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.can_dev.perception.CanFdFrame)
}
CanFdFrame::CanFdFrame(const CanFdFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_16_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_16_));
  // @@protoc_insertion_point(copy_constructor:phoenix.can_dev.perception.CanFdFrame)
}

void CanFdFrame::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_16_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_16_));
}

CanFdFrame::~CanFdFrame() {
  // @@protoc_insertion_point(destructor:phoenix.can_dev.perception.CanFdFrame)
  SharedDtor();
}

void CanFdFrame::SharedDtor() {
}

void CanFdFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanFdFrame& CanFdFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanFdFrame_can_5fframe_2eproto.base);
  return *internal_default_instance();
}


void CanFdFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.can_dev.perception.CanFdFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_len_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_len_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&data_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_8_) -
        reinterpret_cast<char*>(&data_1_)) + sizeof(data_8_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&data_9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_16_) -
        reinterpret_cast<char*>(&data_9_)) + sizeof(data_16_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CanFdFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 FD = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 RTR = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rtr(&has_bits);
          rtr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 EXT = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ext(&has_bits);
          ext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 BRS = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_brs(&has_bits);
          brs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ESI = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_esi(&has_bits);
          esi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_len = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_data_len(&has_bits);
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_1 = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_data_1(&has_bits);
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_2 = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_data_2(&has_bits);
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_3 = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_data_3(&has_bits);
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_4 = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_data_4(&has_bits);
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_5 = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_data_5(&has_bits);
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_6 = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_data_6(&has_bits);
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_7 = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_data_7(&has_bits);
          data_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_8 = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_data_8(&has_bits);
          data_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_9 = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_data_9(&has_bits);
          data_9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_10 = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_data_10(&has_bits);
          data_10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_11 = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_data_11(&has_bits);
          data_11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_12 = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_data_12(&has_bits);
          data_12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_13 = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_data_13(&has_bits);
          data_13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_14 = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_data_14(&has_bits);
          data_14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_15 = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_data_15(&has_bits);
          data_15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_16 = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_data_16(&has_bits);
          data_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CanFdFrame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.can_dev.perception.CanFdFrame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_stamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FD = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RTR = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_rtr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 EXT = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ext(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BRS = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_brs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ESI = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_esi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &esi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_len = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_data_len(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_1 = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_data_1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_2 = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_data_2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_3 = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_data_3(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_4 = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_data_4(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_5 = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_data_5(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_6 = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_data_6(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_7 = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_data_7(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_8 = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_data_8(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_9 = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_data_9(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_10 = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_data_10(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_11 = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_data_11(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_12 = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_data_12(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_13 = 21 [default = 0];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_data_13(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_14 = 22 [default = 0];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_data_14(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_15 = 23 [default = 0];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_data_15(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_16 = 24 [default = 0];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_data_16(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.can_dev.perception.CanFdFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.can_dev.perception.CanFdFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CanFdFrame::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.can_dev.perception.CanFdFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_stamp(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 FD = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->fd(), output);
  }

  // optional uint32 RTR = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->rtr(), output);
  }

  // optional uint32 EXT = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->ext(), output);
  }

  // optional uint32 BRS = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->brs(), output);
  }

  // optional uint32 ESI = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->esi(), output);
  }

  // optional int32 data_len = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->data_len(), output);
  }

  // optional uint32 data_1 = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->data_1(), output);
  }

  // optional uint32 data_2 = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->data_2(), output);
  }

  // optional uint32 data_3 = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->data_3(), output);
  }

  // optional uint32 data_4 = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->data_4(), output);
  }

  // optional uint32 data_5 = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->data_5(), output);
  }

  // optional uint32 data_6 = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->data_6(), output);
  }

  // optional uint32 data_7 = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->data_7(), output);
  }

  // optional uint32 data_8 = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->data_8(), output);
  }

  // optional uint32 data_9 = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->data_9(), output);
  }

  // optional uint32 data_10 = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->data_10(), output);
  }

  // optional uint32 data_11 = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->data_11(), output);
  }

  // optional uint32 data_12 = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->data_12(), output);
  }

  // optional uint32 data_13 = 21 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->data_13(), output);
  }

  // optional uint32 data_14 = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(22, this->data_14(), output);
  }

  // optional uint32 data_15 = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(23, this->data_15(), output);
  }

  // optional uint32 data_16 = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(24, this->data_16(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.can_dev.perception.CanFdFrame)
}

::PROTOBUF_NAMESPACE_ID::uint8* CanFdFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.can_dev.perception.CanFdFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->time_stamp(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 FD = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->fd(), target);
  }

  // optional uint32 RTR = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->rtr(), target);
  }

  // optional uint32 EXT = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->ext(), target);
  }

  // optional uint32 BRS = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->brs(), target);
  }

  // optional uint32 ESI = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->esi(), target);
  }

  // optional int32 data_len = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->data_len(), target);
  }

  // optional uint32 data_1 = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->data_1(), target);
  }

  // optional uint32 data_2 = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->data_2(), target);
  }

  // optional uint32 data_3 = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->data_3(), target);
  }

  // optional uint32 data_4 = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->data_4(), target);
  }

  // optional uint32 data_5 = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->data_5(), target);
  }

  // optional uint32 data_6 = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->data_6(), target);
  }

  // optional uint32 data_7 = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->data_7(), target);
  }

  // optional uint32 data_8 = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->data_8(), target);
  }

  // optional uint32 data_9 = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->data_9(), target);
  }

  // optional uint32 data_10 = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->data_10(), target);
  }

  // optional uint32 data_11 = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->data_11(), target);
  }

  // optional uint32 data_12 = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->data_12(), target);
  }

  // optional uint32 data_13 = 21 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->data_13(), target);
  }

  // optional uint32 data_14 = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->data_14(), target);
  }

  // optional uint32 data_15 = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->data_15(), target);
  }

  // optional uint32 data_16 = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->data_16(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.can_dev.perception.CanFdFrame)
  return target;
}

size_t CanFdFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.can_dev.perception.CanFdFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }

    // optional uint32 id = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 FD = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fd());
    }

    // optional uint32 RTR = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rtr());
    }

    // optional uint32 EXT = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ext());
    }

    // optional uint32 BRS = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->brs());
    }

    // optional uint32 ESI = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->esi());
    }

    // optional int32 data_len = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_len());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 data_1 = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_1());
    }

    // optional uint32 data_2 = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_2());
    }

    // optional uint32 data_3 = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_3());
    }

    // optional uint32 data_4 = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_4());
    }

    // optional uint32 data_5 = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_5());
    }

    // optional uint32 data_6 = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_6());
    }

    // optional uint32 data_7 = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_7());
    }

    // optional uint32 data_8 = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_8());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 data_9 = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_9());
    }

    // optional uint32 data_10 = 18 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_10());
    }

    // optional uint32 data_11 = 19 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_11());
    }

    // optional uint32 data_12 = 20 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_12());
    }

    // optional uint32 data_13 = 21 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_13());
    }

    // optional uint32 data_14 = 22 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_14());
    }

    // optional uint32 data_15 = 23 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_15());
    }

    // optional uint32 data_16 = 24 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_16());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanFdFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.can_dev.perception.CanFdFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CanFdFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanFdFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.can_dev.perception.CanFdFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.can_dev.perception.CanFdFrame)
    MergeFrom(*source);
  }
}

void CanFdFrame::MergeFrom(const CanFdFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.can_dev.perception.CanFdFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtr_ = from.rtr_;
    }
    if (cached_has_bits & 0x00000010u) {
      ext_ = from.ext_;
    }
    if (cached_has_bits & 0x00000020u) {
      brs_ = from.brs_;
    }
    if (cached_has_bits & 0x00000040u) {
      esi_ = from.esi_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_len_ = from.data_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      data_1_ = from.data_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      data_2_ = from.data_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      data_3_ = from.data_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      data_4_ = from.data_4_;
    }
    if (cached_has_bits & 0x00001000u) {
      data_5_ = from.data_5_;
    }
    if (cached_has_bits & 0x00002000u) {
      data_6_ = from.data_6_;
    }
    if (cached_has_bits & 0x00004000u) {
      data_7_ = from.data_7_;
    }
    if (cached_has_bits & 0x00008000u) {
      data_8_ = from.data_8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      data_9_ = from.data_9_;
    }
    if (cached_has_bits & 0x00020000u) {
      data_10_ = from.data_10_;
    }
    if (cached_has_bits & 0x00040000u) {
      data_11_ = from.data_11_;
    }
    if (cached_has_bits & 0x00080000u) {
      data_12_ = from.data_12_;
    }
    if (cached_has_bits & 0x00100000u) {
      data_13_ = from.data_13_;
    }
    if (cached_has_bits & 0x00200000u) {
      data_14_ = from.data_14_;
    }
    if (cached_has_bits & 0x00400000u) {
      data_15_ = from.data_15_;
    }
    if (cached_has_bits & 0x00800000u) {
      data_16_ = from.data_16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanFdFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.can_dev.perception.CanFdFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanFdFrame::CopyFrom(const CanFdFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.can_dev.perception.CanFdFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFdFrame::IsInitialized() const {
  return true;
}

void CanFdFrame::InternalSwap(CanFdFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_stamp_, other->time_stamp_);
  swap(id_, other->id_);
  swap(fd_, other->fd_);
  swap(rtr_, other->rtr_);
  swap(ext_, other->ext_);
  swap(brs_, other->brs_);
  swap(esi_, other->esi_);
  swap(data_len_, other->data_len_);
  swap(data_1_, other->data_1_);
  swap(data_2_, other->data_2_);
  swap(data_3_, other->data_3_);
  swap(data_4_, other->data_4_);
  swap(data_5_, other->data_5_);
  swap(data_6_, other->data_6_);
  swap(data_7_, other->data_7_);
  swap(data_8_, other->data_8_);
  swap(data_9_, other->data_9_);
  swap(data_10_, other->data_10_);
  swap(data_11_, other->data_11_);
  swap(data_12_, other->data_12_);
  swap(data_13_, other->data_13_);
  swap(data_14_, other->data_14_);
  swap(data_15_, other->data_15_);
  swap(data_16_, other->data_16_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanFdFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanFdFrameList::InitAsDefaultInstance() {
}
class CanFdFrameList::_Internal {
 public:
  using HasBits = decltype(std::declval<CanFdFrameList>()._has_bits_);
  static void set_has_canfd_frame_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CanFdFrameList::CanFdFrameList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.can_dev.perception.CanFdFrameList)
}
CanFdFrameList::CanFdFrameList(const CanFdFrameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      canfd_frame_list_(from.canfd_frame_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canfd_frame_num_ = from.canfd_frame_num_;
  // @@protoc_insertion_point(copy_constructor:phoenix.can_dev.perception.CanFdFrameList)
}

void CanFdFrameList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CanFdFrameList_can_5fframe_2eproto.base);
  canfd_frame_num_ = 0u;
}

CanFdFrameList::~CanFdFrameList() {
  // @@protoc_insertion_point(destructor:phoenix.can_dev.perception.CanFdFrameList)
  SharedDtor();
}

void CanFdFrameList::SharedDtor() {
}

void CanFdFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanFdFrameList& CanFdFrameList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanFdFrameList_can_5fframe_2eproto.base);
  return *internal_default_instance();
}


void CanFdFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.can_dev.perception.CanFdFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  canfd_frame_list_.Clear();
  canfd_frame_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CanFdFrameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 canfd_frame_num = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_canfd_frame_num(&has_bits);
          canfd_frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.can_dev.perception.CanFdFrame canfd_frame_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_canfd_frame_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CanFdFrameList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.can_dev.perception.CanFdFrameList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 canfd_frame_num = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_canfd_frame_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canfd_frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.can_dev.perception.CanFdFrame canfd_frame_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_canfd_frame_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.can_dev.perception.CanFdFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.can_dev.perception.CanFdFrameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CanFdFrameList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.can_dev.perception.CanFdFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 canfd_frame_num = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->canfd_frame_num(), output);
  }

  // repeated .phoenix.can_dev.perception.CanFdFrame canfd_frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->canfd_frame_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->canfd_frame_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.can_dev.perception.CanFdFrameList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CanFdFrameList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.can_dev.perception.CanFdFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 canfd_frame_num = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->canfd_frame_num(), target);
  }

  // repeated .phoenix.can_dev.perception.CanFdFrame canfd_frame_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->canfd_frame_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->canfd_frame_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.can_dev.perception.CanFdFrameList)
  return target;
}

size_t CanFdFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.can_dev.perception.CanFdFrameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.can_dev.perception.CanFdFrame canfd_frame_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->canfd_frame_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->canfd_frame_list(static_cast<int>(i)));
    }
  }

  // optional uint32 canfd_frame_num = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->canfd_frame_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanFdFrameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.can_dev.perception.CanFdFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CanFdFrameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanFdFrameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.can_dev.perception.CanFdFrameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.can_dev.perception.CanFdFrameList)
    MergeFrom(*source);
  }
}

void CanFdFrameList::MergeFrom(const CanFdFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.can_dev.perception.CanFdFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  canfd_frame_list_.MergeFrom(from.canfd_frame_list_);
  if (from.has_canfd_frame_num()) {
    set_canfd_frame_num(from.canfd_frame_num());
  }
}

void CanFdFrameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.can_dev.perception.CanFdFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanFdFrameList::CopyFrom(const CanFdFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.can_dev.perception.CanFdFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFdFrameList::IsInitialized() const {
  return true;
}

void CanFdFrameList::InternalSwap(CanFdFrameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&canfd_frame_list_)->InternalSwap(CastToBase(&other->canfd_frame_list_));
  swap(canfd_frame_num_, other->canfd_frame_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanFdFrameList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace can_dev
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::can_dev::perception::CanFrame* Arena::CreateMaybeMessage< ::phoenix::can_dev::perception::CanFrame >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::can_dev::perception::CanFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::can_dev::perception::CanFrameList* Arena::CreateMaybeMessage< ::phoenix::can_dev::perception::CanFrameList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::can_dev::perception::CanFrameList >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::can_dev::perception::CanFdFrame* Arena::CreateMaybeMessage< ::phoenix::can_dev::perception::CanFdFrame >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::can_dev::perception::CanFdFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::can_dev::perception::CanFdFrameList* Arena::CreateMaybeMessage< ::phoenix::can_dev::perception::CanFdFrameList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::can_dev::perception::CanFdFrameList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
