// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_result.proto

#include "planning_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto;
namespace phoenix {
namespace msg {
namespace planning {
class PlanningResult_TarTrj_PosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_TarTrj_Pos> _instance;
} _PlanningResult_TarTrj_Pos_default_instance_;
class PlanningResult_TarTrj_LatErr_SamplesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_TarTrj_LatErr_Samples> _instance;
} _PlanningResult_TarTrj_LatErr_Samples_default_instance_;
class PlanningResult_TarTrj_LatErrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_TarTrj_LatErr> _instance;
} _PlanningResult_TarTrj_LatErr_default_instance_;
class PlanningResult_TarTrj_TrjPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_TarTrj_TrjPoint> _instance;
} _PlanningResult_TarTrj_TrjPoint_default_instance_;
class PlanningResult_TarTrjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_TarTrj> _instance;
} _PlanningResult_TarTrj_default_instance_;
class PlanningResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult> _instance;
} _PlanningResult_default_instance_;
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_PlanningResult_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanningResult_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PlanningResult_planning_5fresult_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_PlanningResult_TarTrj_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult_TarTrj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult_TarTrj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PlanningResult_TarTrj_planning_5fresult_2eproto}, {
      &scc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto.base,
      &scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto.base,
      &scc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_TarTrj_LatErr_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto}, {
      &scc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_TarTrj_LatErr_Samples_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto}, {}};

static void InitDefaultsscc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_TarTrj_Pos_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult_TarTrj_Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto}, {}};

static void InitDefaultsscc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningResult_TarTrj_TrjPoint_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planning_5fresult_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_planning_5fresult_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planning_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planning_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, h_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, c_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, s_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_Pos, l_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, lat_err_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, lat_err_chg_rate_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, yaw_err_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples, yaw_err_chg_rate_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr, moving_flag_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr, samples_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, h_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, c_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint, s_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, timestamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, curr_pos_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, leading_pos_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, lat_err_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, trj_direction_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, points_num_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult_TarTrj, points_),
  3,
  0,
  1,
  2,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, cur_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_driving_mode_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, enable_eps_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, enable_throttle_sys_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, enable_ebs_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, hold_steering_wheel_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, release_throttle_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_turn_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_brake_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_v_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_a_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningResult, tar_trj_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  13,
  11,
  12,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::phoenix::msg::planning::PlanningResult_TarTrj_Pos)},
  { 17, 26, sizeof(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples)},
  { 30, 37, sizeof(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr)},
  { 39, 49, sizeof(::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint)},
  { 54, 66, sizeof(::phoenix::msg::planning::PlanningResult_TarTrj)},
  { 73, 92, sizeof(::phoenix::msg::planning::PlanningResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_TarTrj_Pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_TarTrj_LatErr_Samples_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_TarTrj_LatErr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_TarTrj_TrjPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningResult_default_instance_),
};

const char descriptor_table_protodef_planning_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025planning_result.proto\022\024phoenix.msg.pla"
  "nning\032\014header.proto\"\370\016\n\016PlanningResult\022*"
  "\n\006header\030\001 \001(\0132\032.phoenix.msg.common.Head"
  "er\022\025\n\ncur_status\030\002 \001(\005:\0010\022`\n\020tar_driving"
  "_mode\030\003 \001(\01620.phoenix.msg.planning.Plann"
  "ingResult.DrivingMode:\024DRIVING_MODE_INVA"
  "LID\022\031\n\nenable_eps\030\004 \001(\010:\005false\022\"\n\023enable"
  "_throttle_sys\030\005 \001(\010:\005false\022\031\n\nenable_ebs"
  "\030\006 \001(\010:\005false\022\"\n\023hold_steering_wheel\030\007 \001"
  "(\010:\005false\022\037\n\020release_throttle\030\010 \001(\010:\005fal"
  "se\022I\n\010tar_gear\030\t \001(\0162).phoenix.msg.plann"
  "ing.PlanningResult.Gear:\014GEAR_INVALID\022W\n"
  "\rtar_turn_lamp\030\n \001(\0162-.phoenix.msg.plann"
  "ing.PlanningResult.TurnLamp:\021TURN_LAMP_I"
  "NVALID\022K\n\016tar_brake_lamp\030\013 \001(\0162).phoenix"
  ".msg.planning.PlanningResult.Lamp:\010LAMP_"
  "OFF\022\020\n\005tar_v\030\014 \001(\001:\0010\022\020\n\005tar_a\030\r \001(\001:\0010\022"
  "<\n\007tar_trj\030\016 \001(\0132+.phoenix.msg.planning."
  "PlanningResult.TarTrj\032\264\006\n\006TarTrj\022\024\n\ttime"
  "stamp\030\001 \001(\003:\0010\022A\n\010curr_pos\030\002 \001(\0132/.phoen"
  "ix.msg.planning.PlanningResult.TarTrj.Po"
  "s\022D\n\013leading_pos\030\003 \001(\0132/.phoenix.msg.pla"
  "nning.PlanningResult.TarTrj.Pos\022C\n\007lat_e"
  "rr\030\004 \001(\01322.phoenix.msg.planning.Planning"
  "Result.TarTrj.LatErr\022_\n\rtrj_direction\030\005 "
  "\001(\01621.phoenix.msg.planning.PlanningResul"
  "t.TrjDirection:\025TRJ_DIRECTION_FORWARD\022\025\n"
  "\npoints_num\030\006 \001(\005:\0010\022D\n\006points\030\007 \003(\01324.p"
  "hoenix.msg.planning.PlanningResult.TarTr"
  "j.TrjPoint\032Y\n\003Pos\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001"
  "(\001:\0010\022\014\n\001h\030\003 \001(\001:\0010\022\014\n\001c\030\004 \001(\001:\0010\022\014\n\001s\030\005"
  " \001(\001:\0010\022\014\n\001l\030\006 \001(\001:\0010\032\332\001\n\006LatErr\022\026\n\013movi"
  "ng_flag\030\001 \001(\005:\0010\022K\n\007samples\030\002 \003(\0132:.phoe"
  "nix.msg.planning.PlanningResult.TarTrj.L"
  "atErr.Samples\032k\n\007Samples\022\022\n\007lat_err\030\001 \001("
  "\001:\0010\022\033\n\020lat_err_chg_rate\030\002 \001(\001:\0010\022\022\n\007yaw"
  "_err\030\003 \001(\001:\0010\022\033\n\020yaw_err_chg_rate\030\004 \001(\001:"
  "\0010\032P\n\010TrjPoint\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:"
  "\0010\022\014\n\001h\030\003 \001(\001:\0010\022\014\n\001c\030\004 \001(\001:\0010\022\014\n\001s\030\005 \001("
  "\001:\0010\"Z\n\013DrivingMode\022\030\n\024DRIVING_MODE_INVA"
  "LID\020\000\022\027\n\023DRIVING_MODE_MANUAL\020\001\022\030\n\024DRIVIN"
  "G_MODE_ROBOTIC\020\002\"H\n\004Gear\022\020\n\014GEAR_INVALID"
  "\020\000\022\n\n\006GEAR_P\020\001\022\n\n\006GEAR_N\020\002\022\n\n\006GEAR_R\020\003\022\n"
  "\n\006GEAR_D\020\004\"v\n\010TurnLamp\022\025\n\021TURN_LAMP_INVA"
  "LID\020\000\022\021\n\rTURN_LAMP_OFF\020\001\022\022\n\016TURN_LAMP_LE"
  "FT\020\002\022\023\n\017TURN_LAMP_RIGHT\020\003\022\027\n\023TURN_LAMP_E"
  "MERGENCY\020\004\"3\n\004Lamp\022\020\n\014LAMP_INVALID\020\000\022\014\n\010"
  "LAMP_OFF\020\001\022\013\n\007LAMP_ON\020\002\"E\n\014TrjDirection\022"
  "\031\n\025TRJ_DIRECTION_FORWARD\020\000\022\032\n\026TRJ_DIRECT"
  "ION_BACKWARD\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planning_5fresult_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planning_5fresult_2eproto_sccs[6] = {
  &scc_info_PlanningResult_planning_5fresult_2eproto.base,
  &scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto.base,
  &scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto.base,
  &scc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto.base,
  &scc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto.base,
  &scc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planning_5fresult_2eproto_once;
static bool descriptor_table_planning_5fresult_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_5fresult_2eproto = {
  &descriptor_table_planning_5fresult_2eproto_initialized, descriptor_table_protodef_planning_5fresult_2eproto, "planning_result.proto", 1974,
  &descriptor_table_planning_5fresult_2eproto_once, descriptor_table_planning_5fresult_2eproto_sccs, descriptor_table_planning_5fresult_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_planning_5fresult_2eproto::offsets,
  file_level_metadata_planning_5fresult_2eproto, 6, file_level_enum_descriptors_planning_5fresult_2eproto, file_level_service_descriptors_planning_5fresult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planning_5fresult_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planning_5fresult_2eproto), true);
namespace phoenix {
namespace msg {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fresult_2eproto);
  return file_level_enum_descriptors_planning_5fresult_2eproto[0];
}
bool PlanningResult_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlanningResult_DrivingMode PlanningResult::DRIVING_MODE_INVALID;
constexpr PlanningResult_DrivingMode PlanningResult::DRIVING_MODE_MANUAL;
constexpr PlanningResult_DrivingMode PlanningResult::DRIVING_MODE_ROBOTIC;
constexpr PlanningResult_DrivingMode PlanningResult::DrivingMode_MIN;
constexpr PlanningResult_DrivingMode PlanningResult::DrivingMode_MAX;
constexpr int PlanningResult::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_Gear_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fresult_2eproto);
  return file_level_enum_descriptors_planning_5fresult_2eproto[1];
}
bool PlanningResult_Gear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlanningResult_Gear PlanningResult::GEAR_INVALID;
constexpr PlanningResult_Gear PlanningResult::GEAR_P;
constexpr PlanningResult_Gear PlanningResult::GEAR_N;
constexpr PlanningResult_Gear PlanningResult::GEAR_R;
constexpr PlanningResult_Gear PlanningResult::GEAR_D;
constexpr PlanningResult_Gear PlanningResult::Gear_MIN;
constexpr PlanningResult_Gear PlanningResult::Gear_MAX;
constexpr int PlanningResult::Gear_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_TurnLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fresult_2eproto);
  return file_level_enum_descriptors_planning_5fresult_2eproto[2];
}
bool PlanningResult_TurnLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlanningResult_TurnLamp PlanningResult::TURN_LAMP_INVALID;
constexpr PlanningResult_TurnLamp PlanningResult::TURN_LAMP_OFF;
constexpr PlanningResult_TurnLamp PlanningResult::TURN_LAMP_LEFT;
constexpr PlanningResult_TurnLamp PlanningResult::TURN_LAMP_RIGHT;
constexpr PlanningResult_TurnLamp PlanningResult::TURN_LAMP_EMERGENCY;
constexpr PlanningResult_TurnLamp PlanningResult::TurnLamp_MIN;
constexpr PlanningResult_TurnLamp PlanningResult::TurnLamp_MAX;
constexpr int PlanningResult::TurnLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_Lamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fresult_2eproto);
  return file_level_enum_descriptors_planning_5fresult_2eproto[3];
}
bool PlanningResult_Lamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlanningResult_Lamp PlanningResult::LAMP_INVALID;
constexpr PlanningResult_Lamp PlanningResult::LAMP_OFF;
constexpr PlanningResult_Lamp PlanningResult::LAMP_ON;
constexpr PlanningResult_Lamp PlanningResult::Lamp_MIN;
constexpr PlanningResult_Lamp PlanningResult::Lamp_MAX;
constexpr int PlanningResult::Lamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_TrjDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planning_5fresult_2eproto);
  return file_level_enum_descriptors_planning_5fresult_2eproto[4];
}
bool PlanningResult_TrjDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlanningResult_TrjDirection PlanningResult::TRJ_DIRECTION_FORWARD;
constexpr PlanningResult_TrjDirection PlanningResult::TRJ_DIRECTION_BACKWARD;
constexpr PlanningResult_TrjDirection PlanningResult::TrjDirection_MIN;
constexpr PlanningResult_TrjDirection PlanningResult::TrjDirection_MAX;
constexpr int PlanningResult::TrjDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PlanningResult_TarTrj_Pos::InitAsDefaultInstance() {
}
class PlanningResult_TarTrj_Pos::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult_TarTrj_Pos>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

PlanningResult_TarTrj_Pos::PlanningResult_TarTrj_Pos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
}
PlanningResult_TarTrj_Pos::PlanningResult_TarTrj_Pos(const PlanningResult_TarTrj_Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&x_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
}

void PlanningResult_TarTrj_Pos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&x_)) + sizeof(l_));
}

PlanningResult_TarTrj_Pos::~PlanningResult_TarTrj_Pos() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  SharedDtor();
}

void PlanningResult_TarTrj_Pos::SharedDtor() {
}

void PlanningResult_TarTrj_Pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_TarTrj_Pos& PlanningResult_TarTrj_Pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_TarTrj_Pos_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_TarTrj_Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&l_) -
        reinterpret_cast<char*>(&x_)) + sizeof(l_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_TarTrj_Pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double h = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double l = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_TarTrj_Pos::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double h = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_c(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_l(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_TarTrj_Pos::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double h = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->h(), output);
  }

  // optional double c = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->c(), output);
  }

  // optional double s = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->s(), output);
  }

  // optional double l = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult_TarTrj_Pos::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double h = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->h(), target);
  }

  // optional double c = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->c(), target);
  }

  // optional double s = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->s(), target);
  }

  // optional double l = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  return target;
}

size_t PlanningResult_TarTrj_Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double h = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double c = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double s = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double l = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_TarTrj_Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult_TarTrj_Pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult_TarTrj_Pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
    MergeFrom(*source);
  }
}

void PlanningResult_TarTrj_Pos::MergeFrom(const PlanningResult_TarTrj_Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      h_ = from.h_;
    }
    if (cached_has_bits & 0x00000008u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000020u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningResult_TarTrj_Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult_TarTrj_Pos::CopyFrom(const PlanningResult_TarTrj_Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_TarTrj_Pos::IsInitialized() const {
  return true;
}

void PlanningResult_TarTrj_Pos::InternalSwap(PlanningResult_TarTrj_Pos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(h_, other->h_);
  swap(c_, other->c_);
  swap(s_, other->s_);
  swap(l_, other->l_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult_TarTrj_Pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningResult_TarTrj_LatErr_Samples::InitAsDefaultInstance() {
}
class PlanningResult_TarTrj_LatErr_Samples::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult_TarTrj_LatErr_Samples>()._has_bits_);
  static void set_has_lat_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lat_err_chg_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw_err_chg_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlanningResult_TarTrj_LatErr_Samples::PlanningResult_TarTrj_LatErr_Samples()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
}
PlanningResult_TarTrj_LatErr_Samples::PlanningResult_TarTrj_LatErr_Samples(const PlanningResult_TarTrj_LatErr_Samples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_err_, &from.lat_err_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_err_chg_rate_) -
    reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
}

void PlanningResult_TarTrj_LatErr_Samples::SharedCtor() {
  ::memset(&lat_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_err_chg_rate_) -
      reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
}

PlanningResult_TarTrj_LatErr_Samples::~PlanningResult_TarTrj_LatErr_Samples() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  SharedDtor();
}

void PlanningResult_TarTrj_LatErr_Samples::SharedDtor() {
}

void PlanningResult_TarTrj_LatErr_Samples::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_TarTrj_LatErr_Samples& PlanningResult_TarTrj_LatErr_Samples::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_TarTrj_LatErr_Samples_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_TarTrj_LatErr_Samples::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lat_err_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_err_chg_rate_) -
        reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_TarTrj_LatErr_Samples::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lat_err = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lat_err(&has_bits);
          lat_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lat_err_chg_rate = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lat_err_chg_rate(&has_bits);
          lat_err_chg_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw_err = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_yaw_err(&has_bits);
          yaw_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw_err_chg_rate = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_yaw_err_chg_rate(&has_bits);
          yaw_err_chg_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_TarTrj_LatErr_Samples::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat_err = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_lat_err(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat_err_chg_rate = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_lat_err_chg_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_err_chg_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_err = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_yaw_err(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_err_chg_rate = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_yaw_err_chg_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_err_chg_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_TarTrj_LatErr_Samples::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lat_err = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->lat_err(), output);
  }

  // optional double lat_err_chg_rate = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->lat_err_chg_rate(), output);
  }

  // optional double yaw_err = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->yaw_err(), output);
  }

  // optional double yaw_err_chg_rate = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->yaw_err_chg_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult_TarTrj_LatErr_Samples::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lat_err = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->lat_err(), target);
  }

  // optional double lat_err_chg_rate = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->lat_err_chg_rate(), target);
  }

  // optional double yaw_err = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw_err(), target);
  }

  // optional double yaw_err_chg_rate = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw_err_chg_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  return target;
}

size_t PlanningResult_TarTrj_LatErr_Samples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double lat_err = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double lat_err_chg_rate = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double yaw_err = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double yaw_err_chg_rate = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_TarTrj_LatErr_Samples::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult_TarTrj_LatErr_Samples* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult_TarTrj_LatErr_Samples>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
    MergeFrom(*source);
  }
}

void PlanningResult_TarTrj_LatErr_Samples::MergeFrom(const PlanningResult_TarTrj_LatErr_Samples& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lat_err_ = from.lat_err_;
    }
    if (cached_has_bits & 0x00000002u) {
      lat_err_chg_rate_ = from.lat_err_chg_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_err_ = from.yaw_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_err_chg_rate_ = from.yaw_err_chg_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningResult_TarTrj_LatErr_Samples::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult_TarTrj_LatErr_Samples::CopyFrom(const PlanningResult_TarTrj_LatErr_Samples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_TarTrj_LatErr_Samples::IsInitialized() const {
  return true;
}

void PlanningResult_TarTrj_LatErr_Samples::InternalSwap(PlanningResult_TarTrj_LatErr_Samples* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lat_err_, other->lat_err_);
  swap(lat_err_chg_rate_, other->lat_err_chg_rate_);
  swap(yaw_err_, other->yaw_err_);
  swap(yaw_err_chg_rate_, other->yaw_err_chg_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult_TarTrj_LatErr_Samples::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningResult_TarTrj_LatErr::InitAsDefaultInstance() {
}
class PlanningResult_TarTrj_LatErr::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult_TarTrj_LatErr>()._has_bits_);
  static void set_has_moving_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlanningResult_TarTrj_LatErr::PlanningResult_TarTrj_LatErr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
}
PlanningResult_TarTrj_LatErr::PlanningResult_TarTrj_LatErr(const PlanningResult_TarTrj_LatErr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moving_flag_ = from.moving_flag_;
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
}

void PlanningResult_TarTrj_LatErr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto.base);
  moving_flag_ = 0;
}

PlanningResult_TarTrj_LatErr::~PlanningResult_TarTrj_LatErr() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  SharedDtor();
}

void PlanningResult_TarTrj_LatErr::SharedDtor() {
}

void PlanningResult_TarTrj_LatErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_TarTrj_LatErr& PlanningResult_TarTrj_LatErr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_TarTrj_LatErr_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_TarTrj_LatErr::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  moving_flag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_TarTrj_LatErr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 moving_flag = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_moving_flag(&has_bits);
          moving_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_TarTrj_LatErr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 moving_flag = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_moving_flag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &moving_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_TarTrj_LatErr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 moving_flag = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->moving_flag(), output);
  }

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->samples(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult_TarTrj_LatErr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 moving_flag = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->moving_flag(), target);
  }

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->samples(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  return target;
}

size_t PlanningResult_TarTrj_LatErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  // optional int32 moving_flag = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->moving_flag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_TarTrj_LatErr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult_TarTrj_LatErr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult_TarTrj_LatErr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
    MergeFrom(*source);
  }
}

void PlanningResult_TarTrj_LatErr::MergeFrom(const PlanningResult_TarTrj_LatErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  if (from.has_moving_flag()) {
    set_moving_flag(from.moving_flag());
  }
}

void PlanningResult_TarTrj_LatErr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult_TarTrj_LatErr::CopyFrom(const PlanningResult_TarTrj_LatErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_TarTrj_LatErr::IsInitialized() const {
  return true;
}

void PlanningResult_TarTrj_LatErr::InternalSwap(PlanningResult_TarTrj_LatErr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  swap(moving_flag_, other->moving_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult_TarTrj_LatErr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningResult_TarTrj_TrjPoint::InitAsDefaultInstance() {
}
class PlanningResult_TarTrj_TrjPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult_TarTrj_TrjPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PlanningResult_TarTrj_TrjPoint::PlanningResult_TarTrj_TrjPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
}
PlanningResult_TarTrj_TrjPoint::PlanningResult_TarTrj_TrjPoint(const PlanningResult_TarTrj_TrjPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
}

void PlanningResult_TarTrj_TrjPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

PlanningResult_TarTrj_TrjPoint::~PlanningResult_TarTrj_TrjPoint() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  SharedDtor();
}

void PlanningResult_TarTrj_TrjPoint::SharedDtor() {
}

void PlanningResult_TarTrj_TrjPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_TarTrj_TrjPoint& PlanningResult_TarTrj_TrjPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_TarTrj_TrjPoint_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_TarTrj_TrjPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&s_) -
        reinterpret_cast<char*>(&x_)) + sizeof(s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_TarTrj_TrjPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double h = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_TarTrj_TrjPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double h = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_c(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_TarTrj_TrjPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double h = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->h(), output);
  }

  // optional double c = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->c(), output);
  }

  // optional double s = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult_TarTrj_TrjPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double h = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->h(), target);
  }

  // optional double c = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->c(), target);
  }

  // optional double s = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  return target;
}

size_t PlanningResult_TarTrj_TrjPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double h = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double c = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double s = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_TarTrj_TrjPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult_TarTrj_TrjPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult_TarTrj_TrjPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
    MergeFrom(*source);
  }
}

void PlanningResult_TarTrj_TrjPoint::MergeFrom(const PlanningResult_TarTrj_TrjPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      h_ = from.h_;
    }
    if (cached_has_bits & 0x00000008u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningResult_TarTrj_TrjPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult_TarTrj_TrjPoint::CopyFrom(const PlanningResult_TarTrj_TrjPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_TarTrj_TrjPoint::IsInitialized() const {
  return true;
}

void PlanningResult_TarTrj_TrjPoint::InternalSwap(PlanningResult_TarTrj_TrjPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(h_, other->h_);
  swap(c_, other->c_);
  swap(s_, other->s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult_TarTrj_TrjPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningResult_TarTrj::InitAsDefaultInstance() {
  ::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_._instance.get_mutable()->curr_pos_ = const_cast< ::phoenix::msg::planning::PlanningResult_TarTrj_Pos*>(
      ::phoenix::msg::planning::PlanningResult_TarTrj_Pos::internal_default_instance());
  ::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_._instance.get_mutable()->leading_pos_ = const_cast< ::phoenix::msg::planning::PlanningResult_TarTrj_Pos*>(
      ::phoenix::msg::planning::PlanningResult_TarTrj_Pos::internal_default_instance());
  ::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_._instance.get_mutable()->lat_err_ = const_cast< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr*>(
      ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr::internal_default_instance());
}
class PlanningResult_TarTrj::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult_TarTrj>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& curr_pos(const PlanningResult_TarTrj* msg);
  static void set_has_curr_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& leading_pos(const PlanningResult_TarTrj* msg);
  static void set_has_leading_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr& lat_err(const PlanningResult_TarTrj* msg);
  static void set_has_lat_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trj_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_points_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos&
PlanningResult_TarTrj::_Internal::curr_pos(const PlanningResult_TarTrj* msg) {
  return *msg->curr_pos_;
}
const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos&
PlanningResult_TarTrj::_Internal::leading_pos(const PlanningResult_TarTrj* msg) {
  return *msg->leading_pos_;
}
const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr&
PlanningResult_TarTrj::_Internal::lat_err(const PlanningResult_TarTrj* msg) {
  return *msg->lat_err_;
}
PlanningResult_TarTrj::PlanningResult_TarTrj()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult.TarTrj)
}
PlanningResult_TarTrj::PlanningResult_TarTrj(const PlanningResult_TarTrj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curr_pos()) {
    curr_pos_ = new ::phoenix::msg::planning::PlanningResult_TarTrj_Pos(*from.curr_pos_);
  } else {
    curr_pos_ = nullptr;
  }
  if (from.has_leading_pos()) {
    leading_pos_ = new ::phoenix::msg::planning::PlanningResult_TarTrj_Pos(*from.leading_pos_);
  } else {
    leading_pos_ = nullptr;
  }
  if (from.has_lat_err()) {
    lat_err_ = new ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr(*from.lat_err_);
  } else {
    lat_err_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(points_num_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult.TarTrj)
}

void PlanningResult_TarTrj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto.base);
  ::memset(&curr_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_num_) -
      reinterpret_cast<char*>(&curr_pos_)) + sizeof(points_num_));
}

PlanningResult_TarTrj::~PlanningResult_TarTrj() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult.TarTrj)
  SharedDtor();
}

void PlanningResult_TarTrj::SharedDtor() {
  if (this != internal_default_instance()) delete curr_pos_;
  if (this != internal_default_instance()) delete leading_pos_;
  if (this != internal_default_instance()) delete lat_err_;
}

void PlanningResult_TarTrj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_TarTrj& PlanningResult_TarTrj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_TarTrj_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_TarTrj::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult.TarTrj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(curr_pos_ != nullptr);
      curr_pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leading_pos_ != nullptr);
      leading_pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lat_err_ != nullptr);
      lat_err_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_num_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(points_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_TarTrj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_curr_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leading_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lat_err(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::planning::PlanningResult_TrjDirection_IsValid(val))) {
            set_trj_direction(static_cast<::phoenix::msg::planning::PlanningResult_TrjDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 points_num = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_points_num(&has_bits);
          points_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_TarTrj::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult.TarTrj)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curr_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leading_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::planning::PlanningResult_TrjDirection_IsValid(value)) {
            set_trj_direction(static_cast< ::phoenix::msg::planning::PlanningResult_TrjDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points_num = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_points_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult.TarTrj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult.TarTrj)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_TarTrj::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult.TarTrj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::curr_pos(this), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::leading_pos(this), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::lat_err(this), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->trj_direction(), output);
  }

  // optional int32 points_num = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->points_num(), output);
  }

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult.TarTrj)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult_TarTrj::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult.TarTrj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::curr_pos(this), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::leading_pos(this), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::lat_err(this), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->trj_direction(), target);
  }

  // optional int32 points_num = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->points_num(), target);
  }

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult.TarTrj)
  return target;
}

size_t PlanningResult_TarTrj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult.TarTrj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curr_pos_);
    }

    // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leading_pos_);
    }

    // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_err_);
    }

    // optional int64 timestamp = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trj_direction());
    }

    // optional int32 points_num = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->points_num());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_TarTrj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult_TarTrj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult_TarTrj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult.TarTrj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult.TarTrj)
    MergeFrom(*source);
  }
}

void PlanningResult_TarTrj::MergeFrom(const PlanningResult_TarTrj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult.TarTrj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curr_pos()->::phoenix::msg::planning::PlanningResult_TarTrj_Pos::MergeFrom(from.curr_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_leading_pos()->::phoenix::msg::planning::PlanningResult_TarTrj_Pos::MergeFrom(from.leading_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lat_err()->::phoenix::msg::planning::PlanningResult_TarTrj_LatErr::MergeFrom(from.lat_err());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      trj_direction_ = from.trj_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      points_num_ = from.points_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningResult_TarTrj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult_TarTrj::CopyFrom(const PlanningResult_TarTrj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult.TarTrj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_TarTrj::IsInitialized() const {
  return true;
}

void PlanningResult_TarTrj::InternalSwap(PlanningResult_TarTrj* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(curr_pos_, other->curr_pos_);
  swap(leading_pos_, other->leading_pos_);
  swap(lat_err_, other->lat_err_);
  swap(timestamp_, other->timestamp_);
  swap(trj_direction_, other->trj_direction_);
  swap(points_num_, other->points_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult_TarTrj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningResult::InitAsDefaultInstance() {
  ::phoenix::msg::planning::_PlanningResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
  ::phoenix::msg::planning::_PlanningResult_default_instance_._instance.get_mutable()->tar_trj_ = const_cast< ::phoenix::msg::planning::PlanningResult_TarTrj*>(
      ::phoenix::msg::planning::PlanningResult_TarTrj::internal_default_instance());
}
class PlanningResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningResult>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const PlanningResult* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cur_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tar_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_throttle_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_ebs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hold_steering_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_release_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tar_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tar_turn_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tar_brake_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tar_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tar_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::phoenix::msg::planning::PlanningResult_TarTrj& tar_trj(const PlanningResult* msg);
  static void set_has_tar_trj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::phoenix::msg::common::Header&
PlanningResult::_Internal::header(const PlanningResult* msg) {
  return *msg->header_;
}
const ::phoenix::msg::planning::PlanningResult_TarTrj&
PlanningResult::_Internal::tar_trj(const PlanningResult* msg) {
  return *msg->tar_trj_;
}
void PlanningResult::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlanningResult::PlanningResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningResult)
}
PlanningResult::PlanningResult(const PlanningResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_tar_trj()) {
    tar_trj_ = new ::phoenix::msg::planning::PlanningResult_TarTrj(*from.tar_trj_);
  } else {
    tar_trj_ = nullptr;
  }
  ::memcpy(&cur_status_, &from.cur_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&tar_brake_lamp_) -
    reinterpret_cast<char*>(&cur_status_)) + sizeof(tar_brake_lamp_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningResult)
}

void PlanningResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningResult_planning_5fresult_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tar_a_) -
      reinterpret_cast<char*>(&header_)) + sizeof(tar_a_));
  tar_brake_lamp_ = 1;
}

PlanningResult::~PlanningResult() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningResult)
  SharedDtor();
}

void PlanningResult::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete tar_trj_;
}

void PlanningResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult& PlanningResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_planning_5fresult_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tar_trj_ != nullptr);
      tar_trj_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&cur_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hold_steering_wheel_) -
        reinterpret_cast<char*>(&cur_status_)) + sizeof(hold_steering_wheel_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&release_throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tar_a_) -
        reinterpret_cast<char*>(&release_throttle_)) + sizeof(tar_a_));
    tar_brake_lamp_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cur_status = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cur_status(&has_bits);
          cur_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::planning::PlanningResult_DrivingMode_IsValid(val))) {
            set_tar_driving_mode(static_cast<::phoenix::msg::planning::PlanningResult_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enable_eps = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_eps(&has_bits);
          enable_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_throttle_sys = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_throttle_sys(&has_bits);
          enable_throttle_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_ebs = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_ebs(&has_bits);
          enable_ebs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hold_steering_wheel = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hold_steering_wheel(&has_bits);
          hold_steering_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool release_throttle = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_release_throttle(&has_bits);
          release_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::planning::PlanningResult_Gear_IsValid(val))) {
            set_tar_gear(static_cast<::phoenix::msg::planning::PlanningResult_Gear>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::planning::PlanningResult_TurnLamp_IsValid(val))) {
            set_tar_turn_lamp(static_cast<::phoenix::msg::planning::PlanningResult_TurnLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::planning::PlanningResult_Lamp_IsValid(val))) {
            set_tar_brake_lamp(static_cast<::phoenix::msg::planning::PlanningResult_Lamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double tar_v = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_tar_v(&has_bits);
          tar_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double tar_a = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_tar_a(&has_bits);
          tar_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_tar_trj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cur_status = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cur_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::planning::PlanningResult_DrivingMode_IsValid(value)) {
            set_tar_driving_mode(static_cast< ::phoenix::msg::planning::PlanningResult_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_eps = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_enable_eps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_throttle_sys = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_enable_throttle_sys(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_throttle_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_ebs = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_enable_ebs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ebs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hold_steering_wheel = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_hold_steering_wheel(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hold_steering_wheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool release_throttle = 8 [default = false];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_release_throttle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::planning::PlanningResult_Gear_IsValid(value)) {
            set_tar_gear(static_cast< ::phoenix::msg::planning::PlanningResult_Gear >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::planning::PlanningResult_TurnLamp_IsValid(value)) {
            set_tar_turn_lamp(static_cast< ::phoenix::msg::planning::PlanningResult_TurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::planning::PlanningResult_Lamp_IsValid(value)) {
            set_tar_brake_lamp(static_cast< ::phoenix::msg::planning::PlanningResult_Lamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tar_v = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {
          _Internal::set_has_tar_v(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tar_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tar_a = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {
          _Internal::set_has_tar_a(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tar_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_trj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional int32 cur_status = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cur_status(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->tar_driving_mode(), output);
  }

  // optional bool enable_eps = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_eps(), output);
  }

  // optional bool enable_throttle_sys = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->enable_throttle_sys(), output);
  }

  // optional bool enable_ebs = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->enable_ebs(), output);
  }

  // optional bool hold_steering_wheel = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->hold_steering_wheel(), output);
  }

  // optional bool release_throttle = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->release_throttle(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->tar_gear(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->tar_turn_lamp(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->tar_brake_lamp(), output);
  }

  // optional double tar_v = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->tar_v(), output);
  }

  // optional double tar_a = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->tar_a(), output);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::tar_trj(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional int32 cur_status = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_status(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->tar_driving_mode(), target);
  }

  // optional bool enable_eps = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->enable_eps(), target);
  }

  // optional bool enable_throttle_sys = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->enable_throttle_sys(), target);
  }

  // optional bool enable_ebs = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->enable_ebs(), target);
  }

  // optional bool hold_steering_wheel = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->hold_steering_wheel(), target);
  }

  // optional bool release_throttle = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->release_throttle(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->tar_gear(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->tar_turn_lamp(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->tar_brake_lamp(), target);
  }

  // optional double tar_v = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->tar_v(), target);
  }

  // optional double tar_a = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->tar_a(), target);
  }

  // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::tar_trj(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningResult)
  return target;
}

size_t PlanningResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tar_trj_);
    }

    // optional int32 cur_status = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cur_status());
    }

    // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tar_driving_mode());
    }

    // optional bool enable_eps = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_throttle_sys = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_ebs = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool hold_steering_wheel = 7 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool release_throttle = 8 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tar_gear());
    }

    // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tar_turn_lamp());
    }

    // optional double tar_v = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double tar_a = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tar_brake_lamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningResult)
    MergeFrom(*source);
  }
}

void PlanningResult::MergeFrom(const PlanningResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tar_trj()->::phoenix::msg::planning::PlanningResult_TarTrj::MergeFrom(from.tar_trj());
    }
    if (cached_has_bits & 0x00000004u) {
      cur_status_ = from.cur_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      tar_driving_mode_ = from.tar_driving_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_eps_ = from.enable_eps_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_throttle_sys_ = from.enable_throttle_sys_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_ebs_ = from.enable_ebs_;
    }
    if (cached_has_bits & 0x00000080u) {
      hold_steering_wheel_ = from.hold_steering_wheel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      release_throttle_ = from.release_throttle_;
    }
    if (cached_has_bits & 0x00000200u) {
      tar_gear_ = from.tar_gear_;
    }
    if (cached_has_bits & 0x00000400u) {
      tar_turn_lamp_ = from.tar_turn_lamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      tar_v_ = from.tar_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      tar_a_ = from.tar_a_;
    }
    if (cached_has_bits & 0x00002000u) {
      tar_brake_lamp_ = from.tar_brake_lamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult::CopyFrom(const PlanningResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult::IsInitialized() const {
  return true;
}

void PlanningResult::InternalSwap(PlanningResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(tar_trj_, other->tar_trj_);
  swap(cur_status_, other->cur_status_);
  swap(tar_driving_mode_, other->tar_driving_mode_);
  swap(enable_eps_, other->enable_eps_);
  swap(enable_throttle_sys_, other->enable_throttle_sys_);
  swap(enable_ebs_, other->enable_ebs_);
  swap(hold_steering_wheel_, other->hold_steering_wheel_);
  swap(release_throttle_, other->release_throttle_);
  swap(tar_gear_, other->tar_gear_);
  swap(tar_turn_lamp_, other->tar_turn_lamp_);
  swap(tar_v_, other->tar_v_);
  swap(tar_a_, other->tar_a_);
  swap(tar_brake_lamp_, other->tar_brake_lamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult_TarTrj_Pos >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult_TarTrj_Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult_TarTrj* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult_TarTrj >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult_TarTrj >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningResult* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningResult >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
