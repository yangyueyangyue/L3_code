// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_signal.proto

#include "traffic_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalBox_traffic_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class TrafficSignalBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalBox> _instance;
} _TrafficSignalBox_default_instance_;
class TrafficSignalSpeedRestrictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalSpeedRestriction> _instance;
} _TrafficSignalSpeedRestriction_default_instance_;
class TrafficSignalListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalList> _instance;
} _TrafficSignalList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_TrafficSignalBox_traffic_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_TrafficSignalBox_default_instance_;
    new (ptr) ::phoenix::msg::perception::TrafficSignalBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::TrafficSignalBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalBox_traffic_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrafficSignalBox_traffic_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_TrafficSignalList_traffic_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_TrafficSignalList_default_instance_;
    new (ptr) ::phoenix::msg::perception::TrafficSignalList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::TrafficSignalList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSignalList_traffic_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrafficSignalList_traffic_5fsignal_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_TrafficSignalSpeedRestriction_default_instance_;
    new (ptr) ::phoenix::msg::perception::TrafficSignalSpeedRestriction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::TrafficSignalSpeedRestriction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto}, {
      &scc_info_TrafficSignalBox_traffic_5fsignal_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_traffic_5fsignal_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_traffic_5fsignal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_traffic_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_traffic_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, z_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, height_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalBox, camera_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, box_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalSpeedRestriction, speed_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::TrafficSignalList, speed_restrictions_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::phoenix::msg::perception::TrafficSignalBox)},
  { 17, 26, sizeof(::phoenix::msg::perception::TrafficSignalSpeedRestriction)},
  { 30, 37, sizeof(::phoenix::msg::perception::TrafficSignalList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_TrafficSignalBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_TrafficSignalSpeedRestriction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_TrafficSignalList_default_instance_),
};

const char descriptor_table_protodef_traffic_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024traffic_signal.proto\022\026phoenix.msg.perc"
  "eption\032\014header.proto\"w\n\020TrafficSignalBox"
  "\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003 \001(\002:"
  "\0010\022\020\n\005width\030\004 \001(\002:\0010\022\021\n\006height\030\005 \001(\002:\0010\022"
  "\024\n\tcamera_id\030\006 \001(\005:\0010\"\210\002\n\035TrafficSignalS"
  "peedRestriction\022\n\n\002id\030\001 \001(\t\022Q\n\004type\030\002 \001("
  "\0162:.phoenix.msg.perception.TrafficSignal"
  "SpeedRestriction.Type:\007UNKNOWN\0225\n\003box\030\003 "
  "\001(\0132(.phoenix.msg.perception.TrafficSign"
  "alBox\022\020\n\005speed\030\004 \001(\002:\0010\"\?\n\004Type\022\013\n\007UNKNO"
  "WN\020\000\022\025\n\021START_RESTRICTION\020\001\022\023\n\017END_RESTR"
  "ICTION\020\002\"\222\001\n\021TrafficSignalList\022*\n\006header"
  "\030\001 \001(\0132\032.phoenix.msg.common.Header\022Q\n\022sp"
  "eed_restrictions\030\002 \003(\01325.phoenix.msg.per"
  "ception.TrafficSignalSpeedRestriction"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_traffic_5fsignal_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_traffic_5fsignal_2eproto_sccs[3] = {
  &scc_info_TrafficSignalBox_traffic_5fsignal_2eproto.base,
  &scc_info_TrafficSignalList_traffic_5fsignal_2eproto.base,
  &scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_traffic_5fsignal_2eproto_once;
static bool descriptor_table_traffic_5fsignal_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_5fsignal_2eproto = {
  &descriptor_table_traffic_5fsignal_2eproto_initialized, descriptor_table_protodef_traffic_5fsignal_2eproto, "traffic_signal.proto", 597,
  &descriptor_table_traffic_5fsignal_2eproto_once, descriptor_table_traffic_5fsignal_2eproto_sccs, descriptor_table_traffic_5fsignal_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_traffic_5fsignal_2eproto::offsets,
  file_level_metadata_traffic_5fsignal_2eproto, 3, file_level_enum_descriptors_traffic_5fsignal_2eproto, file_level_service_descriptors_traffic_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_traffic_5fsignal_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_traffic_5fsignal_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignalSpeedRestriction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_5fsignal_2eproto);
  return file_level_enum_descriptors_traffic_5fsignal_2eproto[0];
}
bool TrafficSignalSpeedRestriction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::UNKNOWN;
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::START_RESTRICTION;
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::END_RESTRICTION;
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::Type_MIN;
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::Type_MAX;
constexpr int TrafficSignalSpeedRestriction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrafficSignalBox::InitAsDefaultInstance() {
}
class TrafficSignalBox::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignalBox>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TrafficSignalBox::TrafficSignalBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.TrafficSignalBox)
}
TrafficSignalBox::TrafficSignalBox(const TrafficSignalBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.TrafficSignalBox)
}

void TrafficSignalBox::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(camera_id_));
}

TrafficSignalBox::~TrafficSignalBox() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.TrafficSignalBox)
  SharedDtor();
}

void TrafficSignalBox::SharedDtor() {
}

void TrafficSignalBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalBox& TrafficSignalBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalBox_traffic_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalBox::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.TrafficSignalBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&x_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSignalBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 camera_id = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSignalBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.TrafficSignalBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera_id = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_camera_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.TrafficSignalBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.TrafficSignalBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSignalBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.TrafficSignalBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float width = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->width(), output);
  }

  // optional float height = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // optional int32 camera_id = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->camera_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.TrafficSignalBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.TrafficSignalBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float width = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->width(), target);
  }

  // optional float height = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // optional int32 camera_id = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->camera_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.TrafficSignalBox)
  return target;
}

size_t TrafficSignalBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.TrafficSignalBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float width = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float height = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 camera_id = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->camera_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.TrafficSignalBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.TrafficSignalBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.TrafficSignalBox)
    MergeFrom(*source);
  }
}

void TrafficSignalBox::MergeFrom(const TrafficSignalBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.TrafficSignalBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficSignalBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.TrafficSignalBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalBox::CopyFrom(const TrafficSignalBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.TrafficSignalBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalBox::IsInitialized() const {
  return true;
}

void TrafficSignalBox::InternalSwap(TrafficSignalBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(camera_id_, other->camera_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalSpeedRestriction::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_TrafficSignalSpeedRestriction_default_instance_._instance.get_mutable()->box_ = const_cast< ::phoenix::msg::perception::TrafficSignalBox*>(
      ::phoenix::msg::perception::TrafficSignalBox::internal_default_instance());
}
class TrafficSignalSpeedRestriction::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignalSpeedRestriction>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::phoenix::msg::perception::TrafficSignalBox& box(const TrafficSignalSpeedRestriction* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::phoenix::msg::perception::TrafficSignalBox&
TrafficSignalSpeedRestriction::_Internal::box(const TrafficSignalSpeedRestriction* msg) {
  return *msg->box_;
}
TrafficSignalSpeedRestriction::TrafficSignalSpeedRestriction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.TrafficSignalSpeedRestriction)
}
TrafficSignalSpeedRestriction::TrafficSignalSpeedRestriction(const TrafficSignalSpeedRestriction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_box()) {
    box_ = new ::phoenix::msg::perception::TrafficSignalBox(*from.box_);
  } else {
    box_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.TrafficSignalSpeedRestriction)
}

void TrafficSignalSpeedRestriction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&box_)) + sizeof(speed_));
}

TrafficSignalSpeedRestriction::~TrafficSignalSpeedRestriction() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  SharedDtor();
}

void TrafficSignalSpeedRestriction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
}

void TrafficSignalSpeedRestriction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalSpeedRestriction& TrafficSignalSpeedRestriction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalSpeedRestriction_traffic_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalSpeedRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&type_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSignalSpeedRestriction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_id(), ptr, ctx, "phoenix.msg.perception.TrafficSignalSpeedRestriction.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type_IsValid(val))) {
            set_type(static_cast<::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float speed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSignalSpeedRestriction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "phoenix.msg.perception.TrafficSignalSpeedRestriction.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type_IsValid(value)) {
            set_type(static_cast< ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSignalSpeedRestriction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "phoenix.msg.perception.TrafficSignalSpeedRestriction.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::box(this), output);
  }

  // optional float speed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.TrafficSignalSpeedRestriction)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalSpeedRestriction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "phoenix.msg.perception.TrafficSignalSpeedRestriction.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::box(this), target);
  }

  // optional float speed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  return target;
}

size_t TrafficSignalSpeedRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float speed = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalSpeedRestriction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalSpeedRestriction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalSpeedRestriction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.TrafficSignalSpeedRestriction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.TrafficSignalSpeedRestriction)
    MergeFrom(*source);
  }
}

void TrafficSignalSpeedRestriction::MergeFrom(const TrafficSignalSpeedRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box()->::phoenix::msg::perception::TrafficSignalBox::MergeFrom(from.box());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficSignalSpeedRestriction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalSpeedRestriction::CopyFrom(const TrafficSignalSpeedRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.TrafficSignalSpeedRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalSpeedRestriction::IsInitialized() const {
  return true;
}

void TrafficSignalSpeedRestriction::InternalSwap(TrafficSignalSpeedRestriction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(box_, other->box_);
  swap(type_, other->type_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalSpeedRestriction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalList::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_TrafficSignalList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class TrafficSignalList::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignalList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const TrafficSignalList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::phoenix::msg::common::Header&
TrafficSignalList::_Internal::header(const TrafficSignalList* msg) {
  return *msg->header_;
}
void TrafficSignalList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrafficSignalList::TrafficSignalList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.TrafficSignalList)
}
TrafficSignalList::TrafficSignalList(const TrafficSignalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      speed_restrictions_(from.speed_restrictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.TrafficSignalList)
}

void TrafficSignalList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalList_traffic_5fsignal_2eproto.base);
  header_ = nullptr;
}

TrafficSignalList::~TrafficSignalList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.TrafficSignalList)
  SharedDtor();
}

void TrafficSignalList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TrafficSignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalList& TrafficSignalList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalList_traffic_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.TrafficSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_restrictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSignalList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_speed_restrictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSignalList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.TrafficSignalList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_speed_restrictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.TrafficSignalList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.TrafficSignalList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSignalList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.TrafficSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_restrictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->speed_restrictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.TrafficSignalList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.TrafficSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_restrictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->speed_restrictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.TrafficSignalList)
  return target;
}

size_t TrafficSignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.TrafficSignalList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_restrictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->speed_restrictions(static_cast<int>(i)));
    }
  }

  // optional .phoenix.msg.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.TrafficSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.TrafficSignalList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.TrafficSignalList)
    MergeFrom(*source);
  }
}

void TrafficSignalList::MergeFrom(const TrafficSignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.TrafficSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_restrictions_.MergeFrom(from.speed_restrictions_);
  if (from.has_header()) {
    mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
  }
}

void TrafficSignalList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.TrafficSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalList::CopyFrom(const TrafficSignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.TrafficSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalList::IsInitialized() const {
  return true;
}

void TrafficSignalList::InternalSwap(TrafficSignalList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&speed_restrictions_)->InternalSwap(CastToBase(&other->speed_restrictions_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::TrafficSignalBox* Arena::CreateMaybeMessage< ::phoenix::msg::perception::TrafficSignalBox >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::TrafficSignalBox >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::TrafficSignalSpeedRestriction* Arena::CreateMaybeMessage< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::TrafficSignalList* Arena::CreateMaybeMessage< ::phoenix::msg::perception::TrafficSignalList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::TrafficSignalList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
