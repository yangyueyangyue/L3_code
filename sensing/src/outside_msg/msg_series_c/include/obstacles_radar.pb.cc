// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_radar.proto

#include "obstacles_radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacles_5fradar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleRadar_obstacles_5fradar_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleRadarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleRadar> _instance;
} _ObstacleRadar_default_instance_;
class ObstacleRadarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleRadarList> _instance;
} _ObstacleRadarList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_ObstacleRadar_obstacles_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleRadar_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleRadar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleRadar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleRadar_obstacles_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObstacleRadar_obstacles_5fradar_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleRadarList_obstacles_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleRadarList_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleRadarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleRadarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleRadarList_obstacles_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObstacleRadarList_obstacles_5fradar_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_ObstacleRadar_obstacles_5fradar_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacles_5fradar_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_obstacles_5fradar_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacles_5fradar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacles_5fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, track_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, merged_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, oncomming_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, bridge_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, range_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, angle_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, range_rate_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, range_acceleration_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, lateral_rate_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, v_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, v_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, accel_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, accel_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadar, yaw_rate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, radar_type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleRadarList, obstacles_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::phoenix::msg::perception::ObstacleRadar)},
  { 43, 52, sizeof(::phoenix::msg::perception::ObstacleRadarList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleRadar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleRadarList_default_instance_),
};

const char descriptor_table_protodef_obstacles_5fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025obstacles_radar.proto\022\026phoenix.msg.per"
  "ception\032\014header.proto\"\221\n\n\rObstacleRadar\022"
  "\r\n\002id\030\001 \001(\005:\0010\022M\n\004type\030\002 \001(\0162-.phoenix.m"
  "sg.perception.ObstacleRadar.ObjType:\020OBJ"
  "_TYPE_UNKNOWN\022_\n\014track_status\030\003 \001(\01621.ph"
  "oenix.msg.perception.ObstacleRadar.Track"
  "Status:\026TRACK_STATUS_NO_TARGET\022b\n\rmerged"
  "_status\030\004 \001(\01622.phoenix.msg.perception.O"
  "bstacleRadar.MergedStatus:\027MERGED_STATUS"
  "_NO_TARGET\022\030\n\toncomming\030\005 \001(\010:\005false\022\025\n\006"
  "bridge\030\006 \001(\010:\005false\022\020\n\005range\030\007 \001(\002:\0010\022\020\n"
  "\005angle\030\010 \001(\002:\0010\022\025\n\nrange_rate\030\t \001(\002:\0010\022\035"
  "\n\022range_acceleration\030\n \001(\002:\0010\022\027\n\014lateral"
  "_rate\030\013 \001(\002:\0010\022\020\n\005width\030\014 \001(\002:\0010\022\014\n\001x\030\r "
  "\001(\002:\0010\022\014\n\001y\030\016 \001(\002:\0010\022\016\n\003v_x\030\017 \001(\002:\0010\022\016\n\003"
  "v_y\030\020 \001(\002:\0010\022\022\n\007accel_x\030\021 \001(\002:\0010\022\022\n\007acce"
  "l_y\030\022 \001(\002:\0010\022\023\n\010yaw_rate\030\023 \001(\002:\0010\"\207\002\n\007Ob"
  "jType\022\024\n\020OBJ_TYPE_UNKNOWN\020\000\022\036\n\032OBJ_TYPE_"
  "PASSENGER_VEHICLE\020\001\022\037\n\033OBJ_TYPE_COMMERCI"
  "AL_VEHICLE\020\002\022\034\n\030OBJ_TYPE_SPECIAL_VEHICLE"
  "\020\003\022\032\n\026OBJ_TYPE_OTHER_VEHICLE\020\004\022\027\n\023OBJ_TY"
  "PE_PEDESTRIAN\020\005\022\024\n\020OBJ_TYPE_BICYCLE\020\006\022\023\n"
  "\017OBJ_TYPE_ANIMAL\020\007\022\024\n\020OBJ_TYPE_DISCARD\020\010"
  "\022\021\n\rOBJ_TYPE_CURB\020\t\"\233\002\n\013TrackStatus\022\032\n\026T"
  "RACK_STATUS_NO_TARGET\020\000\022\033\n\027TRACK_STATUS_"
  "NEW_TARGET\020\001\022#\n\037TRACK_STATUS_NEW_UPDATED"
  "_TARGET\020\002\022\037\n\033TRACK_STATUS_UPDATED_TARGET"
  "\020\003\022\037\n\033TRACK_STATUS_COASTED_TARGET\020\004\022\036\n\032T"
  "RACK_STATUS_MERGED_TARGET\020\005\022\'\n#TRACK_STA"
  "TUS_INVALID_COASTED_TARGET\020\006\022#\n\037TRACK_ST"
  "ATUS_NEW_COASTED_TARGET\020\007\"\205\001\n\014MergedStat"
  "us\022\033\n\027MERGED_STATUS_NO_TARGET\020\000\022\033\n\027MERGE"
  "D_STATUS_MR_TARGET\020\001\022\033\n\027MERGED_STATUS_LR"
  "_TARGET\020\002\022\036\n\032MERGED_STATUS_MR_LR_TARGET\020"
  "\003\"\353\002\n\021ObstacleRadarList\022*\n\006header\030\001 \001(\0132"
  "\032.phoenix.msg.common.Header\022[\n\nradar_typ"
  "e\030\002 \001(\01623.phoenix.msg.perception.Obstacl"
  "eRadarList.RadarType:\022RADAR_TYPE_UNKNOWN"
  "\022\030\n\robstacles_num\030\003 \001(\005:\0010\0228\n\tobstacles\030"
  "\004 \003(\0132%.phoenix.msg.perception.ObstacleR"
  "adar\"y\n\tRadarType\022\026\n\022RADAR_TYPE_UNKNOWN\020"
  "\000\022\022\n\016RADAR_TYPE_ESR\020\001\022\023\n\017RADAR_TYPE_SRR2"
  "\020\002\022\024\n\020RADAR_TYPE_RR51W\020\003\022\025\n\021RADAR_TYPE_A"
  "RS430\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacles_5fradar_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacles_5fradar_2eproto_sccs[2] = {
  &scc_info_ObstacleRadar_obstacles_5fradar_2eproto.base,
  &scc_info_ObstacleRadarList_obstacles_5fradar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacles_5fradar_2eproto_once;
static bool descriptor_table_obstacles_5fradar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5fradar_2eproto = {
  &descriptor_table_obstacles_5fradar_2eproto_initialized, descriptor_table_protodef_obstacles_5fradar_2eproto, "obstacles_radar.proto", 1727,
  &descriptor_table_obstacles_5fradar_2eproto_once, descriptor_table_obstacles_5fradar_2eproto_sccs, descriptor_table_obstacles_5fradar_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_obstacles_5fradar_2eproto::offsets,
  file_level_metadata_obstacles_5fradar_2eproto, 2, file_level_enum_descriptors_obstacles_5fradar_2eproto, file_level_service_descriptors_obstacles_5fradar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacles_5fradar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacles_5fradar_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_ObjType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fradar_2eproto);
  return file_level_enum_descriptors_obstacles_5fradar_2eproto[0];
}
bool ObstacleRadar_ObjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_UNKNOWN;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_PASSENGER_VEHICLE;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_COMMERCIAL_VEHICLE;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_SPECIAL_VEHICLE;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_OTHER_VEHICLE;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_PEDESTRIAN;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_BICYCLE;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_ANIMAL;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_DISCARD;
constexpr ObstacleRadar_ObjType ObstacleRadar::OBJ_TYPE_CURB;
constexpr ObstacleRadar_ObjType ObstacleRadar::ObjType_MIN;
constexpr ObstacleRadar_ObjType ObstacleRadar::ObjType_MAX;
constexpr int ObstacleRadar::ObjType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_TrackStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fradar_2eproto);
  return file_level_enum_descriptors_obstacles_5fradar_2eproto[1];
}
bool ObstacleRadar_TrackStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_NO_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_NEW_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_NEW_UPDATED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_UPDATED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_COASTED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_MERGED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_INVALID_COASTED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TRACK_STATUS_NEW_COASTED_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TrackStatus_MIN;
constexpr ObstacleRadar_TrackStatus ObstacleRadar::TrackStatus_MAX;
constexpr int ObstacleRadar::TrackStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_MergedStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fradar_2eproto);
  return file_level_enum_descriptors_obstacles_5fradar_2eproto[2];
}
bool ObstacleRadar_MergedStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MERGED_STATUS_NO_TARGET;
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MERGED_STATUS_MR_TARGET;
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MERGED_STATUS_LR_TARGET;
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MERGED_STATUS_MR_LR_TARGET;
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MergedStatus_MIN;
constexpr ObstacleRadar_MergedStatus ObstacleRadar::MergedStatus_MAX;
constexpr int ObstacleRadar::MergedStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadarList_RadarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fradar_2eproto);
  return file_level_enum_descriptors_obstacles_5fradar_2eproto[3];
}
bool ObstacleRadarList_RadarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RADAR_TYPE_UNKNOWN;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RADAR_TYPE_ESR;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RADAR_TYPE_SRR2;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RADAR_TYPE_RR51W;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RADAR_TYPE_ARS430;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RadarType_MIN;
constexpr ObstacleRadarList_RadarType ObstacleRadarList::RadarType_MAX;
constexpr int ObstacleRadarList::RadarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObstacleRadar::InitAsDefaultInstance() {
}
class ObstacleRadar::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleRadar>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_merged_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oncomming(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bridge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_range_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_range_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lateral_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_accel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_accel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

ObstacleRadar::ObstacleRadar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleRadar)
}
ObstacleRadar::ObstacleRadar(const ObstacleRadar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleRadar)
}

void ObstacleRadar::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(yaw_rate_));
}

ObstacleRadar::~ObstacleRadar() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleRadar)
  SharedDtor();
}

void ObstacleRadar::SharedDtor() {
}

void ObstacleRadar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleRadar& ObstacleRadar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleRadar_obstacles_5fradar_2eproto.base);
  return *internal_default_instance();
}


void ObstacleRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&id_)) + sizeof(angle_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&range_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_y_) -
        reinterpret_cast<char*>(&range_rate_)) + sizeof(v_y_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&accel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_) -
        reinterpret_cast<char*>(&accel_x_)) + sizeof(yaw_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleRadar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleRadar_ObjType_IsValid(val))) {
            set_type(static_cast<::phoenix::msg::perception::ObstacleRadar_ObjType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleRadar_TrackStatus_IsValid(val))) {
            set_track_status(static_cast<::phoenix::msg::perception::ObstacleRadar_TrackStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleRadar_MergedStatus_IsValid(val))) {
            set_merged_status(static_cast<::phoenix::msg::perception::ObstacleRadar_MergedStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool oncomming = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_oncomming(&has_bits);
          oncomming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bridge = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bridge(&has_bits);
          bridge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float range = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float range_rate = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_range_rate(&has_bits);
          range_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float range_acceleration = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_range_acceleration(&has_bits);
          range_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lateral_rate = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_lateral_rate(&has_bits);
          lateral_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_x = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_accel_x(&has_bits);
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_y = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_accel_y(&has_bits);
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleRadar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleRadar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleRadar_ObjType_IsValid(value)) {
            set_type(static_cast< ::phoenix::msg::perception::ObstacleRadar_ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleRadar_TrackStatus_IsValid(value)) {
            set_track_status(static_cast< ::phoenix::msg::perception::ObstacleRadar_TrackStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleRadar_MergedStatus_IsValid(value)) {
            set_merged_status(static_cast< ::phoenix::msg::perception::ObstacleRadar_MergedStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool oncomming = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_oncomming(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oncomming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bridge = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_bridge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bridge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float range = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_range(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angle = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float range_rate = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_range_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float range_acceleration = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_range_acceleration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lateral_rate = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_lateral_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          _Internal::set_has_v_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_v_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_x = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {
          _Internal::set_has_accel_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_y = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {
          _Internal::set_has_accel_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {
          _Internal::set_has_yaw_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleRadar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleRadar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleRadar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->track_status(), output);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->merged_status(), output);
  }

  // optional bool oncomming = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->oncomming(), output);
  }

  // optional bool bridge = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->bridge(), output);
  }

  // optional float range = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->range(), output);
  }

  // optional float angle = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->angle(), output);
  }

  // optional float range_rate = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->range_rate(), output);
  }

  // optional float range_acceleration = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->range_acceleration(), output);
  }

  // optional float lateral_rate = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->lateral_rate(), output);
  }

  // optional float width = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->width(), output);
  }

  // optional float x = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->x(), output);
  }

  // optional float y = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->y(), output);
  }

  // optional float v_x = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->v_x(), output);
  }

  // optional float v_y = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->v_y(), output);
  }

  // optional float accel_x = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->accel_x(), output);
  }

  // optional float accel_y = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->accel_y(), output);
  }

  // optional float yaw_rate = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleRadar)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleRadar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->track_status(), target);
  }

  // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->merged_status(), target);
  }

  // optional bool oncomming = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->oncomming(), target);
  }

  // optional bool bridge = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->bridge(), target);
  }

  // optional float range = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->range(), target);
  }

  // optional float angle = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->angle(), target);
  }

  // optional float range_rate = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->range_rate(), target);
  }

  // optional float range_acceleration = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->range_acceleration(), target);
  }

  // optional float lateral_rate = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->lateral_rate(), target);
  }

  // optional float width = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->width(), target);
  }

  // optional float x = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->x(), target);
  }

  // optional float y = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->y(), target);
  }

  // optional float v_x = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->v_x(), target);
  }

  // optional float v_y = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->v_y(), target);
  }

  // optional float accel_x = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->accel_x(), target);
  }

  // optional float accel_y = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->accel_y(), target);
  }

  // optional float yaw_rate = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleRadar)
  return target;
}

size_t ObstacleRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleRadar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->track_status());
    }

    // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->merged_status());
    }

    // optional bool oncomming = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool bridge = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float range = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float angle = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float range_rate = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float range_acceleration = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float lateral_rate = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float width = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float x = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float y = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float v_x = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional float accel_x = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float accel_y = 18 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float yaw_rate = 19 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleRadar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleRadar)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRadar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleRadar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleRadar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleRadar)
    MergeFrom(*source);
  }
}

void ObstacleRadar::MergeFrom(const ObstacleRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleRadar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_status_ = from.track_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      merged_status_ = from.merged_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      oncomming_ = from.oncomming_;
    }
    if (cached_has_bits & 0x00000020u) {
      bridge_ = from.bridge_;
    }
    if (cached_has_bits & 0x00000040u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000080u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      range_rate_ = from.range_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      range_acceleration_ = from.range_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      lateral_rate_ = from.lateral_rate_;
    }
    if (cached_has_bits & 0x00000800u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00001000u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00002000u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00004000u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      v_y_ = from.v_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      accel_x_ = from.accel_x_;
    }
    if (cached_has_bits & 0x00020000u) {
      accel_y_ = from.accel_y_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleRadar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRadar::CopyFrom(const ObstacleRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRadar::IsInitialized() const {
  return true;
}

void ObstacleRadar::InternalSwap(ObstacleRadar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(track_status_, other->track_status_);
  swap(merged_status_, other->merged_status_);
  swap(oncomming_, other->oncomming_);
  swap(bridge_, other->bridge_);
  swap(range_, other->range_);
  swap(angle_, other->angle_);
  swap(range_rate_, other->range_rate_);
  swap(range_acceleration_, other->range_acceleration_);
  swap(lateral_rate_, other->lateral_rate_);
  swap(width_, other->width_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(v_x_, other->v_x_);
  swap(v_y_, other->v_y_);
  swap(accel_x_, other->accel_x_);
  swap(accel_y_, other->accel_y_);
  swap(yaw_rate_, other->yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleRadar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleRadarList::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_ObstacleRadarList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class ObstacleRadarList::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleRadarList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const ObstacleRadarList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radar_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacles_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::common::Header&
ObstacleRadarList::_Internal::header(const ObstacleRadarList* msg) {
  return *msg->header_;
}
void ObstacleRadarList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObstacleRadarList::ObstacleRadarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleRadarList)
}
ObstacleRadarList::ObstacleRadarList(const ObstacleRadarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&radar_type_, &from.radar_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacles_num_) -
    reinterpret_cast<char*>(&radar_type_)) + sizeof(obstacles_num_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleRadarList)
}

void ObstacleRadarList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleRadarList_obstacles_5fradar_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacles_num_) -
      reinterpret_cast<char*>(&header_)) + sizeof(obstacles_num_));
}

ObstacleRadarList::~ObstacleRadarList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleRadarList)
  SharedDtor();
}

void ObstacleRadarList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ObstacleRadarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleRadarList& ObstacleRadarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleRadarList_obstacles_5fradar_2eproto.base);
  return *internal_default_instance();
}


void ObstacleRadarList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleRadarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&radar_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacles_num_) -
        reinterpret_cast<char*>(&radar_type_)) + sizeof(obstacles_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleRadarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleRadarList_RadarType_IsValid(val))) {
            set_radar_type(static_cast<::phoenix::msg::perception::ObstacleRadarList_RadarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 obstacles_num = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obstacles_num(&has_bits);
          obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleRadarList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleRadarList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleRadarList_RadarType_IsValid(value)) {
            set_radar_type(static_cast< ::phoenix::msg::perception::ObstacleRadarList_RadarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacles_num = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_obstacles_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacles_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleRadarList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleRadarList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleRadarList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleRadarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->radar_type(), output);
  }

  // optional int32 obstacles_num = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->obstacles_num(), output);
  }

  // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleRadarList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleRadarList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleRadarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->radar_type(), target);
  }

  // optional int32 obstacles_num = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->obstacles_num(), target);
  }

  // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->obstacles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleRadarList)
  return target;
}

size_t ObstacleRadarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleRadarList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->radar_type());
    }

    // optional int32 obstacles_num = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->obstacles_num());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleRadarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleRadarList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRadarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleRadarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleRadarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleRadarList)
    MergeFrom(*source);
  }
}

void ObstacleRadarList::MergeFrom(const ObstacleRadarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleRadarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      radar_type_ = from.radar_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacles_num_ = from.obstacles_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleRadarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleRadarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRadarList::CopyFrom(const ObstacleRadarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleRadarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRadarList::IsInitialized() const {
  return true;
}

void ObstacleRadarList::InternalSwap(ObstacleRadarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(header_, other->header_);
  swap(radar_type_, other->radar_type_);
  swap(obstacles_num_, other->obstacles_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleRadarList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleRadar* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleRadar >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleRadar >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleRadarList* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleRadarList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleRadarList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
