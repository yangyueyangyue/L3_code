// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_localization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5flocalization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5flocalization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5flocalization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5flocalization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5flocalization_2eproto;
namespace phoenix {
namespace msg {
namespace routing {
class MapLocalization;
class MapLocalizationDefaultTypeInternal;
extern MapLocalizationDefaultTypeInternal _MapLocalization_default_instance_;
class Pos;
class PosDefaultTypeInternal;
extern PosDefaultTypeInternal _Pos_default_instance_;
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::routing::MapLocalization* Arena::CreateMaybeMessage<::phoenix::msg::routing::MapLocalization>(Arena*);
template<> ::phoenix::msg::routing::Pos* Arena::CreateMaybeMessage<::phoenix::msg::routing::Pos>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace routing {

// ===================================================================

class Pos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.Pos) */ {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);
  Pos(Pos&& from) noexcept
    : Pos() {
    *this = ::std::move(from);
  }

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pos& operator=(Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos* internal_default_instance() {
    return reinterpret_cast<const Pos*>(
               &_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pos& a, Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Pos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pos* New() const final {
    return CreateMaybeMessage<Pos>(nullptr);
  }

  Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.Pos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5flocalization_2eproto);
    return ::descriptor_table_map_5flocalization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearestLaneIdFieldNumber = 1,
    kSFieldNumber = 2,
    kLFieldNumber = 3,
    kHeadingFieldNumber = 4,
  };
  // optional string nearest_lane_id = 1;
  bool has_nearest_lane_id() const;
  void clear_nearest_lane_id();
  const std::string& nearest_lane_id() const;
  void set_nearest_lane_id(const std::string& value);
  void set_nearest_lane_id(std::string&& value);
  void set_nearest_lane_id(const char* value);
  void set_nearest_lane_id(const char* value, size_t size);
  std::string* mutable_nearest_lane_id();
  std::string* release_nearest_lane_id();
  void set_allocated_nearest_lane_id(std::string* nearest_lane_id);

  // optional double s = 2 [default = 0];
  bool has_s() const;
  void clear_s();
  double s() const;
  void set_s(double value);

  // optional double l = 3 [default = 0];
  bool has_l() const;
  void clear_l();
  double l() const;
  void set_l(double value);

  // optional double heading = 4 [default = 0];
  bool has_heading() const;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.Pos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nearest_lane_id_;
  double s_;
  double l_;
  double heading_;
  friend struct ::TableStruct_map_5flocalization_2eproto;
};
// -------------------------------------------------------------------

class MapLocalization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.MapLocalization) */ {
 public:
  MapLocalization();
  virtual ~MapLocalization();

  MapLocalization(const MapLocalization& from);
  MapLocalization(MapLocalization&& from) noexcept
    : MapLocalization() {
    *this = ::std::move(from);
  }

  inline MapLocalization& operator=(const MapLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLocalization& operator=(MapLocalization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapLocalization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLocalization* internal_default_instance() {
    return reinterpret_cast<const MapLocalization*>(
               &_MapLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapLocalization& a, MapLocalization& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLocalization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapLocalization* New() const final {
    return CreateMaybeMessage<MapLocalization>(nullptr);
  }

  MapLocalization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapLocalization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapLocalization& from);
  void MergeFrom(const MapLocalization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapLocalization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.MapLocalization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5flocalization_2eproto);
    return ::descriptor_table_map_5flocalization_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.routing.Pos point = 2;
  bool has_point() const;
  void clear_point();
  const ::phoenix::msg::routing::Pos& point() const;
  ::phoenix::msg::routing::Pos* release_point();
  ::phoenix::msg::routing::Pos* mutable_point();
  void set_allocated_point(::phoenix::msg::routing::Pos* point);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.MapLocalization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::common::Header* header_;
  ::phoenix::msg::routing::Pos* point_;
  friend struct ::TableStruct_map_5flocalization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pos

// optional string nearest_lane_id = 1;
inline bool Pos::has_nearest_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::clear_nearest_lane_id() {
  nearest_lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pos::nearest_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.nearest_lane_id)
  return nearest_lane_id_.GetNoArena();
}
inline void Pos::set_nearest_lane_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nearest_lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline void Pos::set_nearest_lane_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nearest_lane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline void Pos::set_nearest_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nearest_lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline void Pos::set_nearest_lane_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nearest_lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.Pos.nearest_lane_id)
}
inline std::string* Pos::mutable_nearest_lane_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.Pos.nearest_lane_id)
  return nearest_lane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Pos::release_nearest_lane_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.Pos.nearest_lane_id)
  if (!has_nearest_lane_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nearest_lane_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Pos::set_allocated_nearest_lane_id(std::string* nearest_lane_id) {
  if (nearest_lane_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nearest_lane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nearest_lane_id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.Pos.nearest_lane_id)
}

// optional double s = 2 [default = 0];
inline bool Pos::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Pos::s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.s)
  return s_;
}
inline void Pos::set_s(double value) {
  _has_bits_[0] |= 0x00000002u;
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.s)
}

// optional double l = 3 [default = 0];
inline bool Pos::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pos::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Pos::l() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.l)
  return l_;
}
inline void Pos::set_l(double value) {
  _has_bits_[0] |= 0x00000004u;
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.l)
}

// optional double heading = 4 [default = 0];
inline bool Pos::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pos::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Pos::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.Pos.heading)
  return heading_;
}
inline void Pos::set_heading(double value) {
  _has_bits_[0] |= 0x00000008u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.Pos.heading)
}

// -------------------------------------------------------------------

// MapLocalization

// optional .phoenix.msg.common.Header header = 1;
inline bool MapLocalization::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& MapLocalization::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.MapLocalization.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* MapLocalization::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.MapLocalization.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* MapLocalization::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.MapLocalization.header)
  return header_;
}
inline void MapLocalization::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.MapLocalization.header)
}

// optional .phoenix.msg.routing.Pos point = 2;
inline bool MapLocalization::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapLocalization::clear_point() {
  if (point_ != nullptr) point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::Pos& MapLocalization::point() const {
  const ::phoenix::msg::routing::Pos* p = point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.MapLocalization.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::Pos*>(
      &::phoenix::msg::routing::_Pos_default_instance_);
}
inline ::phoenix::msg::routing::Pos* MapLocalization::release_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.MapLocalization.point)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::Pos* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::Pos* MapLocalization::mutable_point() {
  _has_bits_[0] |= 0x00000002u;
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::Pos>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.MapLocalization.point)
  return point_;
}
inline void MapLocalization::set_allocated_point(::phoenix::msg::routing::Pos* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.MapLocalization.point)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5flocalization_2eproto
