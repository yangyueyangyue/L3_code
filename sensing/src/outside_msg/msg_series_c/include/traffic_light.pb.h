// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traffic_5flight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traffic_5flight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_5flight_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightList;
class TrafficLightListDefaultTypeInternal;
extern TrafficLightListDefaultTypeInternal _TrafficLightList_default_instance_;
class TrafficLight_Box;
class TrafficLight_BoxDefaultTypeInternal;
extern TrafficLight_BoxDefaultTypeInternal _TrafficLight_Box_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::TrafficLight* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficLight>(Arena*);
template<> ::phoenix::msg::perception::TrafficLightList* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficLightList>(Arena*);
template<> ::phoenix::msg::perception::TrafficLight_Box* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficLight_Box>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum TrafficLight_Color : int {
  TrafficLight_Color_UNKNOWN_COLOR = 0,
  TrafficLight_Color_RED = 1,
  TrafficLight_Color_YELLOW = 2,
  TrafficLight_Color_GREEN = 3,
  TrafficLight_Color_BLACK = 4
};
bool TrafficLight_Color_IsValid(int value);
constexpr TrafficLight_Color TrafficLight_Color_Color_MIN = TrafficLight_Color_UNKNOWN_COLOR;
constexpr TrafficLight_Color TrafficLight_Color_Color_MAX = TrafficLight_Color_BLACK;
constexpr int TrafficLight_Color_Color_ARRAYSIZE = TrafficLight_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Color_descriptor();
template<typename T>
inline const std::string& TrafficLight_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLight_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLight_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLight_Color_descriptor(), enum_t_value);
}
inline bool TrafficLight_Color_Parse(
    const std::string& name, TrafficLight_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLight_Color>(
    TrafficLight_Color_descriptor(), name, value);
}
enum TrafficLight_Type : int {
  TrafficLight_Type_UNKNOWN_TYPE = 0,
  TrafficLight_Type_STRAIGHT = 1,
  TrafficLight_Type_LEFT = 2,
  TrafficLight_Type_RIGHT = 3,
  TrafficLight_Type_U_TURN = 4
};
bool TrafficLight_Type_IsValid(int value);
constexpr TrafficLight_Type TrafficLight_Type_Type_MIN = TrafficLight_Type_UNKNOWN_TYPE;
constexpr TrafficLight_Type TrafficLight_Type_Type_MAX = TrafficLight_Type_U_TURN;
constexpr int TrafficLight_Type_Type_ARRAYSIZE = TrafficLight_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Type_descriptor();
template<typename T>
inline const std::string& TrafficLight_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLight_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLight_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLight_Type_descriptor(), enum_t_value);
}
inline bool TrafficLight_Type_Parse(
    const std::string& name, TrafficLight_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLight_Type>(
    TrafficLight_Type_descriptor(), name, value);
}
// ===================================================================

class TrafficLight_Box :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficLight.Box) */ {
 public:
  TrafficLight_Box();
  virtual ~TrafficLight_Box();

  TrafficLight_Box(const TrafficLight_Box& from);
  TrafficLight_Box(TrafficLight_Box&& from) noexcept
    : TrafficLight_Box() {
    *this = ::std::move(from);
  }

  inline TrafficLight_Box& operator=(const TrafficLight_Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight_Box& operator=(TrafficLight_Box&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight_Box& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight_Box* internal_default_instance() {
    return reinterpret_cast<const TrafficLight_Box*>(
               &_TrafficLight_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficLight_Box& a, TrafficLight_Box& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight_Box* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight_Box* New() const final {
    return CreateMaybeMessage<TrafficLight_Box>(nullptr);
  }

  TrafficLight_Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight_Box>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight_Box& from);
  void MergeFrom(const TrafficLight_Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight_Box* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficLight.Box";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5flight_2eproto);
    return ::descriptor_table_traffic_5flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kCameraIdFieldNumber = 5,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float width = 3 [default = 0];
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // optional float height = 4 [default = 0];
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // optional int32 camera_id = 5 [default = 0];
  bool has_camera_id() const;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficLight.Box)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float width_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  friend struct ::TableStruct_traffic_5flight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5flight_2eproto);
    return ::descriptor_table_traffic_5flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficLight_Box Box;

  typedef TrafficLight_Color Color;
  static constexpr Color UNKNOWN_COLOR =
    TrafficLight_Color_UNKNOWN_COLOR;
  static constexpr Color RED =
    TrafficLight_Color_RED;
  static constexpr Color YELLOW =
    TrafficLight_Color_YELLOW;
  static constexpr Color GREEN =
    TrafficLight_Color_GREEN;
  static constexpr Color BLACK =
    TrafficLight_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return TrafficLight_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    TrafficLight_Color_Color_MIN;
  static constexpr Color Color_MAX =
    TrafficLight_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    TrafficLight_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return TrafficLight_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return TrafficLight_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(const std::string& name,
      Color* value) {
    return TrafficLight_Color_Parse(name, value);
  }

  typedef TrafficLight_Type Type;
  static constexpr Type UNKNOWN_TYPE =
    TrafficLight_Type_UNKNOWN_TYPE;
  static constexpr Type STRAIGHT =
    TrafficLight_Type_STRAIGHT;
  static constexpr Type LEFT =
    TrafficLight_Type_LEFT;
  static constexpr Type RIGHT =
    TrafficLight_Type_RIGHT;
  static constexpr Type U_TURN =
    TrafficLight_Type_U_TURN;
  static inline bool Type_IsValid(int value) {
    return TrafficLight_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TrafficLight_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TrafficLight_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TrafficLight_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TrafficLight_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TrafficLight_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TrafficLight_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
    kBoxFieldNumber = 4,
    kColorFieldNumber = 2,
    kConfidenceFieldNumber = 5,
    kTrackingTimeFieldNumber = 6,
    kBlinkFieldNumber = 7,
    kRemainingTimeFieldNumber = 8,
  };
  // repeated .phoenix.msg.perception.TrafficLight.Type type = 3;
  int type_size() const;
  void clear_type();
  ::phoenix::msg::perception::TrafficLight_Type type(int index) const;
  void set_type(int index, ::phoenix::msg::perception::TrafficLight_Type value);
  void add_type(::phoenix::msg::perception::TrafficLight_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.perception.TrafficLight.Box box = 4;
  bool has_box() const;
  void clear_box();
  const ::phoenix::msg::perception::TrafficLight_Box& box() const;
  ::phoenix::msg::perception::TrafficLight_Box* release_box();
  ::phoenix::msg::perception::TrafficLight_Box* mutable_box();
  void set_allocated_box(::phoenix::msg::perception::TrafficLight_Box* box);

  // optional .phoenix.msg.perception.TrafficLight.Color color = 2 [default = UNKNOWN_COLOR];
  bool has_color() const;
  void clear_color();
  ::phoenix::msg::perception::TrafficLight_Color color() const;
  void set_color(::phoenix::msg::perception::TrafficLight_Color value);

  // optional int32 confidence = 5 [default = 0];
  bool has_confidence() const;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float tracking_time = 6 [default = 0];
  bool has_tracking_time() const;
  void clear_tracking_time();
  float tracking_time() const;
  void set_tracking_time(float value);

  // optional bool blink = 7 [default = false];
  bool has_blink() const;
  void clear_blink();
  bool blink() const;
  void set_blink(bool value);

  // optional int32 remaining_time = 8 [default = -1];
  bool has_remaining_time() const;
  void clear_remaining_time();
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_time() const;
  void set_remaining_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::perception::TrafficLight_Box* box_;
  int color_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float tracking_time_;
  bool blink_;
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_time_;
  friend struct ::TableStruct_traffic_5flight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficLightList) */ {
 public:
  TrafficLightList();
  virtual ~TrafficLightList();

  TrafficLightList(const TrafficLightList& from);
  TrafficLightList(TrafficLightList&& from) noexcept
    : TrafficLightList() {
    *this = ::std::move(from);
  }

  inline TrafficLightList& operator=(const TrafficLightList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightList& operator=(TrafficLightList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightList* internal_default_instance() {
    return reinterpret_cast<const TrafficLightList*>(
               &_TrafficLightList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficLightList& a, TrafficLightList& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightList* New() const final {
    return CreateMaybeMessage<TrafficLightList>(nullptr);
  }

  TrafficLightList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightList& from);
  void MergeFrom(const TrafficLightList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficLightList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5flight_2eproto);
    return ::descriptor_table_traffic_5flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .phoenix.msg.perception.TrafficLight traffic_lights = 2;
  int traffic_lights_size() const;
  void clear_traffic_lights();
  ::phoenix::msg::perception::TrafficLight* mutable_traffic_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficLight >*
      mutable_traffic_lights();
  const ::phoenix::msg::perception::TrafficLight& traffic_lights(int index) const;
  ::phoenix::msg::perception::TrafficLight* add_traffic_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficLight >&
      traffic_lights() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficLightList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficLight > traffic_lights_;
  ::phoenix::msg::common::Header* header_;
  friend struct ::TableStruct_traffic_5flight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLight_Box

// optional float x = 1 [default = 0];
inline bool TrafficLight_Box::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight_Box::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrafficLight_Box::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.Box.x)
  return x_;
}
inline void TrafficLight_Box::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.Box.x)
}

// optional float y = 2 [default = 0];
inline bool TrafficLight_Box::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight_Box::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrafficLight_Box::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.Box.y)
  return y_;
}
inline void TrafficLight_Box::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.Box.y)
}

// optional float width = 3 [default = 0];
inline bool TrafficLight_Box::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight_Box::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrafficLight_Box::width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.Box.width)
  return width_;
}
inline void TrafficLight_Box::set_width(float value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.Box.width)
}

// optional float height = 4 [default = 0];
inline bool TrafficLight_Box::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight_Box::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrafficLight_Box::height() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.Box.height)
  return height_;
}
inline void TrafficLight_Box::set_height(float value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.Box.height)
}

// optional int32 camera_id = 5 [default = 0];
inline bool TrafficLight_Box::has_camera_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLight_Box::clear_camera_id() {
  camera_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight_Box::camera_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.Box.camera_id)
  return camera_id_;
}
inline void TrafficLight_Box::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.Box.camera_id)
}

// -------------------------------------------------------------------

// TrafficLight

// optional string id = 1;
inline bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.id)
  return id_.GetNoArena();
}
inline void TrafficLight::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.id)
}
inline void TrafficLight::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.perception.TrafficLight.id)
}
inline void TrafficLight::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.perception.TrafficLight.id)
}
inline void TrafficLight::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.perception.TrafficLight.id)
}
inline std::string* TrafficLight::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficLight.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficLight.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficLight.id)
}

// optional .phoenix.msg.perception.TrafficLight.Color color = 2 [default = UNKNOWN_COLOR];
inline bool TrafficLight::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.color)
  return static_cast< ::phoenix::msg::perception::TrafficLight_Color >(color_);
}
inline void TrafficLight::set_color(::phoenix::msg::perception::TrafficLight_Color value) {
  assert(::phoenix::msg::perception::TrafficLight_Color_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  color_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.color)
}

// repeated .phoenix.msg.perception.TrafficLight.Type type = 3;
inline int TrafficLight::type_size() const {
  return type_.size();
}
inline void TrafficLight::clear_type() {
  type_.Clear();
}
inline ::phoenix::msg::perception::TrafficLight_Type TrafficLight::type(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.type)
  return static_cast< ::phoenix::msg::perception::TrafficLight_Type >(type_.Get(index));
}
inline void TrafficLight::set_type(int index, ::phoenix::msg::perception::TrafficLight_Type value) {
  assert(::phoenix::msg::perception::TrafficLight_Type_IsValid(value));
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.type)
}
inline void TrafficLight::add_type(::phoenix::msg::perception::TrafficLight_Type value) {
  assert(::phoenix::msg::perception::TrafficLight_Type_IsValid(value));
  type_.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.TrafficLight.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrafficLight::type() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.TrafficLight.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrafficLight::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.TrafficLight.type)
  return &type_;
}

// optional .phoenix.msg.perception.TrafficLight.Box box = 4;
inline bool TrafficLight::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::perception::TrafficLight_Box& TrafficLight::box() const {
  const ::phoenix::msg::perception::TrafficLight_Box* p = box_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.box)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::perception::TrafficLight_Box*>(
      &::phoenix::msg::perception::_TrafficLight_Box_default_instance_);
}
inline ::phoenix::msg::perception::TrafficLight_Box* TrafficLight::release_box() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficLight.box)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::perception::TrafficLight_Box* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::phoenix::msg::perception::TrafficLight_Box* TrafficLight::mutable_box() {
  _has_bits_[0] |= 0x00000002u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::perception::TrafficLight_Box>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficLight.box)
  return box_;
}
inline void TrafficLight::set_allocated_box(::phoenix::msg::perception::TrafficLight_Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficLight.box)
}

// optional int32 confidence = 5 [default = 0];
inline bool TrafficLight::has_confidence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.confidence)
  return confidence_;
}
inline void TrafficLight::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.confidence)
}

// optional float tracking_time = 6 [default = 0];
inline bool TrafficLight::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.tracking_time)
  return tracking_time_;
}
inline void TrafficLight::set_tracking_time(float value) {
  _has_bits_[0] |= 0x00000010u;
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.tracking_time)
}

// optional bool blink = 7 [default = false];
inline bool TrafficLight::has_blink() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficLight::clear_blink() {
  blink_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrafficLight::blink() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.blink)
  return blink_;
}
inline void TrafficLight::set_blink(bool value) {
  _has_bits_[0] |= 0x00000020u;
  blink_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.blink)
}

// optional int32 remaining_time = 8 [default = -1];
inline bool TrafficLight::has_remaining_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrafficLight::clear_remaining_time() {
  remaining_time_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::remaining_time() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLight.remaining_time)
  return remaining_time_;
}
inline void TrafficLight::set_remaining_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  remaining_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficLight.remaining_time)
}

// -------------------------------------------------------------------

// TrafficLightList

// optional .phoenix.msg.common.Header header = 1;
inline bool TrafficLightList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& TrafficLightList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLightList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* TrafficLightList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficLightList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* TrafficLightList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficLightList.header)
  return header_;
}
inline void TrafficLightList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficLightList.header)
}

// repeated .phoenix.msg.perception.TrafficLight traffic_lights = 2;
inline int TrafficLightList::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void TrafficLightList::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline ::phoenix::msg::perception::TrafficLight* TrafficLightList::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficLightList.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficLight >*
TrafficLightList::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.TrafficLightList.traffic_lights)
  return &traffic_lights_;
}
inline const ::phoenix::msg::perception::TrafficLight& TrafficLightList::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficLightList.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::phoenix::msg::perception::TrafficLight* TrafficLightList::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.TrafficLightList.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficLight >&
TrafficLightList::traffic_lights() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.TrafficLightList.traffic_lights)
  return traffic_lights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::TrafficLight_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::TrafficLight_Color>() {
  return ::phoenix::msg::perception::TrafficLight_Color_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::TrafficLight_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::TrafficLight_Type>() {
  return ::phoenix::msg::perception::TrafficLight_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traffic_5flight_2eproto
