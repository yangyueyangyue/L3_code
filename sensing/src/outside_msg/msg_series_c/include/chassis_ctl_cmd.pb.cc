// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_ctl_cmd.proto

#include "chassis_ctl_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class ChassisCtlCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisCtlCmd> _instance;
} _ChassisCtlCmd_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::control::_ChassisCtlCmd_default_instance_;
    new (ptr) ::phoenix::msg::control::ChassisCtlCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::ChassisCtlCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chassis_5fctl_5fcmd_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chassis_5fctl_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chassis_5fctl_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, start_robotic_ctl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_eps_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_throttle_sys_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_ebs_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_remote_ctl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_direct_ctl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, enable_acc_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, release_throttle_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, steering_wheel_torque_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, velocity_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, acceleration_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, acc_value_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, brake_value_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, turn_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, brake_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, wiper_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::ChassisCtlCmd, epb_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::phoenix::msg::control::ChassisCtlCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::control::_ChassisCtlCmd_default_instance_),
};

const char descriptor_table_protodef_chassis_5fctl_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025chassis_ctl_cmd.proto\022\023phoenix.msg.con"
  "trol\032\014header.proto\"\272\013\n\rChassisCtlCmd\022*\n\006"
  "header\030\001 \001(\0132\032.phoenix.msg.common.Header"
  "\022\034\n\021start_robotic_ctl\030\002 \001(\005:\0010\022\031\n\nenable"
  "_eps\030\003 \001(\010:\005false\022\"\n\023enable_throttle_sys"
  "\030\004 \001(\010:\005false\022\031\n\nenable_ebs\030\005 \001(\010:\005false"
  "\022 \n\021enable_remote_ctl\030\006 \001(\010:\005false\022 \n\021en"
  "able_direct_ctl\030\007 \001(\010:\005false\022\031\n\nenable_a"
  "cc\030\010 \001(\010:\005false\022\037\n\020release_throttle\030\t \001("
  "\010:\005false\022\037\n\024steering_wheel_angle\030\n \001(\002:\001"
  "0\022\037\n\024steering_wheel_speed\030\013 \001(\002:\0010\022 \n\025st"
  "eering_wheel_torque\030\014 \001(\002:\0010\022\023\n\010velocity"
  "\030\r \001(\002:\0010\022\027\n\014acceleration\030\016 \001(\002:\0010\022\024\n\tac"
  "c_value\030\017 \001(\002:\0010\022\026\n\013brake_value\030\020 \001(\002:\0010"
  "\022K\n\004gear\030\021 \001(\0162/.phoenix.msg.control.Cha"
  "ssisCtlCmd.GearPosition:\014GEAR_INVALID\022W\n"
  "\tturn_lamp\030\022 \001(\01621.phoenix.msg.control.C"
  "hassisCtlCmd.SignalTurnLamp:\021TURN_LAMP_I"
  "NVALID\022O\n\nbrake_lamp\030\023 \001(\0162-.phoenix.msg"
  ".control.ChassisCtlCmd.SignalLamp:\014LAMP_"
  "INVALID\022L\n\005wiper\030\024 \001(\0162..phoenix.msg.con"
  "trol.ChassisCtlCmd.WiperStatus:\rWIPER_IN"
  "VALID\022T\n\nepb_status\030\025 \001(\0162,.phoenix.msg."
  "control.ChassisCtlCmd.EpbStatus:\022EPB_STA"
  "TUS_INVALID\"P\n\014GearPosition\022\020\n\014GEAR_INVA"
  "LID\020\000\022\n\n\006GEAR_P\020\001\022\n\n\006GEAR_N\020\002\022\n\n\006GEAR_R\020"
  "\003\022\n\n\006GEAR_D\020\004\"9\n\nSignalLamp\022\020\n\014LAMP_INVA"
  "LID\020\000\022\014\n\010LAMP_OFF\020\001\022\013\n\007LAMP_ON\020\002\"|\n\016Sign"
  "alTurnLamp\022\025\n\021TURN_LAMP_INVALID\020\000\022\021\n\rTUR"
  "N_LAMP_OFF\020\001\022\022\n\016TURN_LAMP_LEFT\020\002\022\023\n\017TURN"
  "_LAMP_RIGHT\020\003\022\027\n\023TURN_LAMP_EMERGENCY\020\004\"J"
  "\n\tEpbStatus\022\026\n\022EPB_STATUS_INVALID\020\000\022\022\n\016E"
  "PB_STATUS_OFF\020\001\022\021\n\rEPB_STATUS_ON\020\002\"\322\001\n\013W"
  "iperStatus\022\021\n\rWIPER_INVALID\020\000\022\r\n\tWIPER_O"
  "FF\020\001\022 \n\034WIPER_SHORT_PRESS_WITH_CLICK\020\002\022\037"
  "\n\033WIPER_LONG_PRESS_WITH_CLICK\020\003\022\017\n\013WIPER"
  "_INT_1\020\004\022\017\n\013WIPER_INT_2\020\005\022\017\n\013WIPER_INT_3"
  "\020\006\022\017\n\013WIPER_INT_4\020\007\022\014\n\010WIPER_LO\020\010\022\014\n\010WIP"
  "ER_HI\020\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chassis_5fctl_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chassis_5fctl_5fcmd_2eproto_sccs[1] = {
  &scc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chassis_5fctl_5fcmd_2eproto_once;
static bool descriptor_table_chassis_5fctl_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_5fctl_5fcmd_2eproto = {
  &descriptor_table_chassis_5fctl_5fcmd_2eproto_initialized, descriptor_table_protodef_chassis_5fctl_5fcmd_2eproto, "chassis_ctl_cmd.proto", 1527,
  &descriptor_table_chassis_5fctl_5fcmd_2eproto_once, descriptor_table_chassis_5fctl_5fcmd_2eproto_sccs, descriptor_table_chassis_5fctl_5fcmd_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_chassis_5fctl_5fcmd_2eproto::offsets,
  file_level_metadata_chassis_5fctl_5fcmd_2eproto, 1, file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto, file_level_service_descriptors_chassis_5fctl_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chassis_5fctl_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto), true);
namespace phoenix {
namespace msg {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto);
  return file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[0];
}
bool ChassisCtlCmd_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_INVALID;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_P;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_N;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_R;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GEAR_D;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GearPosition_MIN;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd::GearPosition_MAX;
constexpr int ChassisCtlCmd::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_SignalLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto);
  return file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[1];
}
bool ChassisCtlCmd_SignalLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_INVALID;
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_OFF;
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd::LAMP_ON;
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd::SignalLamp_MIN;
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd::SignalLamp_MAX;
constexpr int ChassisCtlCmd::SignalLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_SignalTurnLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto);
  return file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[2];
}
bool ChassisCtlCmd_SignalTurnLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_INVALID;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_OFF;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_LEFT;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_RIGHT;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::TURN_LAMP_EMERGENCY;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::SignalTurnLamp_MIN;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::SignalTurnLamp_MAX;
constexpr int ChassisCtlCmd::SignalTurnLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_EpbStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto);
  return file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[3];
}
bool ChassisCtlCmd_EpbStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_INVALID;
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_OFF;
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd::EPB_STATUS_ON;
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd::EpbStatus_MIN;
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd::EpbStatus_MAX;
constexpr int ChassisCtlCmd::EpbStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_WiperStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_5fctl_5fcmd_2eproto);
  return file_level_enum_descriptors_chassis_5fctl_5fcmd_2eproto[4];
}
bool ChassisCtlCmd_WiperStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INVALID;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_OFF;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_SHORT_PRESS_WITH_CLICK;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_LONG_PRESS_WITH_CLICK;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_1;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_2;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_3;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_INT_4;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_LO;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WIPER_HI;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WiperStatus_MIN;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd::WiperStatus_MAX;
constexpr int ChassisCtlCmd::WiperStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChassisCtlCmd::InitAsDefaultInstance() {
  ::phoenix::msg::control::_ChassisCtlCmd_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class ChassisCtlCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisCtlCmd>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const ChassisCtlCmd* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_robotic_ctl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_throttle_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_ebs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_remote_ctl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_direct_ctl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_release_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steering_wheel_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steering_wheel_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steering_wheel_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acc_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_brake_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_turn_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_brake_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_epb_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::phoenix::msg::common::Header&
ChassisCtlCmd::_Internal::header(const ChassisCtlCmd* msg) {
  return *msg->header_;
}
void ChassisCtlCmd::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChassisCtlCmd::ChassisCtlCmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.ChassisCtlCmd)
}
ChassisCtlCmd::ChassisCtlCmd(const ChassisCtlCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&start_robotic_ctl_, &from.start_robotic_ctl_,
    static_cast<size_t>(reinterpret_cast<char*>(&epb_status_) -
    reinterpret_cast<char*>(&start_robotic_ctl_)) + sizeof(epb_status_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.ChassisCtlCmd)
}

void ChassisCtlCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epb_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(epb_status_));
}

ChassisCtlCmd::~ChassisCtlCmd() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.ChassisCtlCmd)
  SharedDtor();
}

void ChassisCtlCmd::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ChassisCtlCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisCtlCmd& ChassisCtlCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisCtlCmd_chassis_5fctl_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void ChassisCtlCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.ChassisCtlCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&start_robotic_ctl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_acc_) -
        reinterpret_cast<char*>(&start_robotic_ctl_)) + sizeof(enable_acc_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&release_throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_value_) -
        reinterpret_cast<char*>(&release_throttle_)) + sizeof(brake_value_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&gear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&epb_status_) -
        reinterpret_cast<char*>(&gear_)) + sizeof(epb_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChassisCtlCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_robotic_ctl = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_robotic_ctl(&has_bits);
          start_robotic_ctl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_eps = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_eps(&has_bits);
          enable_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_throttle_sys = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_throttle_sys(&has_bits);
          enable_throttle_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_ebs = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_ebs(&has_bits);
          enable_ebs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_remote_ctl = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_remote_ctl(&has_bits);
          enable_remote_ctl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_direct_ctl = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enable_direct_ctl(&has_bits);
          enable_direct_ctl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_acc = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enable_acc(&has_bits);
          enable_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool release_throttle = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_release_throttle(&has_bits);
          release_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_angle = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_steering_wheel_angle(&has_bits);
          steering_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_speed = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_steering_wheel_speed(&has_bits);
          steering_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_torque = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_steering_wheel_torque(&has_bits);
          steering_wheel_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_velocity(&has_bits);
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acceleration = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_value = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_acc_value(&has_bits);
          acc_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake_value = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_brake_value(&has_bits);
          brake_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::ChassisCtlCmd_GearPosition_IsValid(val))) {
            set_gear(static_cast<::phoenix::msg::control::ChassisCtlCmd_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_IsValid(val))) {
            set_turn_lamp(static_cast<::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::ChassisCtlCmd_SignalLamp_IsValid(val))) {
            set_brake_lamp(static_cast<::phoenix::msg::control::ChassisCtlCmd_SignalLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::ChassisCtlCmd_WiperStatus_IsValid(val))) {
            set_wiper(static_cast<::phoenix::msg::control::ChassisCtlCmd_WiperStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::ChassisCtlCmd_EpbStatus_IsValid(val))) {
            set_epb_status(static_cast<::phoenix::msg::control::ChassisCtlCmd_EpbStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChassisCtlCmd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.ChassisCtlCmd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_robotic_ctl = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_robotic_ctl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_robotic_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_eps = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_enable_eps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_throttle_sys = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_enable_throttle_sys(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_throttle_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_ebs = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_enable_ebs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ebs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_remote_ctl = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_enable_remote_ctl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_remote_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_direct_ctl = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_enable_direct_ctl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_direct_ctl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_acc = 8 [default = false];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_enable_acc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool release_throttle = 9 [default = false];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_release_throttle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_angle = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_steering_wheel_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_speed = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_steering_wheel_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_torque = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_steering_wheel_torque(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_velocity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_acceleration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_value = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          _Internal::set_has_acc_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_value = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_brake_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::ChassisCtlCmd_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_IsValid(value)) {
            set_turn_lamp(static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_SignalLamp_IsValid(value)) {
            set_brake_lamp(static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_WiperStatus_IsValid(value)) {
            set_wiper(static_cast< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::ChassisCtlCmd_EpbStatus_IsValid(value)) {
            set_epb_status(static_cast< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.ChassisCtlCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.ChassisCtlCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChassisCtlCmd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.ChassisCtlCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional int32 start_robotic_ctl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->start_robotic_ctl(), output);
  }

  // optional bool enable_eps = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->enable_eps(), output);
  }

  // optional bool enable_throttle_sys = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_throttle_sys(), output);
  }

  // optional bool enable_ebs = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->enable_ebs(), output);
  }

  // optional bool enable_remote_ctl = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->enable_remote_ctl(), output);
  }

  // optional bool enable_direct_ctl = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->enable_direct_ctl(), output);
  }

  // optional bool enable_acc = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->enable_acc(), output);
  }

  // optional bool release_throttle = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->release_throttle(), output);
  }

  // optional float steering_wheel_angle = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->steering_wheel_angle(), output);
  }

  // optional float steering_wheel_speed = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->steering_wheel_speed(), output);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->steering_wheel_torque(), output);
  }

  // optional float velocity = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->velocity(), output);
  }

  // optional float acceleration = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->acceleration(), output);
  }

  // optional float acc_value = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->acc_value(), output);
  }

  // optional float brake_value = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->brake_value(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->gear(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->turn_lamp(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->brake_lamp(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      20, this->wiper(), output);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->epb_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.ChassisCtlCmd)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisCtlCmd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.ChassisCtlCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional int32 start_robotic_ctl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->start_robotic_ctl(), target);
  }

  // optional bool enable_eps = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->enable_eps(), target);
  }

  // optional bool enable_throttle_sys = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->enable_throttle_sys(), target);
  }

  // optional bool enable_ebs = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->enable_ebs(), target);
  }

  // optional bool enable_remote_ctl = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->enable_remote_ctl(), target);
  }

  // optional bool enable_direct_ctl = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->enable_direct_ctl(), target);
  }

  // optional bool enable_acc = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->enable_acc(), target);
  }

  // optional bool release_throttle = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->release_throttle(), target);
  }

  // optional float steering_wheel_angle = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->steering_wheel_angle(), target);
  }

  // optional float steering_wheel_speed = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->steering_wheel_speed(), target);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->steering_wheel_torque(), target);
  }

  // optional float velocity = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->velocity(), target);
  }

  // optional float acceleration = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->acceleration(), target);
  }

  // optional float acc_value = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->acc_value(), target);
  }

  // optional float brake_value = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->brake_value(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->gear(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->turn_lamp(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->brake_lamp(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->wiper(), target);
  }

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->epb_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.ChassisCtlCmd)
  return target;
}

size_t ChassisCtlCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.ChassisCtlCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 start_robotic_ctl = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->start_robotic_ctl());
    }

    // optional bool enable_eps = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_throttle_sys = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_ebs = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_remote_ctl = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_direct_ctl = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_acc = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool release_throttle = 9 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float steering_wheel_angle = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_speed = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_torque = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float velocity = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float acc_value = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float brake_value = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->turn_lamp());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brake_lamp());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wiper());
    }

    // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->epb_status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisCtlCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.ChassisCtlCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisCtlCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisCtlCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.ChassisCtlCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.ChassisCtlCmd)
    MergeFrom(*source);
  }
}

void ChassisCtlCmd::MergeFrom(const ChassisCtlCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.ChassisCtlCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      start_robotic_ctl_ = from.start_robotic_ctl_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_eps_ = from.enable_eps_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_throttle_sys_ = from.enable_throttle_sys_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_ebs_ = from.enable_ebs_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_remote_ctl_ = from.enable_remote_ctl_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_direct_ctl_ = from.enable_direct_ctl_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_acc_ = from.enable_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      release_throttle_ = from.release_throttle_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_wheel_angle_ = from.steering_wheel_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_wheel_speed_ = from.steering_wheel_speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      steering_wheel_torque_ = from.steering_wheel_torque_;
    }
    if (cached_has_bits & 0x00001000u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_value_ = from.acc_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      brake_value_ = from.brake_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00020000u) {
      turn_lamp_ = from.turn_lamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      brake_lamp_ = from.brake_lamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00100000u) {
      epb_status_ = from.epb_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisCtlCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.ChassisCtlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisCtlCmd::CopyFrom(const ChassisCtlCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.ChassisCtlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisCtlCmd::IsInitialized() const {
  return true;
}

void ChassisCtlCmd::InternalSwap(ChassisCtlCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(start_robotic_ctl_, other->start_robotic_ctl_);
  swap(enable_eps_, other->enable_eps_);
  swap(enable_throttle_sys_, other->enable_throttle_sys_);
  swap(enable_ebs_, other->enable_ebs_);
  swap(enable_remote_ctl_, other->enable_remote_ctl_);
  swap(enable_direct_ctl_, other->enable_direct_ctl_);
  swap(enable_acc_, other->enable_acc_);
  swap(release_throttle_, other->release_throttle_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(steering_wheel_speed_, other->steering_wheel_speed_);
  swap(steering_wheel_torque_, other->steering_wheel_torque_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(acc_value_, other->acc_value_);
  swap(brake_value_, other->brake_value_);
  swap(gear_, other->gear_);
  swap(turn_lamp_, other->turn_lamp_);
  swap(brake_lamp_, other->brake_lamp_);
  swap(wiper_, other->wiper_);
  swap(epb_status_, other->epb_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisCtlCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::control::ChassisCtlCmd* Arena::CreateMaybeMessage< ::phoenix::msg::control::ChassisCtlCmd >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::control::ChassisCtlCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
