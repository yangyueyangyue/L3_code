// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planning_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_5fresult_2eproto;
namespace phoenix {
namespace msg {
namespace planning {
class PlanningResult;
class PlanningResultDefaultTypeInternal;
extern PlanningResultDefaultTypeInternal _PlanningResult_default_instance_;
class PlanningResult_TarTrj;
class PlanningResult_TarTrjDefaultTypeInternal;
extern PlanningResult_TarTrjDefaultTypeInternal _PlanningResult_TarTrj_default_instance_;
class PlanningResult_TarTrj_LatErr;
class PlanningResult_TarTrj_LatErrDefaultTypeInternal;
extern PlanningResult_TarTrj_LatErrDefaultTypeInternal _PlanningResult_TarTrj_LatErr_default_instance_;
class PlanningResult_TarTrj_LatErr_Samples;
class PlanningResult_TarTrj_LatErr_SamplesDefaultTypeInternal;
extern PlanningResult_TarTrj_LatErr_SamplesDefaultTypeInternal _PlanningResult_TarTrj_LatErr_Samples_default_instance_;
class PlanningResult_TarTrj_Pos;
class PlanningResult_TarTrj_PosDefaultTypeInternal;
extern PlanningResult_TarTrj_PosDefaultTypeInternal _PlanningResult_TarTrj_Pos_default_instance_;
class PlanningResult_TarTrj_TrjPoint;
class PlanningResult_TarTrj_TrjPointDefaultTypeInternal;
extern PlanningResult_TarTrj_TrjPointDefaultTypeInternal _PlanningResult_TarTrj_TrjPoint_default_instance_;
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::planning::PlanningResult* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult>(Arena*);
template<> ::phoenix::msg::planning::PlanningResult_TarTrj* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj>(Arena*);
template<> ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_LatErr>(Arena*);
template<> ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples>(Arena*);
template<> ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_Pos>(Arena*);
template<> ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace planning {

enum PlanningResult_DrivingMode : int {
  PlanningResult_DrivingMode_DRIVING_MODE_INVALID = 0,
  PlanningResult_DrivingMode_DRIVING_MODE_MANUAL = 1,
  PlanningResult_DrivingMode_DRIVING_MODE_ROBOTIC = 2
};
bool PlanningResult_DrivingMode_IsValid(int value);
constexpr PlanningResult_DrivingMode PlanningResult_DrivingMode_DrivingMode_MIN = PlanningResult_DrivingMode_DRIVING_MODE_INVALID;
constexpr PlanningResult_DrivingMode PlanningResult_DrivingMode_DrivingMode_MAX = PlanningResult_DrivingMode_DRIVING_MODE_ROBOTIC;
constexpr int PlanningResult_DrivingMode_DrivingMode_ARRAYSIZE = PlanningResult_DrivingMode_DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_DrivingMode_descriptor();
template<typename T>
inline const std::string& PlanningResult_DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningResult_DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningResult_DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningResult_DrivingMode_descriptor(), enum_t_value);
}
inline bool PlanningResult_DrivingMode_Parse(
    const std::string& name, PlanningResult_DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningResult_DrivingMode>(
    PlanningResult_DrivingMode_descriptor(), name, value);
}
enum PlanningResult_Gear : int {
  PlanningResult_Gear_GEAR_INVALID = 0,
  PlanningResult_Gear_GEAR_P = 1,
  PlanningResult_Gear_GEAR_N = 2,
  PlanningResult_Gear_GEAR_R = 3,
  PlanningResult_Gear_GEAR_D = 4
};
bool PlanningResult_Gear_IsValid(int value);
constexpr PlanningResult_Gear PlanningResult_Gear_Gear_MIN = PlanningResult_Gear_GEAR_INVALID;
constexpr PlanningResult_Gear PlanningResult_Gear_Gear_MAX = PlanningResult_Gear_GEAR_D;
constexpr int PlanningResult_Gear_Gear_ARRAYSIZE = PlanningResult_Gear_Gear_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_Gear_descriptor();
template<typename T>
inline const std::string& PlanningResult_Gear_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningResult_Gear>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningResult_Gear_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningResult_Gear_descriptor(), enum_t_value);
}
inline bool PlanningResult_Gear_Parse(
    const std::string& name, PlanningResult_Gear* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningResult_Gear>(
    PlanningResult_Gear_descriptor(), name, value);
}
enum PlanningResult_TurnLamp : int {
  PlanningResult_TurnLamp_TURN_LAMP_INVALID = 0,
  PlanningResult_TurnLamp_TURN_LAMP_OFF = 1,
  PlanningResult_TurnLamp_TURN_LAMP_LEFT = 2,
  PlanningResult_TurnLamp_TURN_LAMP_RIGHT = 3,
  PlanningResult_TurnLamp_TURN_LAMP_EMERGENCY = 4
};
bool PlanningResult_TurnLamp_IsValid(int value);
constexpr PlanningResult_TurnLamp PlanningResult_TurnLamp_TurnLamp_MIN = PlanningResult_TurnLamp_TURN_LAMP_INVALID;
constexpr PlanningResult_TurnLamp PlanningResult_TurnLamp_TurnLamp_MAX = PlanningResult_TurnLamp_TURN_LAMP_EMERGENCY;
constexpr int PlanningResult_TurnLamp_TurnLamp_ARRAYSIZE = PlanningResult_TurnLamp_TurnLamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_TurnLamp_descriptor();
template<typename T>
inline const std::string& PlanningResult_TurnLamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningResult_TurnLamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningResult_TurnLamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningResult_TurnLamp_descriptor(), enum_t_value);
}
inline bool PlanningResult_TurnLamp_Parse(
    const std::string& name, PlanningResult_TurnLamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningResult_TurnLamp>(
    PlanningResult_TurnLamp_descriptor(), name, value);
}
enum PlanningResult_Lamp : int {
  PlanningResult_Lamp_LAMP_INVALID = 0,
  PlanningResult_Lamp_LAMP_OFF = 1,
  PlanningResult_Lamp_LAMP_ON = 2
};
bool PlanningResult_Lamp_IsValid(int value);
constexpr PlanningResult_Lamp PlanningResult_Lamp_Lamp_MIN = PlanningResult_Lamp_LAMP_INVALID;
constexpr PlanningResult_Lamp PlanningResult_Lamp_Lamp_MAX = PlanningResult_Lamp_LAMP_ON;
constexpr int PlanningResult_Lamp_Lamp_ARRAYSIZE = PlanningResult_Lamp_Lamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_Lamp_descriptor();
template<typename T>
inline const std::string& PlanningResult_Lamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningResult_Lamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningResult_Lamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningResult_Lamp_descriptor(), enum_t_value);
}
inline bool PlanningResult_Lamp_Parse(
    const std::string& name, PlanningResult_Lamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningResult_Lamp>(
    PlanningResult_Lamp_descriptor(), name, value);
}
enum PlanningResult_TrjDirection : int {
  PlanningResult_TrjDirection_TRJ_DIRECTION_FORWARD = 0,
  PlanningResult_TrjDirection_TRJ_DIRECTION_BACKWARD = 1
};
bool PlanningResult_TrjDirection_IsValid(int value);
constexpr PlanningResult_TrjDirection PlanningResult_TrjDirection_TrjDirection_MIN = PlanningResult_TrjDirection_TRJ_DIRECTION_FORWARD;
constexpr PlanningResult_TrjDirection PlanningResult_TrjDirection_TrjDirection_MAX = PlanningResult_TrjDirection_TRJ_DIRECTION_BACKWARD;
constexpr int PlanningResult_TrjDirection_TrjDirection_ARRAYSIZE = PlanningResult_TrjDirection_TrjDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningResult_TrjDirection_descriptor();
template<typename T>
inline const std::string& PlanningResult_TrjDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningResult_TrjDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningResult_TrjDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningResult_TrjDirection_descriptor(), enum_t_value);
}
inline bool PlanningResult_TrjDirection_Parse(
    const std::string& name, PlanningResult_TrjDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningResult_TrjDirection>(
    PlanningResult_TrjDirection_descriptor(), name, value);
}
// ===================================================================

class PlanningResult_TarTrj_Pos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult.TarTrj.Pos) */ {
 public:
  PlanningResult_TarTrj_Pos();
  virtual ~PlanningResult_TarTrj_Pos();

  PlanningResult_TarTrj_Pos(const PlanningResult_TarTrj_Pos& from);
  PlanningResult_TarTrj_Pos(PlanningResult_TarTrj_Pos&& from) noexcept
    : PlanningResult_TarTrj_Pos() {
    *this = ::std::move(from);
  }

  inline PlanningResult_TarTrj_Pos& operator=(const PlanningResult_TarTrj_Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_TarTrj_Pos& operator=(PlanningResult_TarTrj_Pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult_TarTrj_Pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_TarTrj_Pos* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_TarTrj_Pos*>(
               &_PlanningResult_TarTrj_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanningResult_TarTrj_Pos& a, PlanningResult_TarTrj_Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_TarTrj_Pos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_TarTrj_Pos* New() const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_Pos>(nullptr);
  }

  PlanningResult_TarTrj_Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult_TarTrj_Pos& from);
  void MergeFrom(const PlanningResult_TarTrj_Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult_TarTrj_Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult.TarTrj.Pos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHFieldNumber = 3,
    kCFieldNumber = 4,
    kSFieldNumber = 5,
    kLFieldNumber = 6,
  };
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // optional double h = 3 [default = 0];
  bool has_h() const;
  void clear_h();
  double h() const;
  void set_h(double value);

  // optional double c = 4 [default = 0];
  bool has_c() const;
  void clear_c();
  double c() const;
  void set_c(double value);

  // optional double s = 5 [default = 0];
  bool has_s() const;
  void clear_s();
  double s() const;
  void set_s(double value);

  // optional double l = 6 [default = 0];
  bool has_l() const;
  void clear_l();
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult.TarTrj.Pos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double h_;
  double c_;
  double s_;
  double l_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult_TarTrj_LatErr_Samples :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples) */ {
 public:
  PlanningResult_TarTrj_LatErr_Samples();
  virtual ~PlanningResult_TarTrj_LatErr_Samples();

  PlanningResult_TarTrj_LatErr_Samples(const PlanningResult_TarTrj_LatErr_Samples& from);
  PlanningResult_TarTrj_LatErr_Samples(PlanningResult_TarTrj_LatErr_Samples&& from) noexcept
    : PlanningResult_TarTrj_LatErr_Samples() {
    *this = ::std::move(from);
  }

  inline PlanningResult_TarTrj_LatErr_Samples& operator=(const PlanningResult_TarTrj_LatErr_Samples& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_TarTrj_LatErr_Samples& operator=(PlanningResult_TarTrj_LatErr_Samples&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult_TarTrj_LatErr_Samples& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_TarTrj_LatErr_Samples* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_TarTrj_LatErr_Samples*>(
               &_PlanningResult_TarTrj_LatErr_Samples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanningResult_TarTrj_LatErr_Samples& a, PlanningResult_TarTrj_LatErr_Samples& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_TarTrj_LatErr_Samples* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_TarTrj_LatErr_Samples* New() const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_LatErr_Samples>(nullptr);
  }

  PlanningResult_TarTrj_LatErr_Samples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_LatErr_Samples>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult_TarTrj_LatErr_Samples& from);
  void MergeFrom(const PlanningResult_TarTrj_LatErr_Samples& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult_TarTrj_LatErr_Samples* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatErrFieldNumber = 1,
    kLatErrChgRateFieldNumber = 2,
    kYawErrFieldNumber = 3,
    kYawErrChgRateFieldNumber = 4,
  };
  // optional double lat_err = 1 [default = 0];
  bool has_lat_err() const;
  void clear_lat_err();
  double lat_err() const;
  void set_lat_err(double value);

  // optional double lat_err_chg_rate = 2 [default = 0];
  bool has_lat_err_chg_rate() const;
  void clear_lat_err_chg_rate();
  double lat_err_chg_rate() const;
  void set_lat_err_chg_rate(double value);

  // optional double yaw_err = 3 [default = 0];
  bool has_yaw_err() const;
  void clear_yaw_err();
  double yaw_err() const;
  void set_yaw_err(double value);

  // optional double yaw_err_chg_rate = 4 [default = 0];
  bool has_yaw_err_chg_rate() const;
  void clear_yaw_err_chg_rate();
  double yaw_err_chg_rate() const;
  void set_yaw_err_chg_rate(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_err_;
  double lat_err_chg_rate_;
  double yaw_err_;
  double yaw_err_chg_rate_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult_TarTrj_LatErr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult.TarTrj.LatErr) */ {
 public:
  PlanningResult_TarTrj_LatErr();
  virtual ~PlanningResult_TarTrj_LatErr();

  PlanningResult_TarTrj_LatErr(const PlanningResult_TarTrj_LatErr& from);
  PlanningResult_TarTrj_LatErr(PlanningResult_TarTrj_LatErr&& from) noexcept
    : PlanningResult_TarTrj_LatErr() {
    *this = ::std::move(from);
  }

  inline PlanningResult_TarTrj_LatErr& operator=(const PlanningResult_TarTrj_LatErr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_TarTrj_LatErr& operator=(PlanningResult_TarTrj_LatErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult_TarTrj_LatErr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_TarTrj_LatErr* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_TarTrj_LatErr*>(
               &_PlanningResult_TarTrj_LatErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanningResult_TarTrj_LatErr& a, PlanningResult_TarTrj_LatErr& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_TarTrj_LatErr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_TarTrj_LatErr* New() const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_LatErr>(nullptr);
  }

  PlanningResult_TarTrj_LatErr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_LatErr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult_TarTrj_LatErr& from);
  void MergeFrom(const PlanningResult_TarTrj_LatErr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult_TarTrj_LatErr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult.TarTrj.LatErr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlanningResult_TarTrj_LatErr_Samples Samples;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 2,
    kMovingFlagFieldNumber = 1,
  };
  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
  int samples_size() const;
  void clear_samples();
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >*
      mutable_samples();
  const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples& samples(int index) const;
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >&
      samples() const;

  // optional int32 moving_flag = 1 [default = 0];
  bool has_moving_flag() const;
  void clear_moving_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 moving_flag() const;
  void set_moving_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult.TarTrj.LatErr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples > samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 moving_flag_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult_TarTrj_TrjPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint) */ {
 public:
  PlanningResult_TarTrj_TrjPoint();
  virtual ~PlanningResult_TarTrj_TrjPoint();

  PlanningResult_TarTrj_TrjPoint(const PlanningResult_TarTrj_TrjPoint& from);
  PlanningResult_TarTrj_TrjPoint(PlanningResult_TarTrj_TrjPoint&& from) noexcept
    : PlanningResult_TarTrj_TrjPoint() {
    *this = ::std::move(from);
  }

  inline PlanningResult_TarTrj_TrjPoint& operator=(const PlanningResult_TarTrj_TrjPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_TarTrj_TrjPoint& operator=(PlanningResult_TarTrj_TrjPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult_TarTrj_TrjPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_TarTrj_TrjPoint* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_TarTrj_TrjPoint*>(
               &_PlanningResult_TarTrj_TrjPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlanningResult_TarTrj_TrjPoint& a, PlanningResult_TarTrj_TrjPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_TarTrj_TrjPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_TarTrj_TrjPoint* New() const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_TrjPoint>(nullptr);
  }

  PlanningResult_TarTrj_TrjPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_TarTrj_TrjPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult_TarTrj_TrjPoint& from);
  void MergeFrom(const PlanningResult_TarTrj_TrjPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult_TarTrj_TrjPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHFieldNumber = 3,
    kCFieldNumber = 4,
    kSFieldNumber = 5,
  };
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // optional double h = 3 [default = 0];
  bool has_h() const;
  void clear_h();
  double h() const;
  void set_h(double value);

  // optional double c = 4 [default = 0];
  bool has_c() const;
  void clear_c();
  double c() const;
  void set_c(double value);

  // optional double s = 5 [default = 0];
  bool has_s() const;
  void clear_s();
  double s() const;
  void set_s(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double h_;
  double c_;
  double s_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult_TarTrj :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult.TarTrj) */ {
 public:
  PlanningResult_TarTrj();
  virtual ~PlanningResult_TarTrj();

  PlanningResult_TarTrj(const PlanningResult_TarTrj& from);
  PlanningResult_TarTrj(PlanningResult_TarTrj&& from) noexcept
    : PlanningResult_TarTrj() {
    *this = ::std::move(from);
  }

  inline PlanningResult_TarTrj& operator=(const PlanningResult_TarTrj& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_TarTrj& operator=(PlanningResult_TarTrj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult_TarTrj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_TarTrj* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_TarTrj*>(
               &_PlanningResult_TarTrj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlanningResult_TarTrj& a, PlanningResult_TarTrj& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_TarTrj* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_TarTrj* New() const final {
    return CreateMaybeMessage<PlanningResult_TarTrj>(nullptr);
  }

  PlanningResult_TarTrj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_TarTrj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult_TarTrj& from);
  void MergeFrom(const PlanningResult_TarTrj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult_TarTrj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult.TarTrj";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlanningResult_TarTrj_Pos Pos;
  typedef PlanningResult_TarTrj_LatErr LatErr;
  typedef PlanningResult_TarTrj_TrjPoint TrjPoint;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 7,
    kCurrPosFieldNumber = 2,
    kLeadingPosFieldNumber = 3,
    kLatErrFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kTrjDirectionFieldNumber = 5,
    kPointsNumFieldNumber = 6,
  };
  // repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
  int points_size() const;
  void clear_points();
  ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >*
      mutable_points();
  const ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint& points(int index) const;
  ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >&
      points() const;

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
  bool has_curr_pos() const;
  void clear_curr_pos();
  const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& curr_pos() const;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* release_curr_pos();
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* mutable_curr_pos();
  void set_allocated_curr_pos(::phoenix::msg::planning::PlanningResult_TarTrj_Pos* curr_pos);

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
  bool has_leading_pos() const;
  void clear_leading_pos();
  const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& leading_pos() const;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* release_leading_pos();
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* mutable_leading_pos();
  void set_allocated_leading_pos(::phoenix::msg::planning::PlanningResult_TarTrj_Pos* leading_pos);

  // optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
  bool has_lat_err() const;
  void clear_lat_err();
  const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr& lat_err() const;
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* release_lat_err();
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* mutable_lat_err();
  void set_allocated_lat_err(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* lat_err);

  // optional int64 timestamp = 1 [default = 0];
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
  bool has_trj_direction() const;
  void clear_trj_direction();
  ::phoenix::msg::planning::PlanningResult_TrjDirection trj_direction() const;
  void set_trj_direction(::phoenix::msg::planning::PlanningResult_TrjDirection value);

  // optional int32 points_num = 6 [default = 0];
  bool has_points_num() const;
  void clear_points_num();
  ::PROTOBUF_NAMESPACE_ID::int32 points_num() const;
  void set_points_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult.TarTrj)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint > points_;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* curr_pos_;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* leading_pos_;
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* lat_err_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int trj_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_num_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningResult) */ {
 public:
  PlanningResult();
  virtual ~PlanningResult();

  PlanningResult(const PlanningResult& from);
  PlanningResult(PlanningResult&& from) noexcept
    : PlanningResult() {
    *this = ::std::move(from);
  }

  inline PlanningResult& operator=(const PlanningResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult& operator=(PlanningResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult* internal_default_instance() {
    return reinterpret_cast<const PlanningResult*>(
               &_PlanningResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlanningResult& a, PlanningResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult* New() const final {
    return CreateMaybeMessage<PlanningResult>(nullptr);
  }

  PlanningResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningResult& from);
  void MergeFrom(const PlanningResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fresult_2eproto);
    return ::descriptor_table_planning_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlanningResult_TarTrj TarTrj;

  typedef PlanningResult_DrivingMode DrivingMode;
  static constexpr DrivingMode DRIVING_MODE_INVALID =
    PlanningResult_DrivingMode_DRIVING_MODE_INVALID;
  static constexpr DrivingMode DRIVING_MODE_MANUAL =
    PlanningResult_DrivingMode_DRIVING_MODE_MANUAL;
  static constexpr DrivingMode DRIVING_MODE_ROBOTIC =
    PlanningResult_DrivingMode_DRIVING_MODE_ROBOTIC;
  static inline bool DrivingMode_IsValid(int value) {
    return PlanningResult_DrivingMode_IsValid(value);
  }
  static constexpr DrivingMode DrivingMode_MIN =
    PlanningResult_DrivingMode_DrivingMode_MIN;
  static constexpr DrivingMode DrivingMode_MAX =
    PlanningResult_DrivingMode_DrivingMode_MAX;
  static constexpr int DrivingMode_ARRAYSIZE =
    PlanningResult_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrivingMode_descriptor() {
    return PlanningResult_DrivingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrivingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrivingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrivingMode_Name.");
    return PlanningResult_DrivingMode_Name(enum_t_value);
  }
  static inline bool DrivingMode_Parse(const std::string& name,
      DrivingMode* value) {
    return PlanningResult_DrivingMode_Parse(name, value);
  }

  typedef PlanningResult_Gear Gear;
  static constexpr Gear GEAR_INVALID =
    PlanningResult_Gear_GEAR_INVALID;
  static constexpr Gear GEAR_P =
    PlanningResult_Gear_GEAR_P;
  static constexpr Gear GEAR_N =
    PlanningResult_Gear_GEAR_N;
  static constexpr Gear GEAR_R =
    PlanningResult_Gear_GEAR_R;
  static constexpr Gear GEAR_D =
    PlanningResult_Gear_GEAR_D;
  static inline bool Gear_IsValid(int value) {
    return PlanningResult_Gear_IsValid(value);
  }
  static constexpr Gear Gear_MIN =
    PlanningResult_Gear_Gear_MIN;
  static constexpr Gear Gear_MAX =
    PlanningResult_Gear_Gear_MAX;
  static constexpr int Gear_ARRAYSIZE =
    PlanningResult_Gear_Gear_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_descriptor() {
    return PlanningResult_Gear_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_Name.");
    return PlanningResult_Gear_Name(enum_t_value);
  }
  static inline bool Gear_Parse(const std::string& name,
      Gear* value) {
    return PlanningResult_Gear_Parse(name, value);
  }

  typedef PlanningResult_TurnLamp TurnLamp;
  static constexpr TurnLamp TURN_LAMP_INVALID =
    PlanningResult_TurnLamp_TURN_LAMP_INVALID;
  static constexpr TurnLamp TURN_LAMP_OFF =
    PlanningResult_TurnLamp_TURN_LAMP_OFF;
  static constexpr TurnLamp TURN_LAMP_LEFT =
    PlanningResult_TurnLamp_TURN_LAMP_LEFT;
  static constexpr TurnLamp TURN_LAMP_RIGHT =
    PlanningResult_TurnLamp_TURN_LAMP_RIGHT;
  static constexpr TurnLamp TURN_LAMP_EMERGENCY =
    PlanningResult_TurnLamp_TURN_LAMP_EMERGENCY;
  static inline bool TurnLamp_IsValid(int value) {
    return PlanningResult_TurnLamp_IsValid(value);
  }
  static constexpr TurnLamp TurnLamp_MIN =
    PlanningResult_TurnLamp_TurnLamp_MIN;
  static constexpr TurnLamp TurnLamp_MAX =
    PlanningResult_TurnLamp_TurnLamp_MAX;
  static constexpr int TurnLamp_ARRAYSIZE =
    PlanningResult_TurnLamp_TurnLamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TurnLamp_descriptor() {
    return PlanningResult_TurnLamp_descriptor();
  }
  template<typename T>
  static inline const std::string& TurnLamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TurnLamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TurnLamp_Name.");
    return PlanningResult_TurnLamp_Name(enum_t_value);
  }
  static inline bool TurnLamp_Parse(const std::string& name,
      TurnLamp* value) {
    return PlanningResult_TurnLamp_Parse(name, value);
  }

  typedef PlanningResult_Lamp Lamp;
  static constexpr Lamp LAMP_INVALID =
    PlanningResult_Lamp_LAMP_INVALID;
  static constexpr Lamp LAMP_OFF =
    PlanningResult_Lamp_LAMP_OFF;
  static constexpr Lamp LAMP_ON =
    PlanningResult_Lamp_LAMP_ON;
  static inline bool Lamp_IsValid(int value) {
    return PlanningResult_Lamp_IsValid(value);
  }
  static constexpr Lamp Lamp_MIN =
    PlanningResult_Lamp_Lamp_MIN;
  static constexpr Lamp Lamp_MAX =
    PlanningResult_Lamp_Lamp_MAX;
  static constexpr int Lamp_ARRAYSIZE =
    PlanningResult_Lamp_Lamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lamp_descriptor() {
    return PlanningResult_Lamp_descriptor();
  }
  template<typename T>
  static inline const std::string& Lamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Lamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Lamp_Name.");
    return PlanningResult_Lamp_Name(enum_t_value);
  }
  static inline bool Lamp_Parse(const std::string& name,
      Lamp* value) {
    return PlanningResult_Lamp_Parse(name, value);
  }

  typedef PlanningResult_TrjDirection TrjDirection;
  static constexpr TrjDirection TRJ_DIRECTION_FORWARD =
    PlanningResult_TrjDirection_TRJ_DIRECTION_FORWARD;
  static constexpr TrjDirection TRJ_DIRECTION_BACKWARD =
    PlanningResult_TrjDirection_TRJ_DIRECTION_BACKWARD;
  static inline bool TrjDirection_IsValid(int value) {
    return PlanningResult_TrjDirection_IsValid(value);
  }
  static constexpr TrjDirection TrjDirection_MIN =
    PlanningResult_TrjDirection_TrjDirection_MIN;
  static constexpr TrjDirection TrjDirection_MAX =
    PlanningResult_TrjDirection_TrjDirection_MAX;
  static constexpr int TrjDirection_ARRAYSIZE =
    PlanningResult_TrjDirection_TrjDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrjDirection_descriptor() {
    return PlanningResult_TrjDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& TrjDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrjDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrjDirection_Name.");
    return PlanningResult_TrjDirection_Name(enum_t_value);
  }
  static inline bool TrjDirection_Parse(const std::string& name,
      TrjDirection* value) {
    return PlanningResult_TrjDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTarTrjFieldNumber = 14,
    kCurStatusFieldNumber = 2,
    kTarDrivingModeFieldNumber = 3,
    kEnableEpsFieldNumber = 4,
    kEnableThrottleSysFieldNumber = 5,
    kEnableEbsFieldNumber = 6,
    kHoldSteeringWheelFieldNumber = 7,
    kReleaseThrottleFieldNumber = 8,
    kTarGearFieldNumber = 9,
    kTarTurnLampFieldNumber = 10,
    kTarVFieldNumber = 12,
    kTarAFieldNumber = 13,
    kTarBrakeLampFieldNumber = 11,
  };
  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
  bool has_tar_trj() const;
  void clear_tar_trj();
  const ::phoenix::msg::planning::PlanningResult_TarTrj& tar_trj() const;
  ::phoenix::msg::planning::PlanningResult_TarTrj* release_tar_trj();
  ::phoenix::msg::planning::PlanningResult_TarTrj* mutable_tar_trj();
  void set_allocated_tar_trj(::phoenix::msg::planning::PlanningResult_TarTrj* tar_trj);

  // optional int32 cur_status = 2 [default = 0];
  bool has_cur_status() const;
  void clear_cur_status();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_status() const;
  void set_cur_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
  bool has_tar_driving_mode() const;
  void clear_tar_driving_mode();
  ::phoenix::msg::planning::PlanningResult_DrivingMode tar_driving_mode() const;
  void set_tar_driving_mode(::phoenix::msg::planning::PlanningResult_DrivingMode value);

  // optional bool enable_eps = 4 [default = false];
  bool has_enable_eps() const;
  void clear_enable_eps();
  bool enable_eps() const;
  void set_enable_eps(bool value);

  // optional bool enable_throttle_sys = 5 [default = false];
  bool has_enable_throttle_sys() const;
  void clear_enable_throttle_sys();
  bool enable_throttle_sys() const;
  void set_enable_throttle_sys(bool value);

  // optional bool enable_ebs = 6 [default = false];
  bool has_enable_ebs() const;
  void clear_enable_ebs();
  bool enable_ebs() const;
  void set_enable_ebs(bool value);

  // optional bool hold_steering_wheel = 7 [default = false];
  bool has_hold_steering_wheel() const;
  void clear_hold_steering_wheel();
  bool hold_steering_wheel() const;
  void set_hold_steering_wheel(bool value);

  // optional bool release_throttle = 8 [default = false];
  bool has_release_throttle() const;
  void clear_release_throttle();
  bool release_throttle() const;
  void set_release_throttle(bool value);

  // optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
  bool has_tar_gear() const;
  void clear_tar_gear();
  ::phoenix::msg::planning::PlanningResult_Gear tar_gear() const;
  void set_tar_gear(::phoenix::msg::planning::PlanningResult_Gear value);

  // optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
  bool has_tar_turn_lamp() const;
  void clear_tar_turn_lamp();
  ::phoenix::msg::planning::PlanningResult_TurnLamp tar_turn_lamp() const;
  void set_tar_turn_lamp(::phoenix::msg::planning::PlanningResult_TurnLamp value);

  // optional double tar_v = 12 [default = 0];
  bool has_tar_v() const;
  void clear_tar_v();
  double tar_v() const;
  void set_tar_v(double value);

  // optional double tar_a = 13 [default = 0];
  bool has_tar_a() const;
  void clear_tar_a();
  double tar_a() const;
  void set_tar_a(double value);

  // optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
  bool has_tar_brake_lamp() const;
  void clear_tar_brake_lamp();
  ::phoenix::msg::planning::PlanningResult_Lamp tar_brake_lamp() const;
  void set_tar_brake_lamp(::phoenix::msg::planning::PlanningResult_Lamp value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::common::Header* header_;
  ::phoenix::msg::planning::PlanningResult_TarTrj* tar_trj_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_status_;
  int tar_driving_mode_;
  bool enable_eps_;
  bool enable_throttle_sys_;
  bool enable_ebs_;
  bool hold_steering_wheel_;
  bool release_throttle_;
  int tar_gear_;
  int tar_turn_lamp_;
  double tar_v_;
  double tar_a_;
  int tar_brake_lamp_;
  friend struct ::TableStruct_planning_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanningResult_TarTrj_Pos

// optional double x = 1 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningResult_TarTrj_Pos::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.x)
  return x_;
}
inline void PlanningResult_TarTrj_Pos::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.x)
}

// optional double y = 2 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningResult_TarTrj_Pos::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.y)
  return y_;
}
inline void PlanningResult_TarTrj_Pos::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.y)
}

// optional double h = 3 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningResult_TarTrj_Pos::h() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.h)
  return h_;
}
inline void PlanningResult_TarTrj_Pos::set_h(double value) {
  _has_bits_[0] |= 0x00000004u;
  h_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.h)
}

// optional double c = 4 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlanningResult_TarTrj_Pos::c() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.c)
  return c_;
}
inline void PlanningResult_TarTrj_Pos::set_c(double value) {
  _has_bits_[0] |= 0x00000008u;
  c_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.c)
}

// optional double s = 5 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PlanningResult_TarTrj_Pos::s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.s)
  return s_;
}
inline void PlanningResult_TarTrj_Pos::set_s(double value) {
  _has_bits_[0] |= 0x00000010u;
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.s)
}

// optional double l = 6 [default = 0];
inline bool PlanningResult_TarTrj_Pos::has_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningResult_TarTrj_Pos::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PlanningResult_TarTrj_Pos::l() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.Pos.l)
  return l_;
}
inline void PlanningResult_TarTrj_Pos::set_l(double value) {
  _has_bits_[0] |= 0x00000020u;
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.Pos.l)
}

// -------------------------------------------------------------------

// PlanningResult_TarTrj_LatErr_Samples

// optional double lat_err = 1 [default = 0];
inline bool PlanningResult_TarTrj_LatErr_Samples::has_lat_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningResult_TarTrj_LatErr_Samples::clear_lat_err() {
  lat_err_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningResult_TarTrj_LatErr_Samples::lat_err() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.lat_err)
  return lat_err_;
}
inline void PlanningResult_TarTrj_LatErr_Samples::set_lat_err(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_err_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.lat_err)
}

// optional double lat_err_chg_rate = 2 [default = 0];
inline bool PlanningResult_TarTrj_LatErr_Samples::has_lat_err_chg_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningResult_TarTrj_LatErr_Samples::clear_lat_err_chg_rate() {
  lat_err_chg_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningResult_TarTrj_LatErr_Samples::lat_err_chg_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.lat_err_chg_rate)
  return lat_err_chg_rate_;
}
inline void PlanningResult_TarTrj_LatErr_Samples::set_lat_err_chg_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  lat_err_chg_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.lat_err_chg_rate)
}

// optional double yaw_err = 3 [default = 0];
inline bool PlanningResult_TarTrj_LatErr_Samples::has_yaw_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningResult_TarTrj_LatErr_Samples::clear_yaw_err() {
  yaw_err_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningResult_TarTrj_LatErr_Samples::yaw_err() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.yaw_err)
  return yaw_err_;
}
inline void PlanningResult_TarTrj_LatErr_Samples::set_yaw_err(double value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_err_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.yaw_err)
}

// optional double yaw_err_chg_rate = 4 [default = 0];
inline bool PlanningResult_TarTrj_LatErr_Samples::has_yaw_err_chg_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningResult_TarTrj_LatErr_Samples::clear_yaw_err_chg_rate() {
  yaw_err_chg_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlanningResult_TarTrj_LatErr_Samples::yaw_err_chg_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.yaw_err_chg_rate)
  return yaw_err_chg_rate_;
}
inline void PlanningResult_TarTrj_LatErr_Samples::set_yaw_err_chg_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  yaw_err_chg_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples.yaw_err_chg_rate)
}

// -------------------------------------------------------------------

// PlanningResult_TarTrj_LatErr

// optional int32 moving_flag = 1 [default = 0];
inline bool PlanningResult_TarTrj_LatErr::has_moving_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningResult_TarTrj_LatErr::clear_moving_flag() {
  moving_flag_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_TarTrj_LatErr::moving_flag() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.moving_flag)
  return moving_flag_;
}
inline void PlanningResult_TarTrj_LatErr::set_moving_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  moving_flag_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.moving_flag)
}

// repeated .phoenix.msg.planning.PlanningResult.TarTrj.LatErr.Samples samples = 2;
inline int PlanningResult_TarTrj_LatErr::samples_size() const {
  return samples_.size();
}
inline void PlanningResult_TarTrj_LatErr::clear_samples() {
  samples_.Clear();
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* PlanningResult_TarTrj_LatErr::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >*
PlanningResult_TarTrj_LatErr::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.samples)
  return &samples_;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples& PlanningResult_TarTrj_LatErr::samples(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.samples)
  return samples_.Get(index);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples* PlanningResult_TarTrj_LatErr::add_samples() {
  // @@protoc_insertion_point(field_add:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.samples)
  return samples_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr_Samples >&
PlanningResult_TarTrj_LatErr::samples() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.planning.PlanningResult.TarTrj.LatErr.samples)
  return samples_;
}

// -------------------------------------------------------------------

// PlanningResult_TarTrj_TrjPoint

// optional double x = 1 [default = 0];
inline bool PlanningResult_TarTrj_TrjPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningResult_TarTrj_TrjPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningResult_TarTrj_TrjPoint::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.x)
  return x_;
}
inline void PlanningResult_TarTrj_TrjPoint::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.x)
}

// optional double y = 2 [default = 0];
inline bool PlanningResult_TarTrj_TrjPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningResult_TarTrj_TrjPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningResult_TarTrj_TrjPoint::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.y)
  return y_;
}
inline void PlanningResult_TarTrj_TrjPoint::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.y)
}

// optional double h = 3 [default = 0];
inline bool PlanningResult_TarTrj_TrjPoint::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningResult_TarTrj_TrjPoint::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningResult_TarTrj_TrjPoint::h() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.h)
  return h_;
}
inline void PlanningResult_TarTrj_TrjPoint::set_h(double value) {
  _has_bits_[0] |= 0x00000004u;
  h_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.h)
}

// optional double c = 4 [default = 0];
inline bool PlanningResult_TarTrj_TrjPoint::has_c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningResult_TarTrj_TrjPoint::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlanningResult_TarTrj_TrjPoint::c() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.c)
  return c_;
}
inline void PlanningResult_TarTrj_TrjPoint::set_c(double value) {
  _has_bits_[0] |= 0x00000008u;
  c_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.c)
}

// optional double s = 5 [default = 0];
inline bool PlanningResult_TarTrj_TrjPoint::has_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningResult_TarTrj_TrjPoint::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PlanningResult_TarTrj_TrjPoint::s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.s)
  return s_;
}
inline void PlanningResult_TarTrj_TrjPoint::set_s(double value) {
  _has_bits_[0] |= 0x00000010u;
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint.s)
}

// -------------------------------------------------------------------

// PlanningResult_TarTrj

// optional int64 timestamp = 1 [default = 0];
inline bool PlanningResult_TarTrj::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningResult_TarTrj::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlanningResult_TarTrj::timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.timestamp)
  return timestamp_;
}
inline void PlanningResult_TarTrj::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.timestamp)
}

// optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos curr_pos = 2;
inline bool PlanningResult_TarTrj::has_curr_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningResult_TarTrj::clear_curr_pos() {
  if (curr_pos_ != nullptr) curr_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& PlanningResult_TarTrj::curr_pos() const {
  const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* p = curr_pos_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.curr_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos*>(
      &::phoenix::msg::planning::_PlanningResult_TarTrj_Pos_default_instance_);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* PlanningResult_TarTrj::release_curr_pos() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningResult.TarTrj.curr_pos)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* temp = curr_pos_;
  curr_pos_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* PlanningResult_TarTrj::mutable_curr_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (curr_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_Pos>(GetArenaNoVirtual());
    curr_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.TarTrj.curr_pos)
  return curr_pos_;
}
inline void PlanningResult_TarTrj::set_allocated_curr_pos(::phoenix::msg::planning::PlanningResult_TarTrj_Pos* curr_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curr_pos_;
  }
  if (curr_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curr_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  curr_pos_ = curr_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningResult.TarTrj.curr_pos)
}

// optional .phoenix.msg.planning.PlanningResult.TarTrj.Pos leading_pos = 3;
inline bool PlanningResult_TarTrj::has_leading_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningResult_TarTrj::clear_leading_pos() {
  if (leading_pos_ != nullptr) leading_pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos& PlanningResult_TarTrj::leading_pos() const {
  const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* p = leading_pos_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.leading_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningResult_TarTrj_Pos*>(
      &::phoenix::msg::planning::_PlanningResult_TarTrj_Pos_default_instance_);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* PlanningResult_TarTrj::release_leading_pos() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningResult.TarTrj.leading_pos)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* temp = leading_pos_;
  leading_pos_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_Pos* PlanningResult_TarTrj::mutable_leading_pos() {
  _has_bits_[0] |= 0x00000002u;
  if (leading_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_Pos>(GetArenaNoVirtual());
    leading_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.TarTrj.leading_pos)
  return leading_pos_;
}
inline void PlanningResult_TarTrj::set_allocated_leading_pos(::phoenix::msg::planning::PlanningResult_TarTrj_Pos* leading_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete leading_pos_;
  }
  if (leading_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leading_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leading_pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leading_pos_ = leading_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningResult.TarTrj.leading_pos)
}

// optional .phoenix.msg.planning.PlanningResult.TarTrj.LatErr lat_err = 4;
inline bool PlanningResult_TarTrj::has_lat_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningResult_TarTrj::clear_lat_err() {
  if (lat_err_ != nullptr) lat_err_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr& PlanningResult_TarTrj::lat_err() const {
  const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* p = lat_err_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.lat_err)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr*>(
      &::phoenix::msg::planning::_PlanningResult_TarTrj_LatErr_default_instance_);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* PlanningResult_TarTrj::release_lat_err() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningResult.TarTrj.lat_err)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* temp = lat_err_;
  lat_err_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* PlanningResult_TarTrj::mutable_lat_err() {
  _has_bits_[0] |= 0x00000004u;
  if (lat_err_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj_LatErr>(GetArenaNoVirtual());
    lat_err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.TarTrj.lat_err)
  return lat_err_;
}
inline void PlanningResult_TarTrj::set_allocated_lat_err(::phoenix::msg::planning::PlanningResult_TarTrj_LatErr* lat_err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lat_err_;
  }
  if (lat_err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lat_err_ = lat_err;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningResult.TarTrj.lat_err)
}

// optional .phoenix.msg.planning.PlanningResult.TrjDirection trj_direction = 5 [default = TRJ_DIRECTION_FORWARD];
inline bool PlanningResult_TarTrj::has_trj_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningResult_TarTrj::clear_trj_direction() {
  trj_direction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::phoenix::msg::planning::PlanningResult_TrjDirection PlanningResult_TarTrj::trj_direction() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.trj_direction)
  return static_cast< ::phoenix::msg::planning::PlanningResult_TrjDirection >(trj_direction_);
}
inline void PlanningResult_TarTrj::set_trj_direction(::phoenix::msg::planning::PlanningResult_TrjDirection value) {
  assert(::phoenix::msg::planning::PlanningResult_TrjDirection_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  trj_direction_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.trj_direction)
}

// optional int32 points_num = 6 [default = 0];
inline bool PlanningResult_TarTrj::has_points_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningResult_TarTrj::clear_points_num() {
  points_num_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_TarTrj::points_num() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.points_num)
  return points_num_;
}
inline void PlanningResult_TarTrj::set_points_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  points_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.TarTrj.points_num)
}

// repeated .phoenix.msg.planning.PlanningResult.TarTrj.TrjPoint points = 7;
inline int PlanningResult_TarTrj::points_size() const {
  return points_.size();
}
inline void PlanningResult_TarTrj::clear_points() {
  points_.Clear();
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* PlanningResult_TarTrj::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.TarTrj.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >*
PlanningResult_TarTrj::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.planning.PlanningResult.TarTrj.points)
  return &points_;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint& PlanningResult_TarTrj::points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.TarTrj.points)
  return points_.Get(index);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint* PlanningResult_TarTrj::add_points() {
  // @@protoc_insertion_point(field_add:phoenix.msg.planning.PlanningResult.TarTrj.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningResult_TarTrj_TrjPoint >&
PlanningResult_TarTrj::points() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.planning.PlanningResult.TarTrj.points)
  return points_;
}

// -------------------------------------------------------------------

// PlanningResult

// optional .phoenix.msg.common.Header header = 1;
inline bool PlanningResult::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& PlanningResult::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* PlanningResult::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningResult.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* PlanningResult::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.header)
  return header_;
}
inline void PlanningResult::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningResult.header)
}

// optional int32 cur_status = 2 [default = 0];
inline bool PlanningResult::has_cur_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningResult::clear_cur_status() {
  cur_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult::cur_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.cur_status)
  return cur_status_;
}
inline void PlanningResult::set_cur_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cur_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.cur_status)
}

// optional .phoenix.msg.planning.PlanningResult.DrivingMode tar_driving_mode = 3 [default = DRIVING_MODE_INVALID];
inline bool PlanningResult::has_tar_driving_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningResult::clear_tar_driving_mode() {
  tar_driving_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::planning::PlanningResult_DrivingMode PlanningResult::tar_driving_mode() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_driving_mode)
  return static_cast< ::phoenix::msg::planning::PlanningResult_DrivingMode >(tar_driving_mode_);
}
inline void PlanningResult::set_tar_driving_mode(::phoenix::msg::planning::PlanningResult_DrivingMode value) {
  assert(::phoenix::msg::planning::PlanningResult_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  tar_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_driving_mode)
}

// optional bool enable_eps = 4 [default = false];
inline bool PlanningResult::has_enable_eps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningResult::clear_enable_eps() {
  enable_eps_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PlanningResult::enable_eps() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.enable_eps)
  return enable_eps_;
}
inline void PlanningResult::set_enable_eps(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_eps_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.enable_eps)
}

// optional bool enable_throttle_sys = 5 [default = false];
inline bool PlanningResult::has_enable_throttle_sys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningResult::clear_enable_throttle_sys() {
  enable_throttle_sys_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PlanningResult::enable_throttle_sys() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.enable_throttle_sys)
  return enable_throttle_sys_;
}
inline void PlanningResult::set_enable_throttle_sys(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_throttle_sys_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.enable_throttle_sys)
}

// optional bool enable_ebs = 6 [default = false];
inline bool PlanningResult::has_enable_ebs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningResult::clear_enable_ebs() {
  enable_ebs_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PlanningResult::enable_ebs() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.enable_ebs)
  return enable_ebs_;
}
inline void PlanningResult::set_enable_ebs(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enable_ebs_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.enable_ebs)
}

// optional bool hold_steering_wheel = 7 [default = false];
inline bool PlanningResult::has_hold_steering_wheel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanningResult::clear_hold_steering_wheel() {
  hold_steering_wheel_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PlanningResult::hold_steering_wheel() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.hold_steering_wheel)
  return hold_steering_wheel_;
}
inline void PlanningResult::set_hold_steering_wheel(bool value) {
  _has_bits_[0] |= 0x00000080u;
  hold_steering_wheel_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.hold_steering_wheel)
}

// optional bool release_throttle = 8 [default = false];
inline bool PlanningResult::has_release_throttle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanningResult::clear_release_throttle() {
  release_throttle_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PlanningResult::release_throttle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.release_throttle)
  return release_throttle_;
}
inline void PlanningResult::set_release_throttle(bool value) {
  _has_bits_[0] |= 0x00000100u;
  release_throttle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.release_throttle)
}

// optional .phoenix.msg.planning.PlanningResult.Gear tar_gear = 9 [default = GEAR_INVALID];
inline bool PlanningResult::has_tar_gear() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanningResult::clear_tar_gear() {
  tar_gear_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::phoenix::msg::planning::PlanningResult_Gear PlanningResult::tar_gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_gear)
  return static_cast< ::phoenix::msg::planning::PlanningResult_Gear >(tar_gear_);
}
inline void PlanningResult::set_tar_gear(::phoenix::msg::planning::PlanningResult_Gear value) {
  assert(::phoenix::msg::planning::PlanningResult_Gear_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  tar_gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_gear)
}

// optional .phoenix.msg.planning.PlanningResult.TurnLamp tar_turn_lamp = 10 [default = TURN_LAMP_INVALID];
inline bool PlanningResult::has_tar_turn_lamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanningResult::clear_tar_turn_lamp() {
  tar_turn_lamp_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::phoenix::msg::planning::PlanningResult_TurnLamp PlanningResult::tar_turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_turn_lamp)
  return static_cast< ::phoenix::msg::planning::PlanningResult_TurnLamp >(tar_turn_lamp_);
}
inline void PlanningResult::set_tar_turn_lamp(::phoenix::msg::planning::PlanningResult_TurnLamp value) {
  assert(::phoenix::msg::planning::PlanningResult_TurnLamp_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  tar_turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_turn_lamp)
}

// optional .phoenix.msg.planning.PlanningResult.Lamp tar_brake_lamp = 11 [default = LAMP_OFF];
inline bool PlanningResult::has_tar_brake_lamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlanningResult::clear_tar_brake_lamp() {
  tar_brake_lamp_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::phoenix::msg::planning::PlanningResult_Lamp PlanningResult::tar_brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_brake_lamp)
  return static_cast< ::phoenix::msg::planning::PlanningResult_Lamp >(tar_brake_lamp_);
}
inline void PlanningResult::set_tar_brake_lamp(::phoenix::msg::planning::PlanningResult_Lamp value) {
  assert(::phoenix::msg::planning::PlanningResult_Lamp_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  tar_brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_brake_lamp)
}

// optional double tar_v = 12 [default = 0];
inline bool PlanningResult::has_tar_v() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanningResult::clear_tar_v() {
  tar_v_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double PlanningResult::tar_v() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_v)
  return tar_v_;
}
inline void PlanningResult::set_tar_v(double value) {
  _has_bits_[0] |= 0x00000800u;
  tar_v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_v)
}

// optional double tar_a = 13 [default = 0];
inline bool PlanningResult::has_tar_a() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlanningResult::clear_tar_a() {
  tar_a_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double PlanningResult::tar_a() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_a)
  return tar_a_;
}
inline void PlanningResult::set_tar_a(double value) {
  _has_bits_[0] |= 0x00001000u;
  tar_a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningResult.tar_a)
}

// optional .phoenix.msg.planning.PlanningResult.TarTrj tar_trj = 14;
inline bool PlanningResult::has_tar_trj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningResult::clear_tar_trj() {
  if (tar_trj_ != nullptr) tar_trj_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::planning::PlanningResult_TarTrj& PlanningResult::tar_trj() const {
  const ::phoenix::msg::planning::PlanningResult_TarTrj* p = tar_trj_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningResult.tar_trj)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningResult_TarTrj*>(
      &::phoenix::msg::planning::_PlanningResult_TarTrj_default_instance_);
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj* PlanningResult::release_tar_trj() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningResult.tar_trj)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::planning::PlanningResult_TarTrj* temp = tar_trj_;
  tar_trj_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningResult_TarTrj* PlanningResult::mutable_tar_trj() {
  _has_bits_[0] |= 0x00000002u;
  if (tar_trj_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningResult_TarTrj>(GetArenaNoVirtual());
    tar_trj_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningResult.tar_trj)
  return tar_trj_;
}
inline void PlanningResult::set_allocated_tar_trj(::phoenix::msg::planning::PlanningResult_TarTrj* tar_trj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tar_trj_;
  }
  if (tar_trj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tar_trj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tar_trj, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tar_trj_ = tar_trj;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningResult.tar_trj)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::planning::PlanningResult_DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::planning::PlanningResult_DrivingMode>() {
  return ::phoenix::msg::planning::PlanningResult_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::planning::PlanningResult_Gear> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::planning::PlanningResult_Gear>() {
  return ::phoenix::msg::planning::PlanningResult_Gear_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::planning::PlanningResult_TurnLamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::planning::PlanningResult_TurnLamp>() {
  return ::phoenix::msg::planning::PlanningResult_TurnLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::planning::PlanningResult_Lamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::planning::PlanningResult_Lamp>() {
  return ::phoenix::msg::planning::PlanningResult_Lamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::planning::PlanningResult_TrjDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::planning::PlanningResult_TrjDirection>() {
  return ::phoenix::msg::planning::PlanningResult_TrjDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planning_5fresult_2eproto
