// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing_config.proto

#include "modules/routing/proto/routing_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto;
namespace apollo {
namespace routing {
class TopicConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicConfig> _instance;
} _TopicConfig_default_instance_;
class RoutingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingConfig> _instance;
} _RoutingConfig_default_instance_;
}  // namespace routing
}  // namespace apollo
static void InitDefaultsscc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoutingConfig_default_instance_;
    new (ptr) ::apollo::routing::RoutingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoutingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto}, {
      &scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_TopicConfig_default_instance_;
    new (ptr) ::apollo::routing::TopicConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::TopicConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2frouting_2fproto_2frouting_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::TopicConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::TopicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::TopicConfig, routing_response_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::TopicConfig, routing_response_history_topic_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, base_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, left_turn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, right_turn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, uturn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, base_changing_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, topic_config_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::routing::TopicConfig)},
  { 9, 21, sizeof(::apollo::routing::RoutingConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_TopicConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_RoutingConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2frouting_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*modules/routing/proto/routing_config.p"
  "roto\022\016apollo.routing\"U\n\013TopicConfig\022\036\n\026r"
  "outing_response_topic\030\001 \001(\t\022&\n\036routing_r"
  "esponse_history_topic\030\002 \001(\t\"\332\001\n\rRoutingC"
  "onfig\022\022\n\nbase_speed\030\001 \001(\001\022\031\n\021left_turn_p"
  "enalty\030\002 \001(\001\022\032\n\022right_turn_penalty\030\003 \001(\001"
  "\022\025\n\ruturn_penalty\030\004 \001(\001\022\026\n\016change_penalt"
  "y\030\005 \001(\001\022\034\n\024base_changing_length\030\006 \001(\001\0221\n"
  "\014topic_config\030\007 \001(\0132\033.apollo.routing.Top"
  "icConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_sccs[2] = {
  &scc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base,
  &scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_once;
static bool descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = {
  &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2frouting_2fproto_2frouting_5fconfig_2eproto, "modules/routing/proto/routing_config.proto", 368,
  &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_once, descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_sccs, descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2frouting_2fproto_2frouting_5fconfig_2eproto, 2, file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto, file_level_service_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto), true);
namespace apollo {
namespace routing {

// ===================================================================

void TopicConfig::InitAsDefaultInstance() {
}
class TopicConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicConfig>()._has_bits_);
  static void set_has_routing_response_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_response_history_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopicConfig::TopicConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.TopicConfig)
}
TopicConfig::TopicConfig(const TopicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  routing_response_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_routing_response_topic()) {
    routing_response_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_response_topic_);
  }
  routing_response_history_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_routing_response_history_topic()) {
    routing_response_history_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_response_history_topic_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.TopicConfig)
}

void TopicConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base);
  routing_response_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routing_response_history_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TopicConfig::~TopicConfig() {
  // @@protoc_insertion_point(destructor:apollo.routing.TopicConfig)
  SharedDtor();
}

void TopicConfig::SharedDtor() {
  routing_response_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routing_response_history_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopicConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicConfig& TopicConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TopicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.TopicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      routing_response_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      routing_response_history_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopicConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string routing_response_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_routing_response_topic(), ptr, ctx, "apollo.routing.TopicConfig.routing_response_topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string routing_response_history_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_routing_response_history_topic(), ptr, ctx, "apollo.routing.TopicConfig.routing_response_history_topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopicConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.TopicConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string routing_response_topic = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_routing_response_topic()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.routing.TopicConfig.routing_response_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string routing_response_history_topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_routing_response_history_topic()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routing_response_history_topic().data(), static_cast<int>(this->routing_response_history_topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.routing.TopicConfig.routing_response_history_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.TopicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.TopicConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopicConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.TopicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string routing_response_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.TopicConfig.routing_response_topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->routing_response_topic(), output);
  }

  // optional string routing_response_history_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_history_topic().data(), static_cast<int>(this->routing_response_history_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.TopicConfig.routing_response_history_topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->routing_response_history_topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.TopicConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.TopicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string routing_response_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.TopicConfig.routing_response_topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->routing_response_topic(), target);
  }

  // optional string routing_response_history_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_history_topic().data(), static_cast<int>(this->routing_response_history_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.TopicConfig.routing_response_history_topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->routing_response_history_topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.TopicConfig)
  return target;
}

size_t TopicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.TopicConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string routing_response_topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->routing_response_topic());
    }

    // optional string routing_response_history_topic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->routing_response_history_topic());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.TopicConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.TopicConfig)
    MergeFrom(*source);
  }
}

void TopicConfig::MergeFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      routing_response_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_response_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      routing_response_history_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_response_history_topic_);
    }
  }
}

void TopicConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicConfig::CopyFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConfig::IsInitialized() const {
  return true;
}

void TopicConfig::InternalSwap(TopicConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routing_response_topic_.Swap(&other->routing_response_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  routing_response_history_topic_.Swap(&other->routing_response_history_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingConfig::InitAsDefaultInstance() {
  ::apollo::routing::_RoutingConfig_default_instance_._instance.get_mutable()->topic_config_ = const_cast< ::apollo::routing::TopicConfig*>(
      ::apollo::routing::TopicConfig::internal_default_instance());
}
class RoutingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingConfig>()._has_bits_);
  static void set_has_base_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left_turn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right_turn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uturn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_changing_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::routing::TopicConfig& topic_config(const RoutingConfig* msg);
  static void set_has_topic_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::TopicConfig&
RoutingConfig::_Internal::topic_config(const RoutingConfig* msg) {
  return *msg->topic_config_;
}
RoutingConfig::RoutingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingConfig)
}
RoutingConfig::RoutingConfig(const RoutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topic_config()) {
    topic_config_ = new ::apollo::routing::TopicConfig(*from.topic_config_);
  } else {
    topic_config_ = nullptr;
  }
  ::memcpy(&base_speed_, &from.base_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_changing_length_) -
    reinterpret_cast<char*>(&base_speed_)) + sizeof(base_changing_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingConfig)
}

void RoutingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base);
  ::memset(&topic_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_changing_length_) -
      reinterpret_cast<char*>(&topic_config_)) + sizeof(base_changing_length_));
}

RoutingConfig::~RoutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingConfig)
  SharedDtor();
}

void RoutingConfig::SharedDtor() {
  if (this != internal_default_instance()) delete topic_config_;
}

void RoutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingConfig& RoutingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingConfig_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(topic_config_ != nullptr);
    topic_config_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&base_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_changing_length_) -
        reinterpret_cast<char*>(&base_speed_)) + sizeof(base_changing_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoutingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double base_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_base_speed(&has_bits);
          base_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double left_turn_penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_left_turn_penalty(&has_bits);
          left_turn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right_turn_penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_right_turn_penalty(&has_bits);
          right_turn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double uturn_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_uturn_penalty(&has_bits);
          uturn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double change_penalty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_change_penalty(&has_bits);
          change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double base_changing_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_base_changing_length(&has_bits);
          base_changing_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.TopicConfig topic_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_topic_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoutingConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base_speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_base_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_turn_penalty = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_left_turn_penalty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_turn_penalty = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_right_turn_penalty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double uturn_penalty = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_uturn_penalty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uturn_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double change_penalty = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_change_penalty(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double base_changing_length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_base_changing_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_changing_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.TopicConfig topic_config = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoutingConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double base_speed = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->base_speed(), output);
  }

  // optional double left_turn_penalty = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->left_turn_penalty(), output);
  }

  // optional double right_turn_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->right_turn_penalty(), output);
  }

  // optional double uturn_penalty = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->uturn_penalty(), output);
  }

  // optional double change_penalty = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->change_penalty(), output);
  }

  // optional double base_changing_length = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->base_changing_length(), output);
  }

  // optional .apollo.routing.TopicConfig topic_config = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::topic_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double base_speed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->base_speed(), target);
  }

  // optional double left_turn_penalty = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->left_turn_penalty(), target);
  }

  // optional double right_turn_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->right_turn_penalty(), target);
  }

  // optional double uturn_penalty = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->uturn_penalty(), target);
  }

  // optional double change_penalty = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->change_penalty(), target);
  }

  // optional double base_changing_length = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->base_changing_length(), target);
  }

  // optional .apollo.routing.TopicConfig topic_config = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::topic_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingConfig)
  return target;
}

size_t RoutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.routing.TopicConfig topic_config = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topic_config_);
    }

    // optional double base_speed = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_penalty = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double uturn_penalty = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double change_penalty = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double base_changing_length = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingConfig)
    MergeFrom(*source);
  }
}

void RoutingConfig::MergeFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_topic_config()->::apollo::routing::TopicConfig::MergeFrom(from.topic_config());
    }
    if (cached_has_bits & 0x00000002u) {
      base_speed_ = from.base_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_turn_penalty_ = from.left_turn_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_turn_penalty_ = from.right_turn_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      uturn_penalty_ = from.uturn_penalty_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_penalty_ = from.change_penalty_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_changing_length_ = from.base_changing_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingConfig::CopyFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingConfig::IsInitialized() const {
  return true;
}

void RoutingConfig::InternalSwap(RoutingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(topic_config_, other->topic_config_);
  swap(base_speed_, other->base_speed_);
  swap(left_turn_penalty_, other->left_turn_penalty_);
  swap(right_turn_penalty_, other->right_turn_penalty_);
  swap(uturn_penalty_, other->uturn_penalty_);
  swap(change_penalty_, other->change_penalty_);
  swap(base_changing_length_, other->base_changing_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::TopicConfig* Arena::CreateMaybeMessage< ::apollo::routing::TopicConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::TopicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingConfig* Arena::CreateMaybeMessage< ::apollo::routing::RoutingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoutingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
