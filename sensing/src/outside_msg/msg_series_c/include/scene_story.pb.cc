// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_story.proto

#include "scene_story.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToClearArea_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToCrosswalk_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToCurveRoad_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToDestination_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToJunction_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToParkingSpaces_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToSignal_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToSpeedBumps_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToStopSign_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToYieldSign_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlLine_scene_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_scene_5fstory_2eproto;
namespace phoenix {
namespace msg {
namespace routing {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class ControlLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlLine> _instance;
} _ControlLine_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class CloseToSpeedBumpsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToSpeedBumps> _instance;
} _CloseToSpeedBumps_default_instance_;
class CloseToParkingSpacesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToParkingSpaces> _instance;
} _CloseToParkingSpaces_default_instance_;
class CloseToCrosswalkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToCrosswalk> _instance;
} _CloseToCrosswalk_default_instance_;
class CloseToClearAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToClearArea> _instance;
} _CloseToClearArea_default_instance_;
class CloseToJunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToJunction> _instance;
} _CloseToJunction_default_instance_;
class CloseToSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToSignal> _instance;
} _CloseToSignal_default_instance_;
class CloseToStopSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToStopSign> _instance;
} _CloseToStopSign_default_instance_;
class CloseToYieldSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToYieldSign> _instance;
} _CloseToYieldSign_default_instance_;
class CloseToCurveRoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToCurveRoad> _instance;
} _CloseToCurveRoad_default_instance_;
class CloseToDestinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToDestination> _instance;
} _CloseToDestination_default_instance_;
class Scene_StoriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Stories> _instance;
} _Scene_Stories_default_instance_;
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_Action_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_Action_default_instance_;
    new (ptr) ::phoenix::msg::routing::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::Action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Action_scene_5fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToClearArea_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToClearArea_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToClearArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToClearArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToClearArea_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToClearArea_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToCrosswalk_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToCrosswalk_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToCrosswalk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToCrosswalk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToCrosswalk_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToCrosswalk_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToCurveRoad_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToCurveRoad_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToCurveRoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToCurveRoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToCurveRoad_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToCurveRoad_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToDestination_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToDestination_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToDestination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToDestination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToDestination_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToDestination_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToJunction_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToJunction_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToJunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToJunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToJunction_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToJunction_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToParkingSpaces_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToParkingSpaces_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToParkingSpaces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToParkingSpaces::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToParkingSpaces_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToParkingSpaces_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToSignal_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToSignal_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToSignal_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToSignal_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToSpeedBumps_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToSpeedBumps_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToSpeedBumps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToSpeedBumps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToSpeedBumps_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToSpeedBumps_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToStopSign_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToStopSign_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToStopSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToStopSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToStopSign_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToStopSign_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_CloseToYieldSign_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_CloseToYieldSign_default_instance_;
    new (ptr) ::phoenix::msg::routing::CloseToYieldSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::CloseToYieldSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CloseToYieldSign_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CloseToYieldSign_scene_5fstory_2eproto}, {
      &scc_info_ControlLine_scene_5fstory_2eproto.base,
      &scc_info_Condition_scene_5fstory_2eproto.base,
      &scc_info_Action_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_Condition_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_Condition_default_instance_;
    new (ptr) ::phoenix::msg::routing::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Condition_scene_5fstory_2eproto}, {}};

static void InitDefaultsscc_info_ControlLine_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_ControlLine_default_instance_;
    new (ptr) ::phoenix::msg::routing::ControlLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::ControlLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlLine_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ControlLine_scene_5fstory_2eproto}, {
      &scc_info_Point_scene_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_Point_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_Point_default_instance_;
    new (ptr) ::phoenix::msg::routing::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Point_scene_5fstory_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Stories_scene_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::routing::_Scene_Stories_default_instance_;
    new (ptr) ::phoenix::msg::routing::Scene_Stories();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::routing::Scene_Stories::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Scene_Stories_scene_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_Scene_Stories_scene_5fstory_2eproto}, {
      &scc_info_CloseToCurveRoad_scene_5fstory_2eproto.base,
      &scc_info_CloseToDestination_scene_5fstory_2eproto.base,
      &scc_info_CloseToCrosswalk_scene_5fstory_2eproto.base,
      &scc_info_CloseToSpeedBumps_scene_5fstory_2eproto.base,
      &scc_info_CloseToParkingSpaces_scene_5fstory_2eproto.base,
      &scc_info_CloseToClearArea_scene_5fstory_2eproto.base,
      &scc_info_CloseToJunction_scene_5fstory_2eproto.base,
      &scc_info_CloseToSignal_scene_5fstory_2eproto.base,
      &scc_info_CloseToStopSign_scene_5fstory_2eproto.base,
      &scc_info_CloseToYieldSign_scene_5fstory_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_5fstory_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scene_5fstory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scene_5fstory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_5fstory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Point, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::ControlLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::ControlLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::ControlLine, start_point_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::ControlLine, end_point_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, start_s_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, end_s_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, speed_high_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Condition, speed_low_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, speed_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, acceleration_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, run_time_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, turn_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Action, brake_lamp_),
  2,
  0,
  1,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSpeedBumps, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToParkingSpaces, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCrosswalk, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToClearArea, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToJunction, action_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToSignal, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToStopSign, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToYieldSign, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, max_curve_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToCurveRoad, action_),
  5,
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, distance_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, control_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::CloseToDestination, action_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_curve_road_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_destination_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_crosswalk_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_speed_bumps_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_parking_spaces_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_clear_area_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_junction_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_signal_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_stop_sign_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::routing::Scene_Stories, close_to_yield_sign_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::phoenix::msg::routing::Point)},
  { 9, 16, sizeof(::phoenix::msg::routing::ControlLine)},
  { 18, 27, sizeof(::phoenix::msg::routing::Condition)},
  { 31, 42, sizeof(::phoenix::msg::routing::Action)},
  { 48, 58, sizeof(::phoenix::msg::routing::CloseToSpeedBumps)},
  { 63, 73, sizeof(::phoenix::msg::routing::CloseToParkingSpaces)},
  { 78, 88, sizeof(::phoenix::msg::routing::CloseToCrosswalk)},
  { 93, 103, sizeof(::phoenix::msg::routing::CloseToClearArea)},
  { 108, 118, sizeof(::phoenix::msg::routing::CloseToJunction)},
  { 123, 133, sizeof(::phoenix::msg::routing::CloseToSignal)},
  { 138, 148, sizeof(::phoenix::msg::routing::CloseToStopSign)},
  { 153, 163, sizeof(::phoenix::msg::routing::CloseToYieldSign)},
  { 168, 179, sizeof(::phoenix::msg::routing::CloseToCurveRoad)},
  { 185, 195, sizeof(::phoenix::msg::routing::CloseToDestination)},
  { 200, 215, sizeof(::phoenix::msg::routing::Scene_Stories)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_ControlLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToSpeedBumps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToParkingSpaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToCrosswalk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToClearArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToJunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToStopSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToYieldSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToCurveRoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_CloseToDestination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::routing::_Scene_Stories_default_instance_),
};

const char descriptor_table_protodef_scene_5fstory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021scene_story.proto\022\023phoenix.msg.routing"
  "\032\rchassis.proto\"#\n\005Point\022\014\n\001x\030\001 \001(\001:\0010\022\014"
  "\n\001y\030\002 \001(\001:\0010\"m\n\013ControlLine\022/\n\013start_poi"
  "nt\030\001 \001(\0132\032.phoenix.msg.routing.Point\022-\n\t"
  "end_point\030\002 \001(\0132\032.phoenix.msg.routing.Po"
  "int\"^\n\tCondition\022\022\n\007start_s\030\001 \001(\001:\0010\022\020\n\005"
  "end_s\030\002 \001(\001:\0010\022\025\n\nspeed_high\030\003 \001(\001:\0010\022\024\n"
  "\tspeed_low\030\004 \001(\001:\0010\"\376\001\n\006Action\0227\n\004gear\030\001"
  " \001(\0162).phoenix.msg.control.Chassis.GearP"
  "osition\022\020\n\005speed\030\002 \001(\001:\0010\022\027\n\014acceleratio"
  "n\030\003 \001(\001:\0010\022\023\n\010run_time\030\004 \001(\001:\0010\022>\n\tturn_"
  "lamp\030\005 \001(\0162+.phoenix.msg.control.Chassis"
  ".SignalTurnLamp\022;\n\nbrake_lamp\030\006 \001(\0162\'.ph"
  "oenix.msg.control.Chassis.SignalLamp\"\314\001\n"
  "\021CloseToSpeedBumps\022\n\n\002id\030\001 \001(\005\022\023\n\010distan"
  "ce\030\002 \001(\001:\0010\0226\n\014control_line\030\003 \001(\0132 .phoe"
  "nix.msg.routing.ControlLine\0221\n\tcondition"
  "\030\004 \001(\0132\036.phoenix.msg.routing.Condition\022+"
  "\n\006action\030\005 \001(\0132\033.phoenix.msg.routing.Act"
  "ion\"\317\001\n\024CloseToParkingSpaces\022\n\n\002id\030\001 \001(\005"
  "\022\023\n\010distance\030\002 \001(\001:\0010\0226\n\014control_line\030\003 "
  "\001(\0132 .phoenix.msg.routing.ControlLine\0221\n"
  "\tcondition\030\004 \001(\0132\036.phoenix.msg.routing.C"
  "ondition\022+\n\006action\030\005 \001(\0132\033.phoenix.msg.r"
  "outing.Action\"\313\001\n\020CloseToCrosswalk\022\n\n\002id"
  "\030\001 \001(\005\022\023\n\010distance\030\002 \001(\001:\0010\0226\n\014control_l"
  "ine\030\003 \001(\0132 .phoenix.msg.routing.ControlL"
  "ine\0221\n\tcondition\030\004 \001(\0132\036.phoenix.msg.rou"
  "ting.Condition\022+\n\006action\030\005 \001(\0132\033.phoenix"
  ".msg.routing.Action\"\313\001\n\020CloseToClearArea"
  "\022\n\n\002id\030\001 \001(\005\022\023\n\010distance\030\002 \001(\001:\0010\0226\n\014con"
  "trol_line\030\003 \001(\0132 .phoenix.msg.routing.Co"
  "ntrolLine\0221\n\tcondition\030\004 \001(\0132\036.phoenix.m"
  "sg.routing.Condition\022+\n\006action\030\005 \001(\0132\033.p"
  "hoenix.msg.routing.Action\"\312\001\n\017CloseToJun"
  "ction\022\n\n\002id\030\001 \001(\t\022\023\n\010distance\030\002 \001(\001:\0010\0226"
  "\n\014control_line\030\003 \001(\0132 .phoenix.msg.routi"
  "ng.ControlLine\0221\n\tcondition\030\004 \001(\0132\036.phoe"
  "nix.msg.routing.Condition\022+\n\006action\030\005 \001("
  "\0132\033.phoenix.msg.routing.Action\"\310\001\n\rClose"
  "ToSignal\022\n\n\002id\030\001 \001(\005\022\023\n\010distance\030\002 \001(\001:\001"
  "0\0226\n\014control_line\030\003 \001(\0132 .phoenix.msg.ro"
  "uting.ControlLine\0221\n\tcondition\030\004 \001(\0132\036.p"
  "hoenix.msg.routing.Condition\022+\n\006action\030\005"
  " \001(\0132\033.phoenix.msg.routing.Action\"\312\001\n\017Cl"
  "oseToStopSign\022\n\n\002id\030\001 \001(\005\022\023\n\010distance\030\002 "
  "\001(\001:\0010\0226\n\014control_line\030\003 \001(\0132 .phoenix.m"
  "sg.routing.ControlLine\0221\n\tcondition\030\004 \001("
  "\0132\036.phoenix.msg.routing.Condition\022+\n\006act"
  "ion\030\005 \001(\0132\033.phoenix.msg.routing.Action\"\313"
  "\001\n\020CloseToYieldSign\022\n\n\002id\030\001 \001(\005\022\023\n\010dista"
  "nce\030\002 \001(\001:\0010\0226\n\014control_line\030\003 \001(\0132 .pho"
  "enix.msg.routing.ControlLine\0221\n\tconditio"
  "n\030\004 \001(\0132\036.phoenix.msg.routing.Condition\022"
  "+\n\006action\030\005 \001(\0132\033.phoenix.msg.routing.Ac"
  "tion\"\341\001\n\020CloseToCurveRoad\022\n\n\002id\030\001 \001(\005\022\023\n"
  "\010distance\030\002 \001(\001:\0010\022\024\n\tmax_curve\030\003 \001(\001:\0010"
  "\0226\n\014control_line\030\004 \001(\0132 .phoenix.msg.rou"
  "ting.ControlLine\0221\n\tcondition\030\005 \001(\0132\036.ph"
  "oenix.msg.routing.Condition\022+\n\006action\030\006 "
  "\001(\0132\033.phoenix.msg.routing.Action\"\315\001\n\022Clo"
  "seToDestination\022\n\n\002id\030\001 \001(\005\022\023\n\010distance\030"
  "\002 \001(\001:\0010\0226\n\014control_line\030\003 \001(\0132 .phoenix"
  ".msg.routing.ControlLine\0221\n\tcondition\030\004 "
  "\001(\0132\036.phoenix.msg.routing.Condition\022+\n\006a"
  "ction\030\005 \001(\0132\033.phoenix.msg.routing.Action"
  "\"\267\005\n\rScene_Stories\022B\n\023close_to_curve_roa"
  "d\030\001 \003(\0132%.phoenix.msg.routing.CloseToCur"
  "veRoad\022E\n\024close_to_destination\030\002 \003(\0132\'.p"
  "hoenix.msg.routing.CloseToDestination\022A\n"
  "\022close_to_crosswalk\030\003 \003(\0132%.phoenix.msg."
  "routing.CloseToCrosswalk\022D\n\024close_to_spe"
  "ed_bumps\030\004 \003(\0132&.phoenix.msg.routing.Clo"
  "seToSpeedBumps\022J\n\027close_to_parking_space"
  "s\030\005 \003(\0132).phoenix.msg.routing.CloseToPar"
  "kingSpaces\022B\n\023close_to_clear_area\030\006 \003(\0132"
  "%.phoenix.msg.routing.CloseToClearArea\022\?"
  "\n\021close_to_junction\030\007 \003(\0132$.phoenix.msg."
  "routing.CloseToJunction\022;\n\017close_to_sign"
  "al\030\010 \003(\0132\".phoenix.msg.routing.CloseToSi"
  "gnal\022@\n\022close_to_stop_sign\030\t \003(\0132$.phoen"
  "ix.msg.routing.CloseToStopSign\022B\n\023close_"
  "to_yield_sign\030\n \003(\0132%.phoenix.msg.routin"
  "g.CloseToYieldSign"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scene_5fstory_2eproto_deps[1] = {
  &::descriptor_table_chassis_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scene_5fstory_2eproto_sccs[15] = {
  &scc_info_Action_scene_5fstory_2eproto.base,
  &scc_info_CloseToClearArea_scene_5fstory_2eproto.base,
  &scc_info_CloseToCrosswalk_scene_5fstory_2eproto.base,
  &scc_info_CloseToCurveRoad_scene_5fstory_2eproto.base,
  &scc_info_CloseToDestination_scene_5fstory_2eproto.base,
  &scc_info_CloseToJunction_scene_5fstory_2eproto.base,
  &scc_info_CloseToParkingSpaces_scene_5fstory_2eproto.base,
  &scc_info_CloseToSignal_scene_5fstory_2eproto.base,
  &scc_info_CloseToSpeedBumps_scene_5fstory_2eproto.base,
  &scc_info_CloseToStopSign_scene_5fstory_2eproto.base,
  &scc_info_CloseToYieldSign_scene_5fstory_2eproto.base,
  &scc_info_Condition_scene_5fstory_2eproto.base,
  &scc_info_ControlLine_scene_5fstory_2eproto.base,
  &scc_info_Point_scene_5fstory_2eproto.base,
  &scc_info_Scene_Stories_scene_5fstory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_5fstory_2eproto_once;
static bool descriptor_table_scene_5fstory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fstory_2eproto = {
  &descriptor_table_scene_5fstory_2eproto_initialized, descriptor_table_protodef_scene_5fstory_2eproto, "scene_story.proto", 3338,
  &descriptor_table_scene_5fstory_2eproto_once, descriptor_table_scene_5fstory_2eproto_sccs, descriptor_table_scene_5fstory_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_scene_5fstory_2eproto::offsets,
  file_level_metadata_scene_5fstory_2eproto, 15, file_level_enum_descriptors_scene_5fstory_2eproto, file_level_service_descriptors_scene_5fstory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_5fstory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_5fstory_2eproto), true);
namespace phoenix {
namespace msg {
namespace routing {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.Point)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.Point)
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlLine::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_ControlLine_default_instance_._instance.get_mutable()->start_point_ = const_cast< ::phoenix::msg::routing::Point*>(
      ::phoenix::msg::routing::Point::internal_default_instance());
  ::phoenix::msg::routing::_ControlLine_default_instance_._instance.get_mutable()->end_point_ = const_cast< ::phoenix::msg::routing::Point*>(
      ::phoenix::msg::routing::Point::internal_default_instance());
}
class ControlLine::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlLine>()._has_bits_);
  static const ::phoenix::msg::routing::Point& start_point(const ControlLine* msg);
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Point& end_point(const ControlLine* msg);
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::phoenix::msg::routing::Point&
ControlLine::_Internal::start_point(const ControlLine* msg) {
  return *msg->start_point_;
}
const ::phoenix::msg::routing::Point&
ControlLine::_Internal::end_point(const ControlLine* msg) {
  return *msg->end_point_;
}
ControlLine::ControlLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.ControlLine)
}
ControlLine::ControlLine(const ControlLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_point()) {
    start_point_ = new ::phoenix::msg::routing::Point(*from.start_point_);
  } else {
    start_point_ = nullptr;
  }
  if (from.has_end_point()) {
    end_point_ = new ::phoenix::msg::routing::Point(*from.end_point_);
  } else {
    end_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.ControlLine)
}

void ControlLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlLine_scene_5fstory_2eproto.base);
  ::memset(&start_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_point_) -
      reinterpret_cast<char*>(&start_point_)) + sizeof(end_point_));
}

ControlLine::~ControlLine() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.ControlLine)
  SharedDtor();
}

void ControlLine::SharedDtor() {
  if (this != internal_default_instance()) delete start_point_;
  if (this != internal_default_instance()) delete end_point_;
}

void ControlLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlLine& ControlLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlLine_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void ControlLine::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.ControlLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_point_ != nullptr);
      start_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_point_ != nullptr);
      end_point_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.routing.Point start_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_start_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Point end_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlLine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.ControlLine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.routing.Point start_point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Point end_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.ControlLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.ControlLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlLine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.ControlLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.routing.Point start_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::start_point(this), output);
  }

  // optional .phoenix.msg.routing.Point end_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::end_point(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.ControlLine)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlLine::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.ControlLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.routing.Point start_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::start_point(this), target);
  }

  // optional .phoenix.msg.routing.Point end_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::end_point(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.ControlLine)
  return target;
}

size_t ControlLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.ControlLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .phoenix.msg.routing.Point start_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_point_);
    }

    // optional .phoenix.msg.routing.Point end_point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_point_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.ControlLine)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.ControlLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.ControlLine)
    MergeFrom(*source);
  }
}

void ControlLine::MergeFrom(const ControlLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.ControlLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start_point()->::phoenix::msg::routing::Point::MergeFrom(from.start_point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end_point()->::phoenix::msg::routing::Point::MergeFrom(from.end_point());
    }
  }
}

void ControlLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.ControlLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlLine::CopyFrom(const ControlLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.ControlLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlLine::IsInitialized() const {
  return true;
}

void ControlLine::InternalSwap(ControlLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_point_, other->start_point_);
  swap(end_point_, other->end_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
}
class Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<Condition>()._has_bits_);
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_high(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_low(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_low_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(speed_low_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.Condition)
}

void Condition::SharedCtor() {
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_low_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(speed_low_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_low_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(speed_low_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_s = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_high = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_speed_high(&has_bits);
          speed_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_low = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_low(&has_bits);
          speed_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Condition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.Condition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_s = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_start_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_end_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_high = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_speed_high(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_low = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_speed_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Condition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->start_s(), output);
  }

  // optional double end_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->end_s(), output);
  }

  // optional double speed_high = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->speed_high(), output);
  }

  // optional double speed_low = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->speed_low(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.Condition)
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->start_s(), target);
  }

  // optional double end_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->end_s(), target);
  }

  // optional double speed_high = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_high(), target);
  }

  // optional double speed_low = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_low(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double start_s = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double speed_high = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_low = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_high_ = from.speed_high_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_low_ = from.speed_low_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(speed_high_, other->speed_high_);
  swap(speed_low_, other->speed_low_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._has_bits_);
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_run_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_turn_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Action::Action()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_lamp_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(brake_lamp_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.Action)
}

void Action::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_lamp_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(brake_lamp_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_lamp_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(brake_lamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_GearPosition_IsValid(val))) {
            set_gear(static_cast<::phoenix::msg::control::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double speed = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double run_time = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_run_time(&has_bits);
          run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(val))) {
            set_turn_lamp(static_cast<::phoenix::msg::control::Chassis_SignalTurnLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalLamp_IsValid(val))) {
            set_brake_lamp(static_cast<::phoenix::msg::control::Chassis_SignalLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.Action)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_acceleration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double run_time = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_run_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value)) {
            set_turn_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalLamp_IsValid(value)) {
            set_brake_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->gear(), output);
  }

  // optional double speed = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // optional double acceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  // optional double run_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->run_time(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->turn_lamp(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->brake_lamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.Action)
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->gear(), target);
  }

  // optional double speed = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // optional double acceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  // optional double run_time = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->run_time(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->turn_lamp(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->brake_lamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double speed = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .phoenix.msg.control.Chassis.GearPosition gear = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->turn_lamp());
    }

    // optional double run_time = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brake_lamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000008u) {
      turn_lamp_ = from.turn_lamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      run_time_ = from.run_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      brake_lamp_ = from.brake_lamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(gear_, other->gear_);
  swap(turn_lamp_, other->turn_lamp_);
  swap(run_time_, other->run_time_);
  swap(brake_lamp_, other->brake_lamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToSpeedBumps::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToSpeedBumps_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToSpeedBumps_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToSpeedBumps_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToSpeedBumps::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToSpeedBumps>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToSpeedBumps* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToSpeedBumps* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToSpeedBumps* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToSpeedBumps::_Internal::control_line(const CloseToSpeedBumps* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToSpeedBumps::_Internal::condition(const CloseToSpeedBumps* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToSpeedBumps::_Internal::action(const CloseToSpeedBumps* msg) {
  return *msg->action_;
}
CloseToSpeedBumps::CloseToSpeedBumps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToSpeedBumps)
}
CloseToSpeedBumps::CloseToSpeedBumps(const CloseToSpeedBumps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToSpeedBumps)
}

void CloseToSpeedBumps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToSpeedBumps_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToSpeedBumps::~CloseToSpeedBumps() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToSpeedBumps)
  SharedDtor();
}

void CloseToSpeedBumps::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToSpeedBumps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToSpeedBumps& CloseToSpeedBumps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToSpeedBumps_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToSpeedBumps::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToSpeedBumps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToSpeedBumps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToSpeedBumps::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToSpeedBumps)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToSpeedBumps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToSpeedBumps)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToSpeedBumps::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToSpeedBumps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToSpeedBumps)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToSpeedBumps::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToSpeedBumps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToSpeedBumps)
  return target;
}

size_t CloseToSpeedBumps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToSpeedBumps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToSpeedBumps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToSpeedBumps)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToSpeedBumps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToSpeedBumps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToSpeedBumps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToSpeedBumps)
    MergeFrom(*source);
  }
}

void CloseToSpeedBumps::MergeFrom(const CloseToSpeedBumps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToSpeedBumps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToSpeedBumps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToSpeedBumps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToSpeedBumps::CopyFrom(const CloseToSpeedBumps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToSpeedBumps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToSpeedBumps::IsInitialized() const {
  return true;
}

void CloseToSpeedBumps::InternalSwap(CloseToSpeedBumps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToSpeedBumps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToParkingSpaces::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToParkingSpaces_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToParkingSpaces_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToParkingSpaces_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToParkingSpaces::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToParkingSpaces>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToParkingSpaces* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToParkingSpaces* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToParkingSpaces* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToParkingSpaces::_Internal::control_line(const CloseToParkingSpaces* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToParkingSpaces::_Internal::condition(const CloseToParkingSpaces* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToParkingSpaces::_Internal::action(const CloseToParkingSpaces* msg) {
  return *msg->action_;
}
CloseToParkingSpaces::CloseToParkingSpaces()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToParkingSpaces)
}
CloseToParkingSpaces::CloseToParkingSpaces(const CloseToParkingSpaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToParkingSpaces)
}

void CloseToParkingSpaces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToParkingSpaces_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToParkingSpaces::~CloseToParkingSpaces() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToParkingSpaces)
  SharedDtor();
}

void CloseToParkingSpaces::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToParkingSpaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToParkingSpaces& CloseToParkingSpaces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToParkingSpaces_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToParkingSpaces::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToParkingSpaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToParkingSpaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToParkingSpaces::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToParkingSpaces)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToParkingSpaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToParkingSpaces)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToParkingSpaces::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToParkingSpaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToParkingSpaces)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToParkingSpaces::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToParkingSpaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToParkingSpaces)
  return target;
}

size_t CloseToParkingSpaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToParkingSpaces)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToParkingSpaces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToParkingSpaces)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToParkingSpaces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToParkingSpaces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToParkingSpaces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToParkingSpaces)
    MergeFrom(*source);
  }
}

void CloseToParkingSpaces::MergeFrom(const CloseToParkingSpaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToParkingSpaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToParkingSpaces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToParkingSpaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToParkingSpaces::CopyFrom(const CloseToParkingSpaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToParkingSpaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToParkingSpaces::IsInitialized() const {
  return true;
}

void CloseToParkingSpaces::InternalSwap(CloseToParkingSpaces* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToParkingSpaces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToCrosswalk::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToCrosswalk_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToCrosswalk_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToCrosswalk_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToCrosswalk::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToCrosswalk>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToCrosswalk* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToCrosswalk* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToCrosswalk* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToCrosswalk::_Internal::control_line(const CloseToCrosswalk* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToCrosswalk::_Internal::condition(const CloseToCrosswalk* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToCrosswalk::_Internal::action(const CloseToCrosswalk* msg) {
  return *msg->action_;
}
CloseToCrosswalk::CloseToCrosswalk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToCrosswalk)
}
CloseToCrosswalk::CloseToCrosswalk(const CloseToCrosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToCrosswalk)
}

void CloseToCrosswalk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToCrosswalk_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToCrosswalk::~CloseToCrosswalk() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToCrosswalk)
  SharedDtor();
}

void CloseToCrosswalk::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToCrosswalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToCrosswalk& CloseToCrosswalk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToCrosswalk_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToCrosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToCrosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToCrosswalk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToCrosswalk::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToCrosswalk)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToCrosswalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToCrosswalk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToCrosswalk::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToCrosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToCrosswalk)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToCrosswalk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToCrosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToCrosswalk)
  return target;
}

size_t CloseToCrosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToCrosswalk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToCrosswalk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToCrosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToCrosswalk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToCrosswalk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToCrosswalk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToCrosswalk)
    MergeFrom(*source);
  }
}

void CloseToCrosswalk::MergeFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToCrosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToCrosswalk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToCrosswalk::CopyFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToCrosswalk::IsInitialized() const {
  return true;
}

void CloseToCrosswalk::InternalSwap(CloseToCrosswalk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToCrosswalk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToClearArea::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToClearArea_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToClearArea_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToClearArea_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToClearArea::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToClearArea>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToClearArea* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToClearArea* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToClearArea* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToClearArea::_Internal::control_line(const CloseToClearArea* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToClearArea::_Internal::condition(const CloseToClearArea* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToClearArea::_Internal::action(const CloseToClearArea* msg) {
  return *msg->action_;
}
CloseToClearArea::CloseToClearArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToClearArea)
}
CloseToClearArea::CloseToClearArea(const CloseToClearArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToClearArea)
}

void CloseToClearArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToClearArea_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToClearArea::~CloseToClearArea() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToClearArea)
  SharedDtor();
}

void CloseToClearArea::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToClearArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToClearArea& CloseToClearArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToClearArea_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToClearArea::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToClearArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToClearArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToClearArea::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToClearArea)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToClearArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToClearArea)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToClearArea::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToClearArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToClearArea)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToClearArea::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToClearArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToClearArea)
  return target;
}

size_t CloseToClearArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToClearArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToClearArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToClearArea)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToClearArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToClearArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToClearArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToClearArea)
    MergeFrom(*source);
  }
}

void CloseToClearArea::MergeFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToClearArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToClearArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToClearArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToClearArea::CopyFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToClearArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToClearArea::IsInitialized() const {
  return true;
}

void CloseToClearArea::InternalSwap(CloseToClearArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToClearArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToJunction::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToJunction_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToJunction_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToJunction_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToJunction::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToJunction>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToJunction* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToJunction* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToJunction* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToJunction::_Internal::control_line(const CloseToJunction* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToJunction::_Internal::condition(const CloseToJunction* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToJunction::_Internal::action(const CloseToJunction* msg) {
  return *msg->action_;
}
CloseToJunction::CloseToJunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToJunction)
}
CloseToJunction::CloseToJunction(const CloseToJunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToJunction)
}

void CloseToJunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToJunction_scene_5fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(distance_));
}

CloseToJunction::~CloseToJunction() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToJunction)
  SharedDtor();
}

void CloseToJunction::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToJunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToJunction& CloseToJunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToJunction_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToJunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToJunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_id(), ptr, ctx, "phoenix.msg.routing.CloseToJunction.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToJunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToJunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "phoenix.msg.routing.CloseToJunction.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToJunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToJunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToJunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToJunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "phoenix.msg.routing.CloseToJunction.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToJunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToJunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToJunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "phoenix.msg.routing.CloseToJunction.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToJunction)
  return target;
}

size_t CloseToJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToJunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToJunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToJunction)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToJunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToJunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToJunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToJunction)
    MergeFrom(*source);
  }
}

void CloseToJunction::MergeFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToJunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000010u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToJunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToJunction::CopyFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToJunction::IsInitialized() const {
  return true;
}

void CloseToJunction::InternalSwap(CloseToJunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToJunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToSignal::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToSignal_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToSignal_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToSignal_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToSignal>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToSignal* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToSignal* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToSignal* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToSignal::_Internal::control_line(const CloseToSignal* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToSignal::_Internal::condition(const CloseToSignal* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToSignal::_Internal::action(const CloseToSignal* msg) {
  return *msg->action_;
}
CloseToSignal::CloseToSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToSignal)
}
CloseToSignal::CloseToSignal(const CloseToSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToSignal)
}

void CloseToSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToSignal_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToSignal::~CloseToSignal() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToSignal)
  SharedDtor();
}

void CloseToSignal::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToSignal& CloseToSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToSignal_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToSignal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToSignal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToSignal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToSignal)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToSignal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToSignal)
  return target;
}

size_t CloseToSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToSignal)
    MergeFrom(*source);
  }
}

void CloseToSignal::MergeFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToSignal::CopyFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToSignal::IsInitialized() const {
  return true;
}

void CloseToSignal::InternalSwap(CloseToSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToStopSign::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToStopSign_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToStopSign_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToStopSign_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToStopSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToStopSign>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToStopSign* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToStopSign* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToStopSign* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToStopSign::_Internal::control_line(const CloseToStopSign* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToStopSign::_Internal::condition(const CloseToStopSign* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToStopSign::_Internal::action(const CloseToStopSign* msg) {
  return *msg->action_;
}
CloseToStopSign::CloseToStopSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToStopSign)
}
CloseToStopSign::CloseToStopSign(const CloseToStopSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToStopSign)
}

void CloseToStopSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToStopSign_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToStopSign::~CloseToStopSign() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToStopSign)
  SharedDtor();
}

void CloseToStopSign::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToStopSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToStopSign& CloseToStopSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToStopSign_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToStopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToStopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToStopSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToStopSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToStopSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToStopSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToStopSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToStopSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToStopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToStopSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToStopSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToStopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToStopSign)
  return target;
}

size_t CloseToStopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToStopSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToStopSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToStopSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToStopSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToStopSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToStopSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToStopSign)
    MergeFrom(*source);
  }
}

void CloseToStopSign::MergeFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToStopSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToStopSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToStopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToStopSign::CopyFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToStopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToStopSign::IsInitialized() const {
  return true;
}

void CloseToStopSign::InternalSwap(CloseToStopSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToStopSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToYieldSign::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToYieldSign_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToYieldSign_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToYieldSign_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToYieldSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToYieldSign>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToYieldSign* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToYieldSign* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToYieldSign* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToYieldSign::_Internal::control_line(const CloseToYieldSign* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToYieldSign::_Internal::condition(const CloseToYieldSign* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToYieldSign::_Internal::action(const CloseToYieldSign* msg) {
  return *msg->action_;
}
CloseToYieldSign::CloseToYieldSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToYieldSign)
}
CloseToYieldSign::CloseToYieldSign(const CloseToYieldSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToYieldSign)
}

void CloseToYieldSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToYieldSign_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToYieldSign::~CloseToYieldSign() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToYieldSign)
  SharedDtor();
}

void CloseToYieldSign::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToYieldSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToYieldSign& CloseToYieldSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToYieldSign_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToYieldSign::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToYieldSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToYieldSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToYieldSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToYieldSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToYieldSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToYieldSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToYieldSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToYieldSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToYieldSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToYieldSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToYieldSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToYieldSign)
  return target;
}

size_t CloseToYieldSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToYieldSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToYieldSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToYieldSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToYieldSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToYieldSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToYieldSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToYieldSign)
    MergeFrom(*source);
  }
}

void CloseToYieldSign::MergeFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToYieldSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToYieldSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToYieldSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToYieldSign::CopyFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToYieldSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToYieldSign::IsInitialized() const {
  return true;
}

void CloseToYieldSign::InternalSwap(CloseToYieldSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToYieldSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToCurveRoad::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToCurveRoad_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToCurveRoad_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToCurveRoad_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToCurveRoad::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToCurveRoad>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToCurveRoad* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToCurveRoad* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToCurveRoad* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToCurveRoad::_Internal::control_line(const CloseToCurveRoad* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToCurveRoad::_Internal::condition(const CloseToCurveRoad* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToCurveRoad::_Internal::action(const CloseToCurveRoad* msg) {
  return *msg->action_;
}
CloseToCurveRoad::CloseToCurveRoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToCurveRoad)
}
CloseToCurveRoad::CloseToCurveRoad(const CloseToCurveRoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToCurveRoad)
}

void CloseToCurveRoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToCurveRoad_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToCurveRoad::~CloseToCurveRoad() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToCurveRoad)
  SharedDtor();
}

void CloseToCurveRoad::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToCurveRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToCurveRoad& CloseToCurveRoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToCurveRoad_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToCurveRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToCurveRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToCurveRoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_curve = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_curve(&has_bits);
          max_curve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToCurveRoad::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToCurveRoad)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_curve = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_max_curve(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_curve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToCurveRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToCurveRoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToCurveRoad::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToCurveRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional double max_curve = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->max_curve(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToCurveRoad)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToCurveRoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToCurveRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional double max_curve = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->max_curve(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToCurveRoad)
  return target;
}

size_t CloseToCurveRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToCurveRoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_curve = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToCurveRoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToCurveRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToCurveRoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToCurveRoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToCurveRoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToCurveRoad)
    MergeFrom(*source);
  }
}

void CloseToCurveRoad::MergeFrom(const CloseToCurveRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToCurveRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_curve_ = from.max_curve_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToCurveRoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToCurveRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToCurveRoad::CopyFrom(const CloseToCurveRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToCurveRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToCurveRoad::IsInitialized() const {
  return true;
}

void CloseToCurveRoad::InternalSwap(CloseToCurveRoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(max_curve_, other->max_curve_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToCurveRoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseToDestination::InitAsDefaultInstance() {
  ::phoenix::msg::routing::_CloseToDestination_default_instance_._instance.get_mutable()->control_line_ = const_cast< ::phoenix::msg::routing::ControlLine*>(
      ::phoenix::msg::routing::ControlLine::internal_default_instance());
  ::phoenix::msg::routing::_CloseToDestination_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::routing::Condition*>(
      ::phoenix::msg::routing::Condition::internal_default_instance());
  ::phoenix::msg::routing::_CloseToDestination_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::routing::Action*>(
      ::phoenix::msg::routing::Action::internal_default_instance());
}
class CloseToDestination::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToDestination>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::phoenix::msg::routing::ControlLine& control_line(const CloseToDestination* msg);
  static void set_has_control_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::routing::Condition& condition(const CloseToDestination* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::routing::Action& action(const CloseToDestination* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::routing::ControlLine&
CloseToDestination::_Internal::control_line(const CloseToDestination* msg) {
  return *msg->control_line_;
}
const ::phoenix::msg::routing::Condition&
CloseToDestination::_Internal::condition(const CloseToDestination* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::routing::Action&
CloseToDestination::_Internal::action(const CloseToDestination* msg) {
  return *msg->action_;
}
CloseToDestination::CloseToDestination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.CloseToDestination)
}
CloseToDestination::CloseToDestination(const CloseToDestination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_line()) {
    control_line_ = new ::phoenix::msg::routing::ControlLine(*from.control_line_);
  } else {
    control_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::routing::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::routing::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.CloseToDestination)
}

void CloseToDestination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToDestination_scene_5fstory_2eproto.base);
  ::memset(&control_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&control_line_)) + sizeof(id_));
}

CloseToDestination::~CloseToDestination() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.CloseToDestination)
  SharedDtor();
}

void CloseToDestination::SharedDtor() {
  if (this != internal_default_instance()) delete control_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void CloseToDestination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToDestination& CloseToDestination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToDestination_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.CloseToDestination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_line_ != nullptr);
      control_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseToDestination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.routing.Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseToDestination::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.CloseToDestination)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_distance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.ControlLine control_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Condition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.routing.Action action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.CloseToDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.CloseToDestination)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseToDestination::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.CloseToDestination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::control_line(this), output);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.CloseToDestination)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToDestination::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.CloseToDestination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double distance = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // optional .phoenix.msg.routing.ControlLine control_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::control_line(this), target);
  }

  // optional .phoenix.msg.routing.Condition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.routing.Action action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.CloseToDestination)
  return target;
}

size_t CloseToDestination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.CloseToDestination)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.routing.ControlLine control_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_line_);
    }

    // optional .phoenix.msg.routing.Condition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.routing.Action action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional double distance = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToDestination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.CloseToDestination)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToDestination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToDestination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.CloseToDestination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.CloseToDestination)
    MergeFrom(*source);
  }
}

void CloseToDestination::MergeFrom(const CloseToDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.CloseToDestination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_line()->::phoenix::msg::routing::ControlLine::MergeFrom(from.control_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::routing::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::routing::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToDestination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.CloseToDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToDestination::CopyFrom(const CloseToDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.CloseToDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToDestination::IsInitialized() const {
  return true;
}

void CloseToDestination::InternalSwap(CloseToDestination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_line_, other->control_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(distance_, other->distance_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToDestination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scene_Stories::InitAsDefaultInstance() {
}
class Scene_Stories::_Internal {
 public:
  using HasBits = decltype(std::declval<Scene_Stories>()._has_bits_);
};

Scene_Stories::Scene_Stories()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.routing.Scene_Stories)
}
Scene_Stories::Scene_Stories(const Scene_Stories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      close_to_curve_road_(from.close_to_curve_road_),
      close_to_destination_(from.close_to_destination_),
      close_to_crosswalk_(from.close_to_crosswalk_),
      close_to_speed_bumps_(from.close_to_speed_bumps_),
      close_to_parking_spaces_(from.close_to_parking_spaces_),
      close_to_clear_area_(from.close_to_clear_area_),
      close_to_junction_(from.close_to_junction_),
      close_to_signal_(from.close_to_signal_),
      close_to_stop_sign_(from.close_to_stop_sign_),
      close_to_yield_sign_(from.close_to_yield_sign_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.routing.Scene_Stories)
}

void Scene_Stories::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Stories_scene_5fstory_2eproto.base);
}

Scene_Stories::~Scene_Stories() {
  // @@protoc_insertion_point(destructor:phoenix.msg.routing.Scene_Stories)
  SharedDtor();
}

void Scene_Stories::SharedDtor() {
}

void Scene_Stories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene_Stories& Scene_Stories::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Stories_scene_5fstory_2eproto.base);
  return *internal_default_instance();
}


void Scene_Stories::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.routing.Scene_Stories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  close_to_curve_road_.Clear();
  close_to_destination_.Clear();
  close_to_crosswalk_.Clear();
  close_to_speed_bumps_.Clear();
  close_to_parking_spaces_.Clear();
  close_to_clear_area_.Clear();
  close_to_junction_.Clear();
  close_to_signal_.Clear();
  close_to_stop_sign_.Clear();
  close_to_yield_sign_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scene_Stories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_curve_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_destination(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_crosswalk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_speed_bumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_parking_spaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_clear_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_junction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_stop_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_close_to_yield_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scene_Stories::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.routing.Scene_Stories)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_curve_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_speed_bumps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_parking_spaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_clear_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_close_to_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.routing.Scene_Stories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.routing.Scene_Stories)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scene_Stories::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.routing.Scene_Stories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_curve_road_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->close_to_curve_road(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_destination_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->close_to_destination(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_crosswalk_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->close_to_crosswalk(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_speed_bumps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->close_to_speed_bumps(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_parking_spaces_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->close_to_parking_spaces(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_clear_area_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->close_to_clear_area(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_junction_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->close_to_junction(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_signal_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->close_to_signal(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_stop_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->close_to_stop_sign(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_yield_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->close_to_yield_sign(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.routing.Scene_Stories)
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene_Stories::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.routing.Scene_Stories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_curve_road_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->close_to_curve_road(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_destination_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->close_to_destination(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_crosswalk_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->close_to_crosswalk(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_speed_bumps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->close_to_speed_bumps(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_parking_spaces_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->close_to_parking_spaces(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_clear_area_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->close_to_clear_area(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_junction_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->close_to_junction(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_signal_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->close_to_signal(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_stop_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->close_to_stop_sign(static_cast<int>(i)), target);
  }

  // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->close_to_yield_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->close_to_yield_sign(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.routing.Scene_Stories)
  return target;
}

size_t Scene_Stories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.routing.Scene_Stories)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_curve_road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_curve_road(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_destination_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_destination(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_crosswalk_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_crosswalk(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_speed_bumps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_speed_bumps(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_parking_spaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_parking_spaces(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_clear_area_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_clear_area(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_junction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_junction(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_signal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_signal(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_stop_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_stop_sign(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->close_to_yield_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->close_to_yield_sign(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene_Stories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.routing.Scene_Stories)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene_Stories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Stories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.routing.Scene_Stories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.routing.Scene_Stories)
    MergeFrom(*source);
  }
}

void Scene_Stories::MergeFrom(const Scene_Stories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.routing.Scene_Stories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  close_to_curve_road_.MergeFrom(from.close_to_curve_road_);
  close_to_destination_.MergeFrom(from.close_to_destination_);
  close_to_crosswalk_.MergeFrom(from.close_to_crosswalk_);
  close_to_speed_bumps_.MergeFrom(from.close_to_speed_bumps_);
  close_to_parking_spaces_.MergeFrom(from.close_to_parking_spaces_);
  close_to_clear_area_.MergeFrom(from.close_to_clear_area_);
  close_to_junction_.MergeFrom(from.close_to_junction_);
  close_to_signal_.MergeFrom(from.close_to_signal_);
  close_to_stop_sign_.MergeFrom(from.close_to_stop_sign_);
  close_to_yield_sign_.MergeFrom(from.close_to_yield_sign_);
}

void Scene_Stories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.routing.Scene_Stories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene_Stories::CopyFrom(const Scene_Stories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.routing.Scene_Stories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene_Stories::IsInitialized() const {
  return true;
}

void Scene_Stories::InternalSwap(Scene_Stories* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&close_to_curve_road_)->InternalSwap(CastToBase(&other->close_to_curve_road_));
  CastToBase(&close_to_destination_)->InternalSwap(CastToBase(&other->close_to_destination_));
  CastToBase(&close_to_crosswalk_)->InternalSwap(CastToBase(&other->close_to_crosswalk_));
  CastToBase(&close_to_speed_bumps_)->InternalSwap(CastToBase(&other->close_to_speed_bumps_));
  CastToBase(&close_to_parking_spaces_)->InternalSwap(CastToBase(&other->close_to_parking_spaces_));
  CastToBase(&close_to_clear_area_)->InternalSwap(CastToBase(&other->close_to_clear_area_));
  CastToBase(&close_to_junction_)->InternalSwap(CastToBase(&other->close_to_junction_));
  CastToBase(&close_to_signal_)->InternalSwap(CastToBase(&other->close_to_signal_));
  CastToBase(&close_to_stop_sign_)->InternalSwap(CastToBase(&other->close_to_stop_sign_));
  CastToBase(&close_to_yield_sign_)->InternalSwap(CastToBase(&other->close_to_yield_sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene_Stories::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::Point* Arena::CreateMaybeMessage< ::phoenix::msg::routing::Point >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::ControlLine* Arena::CreateMaybeMessage< ::phoenix::msg::routing::ControlLine >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::ControlLine >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::Condition* Arena::CreateMaybeMessage< ::phoenix::msg::routing::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::Action* Arena::CreateMaybeMessage< ::phoenix::msg::routing::Action >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToSpeedBumps* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToSpeedBumps >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToSpeedBumps >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToParkingSpaces* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToParkingSpaces >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToParkingSpaces >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToCrosswalk* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToCrosswalk >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToCrosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToClearArea* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToClearArea >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToClearArea >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToJunction* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToJunction >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToJunction >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToSignal* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToSignal >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToStopSign* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToStopSign >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToStopSign >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToYieldSign* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToYieldSign >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToYieldSign >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToCurveRoad* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToCurveRoad >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToCurveRoad >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::CloseToDestination* Arena::CreateMaybeMessage< ::phoenix::msg::routing::CloseToDestination >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::CloseToDestination >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::routing::Scene_Stories* Arena::CreateMaybeMessage< ::phoenix::msg::routing::Scene_Stories >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::routing::Scene_Stories >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
