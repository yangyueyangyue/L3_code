// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_loc_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5floc_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5floc_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace phoenix {
namespace ad_data_upload {
class Coordinate_message;
class Coordinate_messageDefaultTypeInternal;
extern Coordinate_messageDefaultTypeInternal _Coordinate_message_default_instance_;
class LaneCurve_message;
class LaneCurve_messageDefaultTypeInternal;
extern LaneCurve_messageDefaultTypeInternal _LaneCurve_message_default_instance_;
class LaneItem_message;
class LaneItem_messageDefaultTypeInternal;
extern LaneItem_messageDefaultTypeInternal _LaneItem_message_default_instance_;
class Lane_Position_Display_Data_message;
class Lane_Position_Display_Data_messageDefaultTypeInternal;
extern Lane_Position_Display_Data_messageDefaultTypeInternal _Lane_Position_Display_Data_message_default_instance_;
class LineControlPoint_message;
class LineControlPoint_messageDefaultTypeInternal;
extern LineControlPoint_messageDefaultTypeInternal _LineControlPoint_message_default_instance_;
class LineControlPoints_message;
class LineControlPoints_messageDefaultTypeInternal;
extern LineControlPoints_messageDefaultTypeInternal _LineControlPoints_message_default_instance_;
class MPUMapVecLaneInfo_message;
class MPUMapVecLaneInfo_messageDefaultTypeInternal;
extern MPUMapVecLaneInfo_messageDefaultTypeInternal _MPUMapVecLaneInfo_message_default_instance_;
class MapLaneInfo_message;
class MapLaneInfo_messageDefaultTypeInternal;
extern MapLaneInfo_messageDefaultTypeInternal _MapLaneInfo_message_default_instance_;
class Map_Display_Data_message;
class Map_Display_Data_messageDefaultTypeInternal;
extern Map_Display_Data_messageDefaultTypeInternal _Map_Display_Data_message_default_instance_;
class OffsetFloatEntry_message;
class OffsetFloatEntry_messageDefaultTypeInternal;
extern OffsetFloatEntry_messageDefaultTypeInternal _OffsetFloatEntry_message_default_instance_;
class PositionMessage_message;
class PositionMessage_messageDefaultTypeInternal;
extern PositionMessage_messageDefaultTypeInternal _PositionMessage_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::ad_data_upload::Coordinate_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Coordinate_message>(Arena*);
template<> ::phoenix::ad_data_upload::LaneCurve_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LaneCurve_message>(Arena*);
template<> ::phoenix::ad_data_upload::LaneItem_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LaneItem_message>(Arena*);
template<> ::phoenix::ad_data_upload::Lane_Position_Display_Data_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Lane_Position_Display_Data_message>(Arena*);
template<> ::phoenix::ad_data_upload::LineControlPoint_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LineControlPoint_message>(Arena*);
template<> ::phoenix::ad_data_upload::LineControlPoints_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LineControlPoints_message>(Arena*);
template<> ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::MPUMapVecLaneInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::MapLaneInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::MapLaneInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::Map_Display_Data_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Map_Display_Data_message>(Arena*);
template<> ::phoenix::ad_data_upload::OffsetFloatEntry_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::OffsetFloatEntry_message>(Arena*);
template<> ::phoenix::ad_data_upload::PositionMessage_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::PositionMessage_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace ad_data_upload {

// ===================================================================

class LaneItem_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LaneItem_message) */ {
 public:
  LaneItem_message();
  virtual ~LaneItem_message();

  LaneItem_message(const LaneItem_message& from);
  LaneItem_message(LaneItem_message&& from) noexcept
    : LaneItem_message() {
    *this = ::std::move(from);
  }

  inline LaneItem_message& operator=(const LaneItem_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneItem_message& operator=(LaneItem_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LaneItem_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneItem_message* internal_default_instance() {
    return reinterpret_cast<const LaneItem_message*>(
               &_LaneItem_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneItem_message& a, LaneItem_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneItem_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneItem_message* New() const final {
    return CreateMaybeMessage<LaneItem_message>(nullptr);
  }

  LaneItem_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneItem_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LaneItem_message& from);
  void MergeFrom(const LaneItem_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneItem_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LaneItem_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraLaneIDFieldNumber = 1,
    kCameraLaneTypeFieldNumber = 2,
    kCameraLaneProbOfExistFieldNumber = 3,
    kCameraLaneCurvature0FieldNumber = 4,
    kCameraLaneCurvature1FieldNumber = 5,
    kCameraLaneCurvature2FieldNumber = 6,
    kReverse1FieldNumber = 8,
    kReverse2FieldNumber = 9,
    kCameraLaneCurvature3FieldNumber = 7,
  };
  // uint32 camera_Lane_ID = 1;
  void clear_camera_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_id() const;
  void set_camera_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 camera_Lane_Type = 2;
  void clear_camera_lane_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_type() const;
  void set_camera_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 Camera_Lane_ProbOfExist = 3;
  void clear_camera_lane_probofexist();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_probofexist() const;
  void set_camera_lane_probofexist(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float Camera_Lane_Curvature0 = 4;
  void clear_camera_lane_curvature0();
  float camera_lane_curvature0() const;
  void set_camera_lane_curvature0(float value);

  // float Camera_Lane_Curvature1 = 5;
  void clear_camera_lane_curvature1();
  float camera_lane_curvature1() const;
  void set_camera_lane_curvature1(float value);

  // float Camera_Lane_Curvature2 = 6;
  void clear_camera_lane_curvature2();
  float camera_lane_curvature2() const;
  void set_camera_lane_curvature2(float value);

  // uint64 reverse1 = 8;
  void clear_reverse1();
  ::PROTOBUF_NAMESPACE_ID::uint64 reverse1() const;
  void set_reverse1(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 reverse2 = 9;
  void clear_reverse2();
  ::PROTOBUF_NAMESPACE_ID::uint64 reverse2() const;
  void set_reverse2(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float Camera_Lane_Curvature3 = 7;
  void clear_camera_lane_curvature3();
  float camera_lane_curvature3() const;
  void set_camera_lane_curvature3(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LaneItem_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_lane_probofexist_;
  float camera_lane_curvature0_;
  float camera_lane_curvature1_;
  float camera_lane_curvature2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reverse1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reverse2_;
  float camera_lane_curvature3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class LaneCurve_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LaneCurve_message) */ {
 public:
  LaneCurve_message();
  virtual ~LaneCurve_message();

  LaneCurve_message(const LaneCurve_message& from);
  LaneCurve_message(LaneCurve_message&& from) noexcept
    : LaneCurve_message() {
    *this = ::std::move(from);
  }

  inline LaneCurve_message& operator=(const LaneCurve_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneCurve_message& operator=(LaneCurve_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LaneCurve_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneCurve_message* internal_default_instance() {
    return reinterpret_cast<const LaneCurve_message*>(
               &_LaneCurve_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneCurve_message& a, LaneCurve_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneCurve_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneCurve_message* New() const final {
    return CreateMaybeMessage<LaneCurve_message>(nullptr);
  }

  LaneCurve_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneCurve_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LaneCurve_message& from);
  void MergeFrom(const LaneCurve_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneCurve_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LaneCurve_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStCurLeftLaneFieldNumber = 2,
    kStCurRightLaneFieldNumber = 3,
    kStLeftLeftLaneFieldNumber = 4,
    kStRightRightLaneFieldNumber = 5,
    kUTypeFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
  bool has_stcurleftlane() const;
  void clear_stcurleftlane();
  const ::phoenix::ad_data_upload::LaneItem_message& stcurleftlane() const;
  ::phoenix::ad_data_upload::LaneItem_message* release_stcurleftlane();
  ::phoenix::ad_data_upload::LaneItem_message* mutable_stcurleftlane();
  void set_allocated_stcurleftlane(::phoenix::ad_data_upload::LaneItem_message* stcurleftlane);

  // .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
  bool has_stcurrightlane() const;
  void clear_stcurrightlane();
  const ::phoenix::ad_data_upload::LaneItem_message& stcurrightlane() const;
  ::phoenix::ad_data_upload::LaneItem_message* release_stcurrightlane();
  ::phoenix::ad_data_upload::LaneItem_message* mutable_stcurrightlane();
  void set_allocated_stcurrightlane(::phoenix::ad_data_upload::LaneItem_message* stcurrightlane);

  // .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
  bool has_stleftleftlane() const;
  void clear_stleftleftlane();
  const ::phoenix::ad_data_upload::LaneItem_message& stleftleftlane() const;
  ::phoenix::ad_data_upload::LaneItem_message* release_stleftleftlane();
  ::phoenix::ad_data_upload::LaneItem_message* mutable_stleftleftlane();
  void set_allocated_stleftleftlane(::phoenix::ad_data_upload::LaneItem_message* stleftleftlane);

  // .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
  bool has_strightrightlane() const;
  void clear_strightrightlane();
  const ::phoenix::ad_data_upload::LaneItem_message& strightrightlane() const;
  ::phoenix::ad_data_upload::LaneItem_message* release_strightrightlane();
  ::phoenix::ad_data_upload::LaneItem_message* mutable_strightrightlane();
  void set_allocated_strightrightlane(::phoenix::ad_data_upload::LaneItem_message* strightrightlane);

  // uint32 uType = 1;
  void clear_utype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utype() const;
  void set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LaneCurve_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::LaneItem_message* stcurleftlane_;
  ::phoenix::ad_data_upload::LaneItem_message* stcurrightlane_;
  ::phoenix::ad_data_upload::LaneItem_message* stleftleftlane_;
  ::phoenix::ad_data_upload::LaneItem_message* strightrightlane_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Coordinate_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Coordinate_message) */ {
 public:
  Coordinate_message();
  virtual ~Coordinate_message();

  Coordinate_message(const Coordinate_message& from);
  Coordinate_message(Coordinate_message&& from) noexcept
    : Coordinate_message() {
    *this = ::std::move(from);
  }

  inline Coordinate_message& operator=(const Coordinate_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate_message& operator=(Coordinate_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Coordinate_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate_message* internal_default_instance() {
    return reinterpret_cast<const Coordinate_message*>(
               &_Coordinate_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Coordinate_message& a, Coordinate_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinate_message* New() const final {
    return CreateMaybeMessage<Coordinate_message>(nullptr);
  }

  Coordinate_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Coordinate_message& from);
  void MergeFrom(const Coordinate_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coordinate_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Coordinate_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
    kMZFieldNumber = 3,
  };
  // double m_x = 1;
  void clear_m_x();
  double m_x() const;
  void set_m_x(double value);

  // double m_y = 2;
  void clear_m_y();
  double m_y() const;
  void set_m_y(double value);

  // double m_z = 3;
  void clear_m_z();
  double m_z() const;
  void set_m_z(double value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Coordinate_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double m_x_;
  double m_y_;
  double m_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class PositionMessage_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.PositionMessage_message) */ {
 public:
  PositionMessage_message();
  virtual ~PositionMessage_message();

  PositionMessage_message(const PositionMessage_message& from);
  PositionMessage_message(PositionMessage_message&& from) noexcept
    : PositionMessage_message() {
    *this = ::std::move(from);
  }

  inline PositionMessage_message& operator=(const PositionMessage_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionMessage_message& operator=(PositionMessage_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PositionMessage_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionMessage_message* internal_default_instance() {
    return reinterpret_cast<const PositionMessage_message*>(
               &_PositionMessage_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PositionMessage_message& a, PositionMessage_message& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionMessage_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionMessage_message* New() const final {
    return CreateMaybeMessage<PositionMessage_message>(nullptr);
  }

  PositionMessage_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionMessage_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PositionMessage_message& from);
  void MergeFrom(const PositionMessage_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PositionMessage_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.PositionMessage_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPointFieldNumber = 7,
    kMTimestampFieldNumber = 1,
    kMPositionAgeFieldNumber = 2,
    kMDatumFieldNumber = 3,
    kMHeadingFieldNumber = 4,
    kMSpeedFieldNumber = 5,
    kMProabilityFieldNumber = 6,
  };
  // .phoenix.ad_data_upload.Coordinate_message m_point = 7;
  bool has_m_point() const;
  void clear_m_point();
  const ::phoenix::ad_data_upload::Coordinate_message& m_point() const;
  ::phoenix::ad_data_upload::Coordinate_message* release_m_point();
  ::phoenix::ad_data_upload::Coordinate_message* mutable_m_point();
  void set_allocated_m_point(::phoenix::ad_data_upload::Coordinate_message* m_point);

  // uint64 m_timestamp = 1;
  void clear_m_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp() const;
  void set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_positionAge = 2;
  void clear_m_positionage();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_positionage() const;
  void set_m_positionage(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float m_datum = 3;
  void clear_m_datum();
  float m_datum() const;
  void set_m_datum(float value);

  // float m_heading = 4;
  void clear_m_heading();
  float m_heading() const;
  void set_m_heading(float value);

  // float m_speed = 5;
  void clear_m_speed();
  float m_speed() const;
  void set_m_speed(float value);

  // float m_proability = 6;
  void clear_m_proability();
  float m_proability() const;
  void set_m_proability(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.PositionMessage_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::Coordinate_message* m_point_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_positionage_;
  float m_datum_;
  float m_heading_;
  float m_speed_;
  float m_proability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Lane_Position_Display_Data_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Lane_Position_Display_Data_message) */ {
 public:
  Lane_Position_Display_Data_message();
  virtual ~Lane_Position_Display_Data_message();

  Lane_Position_Display_Data_message(const Lane_Position_Display_Data_message& from);
  Lane_Position_Display_Data_message(Lane_Position_Display_Data_message&& from) noexcept
    : Lane_Position_Display_Data_message() {
    *this = ::std::move(from);
  }

  inline Lane_Position_Display_Data_message& operator=(const Lane_Position_Display_Data_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lane_Position_Display_Data_message& operator=(Lane_Position_Display_Data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Lane_Position_Display_Data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lane_Position_Display_Data_message* internal_default_instance() {
    return reinterpret_cast<const Lane_Position_Display_Data_message*>(
               &_Lane_Position_Display_Data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Lane_Position_Display_Data_message& a, Lane_Position_Display_Data_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Lane_Position_Display_Data_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lane_Position_Display_Data_message* New() const final {
    return CreateMaybeMessage<Lane_Position_Display_Data_message>(nullptr);
  }

  Lane_Position_Display_Data_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lane_Position_Display_Data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Lane_Position_Display_Data_message& from);
  void MergeFrom(const Lane_Position_Display_Data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lane_Position_Display_Data_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Lane_Position_Display_Data_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneCurveFieldNumber = 1,
    kPositionMessageFieldNumber = 2,
  };
  // .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
  bool has_lane_curve() const;
  void clear_lane_curve();
  const ::phoenix::ad_data_upload::LaneCurve_message& lane_curve() const;
  ::phoenix::ad_data_upload::LaneCurve_message* release_lane_curve();
  ::phoenix::ad_data_upload::LaneCurve_message* mutable_lane_curve();
  void set_allocated_lane_curve(::phoenix::ad_data_upload::LaneCurve_message* lane_curve);

  // .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
  bool has_position_message() const;
  void clear_position_message();
  const ::phoenix::ad_data_upload::PositionMessage_message& position_message() const;
  ::phoenix::ad_data_upload::PositionMessage_message* release_position_message();
  ::phoenix::ad_data_upload::PositionMessage_message* mutable_position_message();
  void set_allocated_position_message(::phoenix::ad_data_upload::PositionMessage_message* position_message);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::LaneCurve_message* lane_curve_;
  ::phoenix::ad_data_upload::PositionMessage_message* position_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class OffsetFloatEntry_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.OffsetFloatEntry_message) */ {
 public:
  OffsetFloatEntry_message();
  virtual ~OffsetFloatEntry_message();

  OffsetFloatEntry_message(const OffsetFloatEntry_message& from);
  OffsetFloatEntry_message(OffsetFloatEntry_message&& from) noexcept
    : OffsetFloatEntry_message() {
    *this = ::std::move(from);
  }

  inline OffsetFloatEntry_message& operator=(const OffsetFloatEntry_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline OffsetFloatEntry_message& operator=(OffsetFloatEntry_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OffsetFloatEntry_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OffsetFloatEntry_message* internal_default_instance() {
    return reinterpret_cast<const OffsetFloatEntry_message*>(
               &_OffsetFloatEntry_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OffsetFloatEntry_message& a, OffsetFloatEntry_message& b) {
    a.Swap(&b);
  }
  inline void Swap(OffsetFloatEntry_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OffsetFloatEntry_message* New() const final {
    return CreateMaybeMessage<OffsetFloatEntry_message>(nullptr);
  }

  OffsetFloatEntry_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OffsetFloatEntry_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OffsetFloatEntry_message& from);
  void MergeFrom(const OffsetFloatEntry_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OffsetFloatEntry_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.OffsetFloatEntry_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMOffsetFieldNumber = 1,
    kMValueFieldNumber = 2,
  };
  // uint32 m_offset = 1;
  void clear_m_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_offset() const;
  void set_m_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float m_value = 2;
  void clear_m_value();
  float m_value() const;
  void set_m_value(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.OffsetFloatEntry_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_offset_;
  float m_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class LineControlPoint_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LineControlPoint_message) */ {
 public:
  LineControlPoint_message();
  virtual ~LineControlPoint_message();

  LineControlPoint_message(const LineControlPoint_message& from);
  LineControlPoint_message(LineControlPoint_message&& from) noexcept
    : LineControlPoint_message() {
    *this = ::std::move(from);
  }

  inline LineControlPoint_message& operator=(const LineControlPoint_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineControlPoint_message& operator=(LineControlPoint_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineControlPoint_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineControlPoint_message* internal_default_instance() {
    return reinterpret_cast<const LineControlPoint_message*>(
               &_LineControlPoint_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LineControlPoint_message& a, LineControlPoint_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LineControlPoint_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineControlPoint_message* New() const final {
    return CreateMaybeMessage<LineControlPoint_message>(nullptr);
  }

  LineControlPoint_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineControlPoint_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LineControlPoint_message& from);
  void MergeFrom(const LineControlPoint_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineControlPoint_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LineControlPoint_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMDistFieldNumber = 1,
    kMValueFieldNumber = 2,
  };
  // uint32 m_dist = 1;
  void clear_m_dist();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_dist() const;
  void set_m_dist(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 m_value = 2;
  void clear_m_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_value() const;
  void set_m_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LineControlPoint_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_dist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class LineControlPoints_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LineControlPoints_message) */ {
 public:
  LineControlPoints_message();
  virtual ~LineControlPoints_message();

  LineControlPoints_message(const LineControlPoints_message& from);
  LineControlPoints_message(LineControlPoints_message&& from) noexcept
    : LineControlPoints_message() {
    *this = ::std::move(from);
  }

  inline LineControlPoints_message& operator=(const LineControlPoints_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineControlPoints_message& operator=(LineControlPoints_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineControlPoints_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineControlPoints_message* internal_default_instance() {
    return reinterpret_cast<const LineControlPoints_message*>(
               &_LineControlPoints_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LineControlPoints_message& a, LineControlPoints_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LineControlPoints_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineControlPoints_message* New() const final {
    return CreateMaybeMessage<LineControlPoints_message>(nullptr);
  }

  LineControlPoints_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineControlPoints_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LineControlPoints_message& from);
  void MergeFrom(const LineControlPoints_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineControlPoints_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LineControlPoints_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMControlPointsFieldNumber = 4,
    kMLineIdFieldNumber = 2,
    kMTypeFieldNumber = 1,
    kMControlPointsSizeTFieldNumber = 3,
  };
  // repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
  int m_control_points_size() const;
  void clear_m_control_points();
  ::phoenix::ad_data_upload::LineControlPoint_message* mutable_m_control_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LineControlPoint_message >*
      mutable_m_control_points();
  const ::phoenix::ad_data_upload::LineControlPoint_message& m_control_points(int index) const;
  ::phoenix::ad_data_upload::LineControlPoint_message* add_m_control_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LineControlPoint_message >&
      m_control_points() const;

  // uint64 m_lineId = 2;
  void clear_m_lineid();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lineid() const;
  void set_m_lineid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 m_type = 1;
  void clear_m_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_type() const;
  void set_m_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 m_control_points_size_t = 3;
  void clear_m_control_points_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_control_points_size_t() const;
  void set_m_control_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LineControlPoints_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LineControlPoint_message > m_control_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lineid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_control_points_size_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class MapLaneInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.MapLaneInfo_message) */ {
 public:
  MapLaneInfo_message();
  virtual ~MapLaneInfo_message();

  MapLaneInfo_message(const MapLaneInfo_message& from);
  MapLaneInfo_message(MapLaneInfo_message&& from) noexcept
    : MapLaneInfo_message() {
    *this = ::std::move(from);
  }

  inline MapLaneInfo_message& operator=(const MapLaneInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLaneInfo_message& operator=(MapLaneInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MapLaneInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLaneInfo_message* internal_default_instance() {
    return reinterpret_cast<const MapLaneInfo_message*>(
               &_MapLaneInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MapLaneInfo_message& a, MapLaneInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLaneInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapLaneInfo_message* New() const final {
    return CreateMaybeMessage<MapLaneInfo_message>(nullptr);
  }

  MapLaneInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapLaneInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MapLaneInfo_message& from);
  void MergeFrom(const MapLaneInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapLaneInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.MapLaneInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextLaneIdFieldNumber = 8,
    kPreLaneIdFieldNumber = 9,
    kCenterPointsFieldNumber = 20,
    kLeftPointsFieldNumber = 21,
    kRightPointsFieldNumber = 22,
    kCurvartureFieldNumber = 29,
    kLatslopeFieldNumber = 30,
    kLngslopeFieldNumber = 31,
    kMTimestampFieldNumber = 1,
    kBaseLaneIdFieldNumber = 3,
    kLeftLaneIdFieldNumber = 4,
    kMDatumTimestampFieldNumber = 2,
    kNextLaneIdSizeTFieldNumber = 6,
    kRightLaneIdFieldNumber = 5,
    kPreLaneIdSizeTFieldNumber = 7,
    kLaneTransitionFieldNumber = 10,
    kLaneConnecttypeFieldNumber = 11,
    kPathIdFieldNumber = 12,
    kLaneOffsetStartFieldNumber = 13,
    kLaneOffsetEndFieldNumber = 14,
    kLaneIndexFieldNumber = 15,
    kLaneNumberFieldNumber = 16,
    kCenterPointsSizeTFieldNumber = 17,
    kLeftPointsSizeTFieldNumber = 18,
    kRightPointsSizeTFieldNumber = 19,
    kSpeedLimitMaxFieldNumber = 23,
    kSpeedLimitMinFieldNumber = 24,
    kLengthFieldNumber = 25,
    kCurvartureSizeTFieldNumber = 26,
    kLatslopeSizeTFieldNumber = 27,
    kLngslopeSizeTFieldNumber = 28,
  };
  // repeated uint64 next_lane_id = 8;
  int next_lane_id_size() const;
  void clear_next_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_lane_id(int index) const;
  void set_next_lane_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_next_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      next_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_next_lane_id();

  // repeated uint64 pre_lane_id = 9;
  int pre_lane_id_size() const;
  void clear_pre_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pre_lane_id(int index) const;
  void set_pre_lane_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pre_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pre_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pre_lane_id();

  // repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
  int center_points_size() const;
  void clear_center_points();
  ::phoenix::ad_data_upload::Coordinate_message* mutable_center_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
      mutable_center_points();
  const ::phoenix::ad_data_upload::Coordinate_message& center_points(int index) const;
  ::phoenix::ad_data_upload::Coordinate_message* add_center_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
      center_points() const;

  // repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
  int left_points_size() const;
  void clear_left_points();
  ::phoenix::ad_data_upload::Coordinate_message* mutable_left_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
      mutable_left_points();
  const ::phoenix::ad_data_upload::Coordinate_message& left_points(int index) const;
  ::phoenix::ad_data_upload::Coordinate_message* add_left_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
      left_points() const;

  // repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
  int right_points_size() const;
  void clear_right_points();
  ::phoenix::ad_data_upload::Coordinate_message* mutable_right_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
      mutable_right_points();
  const ::phoenix::ad_data_upload::Coordinate_message& right_points(int index) const;
  ::phoenix::ad_data_upload::Coordinate_message* add_right_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
      right_points() const;

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
  int curvarture_size() const;
  void clear_curvarture();
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* mutable_curvarture(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
      mutable_curvarture();
  const ::phoenix::ad_data_upload::OffsetFloatEntry_message& curvarture(int index) const;
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* add_curvarture();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
      curvarture() const;

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
  int latslope_size() const;
  void clear_latslope();
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* mutable_latslope(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
      mutable_latslope();
  const ::phoenix::ad_data_upload::OffsetFloatEntry_message& latslope(int index) const;
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* add_latslope();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
      latslope() const;

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
  int lngslope_size() const;
  void clear_lngslope();
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* mutable_lngslope(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
      mutable_lngslope();
  const ::phoenix::ad_data_upload::OffsetFloatEntry_message& lngslope(int index) const;
  ::phoenix::ad_data_upload::OffsetFloatEntry_message* add_lngslope();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
      lngslope() const;

  // uint64 m_timestamp = 1;
  void clear_m_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp() const;
  void set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 base_lane_id = 3;
  void clear_base_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_lane_id() const;
  void set_base_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 left_lane_id = 4;
  void clear_left_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 left_lane_id() const;
  void set_left_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float m_datum_Timestamp = 2;
  void clear_m_datum_timestamp();
  float m_datum_timestamp() const;
  void set_m_datum_timestamp(float value);

  // uint32 next_lane_id_size_t = 6;
  void clear_next_lane_id_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_lane_id_size_t() const;
  void set_next_lane_id_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint64 right_lane_id = 5;
  void clear_right_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 right_lane_id() const;
  void set_right_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 pre_lane_id_size_t = 7;
  void clear_pre_lane_id_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_lane_id_size_t() const;
  void set_pre_lane_id_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_transition = 10;
  void clear_lane_transition();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_transition() const;
  void set_lane_transition(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_connecttype = 11;
  void clear_lane_connecttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_connecttype() const;
  void set_lane_connecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pathId = 12;
  void clear_pathid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid() const;
  void set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_offset_start = 13;
  void clear_lane_offset_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_offset_start() const;
  void set_lane_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_offset_end = 14;
  void clear_lane_offset_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_offset_end() const;
  void set_lane_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_index = 15;
  void clear_lane_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_index() const;
  void set_lane_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lane_number = 16;
  void clear_lane_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_number() const;
  void set_lane_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 center_points_size_t = 17;
  void clear_center_points_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 center_points_size_t() const;
  void set_center_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 left_points_size_t = 18;
  void clear_left_points_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 left_points_size_t() const;
  void set_left_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 right_points_size_t = 19;
  void clear_right_points_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 right_points_size_t() const;
  void set_right_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 speed_limit_max = 23;
  void clear_speed_limit_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit_max() const;
  void set_speed_limit_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 speed_limit_min = 24;
  void clear_speed_limit_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit_min() const;
  void set_speed_limit_min(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float length = 25;
  void clear_length();
  float length() const;
  void set_length(float value);

  // uint32 curvarture_size_t = 26;
  void clear_curvarture_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 curvarture_size_t() const;
  void set_curvarture_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 Latslope_size_t = 27;
  void clear_latslope_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 latslope_size_t() const;
  void set_latslope_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 Lngslope_size_t = 28;
  void clear_lngslope_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 lngslope_size_t() const;
  void set_lngslope_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.MapLaneInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > next_lane_id_;
  mutable std::atomic<int> _next_lane_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pre_lane_id_;
  mutable std::atomic<int> _pre_lane_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message > center_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message > left_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message > right_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message > curvarture_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message > latslope_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message > lngslope_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 left_lane_id_;
  float m_datum_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_lane_id_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint64 right_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_lane_id_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_transition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_connecttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_offset_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_offset_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 center_points_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 left_points_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 right_points_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit_min_;
  float length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curvarture_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latslope_size_t_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lngslope_size_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class MPUMapVecLaneInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.MPUMapVecLaneInfo_message) */ {
 public:
  MPUMapVecLaneInfo_message();
  virtual ~MPUMapVecLaneInfo_message();

  MPUMapVecLaneInfo_message(const MPUMapVecLaneInfo_message& from);
  MPUMapVecLaneInfo_message(MPUMapVecLaneInfo_message&& from) noexcept
    : MPUMapVecLaneInfo_message() {
    *this = ::std::move(from);
  }

  inline MPUMapVecLaneInfo_message& operator=(const MPUMapVecLaneInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPUMapVecLaneInfo_message& operator=(MPUMapVecLaneInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MPUMapVecLaneInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPUMapVecLaneInfo_message* internal_default_instance() {
    return reinterpret_cast<const MPUMapVecLaneInfo_message*>(
               &_MPUMapVecLaneInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MPUMapVecLaneInfo_message& a, MPUMapVecLaneInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(MPUMapVecLaneInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPUMapVecLaneInfo_message* New() const final {
    return CreateMaybeMessage<MPUMapVecLaneInfo_message>(nullptr);
  }

  MPUMapVecLaneInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPUMapVecLaneInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MPUMapVecLaneInfo_message& from);
  void MergeFrom(const MPUMapVecLaneInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MPUMapVecLaneInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.MPUMapVecLaneInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kTimeStampFieldNumber = 1,
    kDataSizeTFieldNumber = 2,
  };
  // repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
  int data_size() const;
  void clear_data();
  ::phoenix::ad_data_upload::MapLaneInfo_message* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapLaneInfo_message >*
      mutable_data();
  const ::phoenix::ad_data_upload::MapLaneInfo_message& data(int index) const;
  ::phoenix::ad_data_upload::MapLaneInfo_message* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapLaneInfo_message >&
      data() const;

  // uint64 Time_stamp = 1;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 data_size_t = 2;
  void clear_data_size_t();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size_t() const;
  void set_data_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapLaneInfo_message > data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Map_Display_Data_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Map_Display_Data_message) */ {
 public:
  Map_Display_Data_message();
  virtual ~Map_Display_Data_message();

  Map_Display_Data_message(const Map_Display_Data_message& from);
  Map_Display_Data_message(Map_Display_Data_message&& from) noexcept
    : Map_Display_Data_message() {
    *this = ::std::move(from);
  }

  inline Map_Display_Data_message& operator=(const Map_Display_Data_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_Display_Data_message& operator=(Map_Display_Data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Map_Display_Data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Display_Data_message* internal_default_instance() {
    return reinterpret_cast<const Map_Display_Data_message*>(
               &_Map_Display_Data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Map_Display_Data_message& a, Map_Display_Data_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_Display_Data_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_Display_Data_message* New() const final {
    return CreateMaybeMessage<Map_Display_Data_message>(nullptr);
  }

  Map_Display_Data_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_Display_Data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Map_Display_Data_message& from);
  void MergeFrom(const Map_Display_Data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Map_Display_Data_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Map_Display_Data_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapLaneInfoFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
  bool has_map_lane_info() const;
  void clear_map_lane_info();
  const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message& map_lane_info() const;
  ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* release_map_lane_info();
  ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* mutable_map_lane_info();
  void set_allocated_map_lane_info(::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* map_lane_info);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Map_Display_Data_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* map_lane_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneItem_message

// uint32 camera_Lane_ID = 1;
inline void LaneItem_message::clear_camera_lane_id() {
  camera_lane_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneItem_message::camera_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.camera_Lane_ID)
  return camera_lane_id_;
}
inline void LaneItem_message::set_camera_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_lane_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.camera_Lane_ID)
}

// uint32 camera_Lane_Type = 2;
inline void LaneItem_message::clear_camera_lane_type() {
  camera_lane_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneItem_message::camera_lane_type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.camera_Lane_Type)
  return camera_lane_type_;
}
inline void LaneItem_message::set_camera_lane_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_lane_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.camera_Lane_Type)
}

// uint32 Camera_Lane_ProbOfExist = 3;
inline void LaneItem_message::clear_camera_lane_probofexist() {
  camera_lane_probofexist_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneItem_message::camera_lane_probofexist() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_ProbOfExist)
  return camera_lane_probofexist_;
}
inline void LaneItem_message::set_camera_lane_probofexist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_lane_probofexist_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_ProbOfExist)
}

// float Camera_Lane_Curvature0 = 4;
inline void LaneItem_message::clear_camera_lane_curvature0() {
  camera_lane_curvature0_ = 0;
}
inline float LaneItem_message::camera_lane_curvature0() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature0)
  return camera_lane_curvature0_;
}
inline void LaneItem_message::set_camera_lane_curvature0(float value) {
  
  camera_lane_curvature0_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature0)
}

// float Camera_Lane_Curvature1 = 5;
inline void LaneItem_message::clear_camera_lane_curvature1() {
  camera_lane_curvature1_ = 0;
}
inline float LaneItem_message::camera_lane_curvature1() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature1)
  return camera_lane_curvature1_;
}
inline void LaneItem_message::set_camera_lane_curvature1(float value) {
  
  camera_lane_curvature1_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature1)
}

// float Camera_Lane_Curvature2 = 6;
inline void LaneItem_message::clear_camera_lane_curvature2() {
  camera_lane_curvature2_ = 0;
}
inline float LaneItem_message::camera_lane_curvature2() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature2)
  return camera_lane_curvature2_;
}
inline void LaneItem_message::set_camera_lane_curvature2(float value) {
  
  camera_lane_curvature2_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature2)
}

// float Camera_Lane_Curvature3 = 7;
inline void LaneItem_message::clear_camera_lane_curvature3() {
  camera_lane_curvature3_ = 0;
}
inline float LaneItem_message::camera_lane_curvature3() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature3)
  return camera_lane_curvature3_;
}
inline void LaneItem_message::set_camera_lane_curvature3(float value) {
  
  camera_lane_curvature3_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.Camera_Lane_Curvature3)
}

// uint64 reverse1 = 8;
inline void LaneItem_message::clear_reverse1() {
  reverse1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneItem_message::reverse1() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.reverse1)
  return reverse1_;
}
inline void LaneItem_message::set_reverse1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reverse1_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.reverse1)
}

// uint64 reverse2 = 9;
inline void LaneItem_message::clear_reverse2() {
  reverse2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneItem_message::reverse2() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneItem_message.reverse2)
  return reverse2_;
}
inline void LaneItem_message::set_reverse2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reverse2_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneItem_message.reverse2)
}

// -------------------------------------------------------------------

// LaneCurve_message

// uint32 uType = 1;
inline void LaneCurve_message::clear_utype() {
  utype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneCurve_message::utype() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneCurve_message.uType)
  return utype_;
}
inline void LaneCurve_message::set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utype_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneCurve_message.uType)
}

// .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
inline bool LaneCurve_message::has_stcurleftlane() const {
  return this != internal_default_instance() && stcurleftlane_ != nullptr;
}
inline void LaneCurve_message::clear_stcurleftlane() {
  if (GetArenaNoVirtual() == nullptr && stcurleftlane_ != nullptr) {
    delete stcurleftlane_;
  }
  stcurleftlane_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LaneItem_message& LaneCurve_message::stcurleftlane() const {
  const ::phoenix::ad_data_upload::LaneItem_message* p = stcurleftlane_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneCurve_message.stCurLeftLane)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LaneItem_message*>(
      &::phoenix::ad_data_upload::_LaneItem_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::release_stcurleftlane() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneCurve_message.stCurLeftLane)
  
  ::phoenix::ad_data_upload::LaneItem_message* temp = stcurleftlane_;
  stcurleftlane_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::mutable_stcurleftlane() {
  
  if (stcurleftlane_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LaneItem_message>(GetArenaNoVirtual());
    stcurleftlane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneCurve_message.stCurLeftLane)
  return stcurleftlane_;
}
inline void LaneCurve_message::set_allocated_stcurleftlane(::phoenix::ad_data_upload::LaneItem_message* stcurleftlane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stcurleftlane_;
  }
  if (stcurleftlane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stcurleftlane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stcurleftlane, submessage_arena);
    }
    
  } else {
    
  }
  stcurleftlane_ = stcurleftlane;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneCurve_message.stCurLeftLane)
}

// .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
inline bool LaneCurve_message::has_stcurrightlane() const {
  return this != internal_default_instance() && stcurrightlane_ != nullptr;
}
inline void LaneCurve_message::clear_stcurrightlane() {
  if (GetArenaNoVirtual() == nullptr && stcurrightlane_ != nullptr) {
    delete stcurrightlane_;
  }
  stcurrightlane_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LaneItem_message& LaneCurve_message::stcurrightlane() const {
  const ::phoenix::ad_data_upload::LaneItem_message* p = stcurrightlane_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneCurve_message.stCurRightLane)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LaneItem_message*>(
      &::phoenix::ad_data_upload::_LaneItem_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::release_stcurrightlane() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneCurve_message.stCurRightLane)
  
  ::phoenix::ad_data_upload::LaneItem_message* temp = stcurrightlane_;
  stcurrightlane_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::mutable_stcurrightlane() {
  
  if (stcurrightlane_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LaneItem_message>(GetArenaNoVirtual());
    stcurrightlane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneCurve_message.stCurRightLane)
  return stcurrightlane_;
}
inline void LaneCurve_message::set_allocated_stcurrightlane(::phoenix::ad_data_upload::LaneItem_message* stcurrightlane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stcurrightlane_;
  }
  if (stcurrightlane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stcurrightlane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stcurrightlane, submessage_arena);
    }
    
  } else {
    
  }
  stcurrightlane_ = stcurrightlane;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneCurve_message.stCurRightLane)
}

// .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
inline bool LaneCurve_message::has_stleftleftlane() const {
  return this != internal_default_instance() && stleftleftlane_ != nullptr;
}
inline void LaneCurve_message::clear_stleftleftlane() {
  if (GetArenaNoVirtual() == nullptr && stleftleftlane_ != nullptr) {
    delete stleftleftlane_;
  }
  stleftleftlane_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LaneItem_message& LaneCurve_message::stleftleftlane() const {
  const ::phoenix::ad_data_upload::LaneItem_message* p = stleftleftlane_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneCurve_message.stLeftLeftLane)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LaneItem_message*>(
      &::phoenix::ad_data_upload::_LaneItem_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::release_stleftleftlane() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneCurve_message.stLeftLeftLane)
  
  ::phoenix::ad_data_upload::LaneItem_message* temp = stleftleftlane_;
  stleftleftlane_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::mutable_stleftleftlane() {
  
  if (stleftleftlane_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LaneItem_message>(GetArenaNoVirtual());
    stleftleftlane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneCurve_message.stLeftLeftLane)
  return stleftleftlane_;
}
inline void LaneCurve_message::set_allocated_stleftleftlane(::phoenix::ad_data_upload::LaneItem_message* stleftleftlane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stleftleftlane_;
  }
  if (stleftleftlane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stleftleftlane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stleftleftlane, submessage_arena);
    }
    
  } else {
    
  }
  stleftleftlane_ = stleftleftlane;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneCurve_message.stLeftLeftLane)
}

// .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
inline bool LaneCurve_message::has_strightrightlane() const {
  return this != internal_default_instance() && strightrightlane_ != nullptr;
}
inline void LaneCurve_message::clear_strightrightlane() {
  if (GetArenaNoVirtual() == nullptr && strightrightlane_ != nullptr) {
    delete strightrightlane_;
  }
  strightrightlane_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LaneItem_message& LaneCurve_message::strightrightlane() const {
  const ::phoenix::ad_data_upload::LaneItem_message* p = strightrightlane_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneCurve_message.stRightRightLane)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LaneItem_message*>(
      &::phoenix::ad_data_upload::_LaneItem_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::release_strightrightlane() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneCurve_message.stRightRightLane)
  
  ::phoenix::ad_data_upload::LaneItem_message* temp = strightrightlane_;
  strightrightlane_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LaneItem_message* LaneCurve_message::mutable_strightrightlane() {
  
  if (strightrightlane_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LaneItem_message>(GetArenaNoVirtual());
    strightrightlane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneCurve_message.stRightRightLane)
  return strightrightlane_;
}
inline void LaneCurve_message::set_allocated_strightrightlane(::phoenix::ad_data_upload::LaneItem_message* strightrightlane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete strightrightlane_;
  }
  if (strightrightlane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strightrightlane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strightrightlane, submessage_arena);
    }
    
  } else {
    
  }
  strightrightlane_ = strightrightlane;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneCurve_message.stRightRightLane)
}

// -------------------------------------------------------------------

// Coordinate_message

// double m_x = 1;
inline void Coordinate_message::clear_m_x() {
  m_x_ = 0;
}
inline double Coordinate_message::m_x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Coordinate_message.m_x)
  return m_x_;
}
inline void Coordinate_message::set_m_x(double value) {
  
  m_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Coordinate_message.m_x)
}

// double m_y = 2;
inline void Coordinate_message::clear_m_y() {
  m_y_ = 0;
}
inline double Coordinate_message::m_y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Coordinate_message.m_y)
  return m_y_;
}
inline void Coordinate_message::set_m_y(double value) {
  
  m_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Coordinate_message.m_y)
}

// double m_z = 3;
inline void Coordinate_message::clear_m_z() {
  m_z_ = 0;
}
inline double Coordinate_message::m_z() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Coordinate_message.m_z)
  return m_z_;
}
inline void Coordinate_message::set_m_z(double value) {
  
  m_z_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Coordinate_message.m_z)
}

// -------------------------------------------------------------------

// PositionMessage_message

// uint64 m_timestamp = 1;
inline void PositionMessage_message::clear_m_timestamp() {
  m_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionMessage_message::m_timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_timestamp)
  return m_timestamp_;
}
inline void PositionMessage_message::set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_timestamp)
}

// uint64 m_positionAge = 2;
inline void PositionMessage_message::clear_m_positionage() {
  m_positionage_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionMessage_message::m_positionage() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_positionAge)
  return m_positionage_;
}
inline void PositionMessage_message::set_m_positionage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_positionage_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_positionAge)
}

// float m_datum = 3;
inline void PositionMessage_message::clear_m_datum() {
  m_datum_ = 0;
}
inline float PositionMessage_message::m_datum() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_datum)
  return m_datum_;
}
inline void PositionMessage_message::set_m_datum(float value) {
  
  m_datum_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_datum)
}

// float m_heading = 4;
inline void PositionMessage_message::clear_m_heading() {
  m_heading_ = 0;
}
inline float PositionMessage_message::m_heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_heading)
  return m_heading_;
}
inline void PositionMessage_message::set_m_heading(float value) {
  
  m_heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_heading)
}

// float m_speed = 5;
inline void PositionMessage_message::clear_m_speed() {
  m_speed_ = 0;
}
inline float PositionMessage_message::m_speed() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_speed)
  return m_speed_;
}
inline void PositionMessage_message::set_m_speed(float value) {
  
  m_speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_speed)
}

// float m_proability = 6;
inline void PositionMessage_message::clear_m_proability() {
  m_proability_ = 0;
}
inline float PositionMessage_message::m_proability() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_proability)
  return m_proability_;
}
inline void PositionMessage_message::set_m_proability(float value) {
  
  m_proability_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PositionMessage_message.m_proability)
}

// .phoenix.ad_data_upload.Coordinate_message m_point = 7;
inline bool PositionMessage_message::has_m_point() const {
  return this != internal_default_instance() && m_point_ != nullptr;
}
inline void PositionMessage_message::clear_m_point() {
  if (GetArenaNoVirtual() == nullptr && m_point_ != nullptr) {
    delete m_point_;
  }
  m_point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Coordinate_message& PositionMessage_message::m_point() const {
  const ::phoenix::ad_data_upload::Coordinate_message* p = m_point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PositionMessage_message.m_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Coordinate_message*>(
      &::phoenix::ad_data_upload::_Coordinate_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Coordinate_message* PositionMessage_message::release_m_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PositionMessage_message.m_point)
  
  ::phoenix::ad_data_upload::Coordinate_message* temp = m_point_;
  m_point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Coordinate_message* PositionMessage_message::mutable_m_point() {
  
  if (m_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Coordinate_message>(GetArenaNoVirtual());
    m_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PositionMessage_message.m_point)
  return m_point_;
}
inline void PositionMessage_message::set_allocated_m_point(::phoenix::ad_data_upload::Coordinate_message* m_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_point_;
  }
  if (m_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_point, submessage_arena);
    }
    
  } else {
    
  }
  m_point_ = m_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PositionMessage_message.m_point)
}

// -------------------------------------------------------------------

// Lane_Position_Display_Data_message

// .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
inline bool Lane_Position_Display_Data_message::has_lane_curve() const {
  return this != internal_default_instance() && lane_curve_ != nullptr;
}
inline void Lane_Position_Display_Data_message::clear_lane_curve() {
  if (GetArenaNoVirtual() == nullptr && lane_curve_ != nullptr) {
    delete lane_curve_;
  }
  lane_curve_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LaneCurve_message& Lane_Position_Display_Data_message::lane_curve() const {
  const ::phoenix::ad_data_upload::LaneCurve_message* p = lane_curve_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Lane_Position_Display_Data_message.lane_curve)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LaneCurve_message*>(
      &::phoenix::ad_data_upload::_LaneCurve_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LaneCurve_message* Lane_Position_Display_Data_message::release_lane_curve() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Lane_Position_Display_Data_message.lane_curve)
  
  ::phoenix::ad_data_upload::LaneCurve_message* temp = lane_curve_;
  lane_curve_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LaneCurve_message* Lane_Position_Display_Data_message::mutable_lane_curve() {
  
  if (lane_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LaneCurve_message>(GetArenaNoVirtual());
    lane_curve_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Lane_Position_Display_Data_message.lane_curve)
  return lane_curve_;
}
inline void Lane_Position_Display_Data_message::set_allocated_lane_curve(::phoenix::ad_data_upload::LaneCurve_message* lane_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_curve_;
  }
  if (lane_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_curve, submessage_arena);
    }
    
  } else {
    
  }
  lane_curve_ = lane_curve;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Lane_Position_Display_Data_message.lane_curve)
}

// .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
inline bool Lane_Position_Display_Data_message::has_position_message() const {
  return this != internal_default_instance() && position_message_ != nullptr;
}
inline void Lane_Position_Display_Data_message::clear_position_message() {
  if (GetArenaNoVirtual() == nullptr && position_message_ != nullptr) {
    delete position_message_;
  }
  position_message_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PositionMessage_message& Lane_Position_Display_Data_message::position_message() const {
  const ::phoenix::ad_data_upload::PositionMessage_message* p = position_message_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Lane_Position_Display_Data_message.position_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PositionMessage_message*>(
      &::phoenix::ad_data_upload::_PositionMessage_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PositionMessage_message* Lane_Position_Display_Data_message::release_position_message() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Lane_Position_Display_Data_message.position_message)
  
  ::phoenix::ad_data_upload::PositionMessage_message* temp = position_message_;
  position_message_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PositionMessage_message* Lane_Position_Display_Data_message::mutable_position_message() {
  
  if (position_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PositionMessage_message>(GetArenaNoVirtual());
    position_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Lane_Position_Display_Data_message.position_message)
  return position_message_;
}
inline void Lane_Position_Display_Data_message::set_allocated_position_message(::phoenix::ad_data_upload::PositionMessage_message* position_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_message_;
  }
  if (position_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_message, submessage_arena);
    }
    
  } else {
    
  }
  position_message_ = position_message;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Lane_Position_Display_Data_message.position_message)
}

// -------------------------------------------------------------------

// OffsetFloatEntry_message

// uint32 m_offset = 1;
inline void OffsetFloatEntry_message::clear_m_offset() {
  m_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OffsetFloatEntry_message::m_offset() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OffsetFloatEntry_message.m_offset)
  return m_offset_;
}
inline void OffsetFloatEntry_message::set_m_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_offset_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OffsetFloatEntry_message.m_offset)
}

// float m_value = 2;
inline void OffsetFloatEntry_message::clear_m_value() {
  m_value_ = 0;
}
inline float OffsetFloatEntry_message::m_value() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OffsetFloatEntry_message.m_value)
  return m_value_;
}
inline void OffsetFloatEntry_message::set_m_value(float value) {
  
  m_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OffsetFloatEntry_message.m_value)
}

// -------------------------------------------------------------------

// LineControlPoint_message

// uint32 m_dist = 1;
inline void LineControlPoint_message::clear_m_dist() {
  m_dist_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineControlPoint_message::m_dist() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoint_message.m_dist)
  return m_dist_;
}
inline void LineControlPoint_message::set_m_dist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_dist_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LineControlPoint_message.m_dist)
}

// uint32 m_value = 2;
inline void LineControlPoint_message::clear_m_value() {
  m_value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineControlPoint_message::m_value() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoint_message.m_value)
  return m_value_;
}
inline void LineControlPoint_message::set_m_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LineControlPoint_message.m_value)
}

// -------------------------------------------------------------------

// LineControlPoints_message

// uint32 m_type = 1;
inline void LineControlPoints_message::clear_m_type() {
  m_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineControlPoints_message::m_type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoints_message.m_type)
  return m_type_;
}
inline void LineControlPoints_message::set_m_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LineControlPoints_message.m_type)
}

// uint64 m_lineId = 2;
inline void LineControlPoints_message::clear_m_lineid() {
  m_lineid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LineControlPoints_message::m_lineid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoints_message.m_lineId)
  return m_lineid_;
}
inline void LineControlPoints_message::set_m_lineid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_lineid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LineControlPoints_message.m_lineId)
}

// uint32 m_control_points_size_t = 3;
inline void LineControlPoints_message::clear_m_control_points_size_t() {
  m_control_points_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LineControlPoints_message::m_control_points_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoints_message.m_control_points_size_t)
  return m_control_points_size_t_;
}
inline void LineControlPoints_message::set_m_control_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_control_points_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LineControlPoints_message.m_control_points_size_t)
}

// repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
inline int LineControlPoints_message::m_control_points_size() const {
  return m_control_points_.size();
}
inline void LineControlPoints_message::clear_m_control_points() {
  m_control_points_.Clear();
}
inline ::phoenix::ad_data_upload::LineControlPoint_message* LineControlPoints_message::mutable_m_control_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LineControlPoints_message.m_control_points)
  return m_control_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LineControlPoint_message >*
LineControlPoints_message::mutable_m_control_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.LineControlPoints_message.m_control_points)
  return &m_control_points_;
}
inline const ::phoenix::ad_data_upload::LineControlPoint_message& LineControlPoints_message::m_control_points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineControlPoints_message.m_control_points)
  return m_control_points_.Get(index);
}
inline ::phoenix::ad_data_upload::LineControlPoint_message* LineControlPoints_message::add_m_control_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.LineControlPoints_message.m_control_points)
  return m_control_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LineControlPoint_message >&
LineControlPoints_message::m_control_points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.LineControlPoints_message.m_control_points)
  return m_control_points_;
}

// -------------------------------------------------------------------

// MapLaneInfo_message

// uint64 m_timestamp = 1;
inline void MapLaneInfo_message::clear_m_timestamp() {
  m_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::m_timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.m_timestamp)
  return m_timestamp_;
}
inline void MapLaneInfo_message::set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.m_timestamp)
}

// float m_datum_Timestamp = 2;
inline void MapLaneInfo_message::clear_m_datum_timestamp() {
  m_datum_timestamp_ = 0;
}
inline float MapLaneInfo_message::m_datum_timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.m_datum_Timestamp)
  return m_datum_timestamp_;
}
inline void MapLaneInfo_message::set_m_datum_timestamp(float value) {
  
  m_datum_timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.m_datum_Timestamp)
}

// uint64 base_lane_id = 3;
inline void MapLaneInfo_message::clear_base_lane_id() {
  base_lane_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::base_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.base_lane_id)
  return base_lane_id_;
}
inline void MapLaneInfo_message::set_base_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  base_lane_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.base_lane_id)
}

// uint64 left_lane_id = 4;
inline void MapLaneInfo_message::clear_left_lane_id() {
  left_lane_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::left_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.left_lane_id)
  return left_lane_id_;
}
inline void MapLaneInfo_message::set_left_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  left_lane_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.left_lane_id)
}

// uint64 right_lane_id = 5;
inline void MapLaneInfo_message::clear_right_lane_id() {
  right_lane_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::right_lane_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.right_lane_id)
  return right_lane_id_;
}
inline void MapLaneInfo_message::set_right_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  right_lane_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.right_lane_id)
}

// uint32 next_lane_id_size_t = 6;
inline void MapLaneInfo_message::clear_next_lane_id_size_t() {
  next_lane_id_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::next_lane_id_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id_size_t)
  return next_lane_id_size_t_;
}
inline void MapLaneInfo_message::set_next_lane_id_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  next_lane_id_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id_size_t)
}

// uint32 pre_lane_id_size_t = 7;
inline void MapLaneInfo_message::clear_pre_lane_id_size_t() {
  pre_lane_id_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::pre_lane_id_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id_size_t)
  return pre_lane_id_size_t_;
}
inline void MapLaneInfo_message::set_pre_lane_id_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pre_lane_id_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id_size_t)
}

// repeated uint64 next_lane_id = 8;
inline int MapLaneInfo_message::next_lane_id_size() const {
  return next_lane_id_.size();
}
inline void MapLaneInfo_message::clear_next_lane_id() {
  next_lane_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::next_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id)
  return next_lane_id_.Get(index);
}
inline void MapLaneInfo_message::set_next_lane_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  next_lane_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id)
}
inline void MapLaneInfo_message::add_next_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  next_lane_id_.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
MapLaneInfo_message::next_lane_id() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id)
  return next_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
MapLaneInfo_message::mutable_next_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.next_lane_id)
  return &next_lane_id_;
}

// repeated uint64 pre_lane_id = 9;
inline int MapLaneInfo_message::pre_lane_id_size() const {
  return pre_lane_id_.size();
}
inline void MapLaneInfo_message::clear_pre_lane_id() {
  pre_lane_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapLaneInfo_message::pre_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id)
  return pre_lane_id_.Get(index);
}
inline void MapLaneInfo_message::set_pre_lane_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pre_lane_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id)
}
inline void MapLaneInfo_message::add_pre_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pre_lane_id_.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
MapLaneInfo_message::pre_lane_id() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id)
  return pre_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
MapLaneInfo_message::mutable_pre_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.pre_lane_id)
  return &pre_lane_id_;
}

// uint32 lane_transition = 10;
inline void MapLaneInfo_message::clear_lane_transition() {
  lane_transition_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_transition() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_transition)
  return lane_transition_;
}
inline void MapLaneInfo_message::set_lane_transition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_transition_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_transition)
}

// uint32 lane_connecttype = 11;
inline void MapLaneInfo_message::clear_lane_connecttype() {
  lane_connecttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_connecttype() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_connecttype)
  return lane_connecttype_;
}
inline void MapLaneInfo_message::set_lane_connecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_connecttype_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_connecttype)
}

// uint32 pathId = 12;
inline void MapLaneInfo_message::clear_pathid() {
  pathid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::pathid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.pathId)
  return pathid_;
}
inline void MapLaneInfo_message::set_pathid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pathid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.pathId)
}

// uint32 lane_offset_start = 13;
inline void MapLaneInfo_message::clear_lane_offset_start() {
  lane_offset_start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_offset_start() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_offset_start)
  return lane_offset_start_;
}
inline void MapLaneInfo_message::set_lane_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_offset_start_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_offset_start)
}

// uint32 lane_offset_end = 14;
inline void MapLaneInfo_message::clear_lane_offset_end() {
  lane_offset_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_offset_end() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_offset_end)
  return lane_offset_end_;
}
inline void MapLaneInfo_message::set_lane_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_offset_end_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_offset_end)
}

// uint32 lane_index = 15;
inline void MapLaneInfo_message::clear_lane_index() {
  lane_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_index() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_index)
  return lane_index_;
}
inline void MapLaneInfo_message::set_lane_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_index_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_index)
}

// uint32 lane_number = 16;
inline void MapLaneInfo_message::clear_lane_number() {
  lane_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lane_number() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.lane_number)
  return lane_number_;
}
inline void MapLaneInfo_message::set_lane_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_number_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.lane_number)
}

// uint32 center_points_size_t = 17;
inline void MapLaneInfo_message::clear_center_points_size_t() {
  center_points_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::center_points_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.center_points_size_t)
  return center_points_size_t_;
}
inline void MapLaneInfo_message::set_center_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  center_points_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.center_points_size_t)
}

// uint32 left_points_size_t = 18;
inline void MapLaneInfo_message::clear_left_points_size_t() {
  left_points_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::left_points_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.left_points_size_t)
  return left_points_size_t_;
}
inline void MapLaneInfo_message::set_left_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  left_points_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.left_points_size_t)
}

// uint32 right_points_size_t = 19;
inline void MapLaneInfo_message::clear_right_points_size_t() {
  right_points_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::right_points_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.right_points_size_t)
  return right_points_size_t_;
}
inline void MapLaneInfo_message::set_right_points_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  right_points_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.right_points_size_t)
}

// repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
inline int MapLaneInfo_message::center_points_size() const {
  return center_points_.size();
}
inline void MapLaneInfo_message::clear_center_points() {
  center_points_.Clear();
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::mutable_center_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.center_points)
  return center_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
MapLaneInfo_message::mutable_center_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.center_points)
  return &center_points_;
}
inline const ::phoenix::ad_data_upload::Coordinate_message& MapLaneInfo_message::center_points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.center_points)
  return center_points_.Get(index);
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::add_center_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.center_points)
  return center_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
MapLaneInfo_message::center_points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.center_points)
  return center_points_;
}

// repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
inline int MapLaneInfo_message::left_points_size() const {
  return left_points_.size();
}
inline void MapLaneInfo_message::clear_left_points() {
  left_points_.Clear();
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::mutable_left_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.left_points)
  return left_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
MapLaneInfo_message::mutable_left_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.left_points)
  return &left_points_;
}
inline const ::phoenix::ad_data_upload::Coordinate_message& MapLaneInfo_message::left_points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.left_points)
  return left_points_.Get(index);
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::add_left_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.left_points)
  return left_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
MapLaneInfo_message::left_points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.left_points)
  return left_points_;
}

// repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
inline int MapLaneInfo_message::right_points_size() const {
  return right_points_.size();
}
inline void MapLaneInfo_message::clear_right_points() {
  right_points_.Clear();
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::mutable_right_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.right_points)
  return right_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >*
MapLaneInfo_message::mutable_right_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.right_points)
  return &right_points_;
}
inline const ::phoenix::ad_data_upload::Coordinate_message& MapLaneInfo_message::right_points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.right_points)
  return right_points_.Get(index);
}
inline ::phoenix::ad_data_upload::Coordinate_message* MapLaneInfo_message::add_right_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.right_points)
  return right_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Coordinate_message >&
MapLaneInfo_message::right_points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.right_points)
  return right_points_;
}

// uint32 speed_limit_max = 23;
inline void MapLaneInfo_message::clear_speed_limit_max() {
  speed_limit_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::speed_limit_max() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.speed_limit_max)
  return speed_limit_max_;
}
inline void MapLaneInfo_message::set_speed_limit_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_limit_max_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.speed_limit_max)
}

// uint32 speed_limit_min = 24;
inline void MapLaneInfo_message::clear_speed_limit_min() {
  speed_limit_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::speed_limit_min() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.speed_limit_min)
  return speed_limit_min_;
}
inline void MapLaneInfo_message::set_speed_limit_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_limit_min_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.speed_limit_min)
}

// float length = 25;
inline void MapLaneInfo_message::clear_length() {
  length_ = 0;
}
inline float MapLaneInfo_message::length() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.length)
  return length_;
}
inline void MapLaneInfo_message::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.length)
}

// uint32 curvarture_size_t = 26;
inline void MapLaneInfo_message::clear_curvarture_size_t() {
  curvarture_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::curvarture_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.curvarture_size_t)
  return curvarture_size_t_;
}
inline void MapLaneInfo_message::set_curvarture_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  curvarture_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.curvarture_size_t)
}

// uint32 Latslope_size_t = 27;
inline void MapLaneInfo_message::clear_latslope_size_t() {
  latslope_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::latslope_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.Latslope_size_t)
  return latslope_size_t_;
}
inline void MapLaneInfo_message::set_latslope_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latslope_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.Latslope_size_t)
}

// uint32 Lngslope_size_t = 28;
inline void MapLaneInfo_message::clear_lngslope_size_t() {
  lngslope_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapLaneInfo_message::lngslope_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope_size_t)
  return lngslope_size_t_;
}
inline void MapLaneInfo_message::set_lngslope_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lngslope_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope_size_t)
}

// repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
inline int MapLaneInfo_message::curvarture_size() const {
  return curvarture_.size();
}
inline void MapLaneInfo_message::clear_curvarture() {
  curvarture_.Clear();
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::mutable_curvarture(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.curvarture)
  return curvarture_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
MapLaneInfo_message::mutable_curvarture() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.curvarture)
  return &curvarture_;
}
inline const ::phoenix::ad_data_upload::OffsetFloatEntry_message& MapLaneInfo_message::curvarture(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.curvarture)
  return curvarture_.Get(index);
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::add_curvarture() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.curvarture)
  return curvarture_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
MapLaneInfo_message::curvarture() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.curvarture)
  return curvarture_;
}

// repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
inline int MapLaneInfo_message::latslope_size() const {
  return latslope_.size();
}
inline void MapLaneInfo_message::clear_latslope() {
  latslope_.Clear();
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::mutable_latslope(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.Latslope)
  return latslope_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
MapLaneInfo_message::mutable_latslope() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.Latslope)
  return &latslope_;
}
inline const ::phoenix::ad_data_upload::OffsetFloatEntry_message& MapLaneInfo_message::latslope(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.Latslope)
  return latslope_.Get(index);
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::add_latslope() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.Latslope)
  return latslope_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
MapLaneInfo_message::latslope() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.Latslope)
  return latslope_;
}

// repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
inline int MapLaneInfo_message::lngslope_size() const {
  return lngslope_.size();
}
inline void MapLaneInfo_message::clear_lngslope() {
  lngslope_.Clear();
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::mutable_lngslope(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope)
  return lngslope_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >*
MapLaneInfo_message::mutable_lngslope() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope)
  return &lngslope_;
}
inline const ::phoenix::ad_data_upload::OffsetFloatEntry_message& MapLaneInfo_message::lngslope(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope)
  return lngslope_.Get(index);
}
inline ::phoenix::ad_data_upload::OffsetFloatEntry_message* MapLaneInfo_message::add_lngslope() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope)
  return lngslope_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::OffsetFloatEntry_message >&
MapLaneInfo_message::lngslope() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapLaneInfo_message.Lngslope)
  return lngslope_;
}

// -------------------------------------------------------------------

// MPUMapVecLaneInfo_message

// uint64 Time_stamp = 1;
inline void MPUMapVecLaneInfo_message::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MPUMapVecLaneInfo_message::time_stamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.Time_stamp)
  return time_stamp_;
}
inline void MPUMapVecLaneInfo_message::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.Time_stamp)
}

// uint32 data_size_t = 2;
inline void MPUMapVecLaneInfo_message::clear_data_size_t() {
  data_size_t_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MPUMapVecLaneInfo_message::data_size_t() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data_size_t)
  return data_size_t_;
}
inline void MPUMapVecLaneInfo_message::set_data_size_t(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_size_t_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data_size_t)
}

// repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
inline int MPUMapVecLaneInfo_message::data_size() const {
  return data_.size();
}
inline void MPUMapVecLaneInfo_message::clear_data() {
  data_.Clear();
}
inline ::phoenix::ad_data_upload::MapLaneInfo_message* MPUMapVecLaneInfo_message::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapLaneInfo_message >*
MPUMapVecLaneInfo_message::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data)
  return &data_;
}
inline const ::phoenix::ad_data_upload::MapLaneInfo_message& MPUMapVecLaneInfo_message::data(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data)
  return data_.Get(index);
}
inline ::phoenix::ad_data_upload::MapLaneInfo_message* MPUMapVecLaneInfo_message::add_data() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapLaneInfo_message >&
MPUMapVecLaneInfo_message::data() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MPUMapVecLaneInfo_message.data)
  return data_;
}

// -------------------------------------------------------------------

// Map_Display_Data_message

// .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
inline bool Map_Display_Data_message::has_map_lane_info() const {
  return this != internal_default_instance() && map_lane_info_ != nullptr;
}
inline void Map_Display_Data_message::clear_map_lane_info() {
  if (GetArenaNoVirtual() == nullptr && map_lane_info_ != nullptr) {
    delete map_lane_info_;
  }
  map_lane_info_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message& Map_Display_Data_message::map_lane_info() const {
  const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* p = map_lane_info_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Map_Display_Data_message.map_lane_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message*>(
      &::phoenix::ad_data_upload::_MPUMapVecLaneInfo_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* Map_Display_Data_message::release_map_lane_info() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Map_Display_Data_message.map_lane_info)
  
  ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* temp = map_lane_info_;
  map_lane_info_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* Map_Display_Data_message::mutable_map_lane_info() {
  
  if (map_lane_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MPUMapVecLaneInfo_message>(GetArenaNoVirtual());
    map_lane_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Map_Display_Data_message.map_lane_info)
  return map_lane_info_;
}
inline void Map_Display_Data_message::set_allocated_map_lane_info(::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* map_lane_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_lane_info_;
  }
  if (map_lane_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_lane_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_lane_info, submessage_arena);
    }
    
  } else {
    
  }
  map_lane_info_ = map_lane_info;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Map_Display_Data_message.map_lane_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_data_upload
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5floc_5fmap_2eproto
