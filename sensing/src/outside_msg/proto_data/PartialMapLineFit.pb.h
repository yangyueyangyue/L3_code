// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartialMapLineFit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PartialMapLineFit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PartialMapLineFit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PartialMapLineFit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PartialMapLineFit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace FitMapLine {
class FitCurve;
class FitCurveDefaultTypeInternal;
extern FitCurveDefaultTypeInternal _FitCurve_default_instance_;
class FitCurveSegment;
class FitCurveSegmentDefaultTypeInternal;
extern FitCurveSegmentDefaultTypeInternal _FitCurveSegment_default_instance_;
}  // namespace FitMapLine
PROTOBUF_NAMESPACE_OPEN
template<> ::FitMapLine::FitCurve* Arena::CreateMaybeMessage<::FitMapLine::FitCurve>(Arena*);
template<> ::FitMapLine::FitCurveSegment* Arena::CreateMaybeMessage<::FitMapLine::FitCurveSegment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FitMapLine {

// ===================================================================

class FitCurveSegment :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:FitMapLine.FitCurveSegment) */ {
 public:
  FitCurveSegment();
  virtual ~FitCurveSegment();

  FitCurveSegment(const FitCurveSegment& from);
  FitCurveSegment(FitCurveSegment&& from) noexcept
    : FitCurveSegment() {
    *this = ::std::move(from);
  }

  inline FitCurveSegment& operator=(const FitCurveSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitCurveSegment& operator=(FitCurveSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FitCurveSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FitCurveSegment* internal_default_instance() {
    return reinterpret_cast<const FitCurveSegment*>(
               &_FitCurveSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FitCurveSegment& a, FitCurveSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(FitCurveSegment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FitCurveSegment* New() const final {
    return CreateMaybeMessage<FitCurveSegment>(nullptr);
  }

  FitCurveSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FitCurveSegment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FitCurveSegment& from);
  void MergeFrom(const FitCurveSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FitCurveSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FitMapLine.FitCurveSegment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFCoefficientXFieldNumber = 7,
    kFCoefficientYFieldNumber = 8,
    kFSegOffsetFieldNumber = 1,
    kFSegSFieldNumber = 2,
    kFSegEFieldNumber = 3,
    kFScaleFieldNumber = 4,
    kFSegXSFieldNumber = 5,
    kFSegYSFieldNumber = 6,
  };
  // repeated double f_coefficient_x = 7;
  int f_coefficient_x_size() const;
  void clear_f_coefficient_x();
  double f_coefficient_x(int index) const;
  void set_f_coefficient_x(int index, double value);
  void add_f_coefficient_x(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      f_coefficient_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_f_coefficient_x();

  // repeated double f_coefficient_y = 8;
  int f_coefficient_y_size() const;
  void clear_f_coefficient_y();
  double f_coefficient_y(int index) const;
  void set_f_coefficient_y(int index, double value);
  void add_f_coefficient_y(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      f_coefficient_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_f_coefficient_y();

  // float f_seg_offset = 1;
  void clear_f_seg_offset();
  float f_seg_offset() const;
  void set_f_seg_offset(float value);

  // float f_seg_s = 2;
  void clear_f_seg_s();
  float f_seg_s() const;
  void set_f_seg_s(float value);

  // float f_seg_e = 3;
  void clear_f_seg_e();
  float f_seg_e() const;
  void set_f_seg_e(float value);

  // float f_scale = 4;
  void clear_f_scale();
  float f_scale() const;
  void set_f_scale(float value);

  // float f_seg_x_s = 5;
  void clear_f_seg_x_s();
  float f_seg_x_s() const;
  void set_f_seg_x_s(float value);

  // float f_seg_y_s = 6;
  void clear_f_seg_y_s();
  float f_seg_y_s() const;
  void set_f_seg_y_s(float value);

  // @@protoc_insertion_point(class_scope:FitMapLine.FitCurveSegment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > f_coefficient_x_;
  mutable std::atomic<int> _f_coefficient_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > f_coefficient_y_;
  mutable std::atomic<int> _f_coefficient_y_cached_byte_size_;
  float f_seg_offset_;
  float f_seg_s_;
  float f_seg_e_;
  float f_scale_;
  float f_seg_x_s_;
  float f_seg_y_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMapLineFit_2eproto;
};
// -------------------------------------------------------------------

class FitCurve :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:FitMapLine.FitCurve) */ {
 public:
  FitCurve();
  virtual ~FitCurve();

  FitCurve(const FitCurve& from);
  FitCurve(FitCurve&& from) noexcept
    : FitCurve() {
    *this = ::std::move(from);
  }

  inline FitCurve& operator=(const FitCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitCurve& operator=(FitCurve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FitCurve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FitCurve* internal_default_instance() {
    return reinterpret_cast<const FitCurve*>(
               &_FitCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FitCurve& a, FitCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(FitCurve* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FitCurve* New() const final {
    return CreateMaybeMessage<FitCurve>(nullptr);
  }

  FitCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FitCurve>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FitCurve& from);
  void MergeFrom(const FitCurve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FitCurve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FitMapLine.FitCurve";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFitCurvesFieldNumber = 2,
    kUTimestampFieldNumber = 1,
  };
  // repeated .FitMapLine.FitCurveSegment fit_curves = 2;
  int fit_curves_size() const;
  void clear_fit_curves();
  ::FitMapLine::FitCurveSegment* mutable_fit_curves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FitMapLine::FitCurveSegment >*
      mutable_fit_curves();
  const ::FitMapLine::FitCurveSegment& fit_curves(int index) const;
  ::FitMapLine::FitCurveSegment* add_fit_curves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FitMapLine::FitCurveSegment >&
      fit_curves() const;

  // uint64 u_timestamp = 1;
  void clear_u_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 u_timestamp() const;
  void set_u_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:FitMapLine.FitCurve)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FitMapLine::FitCurveSegment > fit_curves_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMapLineFit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FitCurveSegment

// float f_seg_offset = 1;
inline void FitCurveSegment::clear_f_seg_offset() {
  f_seg_offset_ = 0;
}
inline float FitCurveSegment::f_seg_offset() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_seg_offset)
  return f_seg_offset_;
}
inline void FitCurveSegment::set_f_seg_offset(float value) {
  
  f_seg_offset_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_seg_offset)
}

// float f_seg_s = 2;
inline void FitCurveSegment::clear_f_seg_s() {
  f_seg_s_ = 0;
}
inline float FitCurveSegment::f_seg_s() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_seg_s)
  return f_seg_s_;
}
inline void FitCurveSegment::set_f_seg_s(float value) {
  
  f_seg_s_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_seg_s)
}

// float f_seg_e = 3;
inline void FitCurveSegment::clear_f_seg_e() {
  f_seg_e_ = 0;
}
inline float FitCurveSegment::f_seg_e() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_seg_e)
  return f_seg_e_;
}
inline void FitCurveSegment::set_f_seg_e(float value) {
  
  f_seg_e_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_seg_e)
}

// float f_scale = 4;
inline void FitCurveSegment::clear_f_scale() {
  f_scale_ = 0;
}
inline float FitCurveSegment::f_scale() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_scale)
  return f_scale_;
}
inline void FitCurveSegment::set_f_scale(float value) {
  
  f_scale_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_scale)
}

// float f_seg_x_s = 5;
inline void FitCurveSegment::clear_f_seg_x_s() {
  f_seg_x_s_ = 0;
}
inline float FitCurveSegment::f_seg_x_s() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_seg_x_s)
  return f_seg_x_s_;
}
inline void FitCurveSegment::set_f_seg_x_s(float value) {
  
  f_seg_x_s_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_seg_x_s)
}

// float f_seg_y_s = 6;
inline void FitCurveSegment::clear_f_seg_y_s() {
  f_seg_y_s_ = 0;
}
inline float FitCurveSegment::f_seg_y_s() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_seg_y_s)
  return f_seg_y_s_;
}
inline void FitCurveSegment::set_f_seg_y_s(float value) {
  
  f_seg_y_s_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_seg_y_s)
}

// repeated double f_coefficient_x = 7;
inline int FitCurveSegment::f_coefficient_x_size() const {
  return f_coefficient_x_.size();
}
inline void FitCurveSegment::clear_f_coefficient_x() {
  f_coefficient_x_.Clear();
}
inline double FitCurveSegment::f_coefficient_x(int index) const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_coefficient_x)
  return f_coefficient_x_.Get(index);
}
inline void FitCurveSegment::set_f_coefficient_x(int index, double value) {
  f_coefficient_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_coefficient_x)
}
inline void FitCurveSegment::add_f_coefficient_x(double value) {
  f_coefficient_x_.Add(value);
  // @@protoc_insertion_point(field_add:FitMapLine.FitCurveSegment.f_coefficient_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FitCurveSegment::f_coefficient_x() const {
  // @@protoc_insertion_point(field_list:FitMapLine.FitCurveSegment.f_coefficient_x)
  return f_coefficient_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FitCurveSegment::mutable_f_coefficient_x() {
  // @@protoc_insertion_point(field_mutable_list:FitMapLine.FitCurveSegment.f_coefficient_x)
  return &f_coefficient_x_;
}

// repeated double f_coefficient_y = 8;
inline int FitCurveSegment::f_coefficient_y_size() const {
  return f_coefficient_y_.size();
}
inline void FitCurveSegment::clear_f_coefficient_y() {
  f_coefficient_y_.Clear();
}
inline double FitCurveSegment::f_coefficient_y(int index) const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurveSegment.f_coefficient_y)
  return f_coefficient_y_.Get(index);
}
inline void FitCurveSegment::set_f_coefficient_y(int index, double value) {
  f_coefficient_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurveSegment.f_coefficient_y)
}
inline void FitCurveSegment::add_f_coefficient_y(double value) {
  f_coefficient_y_.Add(value);
  // @@protoc_insertion_point(field_add:FitMapLine.FitCurveSegment.f_coefficient_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FitCurveSegment::f_coefficient_y() const {
  // @@protoc_insertion_point(field_list:FitMapLine.FitCurveSegment.f_coefficient_y)
  return f_coefficient_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FitCurveSegment::mutable_f_coefficient_y() {
  // @@protoc_insertion_point(field_mutable_list:FitMapLine.FitCurveSegment.f_coefficient_y)
  return &f_coefficient_y_;
}

// -------------------------------------------------------------------

// FitCurve

// uint64 u_timestamp = 1;
inline void FitCurve::clear_u_timestamp() {
  u_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FitCurve::u_timestamp() const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurve.u_timestamp)
  return u_timestamp_;
}
inline void FitCurve::set_u_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u_timestamp_ = value;
  // @@protoc_insertion_point(field_set:FitMapLine.FitCurve.u_timestamp)
}

// repeated .FitMapLine.FitCurveSegment fit_curves = 2;
inline int FitCurve::fit_curves_size() const {
  return fit_curves_.size();
}
inline void FitCurve::clear_fit_curves() {
  fit_curves_.Clear();
}
inline ::FitMapLine::FitCurveSegment* FitCurve::mutable_fit_curves(int index) {
  // @@protoc_insertion_point(field_mutable:FitMapLine.FitCurve.fit_curves)
  return fit_curves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FitMapLine::FitCurveSegment >*
FitCurve::mutable_fit_curves() {
  // @@protoc_insertion_point(field_mutable_list:FitMapLine.FitCurve.fit_curves)
  return &fit_curves_;
}
inline const ::FitMapLine::FitCurveSegment& FitCurve::fit_curves(int index) const {
  // @@protoc_insertion_point(field_get:FitMapLine.FitCurve.fit_curves)
  return fit_curves_.Get(index);
}
inline ::FitMapLine::FitCurveSegment* FitCurve::add_fit_curves() {
  // @@protoc_insertion_point(field_add:FitMapLine.FitCurve.fit_curves)
  return fit_curves_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FitMapLine::FitCurveSegment >&
FitCurve::fit_curves() const {
  // @@protoc_insertion_point(field_list:FitMapLine.FitCurve.fit_curves)
  return fit_curves_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FitMapLine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PartialMapLineFit_2eproto
