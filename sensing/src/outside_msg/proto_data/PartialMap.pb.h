// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartialMap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PartialMap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PartialMap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PartialMap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace PartialMap {
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class GroupLaneItem;
class GroupLaneItemDefaultTypeInternal;
extern GroupLaneItemDefaultTypeInternal _GroupLaneItem_default_instance_;
class PartialLane;
class PartialLaneDefaultTypeInternal;
extern PartialLaneDefaultTypeInternal _PartialLane_default_instance_;
class PartialLine;
class PartialLineDefaultTypeInternal;
extern PartialLineDefaultTypeInternal _PartialLine_default_instance_;
class PartialMap;
class PartialMapDefaultTypeInternal;
extern PartialMapDefaultTypeInternal _PartialMap_default_instance_;
class VehiclePosition;
class VehiclePositionDefaultTypeInternal;
extern VehiclePositionDefaultTypeInternal _VehiclePosition_default_instance_;
}  // namespace PartialMap
PROTOBUF_NAMESPACE_OPEN
template<> ::PartialMap::Coordinate* Arena::CreateMaybeMessage<::PartialMap::Coordinate>(Arena*);
template<> ::PartialMap::GroupLaneItem* Arena::CreateMaybeMessage<::PartialMap::GroupLaneItem>(Arena*);
template<> ::PartialMap::PartialLane* Arena::CreateMaybeMessage<::PartialMap::PartialLane>(Arena*);
template<> ::PartialMap::PartialLine* Arena::CreateMaybeMessage<::PartialMap::PartialLine>(Arena*);
template<> ::PartialMap::PartialMap* Arena::CreateMaybeMessage<::PartialMap::PartialMap>(Arena*);
template<> ::PartialMap::VehiclePosition* Arena::CreateMaybeMessage<::PartialMap::VehiclePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PartialMap {

// ===================================================================

class Coordinate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.Coordinate) */ {
 public:
  Coordinate();
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const final {
    return CreateMaybeMessage<Coordinate>(nullptr);
  }

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.Coordinate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
    kMZFieldNumber = 3,
  };
  // double m_x = 1;
  void clear_m_x();
  double m_x() const;
  void set_m_x(double value);

  // double m_y = 2;
  void clear_m_y();
  double m_y() const;
  void set_m_y(double value);

  // double m_z = 3;
  void clear_m_z();
  double m_z() const;
  void set_m_z(double value);

  // @@protoc_insertion_point(class_scope:PartialMap.Coordinate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double m_x_;
  double m_y_;
  double m_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// -------------------------------------------------------------------

class PartialLine :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.PartialLine) */ {
 public:
  PartialLine();
  virtual ~PartialLine();

  PartialLine(const PartialLine& from);
  PartialLine(PartialLine&& from) noexcept
    : PartialLine() {
    *this = ::std::move(from);
  }

  inline PartialLine& operator=(const PartialLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialLine& operator=(PartialLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PartialLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialLine* internal_default_instance() {
    return reinterpret_cast<const PartialLine*>(
               &_PartialLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PartialLine& a, PartialLine& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartialLine* New() const final {
    return CreateMaybeMessage<PartialLine>(nullptr);
  }

  PartialLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartialLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PartialLine& from);
  void MergeFrom(const PartialLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartialLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.PartialLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPointsFieldNumber = 4,
    kMLineIDFieldNumber = 1,
    kMIndexFieldNumber = 2,
    kMElementSequenceFieldNumber = 3,
  };
  // repeated .PartialMap.Coordinate m_Points = 4;
  int m_points_size() const;
  void clear_m_points();
  ::PartialMap::Coordinate* mutable_m_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >*
      mutable_m_points();
  const ::PartialMap::Coordinate& m_points(int index) const;
  ::PartialMap::Coordinate* add_m_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >&
      m_points() const;

  // uint64 m_LineID = 1;
  void clear_m_lineid();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lineid() const;
  void set_m_lineid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 m_Index = 2;
  void clear_m_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_index() const;
  void set_m_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 m_ElementSequence = 3;
  void clear_m_elementsequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_elementsequence() const;
  void set_m_elementsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:PartialMap.PartialLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate > m_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lineid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_elementsequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// -------------------------------------------------------------------

class PartialLane :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.PartialLane) */ {
 public:
  PartialLane();
  virtual ~PartialLane();

  PartialLane(const PartialLane& from);
  PartialLane(PartialLane&& from) noexcept
    : PartialLane() {
    *this = ::std::move(from);
  }

  inline PartialLane& operator=(const PartialLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialLane& operator=(PartialLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PartialLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialLane* internal_default_instance() {
    return reinterpret_cast<const PartialLane*>(
               &_PartialLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PartialLane& a, PartialLane& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartialLane* New() const final {
    return CreateMaybeMessage<PartialLane>(nullptr);
  }

  PartialLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartialLane>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PartialLane& from);
  void MergeFrom(const PartialLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartialLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.PartialLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNextLaneFieldNumber = 8,
    kMPreLaneFieldNumber = 9,
    kMCenterLineFieldNumber = 10,
    kMLaneIDFieldNumber = 1,
    kMLeftLinesFieldNumber = 2,
    kMRightLinesFieldNumber = 3,
    kMLeftLaneFieldNumber = 4,
    kMRightLaneFieldNumber = 5,
    kMLengthFieldNumber = 6,
    kMOffsetFieldNumber = 7,
  };
  // repeated uint64 m_NextLane = 8;
  int m_nextlane_size() const;
  void clear_m_nextlane();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_nextlane(int index) const;
  void set_m_nextlane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_m_nextlane(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      m_nextlane() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_m_nextlane();

  // repeated uint64 m_PreLane = 9;
  int m_prelane_size() const;
  void clear_m_prelane();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_prelane(int index) const;
  void set_m_prelane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_m_prelane(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      m_prelane() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_m_prelane();

  // repeated .PartialMap.Coordinate m_CenterLine = 10;
  int m_centerline_size() const;
  void clear_m_centerline();
  ::PartialMap::Coordinate* mutable_m_centerline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >*
      mutable_m_centerline();
  const ::PartialMap::Coordinate& m_centerline(int index) const;
  ::PartialMap::Coordinate* add_m_centerline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >&
      m_centerline() const;

  // uint64 m_LaneID = 1;
  void clear_m_laneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_laneid() const;
  void set_m_laneid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_LeftLines = 2;
  void clear_m_leftlines();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_leftlines() const;
  void set_m_leftlines(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_RightLines = 3;
  void clear_m_rightlines();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_rightlines() const;
  void set_m_rightlines(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_LeftLane = 4;
  void clear_m_leftlane();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_leftlane() const;
  void set_m_leftlane(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_RightLane = 5;
  void clear_m_rightlane();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_rightlane() const;
  void set_m_rightlane(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // double m_Length = 6;
  void clear_m_length();
  double m_length() const;
  void set_m_length(double value);

  // double m_Offset = 7;
  void clear_m_offset();
  double m_offset() const;
  void set_m_offset(double value);

  // @@protoc_insertion_point(class_scope:PartialMap.PartialLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > m_nextlane_;
  mutable std::atomic<int> _m_nextlane_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > m_prelane_;
  mutable std::atomic<int> _m_prelane_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate > m_centerline_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_laneid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_leftlines_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_rightlines_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_leftlane_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_rightlane_;
  double m_length_;
  double m_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// -------------------------------------------------------------------

class GroupLaneItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.GroupLaneItem) */ {
 public:
  GroupLaneItem();
  virtual ~GroupLaneItem();

  GroupLaneItem(const GroupLaneItem& from);
  GroupLaneItem(GroupLaneItem&& from) noexcept
    : GroupLaneItem() {
    *this = ::std::move(from);
  }

  inline GroupLaneItem& operator=(const GroupLaneItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupLaneItem& operator=(GroupLaneItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GroupLaneItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupLaneItem* internal_default_instance() {
    return reinterpret_cast<const GroupLaneItem*>(
               &_GroupLaneItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupLaneItem& a, GroupLaneItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupLaneItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupLaneItem* New() const final {
    return CreateMaybeMessage<GroupLaneItem>(nullptr);
  }

  GroupLaneItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupLaneItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GroupLaneItem& from);
  void MergeFrom(const GroupLaneItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupLaneItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.GroupLaneItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCurLanesFieldNumber = 1,
    kMLeftLanesFieldNumber = 2,
    kMRightLanesFieldNumber = 3,
  };
  // repeated uint64 m_CurLanes = 1;
  int m_curlanes_size() const;
  void clear_m_curlanes();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_curlanes(int index) const;
  void set_m_curlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_m_curlanes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      m_curlanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_m_curlanes();

  // repeated uint64 m_LeftLanes = 2;
  int m_leftlanes_size() const;
  void clear_m_leftlanes();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_leftlanes(int index) const;
  void set_m_leftlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_m_leftlanes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      m_leftlanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_m_leftlanes();

  // repeated uint64 m_RightLanes = 3;
  int m_rightlanes_size() const;
  void clear_m_rightlanes();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_rightlanes(int index) const;
  void set_m_rightlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_m_rightlanes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      m_rightlanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_m_rightlanes();

  // @@protoc_insertion_point(class_scope:PartialMap.GroupLaneItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > m_curlanes_;
  mutable std::atomic<int> _m_curlanes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > m_leftlanes_;
  mutable std::atomic<int> _m_leftlanes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > m_rightlanes_;
  mutable std::atomic<int> _m_rightlanes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// -------------------------------------------------------------------

class VehiclePosition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.VehiclePosition) */ {
 public:
  VehiclePosition();
  virtual ~VehiclePosition();

  VehiclePosition(const VehiclePosition& from);
  VehiclePosition(VehiclePosition&& from) noexcept
    : VehiclePosition() {
    *this = ::std::move(from);
  }

  inline VehiclePosition& operator=(const VehiclePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehiclePosition& operator=(VehiclePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VehiclePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehiclePosition* internal_default_instance() {
    return reinterpret_cast<const VehiclePosition*>(
               &_VehiclePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehiclePosition& a, VehiclePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(VehiclePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehiclePosition* New() const final {
    return CreateMaybeMessage<VehiclePosition>(nullptr);
  }

  VehiclePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehiclePosition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VehiclePosition& from);
  void MergeFrom(const VehiclePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehiclePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.VehiclePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMVehiclePositionFieldNumber = 4,
    kMRelativeVehiclePositionFieldNumber = 5,
    kMTimeStampFieldNumber = 1,
    kMDatumStampFieldNumber = 2,
    kMLastTimeStampFieldNumber = 3,
  };
  // .PartialMap.Coordinate m_VehiclePosition = 4;
  bool has_m_vehicleposition() const;
  void clear_m_vehicleposition();
  const ::PartialMap::Coordinate& m_vehicleposition() const;
  ::PartialMap::Coordinate* release_m_vehicleposition();
  ::PartialMap::Coordinate* mutable_m_vehicleposition();
  void set_allocated_m_vehicleposition(::PartialMap::Coordinate* m_vehicleposition);

  // .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
  bool has_m_relativevehicleposition() const;
  void clear_m_relativevehicleposition();
  const ::PartialMap::Coordinate& m_relativevehicleposition() const;
  ::PartialMap::Coordinate* release_m_relativevehicleposition();
  ::PartialMap::Coordinate* mutable_m_relativevehicleposition();
  void set_allocated_m_relativevehicleposition(::PartialMap::Coordinate* m_relativevehicleposition);

  // uint64 m_TimeStamp = 1;
  void clear_m_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp() const;
  void set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_DatumStamp = 2;
  void clear_m_datumstamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumstamp() const;
  void set_m_datumstamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_LastTimeStamp = 3;
  void clear_m_lasttimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lasttimestamp() const;
  void set_m_lasttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:PartialMap.VehiclePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PartialMap::Coordinate* m_vehicleposition_;
  ::PartialMap::Coordinate* m_relativevehicleposition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumstamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_lasttimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// -------------------------------------------------------------------

class PartialMap :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PartialMap.PartialMap) */ {
 public:
  PartialMap();
  virtual ~PartialMap();

  PartialMap(const PartialMap& from);
  PartialMap(PartialMap&& from) noexcept
    : PartialMap() {
    *this = ::std::move(from);
  }

  inline PartialMap& operator=(const PartialMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialMap& operator=(PartialMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PartialMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialMap* internal_default_instance() {
    return reinterpret_cast<const PartialMap*>(
               &_PartialMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PartialMap& a, PartialMap& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartialMap* New() const final {
    return CreateMaybeMessage<PartialMap>(nullptr);
  }

  PartialMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartialMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PartialMap& from);
  void MergeFrom(const PartialMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartialMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartialMap.PartialMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLanesFieldNumber = 4,
    kMLinesFieldNumber = 5,
    kMGroupFieldNumber = 6,
    kMPositionFieldNumber = 1,
    kMDatumStampFieldNumber = 2,
    kMCurLaneIdFieldNumber = 3,
  };
  // repeated .PartialMap.PartialLane m_Lanes = 4;
  int m_lanes_size() const;
  void clear_m_lanes();
  ::PartialMap::PartialLane* mutable_m_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLane >*
      mutable_m_lanes();
  const ::PartialMap::PartialLane& m_lanes(int index) const;
  ::PartialMap::PartialLane* add_m_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLane >&
      m_lanes() const;

  // repeated .PartialMap.PartialLine m_Lines = 5;
  int m_lines_size() const;
  void clear_m_lines();
  ::PartialMap::PartialLine* mutable_m_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLine >*
      mutable_m_lines();
  const ::PartialMap::PartialLine& m_lines(int index) const;
  ::PartialMap::PartialLine* add_m_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLine >&
      m_lines() const;

  // repeated .PartialMap.GroupLaneItem m_Group = 6;
  int m_group_size() const;
  void clear_m_group();
  ::PartialMap::GroupLaneItem* mutable_m_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::GroupLaneItem >*
      mutable_m_group();
  const ::PartialMap::GroupLaneItem& m_group(int index) const;
  ::PartialMap::GroupLaneItem* add_m_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::GroupLaneItem >&
      m_group() const;

  // .PartialMap.VehiclePosition m_Position = 1;
  bool has_m_position() const;
  void clear_m_position();
  const ::PartialMap::VehiclePosition& m_position() const;
  ::PartialMap::VehiclePosition* release_m_position();
  ::PartialMap::VehiclePosition* mutable_m_position();
  void set_allocated_m_position(::PartialMap::VehiclePosition* m_position);

  // uint64 m_DatumStamp = 2;
  void clear_m_datumstamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumstamp() const;
  void set_m_datumstamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_CurLaneId = 3;
  void clear_m_curlaneid();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_curlaneid() const;
  void set_m_curlaneid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:PartialMap.PartialMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLane > m_lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLine > m_lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::GroupLaneItem > m_group_;
  ::PartialMap::VehiclePosition* m_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumstamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_curlaneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PartialMap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinate

// double m_x = 1;
inline void Coordinate::clear_m_x() {
  m_x_ = 0;
}
inline double Coordinate::m_x() const {
  // @@protoc_insertion_point(field_get:PartialMap.Coordinate.m_x)
  return m_x_;
}
inline void Coordinate::set_m_x(double value) {
  
  m_x_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.Coordinate.m_x)
}

// double m_y = 2;
inline void Coordinate::clear_m_y() {
  m_y_ = 0;
}
inline double Coordinate::m_y() const {
  // @@protoc_insertion_point(field_get:PartialMap.Coordinate.m_y)
  return m_y_;
}
inline void Coordinate::set_m_y(double value) {
  
  m_y_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.Coordinate.m_y)
}

// double m_z = 3;
inline void Coordinate::clear_m_z() {
  m_z_ = 0;
}
inline double Coordinate::m_z() const {
  // @@protoc_insertion_point(field_get:PartialMap.Coordinate.m_z)
  return m_z_;
}
inline void Coordinate::set_m_z(double value) {
  
  m_z_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.Coordinate.m_z)
}

// -------------------------------------------------------------------

// PartialLine

// uint64 m_LineID = 1;
inline void PartialLine::clear_m_lineid() {
  m_lineid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLine::m_lineid() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLine.m_LineID)
  return m_lineid_;
}
inline void PartialLine::set_m_lineid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_lineid_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLine.m_LineID)
}

// uint32 m_Index = 2;
inline void PartialLine::clear_m_index() {
  m_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartialLine::m_index() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLine.m_Index)
  return m_index_;
}
inline void PartialLine::set_m_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_index_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLine.m_Index)
}

// uint32 m_ElementSequence = 3;
inline void PartialLine::clear_m_elementsequence() {
  m_elementsequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PartialLine::m_elementsequence() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLine.m_ElementSequence)
  return m_elementsequence_;
}
inline void PartialLine::set_m_elementsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_elementsequence_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLine.m_ElementSequence)
}

// repeated .PartialMap.Coordinate m_Points = 4;
inline int PartialLine::m_points_size() const {
  return m_points_.size();
}
inline void PartialLine::clear_m_points() {
  m_points_.Clear();
}
inline ::PartialMap::Coordinate* PartialLine::mutable_m_points(int index) {
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialLine.m_Points)
  return m_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >*
PartialLine::mutable_m_points() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialLine.m_Points)
  return &m_points_;
}
inline const ::PartialMap::Coordinate& PartialLine::m_points(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLine.m_Points)
  return m_points_.Get(index);
}
inline ::PartialMap::Coordinate* PartialLine::add_m_points() {
  // @@protoc_insertion_point(field_add:PartialMap.PartialLine.m_Points)
  return m_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >&
PartialLine::m_points() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialLine.m_Points)
  return m_points_;
}

// -------------------------------------------------------------------

// PartialLane

// uint64 m_LaneID = 1;
inline void PartialLane::clear_m_laneid() {
  m_laneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_laneid() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_LaneID)
  return m_laneid_;
}
inline void PartialLane::set_m_laneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_laneid_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_LaneID)
}

// uint64 m_LeftLines = 2;
inline void PartialLane::clear_m_leftlines() {
  m_leftlines_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_leftlines() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_LeftLines)
  return m_leftlines_;
}
inline void PartialLane::set_m_leftlines(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_leftlines_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_LeftLines)
}

// uint64 m_RightLines = 3;
inline void PartialLane::clear_m_rightlines() {
  m_rightlines_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_rightlines() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_RightLines)
  return m_rightlines_;
}
inline void PartialLane::set_m_rightlines(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_rightlines_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_RightLines)
}

// uint64 m_LeftLane = 4;
inline void PartialLane::clear_m_leftlane() {
  m_leftlane_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_leftlane() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_LeftLane)
  return m_leftlane_;
}
inline void PartialLane::set_m_leftlane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_leftlane_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_LeftLane)
}

// uint64 m_RightLane = 5;
inline void PartialLane::clear_m_rightlane() {
  m_rightlane_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_rightlane() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_RightLane)
  return m_rightlane_;
}
inline void PartialLane::set_m_rightlane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_rightlane_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_RightLane)
}

// double m_Length = 6;
inline void PartialLane::clear_m_length() {
  m_length_ = 0;
}
inline double PartialLane::m_length() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_Length)
  return m_length_;
}
inline void PartialLane::set_m_length(double value) {
  
  m_length_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_Length)
}

// double m_Offset = 7;
inline void PartialLane::clear_m_offset() {
  m_offset_ = 0;
}
inline double PartialLane::m_offset() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_Offset)
  return m_offset_;
}
inline void PartialLane::set_m_offset(double value) {
  
  m_offset_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_Offset)
}

// repeated uint64 m_NextLane = 8;
inline int PartialLane::m_nextlane_size() const {
  return m_nextlane_.size();
}
inline void PartialLane::clear_m_nextlane() {
  m_nextlane_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_nextlane(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_NextLane)
  return m_nextlane_.Get(index);
}
inline void PartialLane::set_m_nextlane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_nextlane_.Set(index, value);
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_NextLane)
}
inline void PartialLane::add_m_nextlane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_nextlane_.Add(value);
  // @@protoc_insertion_point(field_add:PartialMap.PartialLane.m_NextLane)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PartialLane::m_nextlane() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialLane.m_NextLane)
  return m_nextlane_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PartialLane::mutable_m_nextlane() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialLane.m_NextLane)
  return &m_nextlane_;
}

// repeated uint64 m_PreLane = 9;
inline int PartialLane::m_prelane_size() const {
  return m_prelane_.size();
}
inline void PartialLane::clear_m_prelane() {
  m_prelane_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialLane::m_prelane(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_PreLane)
  return m_prelane_.Get(index);
}
inline void PartialLane::set_m_prelane(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_prelane_.Set(index, value);
  // @@protoc_insertion_point(field_set:PartialMap.PartialLane.m_PreLane)
}
inline void PartialLane::add_m_prelane(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_prelane_.Add(value);
  // @@protoc_insertion_point(field_add:PartialMap.PartialLane.m_PreLane)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PartialLane::m_prelane() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialLane.m_PreLane)
  return m_prelane_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PartialLane::mutable_m_prelane() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialLane.m_PreLane)
  return &m_prelane_;
}

// repeated .PartialMap.Coordinate m_CenterLine = 10;
inline int PartialLane::m_centerline_size() const {
  return m_centerline_.size();
}
inline void PartialLane::clear_m_centerline() {
  m_centerline_.Clear();
}
inline ::PartialMap::Coordinate* PartialLane::mutable_m_centerline(int index) {
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialLane.m_CenterLine)
  return m_centerline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >*
PartialLane::mutable_m_centerline() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialLane.m_CenterLine)
  return &m_centerline_;
}
inline const ::PartialMap::Coordinate& PartialLane::m_centerline(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialLane.m_CenterLine)
  return m_centerline_.Get(index);
}
inline ::PartialMap::Coordinate* PartialLane::add_m_centerline() {
  // @@protoc_insertion_point(field_add:PartialMap.PartialLane.m_CenterLine)
  return m_centerline_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::Coordinate >&
PartialLane::m_centerline() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialLane.m_CenterLine)
  return m_centerline_;
}

// -------------------------------------------------------------------

// GroupLaneItem

// repeated uint64 m_CurLanes = 1;
inline int GroupLaneItem::m_curlanes_size() const {
  return m_curlanes_.size();
}
inline void GroupLaneItem::clear_m_curlanes() {
  m_curlanes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GroupLaneItem::m_curlanes(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.GroupLaneItem.m_CurLanes)
  return m_curlanes_.Get(index);
}
inline void GroupLaneItem::set_m_curlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_curlanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:PartialMap.GroupLaneItem.m_CurLanes)
}
inline void GroupLaneItem::add_m_curlanes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_curlanes_.Add(value);
  // @@protoc_insertion_point(field_add:PartialMap.GroupLaneItem.m_CurLanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GroupLaneItem::m_curlanes() const {
  // @@protoc_insertion_point(field_list:PartialMap.GroupLaneItem.m_CurLanes)
  return m_curlanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GroupLaneItem::mutable_m_curlanes() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.GroupLaneItem.m_CurLanes)
  return &m_curlanes_;
}

// repeated uint64 m_LeftLanes = 2;
inline int GroupLaneItem::m_leftlanes_size() const {
  return m_leftlanes_.size();
}
inline void GroupLaneItem::clear_m_leftlanes() {
  m_leftlanes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GroupLaneItem::m_leftlanes(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.GroupLaneItem.m_LeftLanes)
  return m_leftlanes_.Get(index);
}
inline void GroupLaneItem::set_m_leftlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_leftlanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:PartialMap.GroupLaneItem.m_LeftLanes)
}
inline void GroupLaneItem::add_m_leftlanes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_leftlanes_.Add(value);
  // @@protoc_insertion_point(field_add:PartialMap.GroupLaneItem.m_LeftLanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GroupLaneItem::m_leftlanes() const {
  // @@protoc_insertion_point(field_list:PartialMap.GroupLaneItem.m_LeftLanes)
  return m_leftlanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GroupLaneItem::mutable_m_leftlanes() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.GroupLaneItem.m_LeftLanes)
  return &m_leftlanes_;
}

// repeated uint64 m_RightLanes = 3;
inline int GroupLaneItem::m_rightlanes_size() const {
  return m_rightlanes_.size();
}
inline void GroupLaneItem::clear_m_rightlanes() {
  m_rightlanes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GroupLaneItem::m_rightlanes(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.GroupLaneItem.m_RightLanes)
  return m_rightlanes_.Get(index);
}
inline void GroupLaneItem::set_m_rightlanes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_rightlanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:PartialMap.GroupLaneItem.m_RightLanes)
}
inline void GroupLaneItem::add_m_rightlanes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  m_rightlanes_.Add(value);
  // @@protoc_insertion_point(field_add:PartialMap.GroupLaneItem.m_RightLanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GroupLaneItem::m_rightlanes() const {
  // @@protoc_insertion_point(field_list:PartialMap.GroupLaneItem.m_RightLanes)
  return m_rightlanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GroupLaneItem::mutable_m_rightlanes() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.GroupLaneItem.m_RightLanes)
  return &m_rightlanes_;
}

// -------------------------------------------------------------------

// VehiclePosition

// uint64 m_TimeStamp = 1;
inline void VehiclePosition::clear_m_timestamp() {
  m_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehiclePosition::m_timestamp() const {
  // @@protoc_insertion_point(field_get:PartialMap.VehiclePosition.m_TimeStamp)
  return m_timestamp_;
}
inline void VehiclePosition::set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.VehiclePosition.m_TimeStamp)
}

// uint64 m_DatumStamp = 2;
inline void VehiclePosition::clear_m_datumstamp() {
  m_datumstamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehiclePosition::m_datumstamp() const {
  // @@protoc_insertion_point(field_get:PartialMap.VehiclePosition.m_DatumStamp)
  return m_datumstamp_;
}
inline void VehiclePosition::set_m_datumstamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_datumstamp_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.VehiclePosition.m_DatumStamp)
}

// uint64 m_LastTimeStamp = 3;
inline void VehiclePosition::clear_m_lasttimestamp() {
  m_lasttimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehiclePosition::m_lasttimestamp() const {
  // @@protoc_insertion_point(field_get:PartialMap.VehiclePosition.m_LastTimeStamp)
  return m_lasttimestamp_;
}
inline void VehiclePosition::set_m_lasttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_lasttimestamp_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.VehiclePosition.m_LastTimeStamp)
}

// .PartialMap.Coordinate m_VehiclePosition = 4;
inline bool VehiclePosition::has_m_vehicleposition() const {
  return this != internal_default_instance() && m_vehicleposition_ != nullptr;
}
inline void VehiclePosition::clear_m_vehicleposition() {
  if (GetArenaNoVirtual() == nullptr && m_vehicleposition_ != nullptr) {
    delete m_vehicleposition_;
  }
  m_vehicleposition_ = nullptr;
}
inline const ::PartialMap::Coordinate& VehiclePosition::m_vehicleposition() const {
  const ::PartialMap::Coordinate* p = m_vehicleposition_;
  // @@protoc_insertion_point(field_get:PartialMap.VehiclePosition.m_VehiclePosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::PartialMap::Coordinate*>(
      &::PartialMap::_Coordinate_default_instance_);
}
inline ::PartialMap::Coordinate* VehiclePosition::release_m_vehicleposition() {
  // @@protoc_insertion_point(field_release:PartialMap.VehiclePosition.m_VehiclePosition)
  
  ::PartialMap::Coordinate* temp = m_vehicleposition_;
  m_vehicleposition_ = nullptr;
  return temp;
}
inline ::PartialMap::Coordinate* VehiclePosition::mutable_m_vehicleposition() {
  
  if (m_vehicleposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PartialMap::Coordinate>(GetArenaNoVirtual());
    m_vehicleposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PartialMap.VehiclePosition.m_VehiclePosition)
  return m_vehicleposition_;
}
inline void VehiclePosition::set_allocated_m_vehicleposition(::PartialMap::Coordinate* m_vehicleposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_vehicleposition_;
  }
  if (m_vehicleposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_vehicleposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_vehicleposition, submessage_arena);
    }
    
  } else {
    
  }
  m_vehicleposition_ = m_vehicleposition;
  // @@protoc_insertion_point(field_set_allocated:PartialMap.VehiclePosition.m_VehiclePosition)
}

// .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
inline bool VehiclePosition::has_m_relativevehicleposition() const {
  return this != internal_default_instance() && m_relativevehicleposition_ != nullptr;
}
inline void VehiclePosition::clear_m_relativevehicleposition() {
  if (GetArenaNoVirtual() == nullptr && m_relativevehicleposition_ != nullptr) {
    delete m_relativevehicleposition_;
  }
  m_relativevehicleposition_ = nullptr;
}
inline const ::PartialMap::Coordinate& VehiclePosition::m_relativevehicleposition() const {
  const ::PartialMap::Coordinate* p = m_relativevehicleposition_;
  // @@protoc_insertion_point(field_get:PartialMap.VehiclePosition.m_RelativeVehiclePosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::PartialMap::Coordinate*>(
      &::PartialMap::_Coordinate_default_instance_);
}
inline ::PartialMap::Coordinate* VehiclePosition::release_m_relativevehicleposition() {
  // @@protoc_insertion_point(field_release:PartialMap.VehiclePosition.m_RelativeVehiclePosition)
  
  ::PartialMap::Coordinate* temp = m_relativevehicleposition_;
  m_relativevehicleposition_ = nullptr;
  return temp;
}
inline ::PartialMap::Coordinate* VehiclePosition::mutable_m_relativevehicleposition() {
  
  if (m_relativevehicleposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::PartialMap::Coordinate>(GetArenaNoVirtual());
    m_relativevehicleposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PartialMap.VehiclePosition.m_RelativeVehiclePosition)
  return m_relativevehicleposition_;
}
inline void VehiclePosition::set_allocated_m_relativevehicleposition(::PartialMap::Coordinate* m_relativevehicleposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_relativevehicleposition_;
  }
  if (m_relativevehicleposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_relativevehicleposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_relativevehicleposition, submessage_arena);
    }
    
  } else {
    
  }
  m_relativevehicleposition_ = m_relativevehicleposition;
  // @@protoc_insertion_point(field_set_allocated:PartialMap.VehiclePosition.m_RelativeVehiclePosition)
}

// -------------------------------------------------------------------

// PartialMap

// .PartialMap.VehiclePosition m_Position = 1;
inline bool PartialMap::has_m_position() const {
  return this != internal_default_instance() && m_position_ != nullptr;
}
inline void PartialMap::clear_m_position() {
  if (GetArenaNoVirtual() == nullptr && m_position_ != nullptr) {
    delete m_position_;
  }
  m_position_ = nullptr;
}
inline const ::PartialMap::VehiclePosition& PartialMap::m_position() const {
  const ::PartialMap::VehiclePosition* p = m_position_;
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::PartialMap::VehiclePosition*>(
      &::PartialMap::_VehiclePosition_default_instance_);
}
inline ::PartialMap::VehiclePosition* PartialMap::release_m_position() {
  // @@protoc_insertion_point(field_release:PartialMap.PartialMap.m_Position)
  
  ::PartialMap::VehiclePosition* temp = m_position_;
  m_position_ = nullptr;
  return temp;
}
inline ::PartialMap::VehiclePosition* PartialMap::mutable_m_position() {
  
  if (m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::PartialMap::VehiclePosition>(GetArenaNoVirtual());
    m_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialMap.m_Position)
  return m_position_;
}
inline void PartialMap::set_allocated_m_position(::PartialMap::VehiclePosition* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    
  } else {
    
  }
  m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:PartialMap.PartialMap.m_Position)
}

// uint64 m_DatumStamp = 2;
inline void PartialMap::clear_m_datumstamp() {
  m_datumstamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialMap::m_datumstamp() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_DatumStamp)
  return m_datumstamp_;
}
inline void PartialMap::set_m_datumstamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_datumstamp_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialMap.m_DatumStamp)
}

// uint64 m_CurLaneId = 3;
inline void PartialMap::clear_m_curlaneid() {
  m_curlaneid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PartialMap::m_curlaneid() const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_CurLaneId)
  return m_curlaneid_;
}
inline void PartialMap::set_m_curlaneid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_curlaneid_ = value;
  // @@protoc_insertion_point(field_set:PartialMap.PartialMap.m_CurLaneId)
}

// repeated .PartialMap.PartialLane m_Lanes = 4;
inline int PartialMap::m_lanes_size() const {
  return m_lanes_.size();
}
inline void PartialMap::clear_m_lanes() {
  m_lanes_.Clear();
}
inline ::PartialMap::PartialLane* PartialMap::mutable_m_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialMap.m_Lanes)
  return m_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLane >*
PartialMap::mutable_m_lanes() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialMap.m_Lanes)
  return &m_lanes_;
}
inline const ::PartialMap::PartialLane& PartialMap::m_lanes(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_Lanes)
  return m_lanes_.Get(index);
}
inline ::PartialMap::PartialLane* PartialMap::add_m_lanes() {
  // @@protoc_insertion_point(field_add:PartialMap.PartialMap.m_Lanes)
  return m_lanes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLane >&
PartialMap::m_lanes() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialMap.m_Lanes)
  return m_lanes_;
}

// repeated .PartialMap.PartialLine m_Lines = 5;
inline int PartialMap::m_lines_size() const {
  return m_lines_.size();
}
inline void PartialMap::clear_m_lines() {
  m_lines_.Clear();
}
inline ::PartialMap::PartialLine* PartialMap::mutable_m_lines(int index) {
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialMap.m_Lines)
  return m_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLine >*
PartialMap::mutable_m_lines() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialMap.m_Lines)
  return &m_lines_;
}
inline const ::PartialMap::PartialLine& PartialMap::m_lines(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_Lines)
  return m_lines_.Get(index);
}
inline ::PartialMap::PartialLine* PartialMap::add_m_lines() {
  // @@protoc_insertion_point(field_add:PartialMap.PartialMap.m_Lines)
  return m_lines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::PartialLine >&
PartialMap::m_lines() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialMap.m_Lines)
  return m_lines_;
}

// repeated .PartialMap.GroupLaneItem m_Group = 6;
inline int PartialMap::m_group_size() const {
  return m_group_.size();
}
inline void PartialMap::clear_m_group() {
  m_group_.Clear();
}
inline ::PartialMap::GroupLaneItem* PartialMap::mutable_m_group(int index) {
  // @@protoc_insertion_point(field_mutable:PartialMap.PartialMap.m_Group)
  return m_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::GroupLaneItem >*
PartialMap::mutable_m_group() {
  // @@protoc_insertion_point(field_mutable_list:PartialMap.PartialMap.m_Group)
  return &m_group_;
}
inline const ::PartialMap::GroupLaneItem& PartialMap::m_group(int index) const {
  // @@protoc_insertion_point(field_get:PartialMap.PartialMap.m_Group)
  return m_group_.Get(index);
}
inline ::PartialMap::GroupLaneItem* PartialMap::add_m_group() {
  // @@protoc_insertion_point(field_add:PartialMap.PartialMap.m_Group)
  return m_group_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PartialMap::GroupLaneItem >&
PartialMap::m_group() const {
  // @@protoc_insertion_point(field_list:PartialMap.PartialMap.m_Group)
  return m_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PartialMap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PartialMap_2eproto
