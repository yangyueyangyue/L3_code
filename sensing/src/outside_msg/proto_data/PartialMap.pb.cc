// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartialMap.proto

#include "PartialMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_PartialMap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupLaneItem_PartialMap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartialLane_PartialMap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartialLine_PartialMap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PartialMap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehiclePosition_PartialMap_2eproto;
namespace PartialMap {
class CoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinate> _instance;
} _Coordinate_default_instance_;
class PartialLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartialLine> _instance;
} _PartialLine_default_instance_;
class PartialLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartialLane> _instance;
} _PartialLane_default_instance_;
class GroupLaneItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupLaneItem> _instance;
} _GroupLaneItem_default_instance_;
class VehiclePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehiclePosition> _instance;
} _VehiclePosition_default_instance_;
class PartialMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartialMap> _instance;
} _PartialMap_default_instance_;
}  // namespace PartialMap
static void InitDefaultsscc_info_Coordinate_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_Coordinate_default_instance_;
    new (ptr) ::PartialMap::Coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::Coordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Coordinate_PartialMap_2eproto}, {}};

static void InitDefaultsscc_info_GroupLaneItem_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_GroupLaneItem_default_instance_;
    new (ptr) ::PartialMap::GroupLaneItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::GroupLaneItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupLaneItem_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GroupLaneItem_PartialMap_2eproto}, {}};

static void InitDefaultsscc_info_PartialLane_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_PartialLane_default_instance_;
    new (ptr) ::PartialMap::PartialLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::PartialLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartialLane_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PartialLane_PartialMap_2eproto}, {
      &scc_info_Coordinate_PartialMap_2eproto.base,}};

static void InitDefaultsscc_info_PartialLine_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_PartialLine_default_instance_;
    new (ptr) ::PartialMap::PartialLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::PartialLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartialLine_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PartialLine_PartialMap_2eproto}, {
      &scc_info_Coordinate_PartialMap_2eproto.base,}};

static void InitDefaultsscc_info_PartialMap_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_PartialMap_default_instance_;
    new (ptr) ::PartialMap::PartialMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::PartialMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PartialMap_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_PartialMap_PartialMap_2eproto}, {
      &scc_info_VehiclePosition_PartialMap_2eproto.base,
      &scc_info_PartialLane_PartialMap_2eproto.base,
      &scc_info_PartialLine_PartialMap_2eproto.base,
      &scc_info_GroupLaneItem_PartialMap_2eproto.base,}};

static void InitDefaultsscc_info_VehiclePosition_PartialMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PartialMap::_VehiclePosition_default_instance_;
    new (ptr) ::PartialMap::VehiclePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PartialMap::VehiclePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehiclePosition_PartialMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehiclePosition_PartialMap_2eproto}, {
      &scc_info_Coordinate_PartialMap_2eproto.base,}};

namespace PartialMap {

// ===================================================================

void Coordinate::InitAsDefaultInstance() {
}
class Coordinate::_Internal {
 public:
};

Coordinate::Coordinate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_x_, &from.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_z_) -
    reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  // @@protoc_insertion_point(copy_constructor:PartialMap.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_z_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:PartialMap.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
}

void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinate& Coordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinate_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_z_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          m_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Coordinate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.Coordinate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double m_x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.Coordinate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Coordinate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double m_x = 1;
  if (!(this->m_x() <= 0 && this->m_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->m_x(), output);
  }

  // double m_y = 2;
  if (!(this->m_y() <= 0 && this->m_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->m_y(), output);
  }

  // double m_z = 3;
  if (!(this->m_z() <= 0 && this->m_z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->m_z(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.Coordinate)
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.Coordinate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double m_x = 1;
  if (!(this->m_x() <= 0 && this->m_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_y = 2;
  if (!(this->m_y() <= 0 && this->m_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_z = 3;
  if (!(this->m_z() <= 0 && this->m_z() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Coordinate*>(
      &from));
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m_x() <= 0 && from.m_x() >= 0)) {
    set_m_x(from.m_x());
  }
  if (!(from.m_y() <= 0 && from.m_y() >= 0)) {
    set_m_y(from.m_y());
  }
  if (!(from.m_z() <= 0 && from.m_z() >= 0)) {
    set_m_z(from.m_z());
  }
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_x_, other->m_x_);
  swap(m_y_, other->m_y_);
  swap(m_z_, other->m_z_);
}

std::string Coordinate::GetTypeName() const {
  return "PartialMap.Coordinate";
}


// ===================================================================

void PartialLine::InitAsDefaultInstance() {
}
class PartialLine::_Internal {
 public:
};

PartialLine::PartialLine()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.PartialLine)
}
PartialLine::PartialLine(const PartialLine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      m_points_(from.m_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_lineid_, &from.m_lineid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_elementsequence_) -
    reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_elementsequence_));
  // @@protoc_insertion_point(copy_constructor:PartialMap.PartialLine)
}

void PartialLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartialLine_PartialMap_2eproto.base);
  ::memset(&m_lineid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_elementsequence_) -
      reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_elementsequence_));
}

PartialLine::~PartialLine() {
  // @@protoc_insertion_point(destructor:PartialMap.PartialLine)
  SharedDtor();
}

void PartialLine::SharedDtor() {
}

void PartialLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialLine& PartialLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartialLine_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void PartialLine::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.PartialLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_points_.Clear();
  ::memset(&m_lineid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_elementsequence_) -
      reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_elementsequence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartialLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_LineID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_Index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_ElementSequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_elementsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PartialMap.Coordinate m_Points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartialLine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.PartialLine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_LineID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_lineid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_Index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_ElementSequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_elementsequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PartialMap.Coordinate m_Points = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.PartialLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.PartialLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartialLine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.PartialLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_LineID = 1;
  if (this->m_lineid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_lineid(), output);
  }

  // uint32 m_Index = 2;
  if (this->m_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->m_index(), output);
  }

  // uint32 m_ElementSequence = 3;
  if (this->m_elementsequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->m_elementsequence(), output);
  }

  // repeated .PartialMap.Coordinate m_Points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->m_points(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.PartialLine)
}

size_t PartialLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.PartialLine)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PartialMap.Coordinate m_Points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->m_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_points(static_cast<int>(i)));
    }
  }

  // uint64 m_LineID = 1;
  if (this->m_lineid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_lineid());
  }

  // uint32 m_Index = 2;
  if (this->m_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_index());
  }

  // uint32 m_ElementSequence = 3;
  if (this->m_elementsequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_elementsequence());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialLine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PartialLine*>(
      &from));
}

void PartialLine::MergeFrom(const PartialLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.PartialLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_points_.MergeFrom(from.m_points_);
  if (from.m_lineid() != 0) {
    set_m_lineid(from.m_lineid());
  }
  if (from.m_index() != 0) {
    set_m_index(from.m_index());
  }
  if (from.m_elementsequence() != 0) {
    set_m_elementsequence(from.m_elementsequence());
  }
}

void PartialLine::CopyFrom(const PartialLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.PartialLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialLine::IsInitialized() const {
  return true;
}

void PartialLine::InternalSwap(PartialLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&m_points_)->InternalSwap(CastToBase(&other->m_points_));
  swap(m_lineid_, other->m_lineid_);
  swap(m_index_, other->m_index_);
  swap(m_elementsequence_, other->m_elementsequence_);
}

std::string PartialLine::GetTypeName() const {
  return "PartialMap.PartialLine";
}


// ===================================================================

void PartialLane::InitAsDefaultInstance() {
}
class PartialLane::_Internal {
 public:
};

PartialLane::PartialLane()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.PartialLane)
}
PartialLane::PartialLane(const PartialLane& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      m_nextlane_(from.m_nextlane_),
      m_prelane_(from.m_prelane_),
      m_centerline_(from.m_centerline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_laneid_, &from.m_laneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_offset_) -
    reinterpret_cast<char*>(&m_laneid_)) + sizeof(m_offset_));
  // @@protoc_insertion_point(copy_constructor:PartialMap.PartialLane)
}

void PartialLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartialLane_PartialMap_2eproto.base);
  ::memset(&m_laneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_offset_) -
      reinterpret_cast<char*>(&m_laneid_)) + sizeof(m_offset_));
}

PartialLane::~PartialLane() {
  // @@protoc_insertion_point(destructor:PartialMap.PartialLane)
  SharedDtor();
}

void PartialLane::SharedDtor() {
}

void PartialLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialLane& PartialLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartialLane_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void PartialLane::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.PartialLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_nextlane_.Clear();
  m_prelane_.Clear();
  m_centerline_.Clear();
  ::memset(&m_laneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_offset_) -
      reinterpret_cast<char*>(&m_laneid_)) + sizeof(m_offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartialLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_LaneID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_LeftLines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_leftlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_RightLines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_rightlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_LeftLane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          m_leftlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_RightLane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          m_rightlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double m_Length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          m_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_Offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          m_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint64 m_NextLane = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_m_nextlane(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          add_m_nextlane(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 m_PreLane = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_m_prelane(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          add_m_prelane(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PartialMap.Coordinate m_CenterLine = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_centerline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartialLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.PartialLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_LaneID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_LeftLines = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_leftlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_RightLines = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_rightlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_LeftLane = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_leftlane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_RightLane = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_rightlane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_Length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_Offset = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 m_NextLane = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m_nextlane())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 66u, input, this->mutable_m_nextlane())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 m_PreLane = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m_prelane())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 74u, input, this->mutable_m_prelane())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PartialMap.Coordinate m_CenterLine = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_centerline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.PartialLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.PartialLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartialLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.PartialLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_LaneID = 1;
  if (this->m_laneid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_laneid(), output);
  }

  // uint64 m_LeftLines = 2;
  if (this->m_leftlines() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_leftlines(), output);
  }

  // uint64 m_RightLines = 3;
  if (this->m_rightlines() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->m_rightlines(), output);
  }

  // uint64 m_LeftLane = 4;
  if (this->m_leftlane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->m_leftlane(), output);
  }

  // uint64 m_RightLane = 5;
  if (this->m_rightlane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->m_rightlane(), output);
  }

  // double m_Length = 6;
  if (!(this->m_length() <= 0 && this->m_length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->m_length(), output);
  }

  // double m_Offset = 7;
  if (!(this->m_offset() <= 0 && this->m_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->m_offset(), output);
  }

  // repeated uint64 m_NextLane = 8;
  if (this->m_nextlane_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_nextlane_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->m_nextlane_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->m_nextlane(i), output);
  }

  // repeated uint64 m_PreLane = 9;
  if (this->m_prelane_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_prelane_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->m_prelane_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->m_prelane(i), output);
  }

  // repeated .PartialMap.Coordinate m_CenterLine = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_centerline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->m_centerline(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.PartialLane)
}

size_t PartialLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.PartialLane)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 m_NextLane = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->m_nextlane_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_nextlane_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 m_PreLane = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->m_prelane_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_prelane_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PartialMap.Coordinate m_CenterLine = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->m_centerline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_centerline(static_cast<int>(i)));
    }
  }

  // uint64 m_LaneID = 1;
  if (this->m_laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_laneid());
  }

  // uint64 m_LeftLines = 2;
  if (this->m_leftlines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_leftlines());
  }

  // uint64 m_RightLines = 3;
  if (this->m_rightlines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_rightlines());
  }

  // uint64 m_LeftLane = 4;
  if (this->m_leftlane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_leftlane());
  }

  // uint64 m_RightLane = 5;
  if (this->m_rightlane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_rightlane());
  }

  // double m_Length = 6;
  if (!(this->m_length() <= 0 && this->m_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_Offset = 7;
  if (!(this->m_offset() <= 0 && this->m_offset() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialLane::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PartialLane*>(
      &from));
}

void PartialLane::MergeFrom(const PartialLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.PartialLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_nextlane_.MergeFrom(from.m_nextlane_);
  m_prelane_.MergeFrom(from.m_prelane_);
  m_centerline_.MergeFrom(from.m_centerline_);
  if (from.m_laneid() != 0) {
    set_m_laneid(from.m_laneid());
  }
  if (from.m_leftlines() != 0) {
    set_m_leftlines(from.m_leftlines());
  }
  if (from.m_rightlines() != 0) {
    set_m_rightlines(from.m_rightlines());
  }
  if (from.m_leftlane() != 0) {
    set_m_leftlane(from.m_leftlane());
  }
  if (from.m_rightlane() != 0) {
    set_m_rightlane(from.m_rightlane());
  }
  if (!(from.m_length() <= 0 && from.m_length() >= 0)) {
    set_m_length(from.m_length());
  }
  if (!(from.m_offset() <= 0 && from.m_offset() >= 0)) {
    set_m_offset(from.m_offset());
  }
}

void PartialLane::CopyFrom(const PartialLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.PartialLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialLane::IsInitialized() const {
  return true;
}

void PartialLane::InternalSwap(PartialLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  m_nextlane_.InternalSwap(&other->m_nextlane_);
  m_prelane_.InternalSwap(&other->m_prelane_);
  CastToBase(&m_centerline_)->InternalSwap(CastToBase(&other->m_centerline_));
  swap(m_laneid_, other->m_laneid_);
  swap(m_leftlines_, other->m_leftlines_);
  swap(m_rightlines_, other->m_rightlines_);
  swap(m_leftlane_, other->m_leftlane_);
  swap(m_rightlane_, other->m_rightlane_);
  swap(m_length_, other->m_length_);
  swap(m_offset_, other->m_offset_);
}

std::string PartialLane::GetTypeName() const {
  return "PartialMap.PartialLane";
}


// ===================================================================

void GroupLaneItem::InitAsDefaultInstance() {
}
class GroupLaneItem::_Internal {
 public:
};

GroupLaneItem::GroupLaneItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.GroupLaneItem)
}
GroupLaneItem::GroupLaneItem(const GroupLaneItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      m_curlanes_(from.m_curlanes_),
      m_leftlanes_(from.m_leftlanes_),
      m_rightlanes_(from.m_rightlanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PartialMap.GroupLaneItem)
}

void GroupLaneItem::SharedCtor() {
}

GroupLaneItem::~GroupLaneItem() {
  // @@protoc_insertion_point(destructor:PartialMap.GroupLaneItem)
  SharedDtor();
}

void GroupLaneItem::SharedDtor() {
}

void GroupLaneItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupLaneItem& GroupLaneItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupLaneItem_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void GroupLaneItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.GroupLaneItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_curlanes_.Clear();
  m_leftlanes_.Clear();
  m_rightlanes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GroupLaneItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 m_CurLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_m_curlanes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_m_curlanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 m_LeftLanes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_m_leftlanes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_m_leftlanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 m_RightLanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_m_rightlanes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_m_rightlanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GroupLaneItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.GroupLaneItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 m_CurLanes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m_curlanes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_m_curlanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 m_LeftLanes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m_leftlanes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_m_leftlanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 m_RightLanes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m_rightlanes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_m_rightlanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.GroupLaneItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.GroupLaneItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GroupLaneItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.GroupLaneItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 m_CurLanes = 1;
  if (this->m_curlanes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_curlanes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->m_curlanes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->m_curlanes(i), output);
  }

  // repeated uint64 m_LeftLanes = 2;
  if (this->m_leftlanes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_leftlanes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->m_leftlanes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->m_leftlanes(i), output);
  }

  // repeated uint64 m_RightLanes = 3;
  if (this->m_rightlanes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_m_rightlanes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->m_rightlanes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->m_rightlanes(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.GroupLaneItem)
}

size_t GroupLaneItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.GroupLaneItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 m_CurLanes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->m_curlanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_curlanes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 m_LeftLanes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->m_leftlanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_leftlanes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 m_RightLanes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->m_rightlanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_rightlanes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupLaneItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GroupLaneItem*>(
      &from));
}

void GroupLaneItem::MergeFrom(const GroupLaneItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.GroupLaneItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_curlanes_.MergeFrom(from.m_curlanes_);
  m_leftlanes_.MergeFrom(from.m_leftlanes_);
  m_rightlanes_.MergeFrom(from.m_rightlanes_);
}

void GroupLaneItem::CopyFrom(const GroupLaneItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.GroupLaneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupLaneItem::IsInitialized() const {
  return true;
}

void GroupLaneItem::InternalSwap(GroupLaneItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  m_curlanes_.InternalSwap(&other->m_curlanes_);
  m_leftlanes_.InternalSwap(&other->m_leftlanes_);
  m_rightlanes_.InternalSwap(&other->m_rightlanes_);
}

std::string GroupLaneItem::GetTypeName() const {
  return "PartialMap.GroupLaneItem";
}


// ===================================================================

void VehiclePosition::InitAsDefaultInstance() {
  ::PartialMap::_VehiclePosition_default_instance_._instance.get_mutable()->m_vehicleposition_ = const_cast< ::PartialMap::Coordinate*>(
      ::PartialMap::Coordinate::internal_default_instance());
  ::PartialMap::_VehiclePosition_default_instance_._instance.get_mutable()->m_relativevehicleposition_ = const_cast< ::PartialMap::Coordinate*>(
      ::PartialMap::Coordinate::internal_default_instance());
}
class VehiclePosition::_Internal {
 public:
  static const ::PartialMap::Coordinate& m_vehicleposition(const VehiclePosition* msg);
  static const ::PartialMap::Coordinate& m_relativevehicleposition(const VehiclePosition* msg);
};

const ::PartialMap::Coordinate&
VehiclePosition::_Internal::m_vehicleposition(const VehiclePosition* msg) {
  return *msg->m_vehicleposition_;
}
const ::PartialMap::Coordinate&
VehiclePosition::_Internal::m_relativevehicleposition(const VehiclePosition* msg) {
  return *msg->m_relativevehicleposition_;
}
VehiclePosition::VehiclePosition()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.VehiclePosition)
}
VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_vehicleposition()) {
    m_vehicleposition_ = new ::PartialMap::Coordinate(*from.m_vehicleposition_);
  } else {
    m_vehicleposition_ = nullptr;
  }
  if (from.has_m_relativevehicleposition()) {
    m_relativevehicleposition_ = new ::PartialMap::Coordinate(*from.m_relativevehicleposition_);
  } else {
    m_relativevehicleposition_ = nullptr;
  }
  ::memcpy(&m_timestamp_, &from.m_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_lasttimestamp_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_lasttimestamp_));
  // @@protoc_insertion_point(copy_constructor:PartialMap.VehiclePosition)
}

void VehiclePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehiclePosition_PartialMap_2eproto.base);
  ::memset(&m_vehicleposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_lasttimestamp_) -
      reinterpret_cast<char*>(&m_vehicleposition_)) + sizeof(m_lasttimestamp_));
}

VehiclePosition::~VehiclePosition() {
  // @@protoc_insertion_point(destructor:PartialMap.VehiclePosition)
  SharedDtor();
}

void VehiclePosition::SharedDtor() {
  if (this != internal_default_instance()) delete m_vehicleposition_;
  if (this != internal_default_instance()) delete m_relativevehicleposition_;
}

void VehiclePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehiclePosition& VehiclePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehiclePosition_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void VehiclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.VehiclePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && m_vehicleposition_ != nullptr) {
    delete m_vehicleposition_;
  }
  m_vehicleposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_relativevehicleposition_ != nullptr) {
    delete m_relativevehicleposition_;
  }
  m_relativevehicleposition_ = nullptr;
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_lasttimestamp_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_lasttimestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehiclePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_DatumStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_datumstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_LastTimeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_lasttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PartialMap.Coordinate m_VehiclePosition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_m_vehicleposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_m_relativevehicleposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehiclePosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.VehiclePosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_TimeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_DatumStamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_datumstamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_LastTimeStamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_lasttimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PartialMap.Coordinate m_VehiclePosition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_vehicleposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_relativevehicleposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.VehiclePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.VehiclePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehiclePosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.VehiclePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_TimeStamp = 1;
  if (this->m_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_timestamp(), output);
  }

  // uint64 m_DatumStamp = 2;
  if (this->m_datumstamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_datumstamp(), output);
  }

  // uint64 m_LastTimeStamp = 3;
  if (this->m_lasttimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->m_lasttimestamp(), output);
  }

  // .PartialMap.Coordinate m_VehiclePosition = 4;
  if (this->has_m_vehicleposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::m_vehicleposition(this), output);
  }

  // .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
  if (this->has_m_relativevehicleposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::m_relativevehicleposition(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.VehiclePosition)
}

size_t VehiclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.VehiclePosition)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PartialMap.Coordinate m_VehiclePosition = 4;
  if (this->has_m_vehicleposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_vehicleposition_);
  }

  // .PartialMap.Coordinate m_RelativeVehiclePosition = 5;
  if (this->has_m_relativevehicleposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_relativevehicleposition_);
  }

  // uint64 m_TimeStamp = 1;
  if (this->m_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_timestamp());
  }

  // uint64 m_DatumStamp = 2;
  if (this->m_datumstamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_datumstamp());
  }

  // uint64 m_LastTimeStamp = 3;
  if (this->m_lasttimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_lasttimestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehiclePosition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VehiclePosition*>(
      &from));
}

void VehiclePosition::MergeFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.VehiclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_vehicleposition()) {
    mutable_m_vehicleposition()->::PartialMap::Coordinate::MergeFrom(from.m_vehicleposition());
  }
  if (from.has_m_relativevehicleposition()) {
    mutable_m_relativevehicleposition()->::PartialMap::Coordinate::MergeFrom(from.m_relativevehicleposition());
  }
  if (from.m_timestamp() != 0) {
    set_m_timestamp(from.m_timestamp());
  }
  if (from.m_datumstamp() != 0) {
    set_m_datumstamp(from.m_datumstamp());
  }
  if (from.m_lasttimestamp() != 0) {
    set_m_lasttimestamp(from.m_lasttimestamp());
  }
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {
  return true;
}

void VehiclePosition::InternalSwap(VehiclePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_vehicleposition_, other->m_vehicleposition_);
  swap(m_relativevehicleposition_, other->m_relativevehicleposition_);
  swap(m_timestamp_, other->m_timestamp_);
  swap(m_datumstamp_, other->m_datumstamp_);
  swap(m_lasttimestamp_, other->m_lasttimestamp_);
}

std::string VehiclePosition::GetTypeName() const {
  return "PartialMap.VehiclePosition";
}


// ===================================================================

void PartialMap::InitAsDefaultInstance() {
  ::PartialMap::_PartialMap_default_instance_._instance.get_mutable()->m_position_ = const_cast< ::PartialMap::VehiclePosition*>(
      ::PartialMap::VehiclePosition::internal_default_instance());
}
class PartialMap::_Internal {
 public:
  static const ::PartialMap::VehiclePosition& m_position(const PartialMap* msg);
};

const ::PartialMap::VehiclePosition&
PartialMap::_Internal::m_position(const PartialMap* msg) {
  return *msg->m_position_;
}
PartialMap::PartialMap()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PartialMap.PartialMap)
}
PartialMap::PartialMap(const PartialMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      m_lanes_(from.m_lanes_),
      m_lines_(from.m_lines_),
      m_group_(from.m_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_position()) {
    m_position_ = new ::PartialMap::VehiclePosition(*from.m_position_);
  } else {
    m_position_ = nullptr;
  }
  ::memcpy(&m_datumstamp_, &from.m_datumstamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_curlaneid_) -
    reinterpret_cast<char*>(&m_datumstamp_)) + sizeof(m_curlaneid_));
  // @@protoc_insertion_point(copy_constructor:PartialMap.PartialMap)
}

void PartialMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartialMap_PartialMap_2eproto.base);
  ::memset(&m_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_curlaneid_) -
      reinterpret_cast<char*>(&m_position_)) + sizeof(m_curlaneid_));
}

PartialMap::~PartialMap() {
  // @@protoc_insertion_point(destructor:PartialMap.PartialMap)
  SharedDtor();
}

void PartialMap::SharedDtor() {
  if (this != internal_default_instance()) delete m_position_;
}

void PartialMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialMap& PartialMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartialMap_PartialMap_2eproto.base);
  return *internal_default_instance();
}


void PartialMap::Clear() {
// @@protoc_insertion_point(message_clear_start:PartialMap.PartialMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_lanes_.Clear();
  m_lines_.Clear();
  m_group_.Clear();
  if (GetArenaNoVirtual() == nullptr && m_position_ != nullptr) {
    delete m_position_;
  }
  m_position_ = nullptr;
  ::memset(&m_datumstamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_curlaneid_) -
      reinterpret_cast<char*>(&m_datumstamp_)) + sizeof(m_curlaneid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartialMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PartialMap.VehiclePosition m_Position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_m_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_DatumStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_datumstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_CurLaneId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_curlaneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PartialMap.PartialLane m_Lanes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .PartialMap.PartialLine m_Lines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .PartialMap.GroupLaneItem m_Group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartialMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PartialMap.PartialMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PartialMap.VehiclePosition m_Position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_DatumStamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_datumstamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_CurLaneId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_curlaneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PartialMap.PartialLane m_Lanes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PartialMap.PartialLine m_Lines = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PartialMap.GroupLaneItem m_Group = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PartialMap.PartialMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PartialMap.PartialMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartialMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PartialMap.PartialMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PartialMap.VehiclePosition m_Position = 1;
  if (this->has_m_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::m_position(this), output);
  }

  // uint64 m_DatumStamp = 2;
  if (this->m_datumstamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_datumstamp(), output);
  }

  // uint64 m_CurLaneId = 3;
  if (this->m_curlaneid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->m_curlaneid(), output);
  }

  // repeated .PartialMap.PartialLane m_Lanes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_lanes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->m_lanes(static_cast<int>(i)),
      output);
  }

  // repeated .PartialMap.PartialLine m_Lines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_lines_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->m_lines(static_cast<int>(i)),
      output);
  }

  // repeated .PartialMap.GroupLaneItem m_Group = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_group_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->m_group(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PartialMap.PartialMap)
}

size_t PartialMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PartialMap.PartialMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PartialMap.PartialLane m_Lanes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->m_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_lanes(static_cast<int>(i)));
    }
  }

  // repeated .PartialMap.PartialLine m_Lines = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->m_lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_lines(static_cast<int>(i)));
    }
  }

  // repeated .PartialMap.GroupLaneItem m_Group = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->m_group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_group(static_cast<int>(i)));
    }
  }

  // .PartialMap.VehiclePosition m_Position = 1;
  if (this->has_m_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_position_);
  }

  // uint64 m_DatumStamp = 2;
  if (this->m_datumstamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_datumstamp());
  }

  // uint64 m_CurLaneId = 3;
  if (this->m_curlaneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_curlaneid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PartialMap*>(
      &from));
}

void PartialMap::MergeFrom(const PartialMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PartialMap.PartialMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_lanes_.MergeFrom(from.m_lanes_);
  m_lines_.MergeFrom(from.m_lines_);
  m_group_.MergeFrom(from.m_group_);
  if (from.has_m_position()) {
    mutable_m_position()->::PartialMap::VehiclePosition::MergeFrom(from.m_position());
  }
  if (from.m_datumstamp() != 0) {
    set_m_datumstamp(from.m_datumstamp());
  }
  if (from.m_curlaneid() != 0) {
    set_m_curlaneid(from.m_curlaneid());
  }
}

void PartialMap::CopyFrom(const PartialMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PartialMap.PartialMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialMap::IsInitialized() const {
  return true;
}

void PartialMap::InternalSwap(PartialMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&m_lanes_)->InternalSwap(CastToBase(&other->m_lanes_));
  CastToBase(&m_lines_)->InternalSwap(CastToBase(&other->m_lines_));
  CastToBase(&m_group_)->InternalSwap(CastToBase(&other->m_group_));
  swap(m_position_, other->m_position_);
  swap(m_datumstamp_, other->m_datumstamp_);
  swap(m_curlaneid_, other->m_curlaneid_);
}

std::string PartialMap::GetTypeName() const {
  return "PartialMap.PartialMap";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PartialMap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PartialMap::Coordinate* Arena::CreateMaybeMessage< ::PartialMap::Coordinate >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::PartialMap::PartialLine* Arena::CreateMaybeMessage< ::PartialMap::PartialLine >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::PartialLine >(arena);
}
template<> PROTOBUF_NOINLINE ::PartialMap::PartialLane* Arena::CreateMaybeMessage< ::PartialMap::PartialLane >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::PartialLane >(arena);
}
template<> PROTOBUF_NOINLINE ::PartialMap::GroupLaneItem* Arena::CreateMaybeMessage< ::PartialMap::GroupLaneItem >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::GroupLaneItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PartialMap::VehiclePosition* Arena::CreateMaybeMessage< ::PartialMap::VehiclePosition >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::VehiclePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::PartialMap::PartialMap* Arena::CreateMaybeMessage< ::PartialMap::PartialMap >(Arena* arena) {
  return Arena::CreateInternal< ::PartialMap::PartialMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
