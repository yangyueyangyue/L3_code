// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_perception.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fperception_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fperception_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sys_5fDataUploadProto_5fperception_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace phoenix {
namespace ad_data_upload {
class Msg_head_message;
class Msg_head_messageDefaultTypeInternal;
extern Msg_head_messageDefaultTypeInternal _Msg_head_message_default_instance_;
class OBBox_message;
class OBBox_messageDefaultTypeInternal;
extern OBBox_messageDefaultTypeInternal _OBBox_message_default_instance_;
class ObstacleList_message;
class ObstacleList_messageDefaultTypeInternal;
extern ObstacleList_messageDefaultTypeInternal _ObstacleList_message_default_instance_;
class Obstacle_message;
class Obstacle_messageDefaultTypeInternal;
extern Obstacle_messageDefaultTypeInternal _Obstacle_message_default_instance_;
class Perception_Display_Data_message;
class Perception_Display_Data_messageDefaultTypeInternal;
extern Perception_Display_Data_messageDefaultTypeInternal _Perception_Display_Data_message_default_instance_;
class PredPath_message;
class PredPath_messageDefaultTypeInternal;
extern PredPath_messageDefaultTypeInternal _PredPath_message_default_instance_;
class ProjOnMajorRefLine_message;
class ProjOnMajorRefLine_messageDefaultTypeInternal;
extern ProjOnMajorRefLine_messageDefaultTypeInternal _ProjOnMajorRefLine_message_default_instance_;
class TrackedPath_message;
class TrackedPath_messageDefaultTypeInternal;
extern TrackedPath_messageDefaultTypeInternal _TrackedPath_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::ad_data_upload::Msg_head_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Msg_head_message>(Arena*);
template<> ::phoenix::ad_data_upload::OBBox_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::OBBox_message>(Arena*);
template<> ::phoenix::ad_data_upload::ObstacleList_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ObstacleList_message>(Arena*);
template<> ::phoenix::ad_data_upload::Obstacle_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Obstacle_message>(Arena*);
template<> ::phoenix::ad_data_upload::Perception_Display_Data_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Perception_Display_Data_message>(Arena*);
template<> ::phoenix::ad_data_upload::PredPath_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::PredPath_message>(Arena*);
template<> ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ProjOnMajorRefLine_message>(Arena*);
template<> ::phoenix::ad_data_upload::TrackedPath_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TrackedPath_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace ad_data_upload {

// ===================================================================

class OBBox_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.OBBox_message) */ {
 public:
  OBBox_message();
  virtual ~OBBox_message();

  OBBox_message(const OBBox_message& from);
  OBBox_message(OBBox_message&& from) noexcept
    : OBBox_message() {
    *this = ::std::move(from);
  }

  inline OBBox_message& operator=(const OBBox_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBBox_message& operator=(OBBox_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OBBox_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBBox_message* internal_default_instance() {
    return reinterpret_cast<const OBBox_message*>(
               &_OBBox_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OBBox_message& a, OBBox_message& b) {
    a.Swap(&b);
  }
  inline void Swap(OBBox_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBBox_message* New() const final {
    return CreateMaybeMessage<OBBox_message>(nullptr);
  }

  OBBox_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBBox_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBBox_message& from);
  void MergeFrom(const OBBox_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBBox_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.OBBox_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHalfWidthFieldNumber = 4,
    kHalfLengthFieldNumber = 5,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float half_width = 4;
  void clear_half_width();
  float half_width() const;
  void set_half_width(float value);

  // float half_length = 5;
  void clear_half_length();
  float half_length() const;
  void set_half_length(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.OBBox_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  float half_width_;
  float half_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class ProjOnMajorRefLine_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ProjOnMajorRefLine_message) */ {
 public:
  ProjOnMajorRefLine_message();
  virtual ~ProjOnMajorRefLine_message();

  ProjOnMajorRefLine_message(const ProjOnMajorRefLine_message& from);
  ProjOnMajorRefLine_message(ProjOnMajorRefLine_message&& from) noexcept
    : ProjOnMajorRefLine_message() {
    *this = ::std::move(from);
  }

  inline ProjOnMajorRefLine_message& operator=(const ProjOnMajorRefLine_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjOnMajorRefLine_message& operator=(ProjOnMajorRefLine_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ProjOnMajorRefLine_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjOnMajorRefLine_message* internal_default_instance() {
    return reinterpret_cast<const ProjOnMajorRefLine_message*>(
               &_ProjOnMajorRefLine_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjOnMajorRefLine_message& a, ProjOnMajorRefLine_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjOnMajorRefLine_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjOnMajorRefLine_message* New() const final {
    return CreateMaybeMessage<ProjOnMajorRefLine_message>(nullptr);
  }

  ProjOnMajorRefLine_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjOnMajorRefLine_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProjOnMajorRefLine_message& from);
  void MergeFrom(const ProjOnMajorRefLine_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProjOnMajorRefLine_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ProjOnMajorRefLine_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kHeadingFieldNumber = 4,
    kCurvatureFieldNumber = 5,
    kSFieldNumber = 6,
    kLFieldNumber = 7,
  };
  // sint32 valid = 1;
  void clear_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 valid() const;
  void set_valid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 4;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float curvature = 5;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);

  // float s = 6;
  void clear_s();
  float s() const;
  void set_s(float value);

  // float l = 7;
  void clear_l();
  float l() const;
  void set_l(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 valid_;
  float x_;
  float y_;
  float heading_;
  float curvature_;
  float s_;
  float l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class PredPath_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.PredPath_message) */ {
 public:
  PredPath_message();
  virtual ~PredPath_message();

  PredPath_message(const PredPath_message& from);
  PredPath_message(PredPath_message&& from) noexcept
    : PredPath_message() {
    *this = ::std::move(from);
  }

  inline PredPath_message& operator=(const PredPath_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredPath_message& operator=(PredPath_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PredPath_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredPath_message* internal_default_instance() {
    return reinterpret_cast<const PredPath_message*>(
               &_PredPath_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredPath_message& a, PredPath_message& b) {
    a.Swap(&b);
  }
  inline void Swap(PredPath_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredPath_message* New() const final {
    return CreateMaybeMessage<PredPath_message>(nullptr);
  }

  PredPath_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredPath_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PredPath_message& from);
  void MergeFrom(const PredPath_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PredPath_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.PredPath_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kSFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float s = 4;
  void clear_s();
  float s() const;
  void set_s(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.PredPath_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  float s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class TrackedPath_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TrackedPath_message) */ {
 public:
  TrackedPath_message();
  virtual ~TrackedPath_message();

  TrackedPath_message(const TrackedPath_message& from);
  TrackedPath_message(TrackedPath_message&& from) noexcept
    : TrackedPath_message() {
    *this = ::std::move(from);
  }

  inline TrackedPath_message& operator=(const TrackedPath_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedPath_message& operator=(TrackedPath_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TrackedPath_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedPath_message* internal_default_instance() {
    return reinterpret_cast<const TrackedPath_message*>(
               &_TrackedPath_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackedPath_message& a, TrackedPath_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedPath_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedPath_message* New() const final {
    return CreateMaybeMessage<TrackedPath_message>(nullptr);
  }

  TrackedPath_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedPath_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrackedPath_message& from);
  void MergeFrom(const TrackedPath_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackedPath_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TrackedPath_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TrackedPath_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class Obstacle_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Obstacle_message) */ {
 public:
  Obstacle_message();
  virtual ~Obstacle_message();

  Obstacle_message(const Obstacle_message& from);
  Obstacle_message(Obstacle_message&& from) noexcept
    : Obstacle_message() {
    *this = ::std::move(from);
  }

  inline Obstacle_message& operator=(const Obstacle_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_message& operator=(Obstacle_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Obstacle_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_message* internal_default_instance() {
    return reinterpret_cast<const Obstacle_message*>(
               &_Obstacle_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Obstacle_message& a, Obstacle_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_message* New() const final {
    return CreateMaybeMessage<Obstacle_message>(nullptr);
  }

  Obstacle_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Obstacle_message& from);
  void MergeFrom(const Obstacle_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Obstacle_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Obstacle_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredPathPointNumFieldNumber = 19,
    kPredPathFieldNumber = 20,
    kTrackedPathFieldNumber = 22,
    kObbFieldNumber = 4,
    kProjOnMajorRefLineFieldNumber = 17,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kHeightFieldNumber = 5,
    kHeightToGroundFieldNumber = 6,
    kTypeFieldNumber = 7,
    kDynamicFieldNumber = 8,
    kConfidenceFieldNumber = 9,
    kPerceptionTypeFieldNumber = 10,
    kVXFieldNumber = 11,
    kVYFieldNumber = 12,
    kVFieldNumber = 13,
    kAXFieldNumber = 14,
    kAYFieldNumber = 15,
    kAFieldNumber = 16,
    kPredPathNumFieldNumber = 18,
    kTrackedPathPointNumFieldNumber = 21,
  };
  // repeated sint32 pred_path_point_num = 19;
  int pred_path_point_num_size() const;
  void clear_pred_path_point_num();
  ::PROTOBUF_NAMESPACE_ID::int32 pred_path_point_num(int index) const;
  void set_pred_path_point_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pred_path_point_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pred_path_point_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pred_path_point_num();

  // repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
  int pred_path_size() const;
  void clear_pred_path();
  ::phoenix::ad_data_upload::PredPath_message* mutable_pred_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PredPath_message >*
      mutable_pred_path();
  const ::phoenix::ad_data_upload::PredPath_message& pred_path(int index) const;
  ::phoenix::ad_data_upload::PredPath_message* add_pred_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PredPath_message >&
      pred_path() const;

  // repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
  int tracked_path_size() const;
  void clear_tracked_path();
  ::phoenix::ad_data_upload::TrackedPath_message* mutable_tracked_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrackedPath_message >*
      mutable_tracked_path();
  const ::phoenix::ad_data_upload::TrackedPath_message& tracked_path(int index) const;
  ::phoenix::ad_data_upload::TrackedPath_message* add_tracked_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrackedPath_message >&
      tracked_path() const;

  // .phoenix.ad_data_upload.OBBox_message obb = 4;
  bool has_obb() const;
  void clear_obb();
  const ::phoenix::ad_data_upload::OBBox_message& obb() const;
  ::phoenix::ad_data_upload::OBBox_message* release_obb();
  ::phoenix::ad_data_upload::OBBox_message* mutable_obb();
  void set_allocated_obb(::phoenix::ad_data_upload::OBBox_message* obb);

  // .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
  bool has_proj_on_major_ref_line() const;
  void clear_proj_on_major_ref_line();
  const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message& proj_on_major_ref_line() const;
  ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* release_proj_on_major_ref_line();
  ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* mutable_proj_on_major_ref_line();
  void set_allocated_proj_on_major_ref_line(::phoenix::ad_data_upload::ProjOnMajorRefLine_message* proj_on_major_ref_line);

  // sint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float height = 5;
  void clear_height();
  float height() const;
  void set_height(float value);

  // float height_to_ground = 6;
  void clear_height_to_ground();
  float height_to_ground() const;
  void set_height_to_ground(float value);

  // sint32 type = 7;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 dynamic = 8;
  void clear_dynamic();
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic() const;
  void set_dynamic(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 confidence = 9;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 perception_type = 10;
  void clear_perception_type();
  ::PROTOBUF_NAMESPACE_ID::int32 perception_type() const;
  void set_perception_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float v_x = 11;
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);

  // float v_y = 12;
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);

  // float v = 13;
  void clear_v();
  float v() const;
  void set_v(float value);

  // float a_x = 14;
  void clear_a_x();
  float a_x() const;
  void set_a_x(float value);

  // float a_y = 15;
  void clear_a_y();
  float a_y() const;
  void set_a_y(float value);

  // float a = 16;
  void clear_a();
  float a() const;
  void set_a(float value);

  // sint32 pred_path_num = 18;
  void clear_pred_path_num();
  ::PROTOBUF_NAMESPACE_ID::int32 pred_path_num() const;
  void set_pred_path_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 tracked_path_point_num = 21;
  void clear_tracked_path_point_num();
  ::PROTOBUF_NAMESPACE_ID::int32 tracked_path_point_num() const;
  void set_tracked_path_point_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Obstacle_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pred_path_point_num_;
  mutable std::atomic<int> _pred_path_point_num_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PredPath_message > pred_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrackedPath_message > tracked_path_;
  ::phoenix::ad_data_upload::OBBox_message* obb_;
  ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* proj_on_major_ref_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float height_;
  float height_to_ground_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 perception_type_;
  float v_x_;
  float v_y_;
  float v_;
  float a_x_;
  float a_y_;
  float a_;
  ::PROTOBUF_NAMESPACE_ID::int32 pred_path_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracked_path_point_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class Msg_head_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Msg_head_message) */ {
 public:
  Msg_head_message();
  virtual ~Msg_head_message();

  Msg_head_message(const Msg_head_message& from);
  Msg_head_message(Msg_head_message&& from) noexcept
    : Msg_head_message() {
    *this = ::std::move(from);
  }

  inline Msg_head_message& operator=(const Msg_head_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_head_message& operator=(Msg_head_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Msg_head_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_head_message* internal_default_instance() {
    return reinterpret_cast<const Msg_head_message*>(
               &_Msg_head_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_head_message& a, Msg_head_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_head_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg_head_message* New() const final {
    return CreateMaybeMessage<Msg_head_message>(nullptr);
  }

  Msg_head_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_head_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Msg_head_message& from);
  void MergeFrom(const Msg_head_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Msg_head_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Msg_head_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTimeOffsetFieldNumber = 4,
    kSrcModuleIdFieldNumber = 5,
    kDstModuleIdFieldNumber = 6,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);

  // uint32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // sint32 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 time_offset = 4;
  void clear_time_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 time_offset() const;
  void set_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 src_module_id = 5;
  void clear_src_module_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_module_id() const;
  void set_src_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 dst_module_id = 6;
  void clear_dst_module_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_module_id() const;
  void set_dst_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Msg_head_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_module_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_module_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class ObstacleList_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ObstacleList_message) */ {
 public:
  ObstacleList_message();
  virtual ~ObstacleList_message();

  ObstacleList_message(const ObstacleList_message& from);
  ObstacleList_message(ObstacleList_message&& from) noexcept
    : ObstacleList_message() {
    *this = ::std::move(from);
  }

  inline ObstacleList_message& operator=(const ObstacleList_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleList_message& operator=(ObstacleList_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObstacleList_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleList_message* internal_default_instance() {
    return reinterpret_cast<const ObstacleList_message*>(
               &_ObstacleList_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObstacleList_message& a, ObstacleList_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleList_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleList_message* New() const final {
    return CreateMaybeMessage<ObstacleList_message>(nullptr);
  }

  ObstacleList_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleList_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObstacleList_message& from);
  void MergeFrom(const ObstacleList_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObstacleList_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ObstacleList_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 3,
    kMsgHeadFieldNumber = 1,
    kObstacleNumFieldNumber = 2,
  };
  // repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
  int obstacles_size() const;
  void clear_obstacles();
  ::phoenix::ad_data_upload::Obstacle_message* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Obstacle_message >*
      mutable_obstacles();
  const ::phoenix::ad_data_upload::Obstacle_message& obstacles(int index) const;
  ::phoenix::ad_data_upload::Obstacle_message* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Obstacle_message >&
      obstacles() const;

  // .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::Msg_head_message& msg_head() const;
  ::phoenix::ad_data_upload::Msg_head_message* release_msg_head();
  ::phoenix::ad_data_upload::Msg_head_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::Msg_head_message* msg_head);

  // sint32 obstacle_num = 2;
  void clear_obstacle_num();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_num() const;
  void set_obstacle_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ObstacleList_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Obstacle_message > obstacles_;
  ::phoenix::ad_data_upload::Msg_head_message* msg_head_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// -------------------------------------------------------------------

class Perception_Display_Data_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Perception_Display_Data_message) */ {
 public:
  Perception_Display_Data_message();
  virtual ~Perception_Display_Data_message();

  Perception_Display_Data_message(const Perception_Display_Data_message& from);
  Perception_Display_Data_message(Perception_Display_Data_message&& from) noexcept
    : Perception_Display_Data_message() {
    *this = ::std::move(from);
  }

  inline Perception_Display_Data_message& operator=(const Perception_Display_Data_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Perception_Display_Data_message& operator=(Perception_Display_Data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Perception_Display_Data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Perception_Display_Data_message* internal_default_instance() {
    return reinterpret_cast<const Perception_Display_Data_message*>(
               &_Perception_Display_Data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Perception_Display_Data_message& a, Perception_Display_Data_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Perception_Display_Data_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Perception_Display_Data_message* New() const final {
    return CreateMaybeMessage<Perception_Display_Data_message>(nullptr);
  }

  Perception_Display_Data_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Perception_Display_Data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Perception_Display_Data_message& from);
  void MergeFrom(const Perception_Display_Data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Perception_Display_Data_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Perception_Display_Data_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleListFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
  bool has_obstacle_list() const;
  void clear_obstacle_list();
  const ::phoenix::ad_data_upload::ObstacleList_message& obstacle_list() const;
  ::phoenix::ad_data_upload::ObstacleList_message* release_obstacle_list();
  ::phoenix::ad_data_upload::ObstacleList_message* mutable_obstacle_list();
  void set_allocated_obstacle_list(::phoenix::ad_data_upload::ObstacleList_message* obstacle_list);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Perception_Display_Data_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::ObstacleList_message* obstacle_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fperception_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OBBox_message

// float x = 1;
inline void OBBox_message::clear_x() {
  x_ = 0;
}
inline float OBBox_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox_message.x)
  return x_;
}
inline void OBBox_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OBBox_message.x)
}

// float y = 2;
inline void OBBox_message::clear_y() {
  y_ = 0;
}
inline float OBBox_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox_message.y)
  return y_;
}
inline void OBBox_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OBBox_message.y)
}

// float heading = 3;
inline void OBBox_message::clear_heading() {
  heading_ = 0;
}
inline float OBBox_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox_message.heading)
  return heading_;
}
inline void OBBox_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OBBox_message.heading)
}

// float half_width = 4;
inline void OBBox_message::clear_half_width() {
  half_width_ = 0;
}
inline float OBBox_message::half_width() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox_message.half_width)
  return half_width_;
}
inline void OBBox_message::set_half_width(float value) {
  
  half_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OBBox_message.half_width)
}

// float half_length = 5;
inline void OBBox_message::clear_half_length() {
  half_length_ = 0;
}
inline float OBBox_message::half_length() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox_message.half_length)
  return half_length_;
}
inline void OBBox_message::set_half_length(float value) {
  
  half_length_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.OBBox_message.half_length)
}

// -------------------------------------------------------------------

// ProjOnMajorRefLine_message

// sint32 valid = 1;
inline void ProjOnMajorRefLine_message::clear_valid() {
  valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjOnMajorRefLine_message::valid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.valid)
  return valid_;
}
inline void ProjOnMajorRefLine_message::set_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.valid)
}

// float x = 2;
inline void ProjOnMajorRefLine_message::clear_x() {
  x_ = 0;
}
inline float ProjOnMajorRefLine_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.x)
  return x_;
}
inline void ProjOnMajorRefLine_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.x)
}

// float y = 3;
inline void ProjOnMajorRefLine_message::clear_y() {
  y_ = 0;
}
inline float ProjOnMajorRefLine_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.y)
  return y_;
}
inline void ProjOnMajorRefLine_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.y)
}

// float heading = 4;
inline void ProjOnMajorRefLine_message::clear_heading() {
  heading_ = 0;
}
inline float ProjOnMajorRefLine_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.heading)
  return heading_;
}
inline void ProjOnMajorRefLine_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.heading)
}

// float curvature = 5;
inline void ProjOnMajorRefLine_message::clear_curvature() {
  curvature_ = 0;
}
inline float ProjOnMajorRefLine_message::curvature() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.curvature)
  return curvature_;
}
inline void ProjOnMajorRefLine_message::set_curvature(float value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.curvature)
}

// float s = 6;
inline void ProjOnMajorRefLine_message::clear_s() {
  s_ = 0;
}
inline float ProjOnMajorRefLine_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.s)
  return s_;
}
inline void ProjOnMajorRefLine_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.s)
}

// float l = 7;
inline void ProjOnMajorRefLine_message::clear_l() {
  l_ = 0;
}
inline float ProjOnMajorRefLine_message::l() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ProjOnMajorRefLine_message.l)
  return l_;
}
inline void ProjOnMajorRefLine_message::set_l(float value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ProjOnMajorRefLine_message.l)
}

// -------------------------------------------------------------------

// PredPath_message

// float x = 1;
inline void PredPath_message::clear_x() {
  x_ = 0;
}
inline float PredPath_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PredPath_message.x)
  return x_;
}
inline void PredPath_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PredPath_message.x)
}

// float y = 2;
inline void PredPath_message::clear_y() {
  y_ = 0;
}
inline float PredPath_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PredPath_message.y)
  return y_;
}
inline void PredPath_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PredPath_message.y)
}

// float heading = 3;
inline void PredPath_message::clear_heading() {
  heading_ = 0;
}
inline float PredPath_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PredPath_message.heading)
  return heading_;
}
inline void PredPath_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PredPath_message.heading)
}

// float s = 4;
inline void PredPath_message::clear_s() {
  s_ = 0;
}
inline float PredPath_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PredPath_message.s)
  return s_;
}
inline void PredPath_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PredPath_message.s)
}

// -------------------------------------------------------------------

// TrackedPath_message

// float x = 1;
inline void TrackedPath_message::clear_x() {
  x_ = 0;
}
inline float TrackedPath_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrackedPath_message.x)
  return x_;
}
inline void TrackedPath_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrackedPath_message.x)
}

// float y = 2;
inline void TrackedPath_message::clear_y() {
  y_ = 0;
}
inline float TrackedPath_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrackedPath_message.y)
  return y_;
}
inline void TrackedPath_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrackedPath_message.y)
}

// -------------------------------------------------------------------

// Obstacle_message

// sint32 id = 1;
inline void Obstacle_message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.id)
  return id_;
}
inline void Obstacle_message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.id)
}

// float x = 2;
inline void Obstacle_message::clear_x() {
  x_ = 0;
}
inline float Obstacle_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.x)
  return x_;
}
inline void Obstacle_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.x)
}

// float y = 3;
inline void Obstacle_message::clear_y() {
  y_ = 0;
}
inline float Obstacle_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.y)
  return y_;
}
inline void Obstacle_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.y)
}

// .phoenix.ad_data_upload.OBBox_message obb = 4;
inline bool Obstacle_message::has_obb() const {
  return this != internal_default_instance() && obb_ != nullptr;
}
inline void Obstacle_message::clear_obb() {
  if (GetArenaNoVirtual() == nullptr && obb_ != nullptr) {
    delete obb_;
  }
  obb_ = nullptr;
}
inline const ::phoenix::ad_data_upload::OBBox_message& Obstacle_message::obb() const {
  const ::phoenix::ad_data_upload::OBBox_message* p = obb_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.obb)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::OBBox_message*>(
      &::phoenix::ad_data_upload::_OBBox_message_default_instance_);
}
inline ::phoenix::ad_data_upload::OBBox_message* Obstacle_message::release_obb() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Obstacle_message.obb)
  
  ::phoenix::ad_data_upload::OBBox_message* temp = obb_;
  obb_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::OBBox_message* Obstacle_message::mutable_obb() {
  
  if (obb_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::OBBox_message>(GetArenaNoVirtual());
    obb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Obstacle_message.obb)
  return obb_;
}
inline void Obstacle_message::set_allocated_obb(::phoenix::ad_data_upload::OBBox_message* obb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obb_;
  }
  if (obb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obb, submessage_arena);
    }
    
  } else {
    
  }
  obb_ = obb;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Obstacle_message.obb)
}

// float height = 5;
inline void Obstacle_message::clear_height() {
  height_ = 0;
}
inline float Obstacle_message::height() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.height)
  return height_;
}
inline void Obstacle_message::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.height)
}

// float height_to_ground = 6;
inline void Obstacle_message::clear_height_to_ground() {
  height_to_ground_ = 0;
}
inline float Obstacle_message::height_to_ground() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.height_to_ground)
  return height_to_ground_;
}
inline void Obstacle_message::set_height_to_ground(float value) {
  
  height_to_ground_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.height_to_ground)
}

// sint32 type = 7;
inline void Obstacle_message::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.type)
  return type_;
}
inline void Obstacle_message::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.type)
}

// sint32 dynamic = 8;
inline void Obstacle_message::clear_dynamic() {
  dynamic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::dynamic() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.dynamic)
  return dynamic_;
}
inline void Obstacle_message::set_dynamic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynamic_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.dynamic)
}

// sint32 confidence = 9;
inline void Obstacle_message::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::confidence() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.confidence)
  return confidence_;
}
inline void Obstacle_message::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.confidence)
}

// sint32 perception_type = 10;
inline void Obstacle_message::clear_perception_type() {
  perception_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::perception_type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.perception_type)
  return perception_type_;
}
inline void Obstacle_message::set_perception_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  perception_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.perception_type)
}

// float v_x = 11;
inline void Obstacle_message::clear_v_x() {
  v_x_ = 0;
}
inline float Obstacle_message::v_x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.v_x)
  return v_x_;
}
inline void Obstacle_message::set_v_x(float value) {
  
  v_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.v_x)
}

// float v_y = 12;
inline void Obstacle_message::clear_v_y() {
  v_y_ = 0;
}
inline float Obstacle_message::v_y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.v_y)
  return v_y_;
}
inline void Obstacle_message::set_v_y(float value) {
  
  v_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.v_y)
}

// float v = 13;
inline void Obstacle_message::clear_v() {
  v_ = 0;
}
inline float Obstacle_message::v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.v)
  return v_;
}
inline void Obstacle_message::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.v)
}

// float a_x = 14;
inline void Obstacle_message::clear_a_x() {
  a_x_ = 0;
}
inline float Obstacle_message::a_x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.a_x)
  return a_x_;
}
inline void Obstacle_message::set_a_x(float value) {
  
  a_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.a_x)
}

// float a_y = 15;
inline void Obstacle_message::clear_a_y() {
  a_y_ = 0;
}
inline float Obstacle_message::a_y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.a_y)
  return a_y_;
}
inline void Obstacle_message::set_a_y(float value) {
  
  a_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.a_y)
}

// float a = 16;
inline void Obstacle_message::clear_a() {
  a_ = 0;
}
inline float Obstacle_message::a() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.a)
  return a_;
}
inline void Obstacle_message::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.a)
}

// .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
inline bool Obstacle_message::has_proj_on_major_ref_line() const {
  return this != internal_default_instance() && proj_on_major_ref_line_ != nullptr;
}
inline void Obstacle_message::clear_proj_on_major_ref_line() {
  if (GetArenaNoVirtual() == nullptr && proj_on_major_ref_line_ != nullptr) {
    delete proj_on_major_ref_line_;
  }
  proj_on_major_ref_line_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message& Obstacle_message::proj_on_major_ref_line() const {
  const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* p = proj_on_major_ref_line_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.proj_on_major_ref_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message*>(
      &::phoenix::ad_data_upload::_ProjOnMajorRefLine_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* Obstacle_message::release_proj_on_major_ref_line() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Obstacle_message.proj_on_major_ref_line)
  
  ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* temp = proj_on_major_ref_line_;
  proj_on_major_ref_line_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* Obstacle_message::mutable_proj_on_major_ref_line() {
  
  if (proj_on_major_ref_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ProjOnMajorRefLine_message>(GetArenaNoVirtual());
    proj_on_major_ref_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Obstacle_message.proj_on_major_ref_line)
  return proj_on_major_ref_line_;
}
inline void Obstacle_message::set_allocated_proj_on_major_ref_line(::phoenix::ad_data_upload::ProjOnMajorRefLine_message* proj_on_major_ref_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proj_on_major_ref_line_;
  }
  if (proj_on_major_ref_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proj_on_major_ref_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj_on_major_ref_line, submessage_arena);
    }
    
  } else {
    
  }
  proj_on_major_ref_line_ = proj_on_major_ref_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Obstacle_message.proj_on_major_ref_line)
}

// sint32 pred_path_num = 18;
inline void Obstacle_message::clear_pred_path_num() {
  pred_path_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::pred_path_num() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.pred_path_num)
  return pred_path_num_;
}
inline void Obstacle_message::set_pred_path_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pred_path_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.pred_path_num)
}

// repeated sint32 pred_path_point_num = 19;
inline int Obstacle_message::pred_path_point_num_size() const {
  return pred_path_point_num_.size();
}
inline void Obstacle_message::clear_pred_path_point_num() {
  pred_path_point_num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::pred_path_point_num(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.pred_path_point_num)
  return pred_path_point_num_.Get(index);
}
inline void Obstacle_message::set_pred_path_point_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pred_path_point_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.pred_path_point_num)
}
inline void Obstacle_message::add_pred_path_point_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pred_path_point_num_.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Obstacle_message.pred_path_point_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Obstacle_message::pred_path_point_num() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Obstacle_message.pred_path_point_num)
  return pred_path_point_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Obstacle_message::mutable_pred_path_point_num() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Obstacle_message.pred_path_point_num)
  return &pred_path_point_num_;
}

// repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
inline int Obstacle_message::pred_path_size() const {
  return pred_path_.size();
}
inline void Obstacle_message::clear_pred_path() {
  pred_path_.Clear();
}
inline ::phoenix::ad_data_upload::PredPath_message* Obstacle_message::mutable_pred_path(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Obstacle_message.pred_path)
  return pred_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PredPath_message >*
Obstacle_message::mutable_pred_path() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Obstacle_message.pred_path)
  return &pred_path_;
}
inline const ::phoenix::ad_data_upload::PredPath_message& Obstacle_message::pred_path(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.pred_path)
  return pred_path_.Get(index);
}
inline ::phoenix::ad_data_upload::PredPath_message* Obstacle_message::add_pred_path() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Obstacle_message.pred_path)
  return pred_path_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PredPath_message >&
Obstacle_message::pred_path() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Obstacle_message.pred_path)
  return pred_path_;
}

// sint32 tracked_path_point_num = 21;
inline void Obstacle_message::clear_tracked_path_point_num() {
  tracked_path_point_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle_message::tracked_path_point_num() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.tracked_path_point_num)
  return tracked_path_point_num_;
}
inline void Obstacle_message::set_tracked_path_point_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tracked_path_point_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Obstacle_message.tracked_path_point_num)
}

// repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
inline int Obstacle_message::tracked_path_size() const {
  return tracked_path_.size();
}
inline void Obstacle_message::clear_tracked_path() {
  tracked_path_.Clear();
}
inline ::phoenix::ad_data_upload::TrackedPath_message* Obstacle_message::mutable_tracked_path(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Obstacle_message.tracked_path)
  return tracked_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrackedPath_message >*
Obstacle_message::mutable_tracked_path() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Obstacle_message.tracked_path)
  return &tracked_path_;
}
inline const ::phoenix::ad_data_upload::TrackedPath_message& Obstacle_message::tracked_path(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Obstacle_message.tracked_path)
  return tracked_path_.Get(index);
}
inline ::phoenix::ad_data_upload::TrackedPath_message* Obstacle_message::add_tracked_path() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Obstacle_message.tracked_path)
  return tracked_path_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrackedPath_message >&
Obstacle_message::tracked_path() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Obstacle_message.tracked_path)
  return tracked_path_;
}

// -------------------------------------------------------------------

// Msg_head_message

// bool valid = 1;
inline void Msg_head_message::clear_valid() {
  valid_ = false;
}
inline bool Msg_head_message::valid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.valid)
  return valid_;
}
inline void Msg_head_message::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.valid)
}

// uint32 sequence = 2;
inline void Msg_head_message::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg_head_message::sequence() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.sequence)
  return sequence_;
}
inline void Msg_head_message::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.sequence)
}

// sint32 timestamp = 3;
inline void Msg_head_message::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_head_message::timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.timestamp)
  return timestamp_;
}
inline void Msg_head_message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.timestamp)
}

// sint32 time_offset = 4;
inline void Msg_head_message::clear_time_offset() {
  time_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_head_message::time_offset() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.time_offset)
  return time_offset_;
}
inline void Msg_head_message::set_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.time_offset)
}

// uint32 src_module_id = 5;
inline void Msg_head_message::clear_src_module_id() {
  src_module_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg_head_message::src_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.src_module_id)
  return src_module_id_;
}
inline void Msg_head_message::set_src_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.src_module_id)
}

// uint32 dst_module_id = 6;
inline void Msg_head_message::clear_dst_module_id() {
  dst_module_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg_head_message::dst_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Msg_head_message.dst_module_id)
  return dst_module_id_;
}
inline void Msg_head_message::set_dst_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Msg_head_message.dst_module_id)
}

// -------------------------------------------------------------------

// ObstacleList_message

// .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
inline bool ObstacleList_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void ObstacleList_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Msg_head_message& ObstacleList_message::msg_head() const {
  const ::phoenix::ad_data_upload::Msg_head_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleList_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Msg_head_message*>(
      &::phoenix::ad_data_upload::_Msg_head_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Msg_head_message* ObstacleList_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ObstacleList_message.msg_head)
  
  ::phoenix::ad_data_upload::Msg_head_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Msg_head_message* ObstacleList_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Msg_head_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ObstacleList_message.msg_head)
  return msg_head_;
}
inline void ObstacleList_message::set_allocated_msg_head(::phoenix::ad_data_upload::Msg_head_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ObstacleList_message.msg_head)
}

// sint32 obstacle_num = 2;
inline void ObstacleList_message::clear_obstacle_num() {
  obstacle_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleList_message::obstacle_num() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleList_message.obstacle_num)
  return obstacle_num_;
}
inline void ObstacleList_message::set_obstacle_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obstacle_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleList_message.obstacle_num)
}

// repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
inline int ObstacleList_message::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstacleList_message::clear_obstacles() {
  obstacles_.Clear();
}
inline ::phoenix::ad_data_upload::Obstacle_message* ObstacleList_message::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ObstacleList_message.Obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Obstacle_message >*
ObstacleList_message::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.ObstacleList_message.Obstacles)
  return &obstacles_;
}
inline const ::phoenix::ad_data_upload::Obstacle_message& ObstacleList_message::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleList_message.Obstacles)
  return obstacles_.Get(index);
}
inline ::phoenix::ad_data_upload::Obstacle_message* ObstacleList_message::add_obstacles() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.ObstacleList_message.Obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Obstacle_message >&
ObstacleList_message::obstacles() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.ObstacleList_message.Obstacles)
  return obstacles_;
}

// -------------------------------------------------------------------

// Perception_Display_Data_message

// .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
inline bool Perception_Display_Data_message::has_obstacle_list() const {
  return this != internal_default_instance() && obstacle_list_ != nullptr;
}
inline void Perception_Display_Data_message::clear_obstacle_list() {
  if (GetArenaNoVirtual() == nullptr && obstacle_list_ != nullptr) {
    delete obstacle_list_;
  }
  obstacle_list_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ObstacleList_message& Perception_Display_Data_message::obstacle_list() const {
  const ::phoenix::ad_data_upload::ObstacleList_message* p = obstacle_list_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Perception_Display_Data_message.obstacle_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ObstacleList_message*>(
      &::phoenix::ad_data_upload::_ObstacleList_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ObstacleList_message* Perception_Display_Data_message::release_obstacle_list() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Perception_Display_Data_message.obstacle_list)
  
  ::phoenix::ad_data_upload::ObstacleList_message* temp = obstacle_list_;
  obstacle_list_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ObstacleList_message* Perception_Display_Data_message::mutable_obstacle_list() {
  
  if (obstacle_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ObstacleList_message>(GetArenaNoVirtual());
    obstacle_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Perception_Display_Data_message.obstacle_list)
  return obstacle_list_;
}
inline void Perception_Display_Data_message::set_allocated_obstacle_list(::phoenix::ad_data_upload::ObstacleList_message* obstacle_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obstacle_list_;
  }
  if (obstacle_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obstacle_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle_list, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_list_ = obstacle_list;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Perception_Display_Data_message.obstacle_list)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_data_upload
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fperception_2eproto
