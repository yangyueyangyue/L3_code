// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_perception.proto

#include "Sys_DataUploadProto_perception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fperception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto;
namespace phoenix {
namespace ad_data_upload {
class OBBox_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBBox_message> _instance;
} _OBBox_message_default_instance_;
class ProjOnMajorRefLine_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjOnMajorRefLine_message> _instance;
} _ProjOnMajorRefLine_message_default_instance_;
class PredPath_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredPath_message> _instance;
} _PredPath_message_default_instance_;
class TrackedPath_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedPath_message> _instance;
} _TrackedPath_message_default_instance_;
class Obstacle_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle_message> _instance;
} _Obstacle_message_default_instance_;
class Msg_head_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_head_message> _instance;
} _Msg_head_message_default_instance_;
class ObstacleList_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleList_message> _instance;
} _ObstacleList_message_default_instance_;
class Perception_Display_Data_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Perception_Display_Data_message> _instance;
} _Perception_Display_Data_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
static void InitDefaultsscc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Msg_head_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Msg_head_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Msg_head_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto}, {}};

static void InitDefaultsscc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_OBBox_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::OBBox_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::OBBox_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ObstacleList_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ObstacleList_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ObstacleList_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto}, {
      &scc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto.base,
      &scc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Obstacle_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Obstacle_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Obstacle_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto}, {
      &scc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto.base,
      &scc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto.base,
      &scc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto.base,
      &scc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto.base,}};

static void InitDefaultsscc_info_Perception_Display_Data_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Perception_Display_Data_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Perception_Display_Data_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Perception_Display_Data_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Perception_Display_Data_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Perception_Display_Data_message_Sys_5fDataUploadProto_5fperception_2eproto}, {
      &scc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto.base,}};

static void InitDefaultsscc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_PredPath_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::PredPath_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::PredPath_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto}, {}};

static void InitDefaultsscc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ProjOnMajorRefLine_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ProjOnMajorRefLine_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ProjOnMajorRefLine_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto}, {}};

static void InitDefaultsscc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TrackedPath_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TrackedPath_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TrackedPath_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto}, {}};

namespace phoenix {
namespace ad_data_upload {

// ===================================================================

void OBBox_message::InitAsDefaultInstance() {
}
class OBBox_message::_Internal {
 public:
};

OBBox_message::OBBox_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.OBBox_message)
}
OBBox_message::OBBox_message(const OBBox_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&half_length_) -
    reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.OBBox_message)
}

void OBBox_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&half_length_) -
      reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
}

OBBox_message::~OBBox_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.OBBox_message)
  SharedDtor();
}

void OBBox_message::SharedDtor() {
}

void OBBox_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBBox_message& OBBox_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBBox_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void OBBox_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.OBBox_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&half_length_) -
      reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OBBox_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float half_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          half_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float half_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          half_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OBBox_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.OBBox_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float half_width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float half_length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &half_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.OBBox_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.OBBox_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OBBox_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.OBBox_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // float half_width = 4;
  if (!(this->half_width() <= 0 && this->half_width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->half_width(), output);
  }

  // float half_length = 5;
  if (!(this->half_length() <= 0 && this->half_length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->half_length(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.OBBox_message)
}

size_t OBBox_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.OBBox_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float half_width = 4;
  if (!(this->half_width() <= 0 && this->half_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float half_length = 5;
  if (!(this->half_length() <= 0 && this->half_length() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBBox_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBBox_message*>(
      &from));
}

void OBBox_message::MergeFrom(const OBBox_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.OBBox_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.half_width() <= 0 && from.half_width() >= 0)) {
    set_half_width(from.half_width());
  }
  if (!(from.half_length() <= 0 && from.half_length() >= 0)) {
    set_half_length(from.half_length());
  }
}

void OBBox_message::CopyFrom(const OBBox_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.OBBox_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBBox_message::IsInitialized() const {
  return true;
}

void OBBox_message::InternalSwap(OBBox_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(half_width_, other->half_width_);
  swap(half_length_, other->half_length_);
}

std::string OBBox_message::GetTypeName() const {
  return "phoenix.ad_data_upload.OBBox_message";
}


// ===================================================================

void ProjOnMajorRefLine_message::InitAsDefaultInstance() {
}
class ProjOnMajorRefLine_message::_Internal {
 public:
};

ProjOnMajorRefLine_message::ProjOnMajorRefLine_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
}
ProjOnMajorRefLine_message::ProjOnMajorRefLine_message(const ProjOnMajorRefLine_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
}

void ProjOnMajorRefLine_message::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(l_));
}

ProjOnMajorRefLine_message::~ProjOnMajorRefLine_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  SharedDtor();
}

void ProjOnMajorRefLine_message::SharedDtor() {
}

void ProjOnMajorRefLine_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjOnMajorRefLine_message& ProjOnMajorRefLine_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjOnMajorRefLine_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void ProjOnMajorRefLine_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(l_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjOnMajorRefLine_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float l = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjOnMajorRefLine_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjOnMajorRefLine_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 valid = 1;
  if (this->valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->valid(), output);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->heading(), output);
  }

  // float curvature = 5;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->curvature(), output);
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->s(), output);
  }

  // float l = 7;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->l(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
}

size_t ProjOnMajorRefLine_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 valid = 1;
  if (this->valid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->valid());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 5;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float l = 7;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjOnMajorRefLine_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProjOnMajorRefLine_message*>(
      &from));
}

void ProjOnMajorRefLine_message::MergeFrom(const ProjOnMajorRefLine_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    set_curvature(from.curvature());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    set_l(from.l());
  }
}

void ProjOnMajorRefLine_message::CopyFrom(const ProjOnMajorRefLine_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ProjOnMajorRefLine_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjOnMajorRefLine_message::IsInitialized() const {
  return true;
}

void ProjOnMajorRefLine_message::InternalSwap(ProjOnMajorRefLine_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(curvature_, other->curvature_);
  swap(s_, other->s_);
  swap(l_, other->l_);
}

std::string ProjOnMajorRefLine_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ProjOnMajorRefLine_message";
}


// ===================================================================

void PredPath_message::InitAsDefaultInstance() {
}
class PredPath_message::_Internal {
 public:
};

PredPath_message::PredPath_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.PredPath_message)
}
PredPath_message::PredPath_message(const PredPath_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.PredPath_message)
}

void PredPath_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

PredPath_message::~PredPath_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.PredPath_message)
  SharedDtor();
}

void PredPath_message::SharedDtor() {
}

void PredPath_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredPath_message& PredPath_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredPath_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void PredPath_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.PredPath_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredPath_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredPath_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.PredPath_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.PredPath_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.PredPath_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredPath_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.PredPath_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.PredPath_message)
}

size_t PredPath_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.PredPath_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredPath_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PredPath_message*>(
      &from));
}

void PredPath_message::MergeFrom(const PredPath_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.PredPath_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
}

void PredPath_message::CopyFrom(const PredPath_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.PredPath_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredPath_message::IsInitialized() const {
  return true;
}

void PredPath_message::InternalSwap(PredPath_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(s_, other->s_);
}

std::string PredPath_message::GetTypeName() const {
  return "phoenix.ad_data_upload.PredPath_message";
}


// ===================================================================

void TrackedPath_message::InitAsDefaultInstance() {
}
class TrackedPath_message::_Internal {
 public:
};

TrackedPath_message::TrackedPath_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TrackedPath_message)
}
TrackedPath_message::TrackedPath_message(const TrackedPath_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TrackedPath_message)
}

void TrackedPath_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

TrackedPath_message::~TrackedPath_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TrackedPath_message)
  SharedDtor();
}

void TrackedPath_message::SharedDtor() {
}

void TrackedPath_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedPath_message& TrackedPath_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedPath_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void TrackedPath_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TrackedPath_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackedPath_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackedPath_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TrackedPath_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TrackedPath_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TrackedPath_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackedPath_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TrackedPath_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TrackedPath_message)
}

size_t TrackedPath_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TrackedPath_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedPath_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrackedPath_message*>(
      &from));
}

void TrackedPath_message::MergeFrom(const TrackedPath_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TrackedPath_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
}

void TrackedPath_message::CopyFrom(const TrackedPath_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TrackedPath_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedPath_message::IsInitialized() const {
  return true;
}

void TrackedPath_message::InternalSwap(TrackedPath_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

std::string TrackedPath_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TrackedPath_message";
}


// ===================================================================

void Obstacle_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Obstacle_message_default_instance_._instance.get_mutable()->obb_ = const_cast< ::phoenix::ad_data_upload::OBBox_message*>(
      ::phoenix::ad_data_upload::OBBox_message::internal_default_instance());
  ::phoenix::ad_data_upload::_Obstacle_message_default_instance_._instance.get_mutable()->proj_on_major_ref_line_ = const_cast< ::phoenix::ad_data_upload::ProjOnMajorRefLine_message*>(
      ::phoenix::ad_data_upload::ProjOnMajorRefLine_message::internal_default_instance());
}
class Obstacle_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::OBBox_message& obb(const Obstacle_message* msg);
  static const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message& proj_on_major_ref_line(const Obstacle_message* msg);
};

const ::phoenix::ad_data_upload::OBBox_message&
Obstacle_message::_Internal::obb(const Obstacle_message* msg) {
  return *msg->obb_;
}
const ::phoenix::ad_data_upload::ProjOnMajorRefLine_message&
Obstacle_message::_Internal::proj_on_major_ref_line(const Obstacle_message* msg) {
  return *msg->proj_on_major_ref_line_;
}
Obstacle_message::Obstacle_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Obstacle_message)
}
Obstacle_message::Obstacle_message(const Obstacle_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      pred_path_point_num_(from.pred_path_point_num_),
      pred_path_(from.pred_path_),
      tracked_path_(from.tracked_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obb()) {
    obb_ = new ::phoenix::ad_data_upload::OBBox_message(*from.obb_);
  } else {
    obb_ = nullptr;
  }
  if (from.has_proj_on_major_ref_line()) {
    proj_on_major_ref_line_ = new ::phoenix::ad_data_upload::ProjOnMajorRefLine_message(*from.proj_on_major_ref_line_);
  } else {
    proj_on_major_ref_line_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracked_path_point_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tracked_path_point_num_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Obstacle_message)
}

void Obstacle_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  ::memset(&obb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracked_path_point_num_) -
      reinterpret_cast<char*>(&obb_)) + sizeof(tracked_path_point_num_));
}

Obstacle_message::~Obstacle_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Obstacle_message)
  SharedDtor();
}

void Obstacle_message::SharedDtor() {
  if (this != internal_default_instance()) delete obb_;
  if (this != internal_default_instance()) delete proj_on_major_ref_line_;
}

void Obstacle_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle_message& Obstacle_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void Obstacle_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Obstacle_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pred_path_point_num_.Clear();
  pred_path_.Clear();
  tracked_path_.Clear();
  if (GetArenaNoVirtual() == nullptr && obb_ != nullptr) {
    delete obb_;
  }
  obb_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && proj_on_major_ref_line_ != nullptr) {
    delete proj_on_major_ref_line_;
  }
  proj_on_major_ref_line_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracked_path_point_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tracked_path_point_num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacle_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.OBBox_message obb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_obb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_to_ground = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          height_to_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 dynamic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 perception_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          perception_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float v_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          a_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          a_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_proj_on_major_ref_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 pred_path_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          pred_path_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 pred_path_point_num = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(mutable_pred_path_point_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          add_pred_path_point_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pred_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // sint32 tracked_path_point_num = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          tracked_path_point_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_tracked_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacle_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Obstacle_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.OBBox_message obb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_to_ground = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_to_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 dynamic = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 confidence = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 perception_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &perception_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v_x = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v_y = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a_x = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a_y = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proj_on_major_ref_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 pred_path_num = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pred_path_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 pred_path_point_num = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_pred_path_point_num())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 2, 154u, input, this->mutable_pred_path_point_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pred_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tracked_path_point_num = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tracked_path_point_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracked_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Obstacle_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Obstacle_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacle_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Obstacle_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // .phoenix.ad_data_upload.OBBox_message obb = 4;
  if (this->has_obb()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::obb(this), output);
  }

  // float height = 5;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // float height_to_ground = 6;
  if (!(this->height_to_ground() <= 0 && this->height_to_ground() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->height_to_ground(), output);
  }

  // sint32 type = 7;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(7, this->type(), output);
  }

  // sint32 dynamic = 8;
  if (this->dynamic() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(8, this->dynamic(), output);
  }

  // sint32 confidence = 9;
  if (this->confidence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(9, this->confidence(), output);
  }

  // sint32 perception_type = 10;
  if (this->perception_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(10, this->perception_type(), output);
  }

  // float v_x = 11;
  if (!(this->v_x() <= 0 && this->v_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->v_x(), output);
  }

  // float v_y = 12;
  if (!(this->v_y() <= 0 && this->v_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->v_y(), output);
  }

  // float v = 13;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->v(), output);
  }

  // float a_x = 14;
  if (!(this->a_x() <= 0 && this->a_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->a_x(), output);
  }

  // float a_y = 15;
  if (!(this->a_y() <= 0 && this->a_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->a_y(), output);
  }

  // float a = 16;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->a(), output);
  }

  // .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
  if (this->has_proj_on_major_ref_line()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::proj_on_major_ref_line(this), output);
  }

  // sint32 pred_path_num = 18;
  if (this->pred_path_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(18, this->pred_path_num(), output);
  }

  // repeated sint32 pred_path_point_num = 19;
  if (this->pred_path_point_num_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(19, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pred_path_point_num_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pred_path_point_num_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32NoTag(
      this->pred_path_point_num(i), output);
  }

  // repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pred_path_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->pred_path(static_cast<int>(i)),
      output);
  }

  // sint32 tracked_path_point_num = 21;
  if (this->tracked_path_point_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(21, this->tracked_path_point_num(), output);
  }

  // repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracked_path_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22,
      this->tracked_path(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Obstacle_message)
}

size_t Obstacle_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Obstacle_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 pred_path_point_num = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->pred_path_point_num_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pred_path_point_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .phoenix.ad_data_upload.PredPath_message pred_path = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->pred_path_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pred_path(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.TrackedPath_message tracked_path = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->tracked_path_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracked_path(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.OBBox_message obb = 4;
  if (this->has_obb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obb_);
  }

  // .phoenix.ad_data_upload.ProjOnMajorRefLine_message proj_on_major_ref_line = 17;
  if (this->has_proj_on_major_ref_line()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proj_on_major_ref_line_);
  }

  // sint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 5;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_to_ground = 6;
  if (!(this->height_to_ground() <= 0 && this->height_to_ground() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  // sint32 dynamic = 8;
  if (this->dynamic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->dynamic());
  }

  // sint32 confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->confidence());
  }

  // sint32 perception_type = 10;
  if (this->perception_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->perception_type());
  }

  // float v_x = 11;
  if (!(this->v_x() <= 0 && this->v_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float v_y = 12;
  if (!(this->v_y() <= 0 && this->v_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float v = 13;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_x = 14;
  if (!(this->a_x() <= 0 && this->a_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_y = 15;
  if (!(this->a_y() <= 0 && this->a_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 16;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 2 + 4;
  }

  // sint32 pred_path_num = 18;
  if (this->pred_path_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->pred_path_num());
  }

  // sint32 tracked_path_point_num = 21;
  if (this->tracked_path_point_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tracked_path_point_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Obstacle_message*>(
      &from));
}

void Obstacle_message::MergeFrom(const Obstacle_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Obstacle_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pred_path_point_num_.MergeFrom(from.pred_path_point_num_);
  pred_path_.MergeFrom(from.pred_path_);
  tracked_path_.MergeFrom(from.tracked_path_);
  if (from.has_obb()) {
    mutable_obb()->::phoenix::ad_data_upload::OBBox_message::MergeFrom(from.obb());
  }
  if (from.has_proj_on_major_ref_line()) {
    mutable_proj_on_major_ref_line()->::phoenix::ad_data_upload::ProjOnMajorRefLine_message::MergeFrom(from.proj_on_major_ref_line());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.height_to_ground() <= 0 && from.height_to_ground() >= 0)) {
    set_height_to_ground(from.height_to_ground());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.dynamic() != 0) {
    set_dynamic(from.dynamic());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.perception_type() != 0) {
    set_perception_type(from.perception_type());
  }
  if (!(from.v_x() <= 0 && from.v_x() >= 0)) {
    set_v_x(from.v_x());
  }
  if (!(from.v_y() <= 0 && from.v_y() >= 0)) {
    set_v_y(from.v_y());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    set_v(from.v());
  }
  if (!(from.a_x() <= 0 && from.a_x() >= 0)) {
    set_a_x(from.a_x());
  }
  if (!(from.a_y() <= 0 && from.a_y() >= 0)) {
    set_a_y(from.a_y());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    set_a(from.a());
  }
  if (from.pred_path_num() != 0) {
    set_pred_path_num(from.pred_path_num());
  }
  if (from.tracked_path_point_num() != 0) {
    set_tracked_path_point_num(from.tracked_path_point_num());
  }
}

void Obstacle_message::CopyFrom(const Obstacle_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Obstacle_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle_message::IsInitialized() const {
  return true;
}

void Obstacle_message::InternalSwap(Obstacle_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pred_path_point_num_.InternalSwap(&other->pred_path_point_num_);
  CastToBase(&pred_path_)->InternalSwap(CastToBase(&other->pred_path_));
  CastToBase(&tracked_path_)->InternalSwap(CastToBase(&other->tracked_path_));
  swap(obb_, other->obb_);
  swap(proj_on_major_ref_line_, other->proj_on_major_ref_line_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(height_, other->height_);
  swap(height_to_ground_, other->height_to_ground_);
  swap(type_, other->type_);
  swap(dynamic_, other->dynamic_);
  swap(confidence_, other->confidence_);
  swap(perception_type_, other->perception_type_);
  swap(v_x_, other->v_x_);
  swap(v_y_, other->v_y_);
  swap(v_, other->v_);
  swap(a_x_, other->a_x_);
  swap(a_y_, other->a_y_);
  swap(a_, other->a_);
  swap(pred_path_num_, other->pred_path_num_);
  swap(tracked_path_point_num_, other->tracked_path_point_num_);
}

std::string Obstacle_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Obstacle_message";
}


// ===================================================================

void Msg_head_message::InitAsDefaultInstance() {
}
class Msg_head_message::_Internal {
 public:
};

Msg_head_message::Msg_head_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Msg_head_message)
}
Msg_head_message::Msg_head_message(const Msg_head_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_module_id_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(dst_module_id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Msg_head_message)
}

void Msg_head_message::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_module_id_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(dst_module_id_));
}

Msg_head_message::~Msg_head_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Msg_head_message)
  SharedDtor();
}

void Msg_head_message::SharedDtor() {
}

void Msg_head_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_head_message& Msg_head_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_head_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void Msg_head_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Msg_head_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_module_id_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(dst_module_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_head_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 time_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_module_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          src_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_module_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dst_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_head_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Msg_head_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 time_offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 src_module_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dst_module_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Msg_head_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Msg_head_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_head_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Msg_head_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // sint32 timestamp = 3;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->timestamp(), output);
  }

  // sint32 time_offset = 4;
  if (this->time_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->time_offset(), output);
  }

  // uint32 src_module_id = 5;
  if (this->src_module_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->src_module_id(), output);
  }

  // uint32 dst_module_id = 6;
  if (this->dst_module_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->dst_module_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Msg_head_message)
}

size_t Msg_head_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Msg_head_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  // sint32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->timestamp());
  }

  // sint32 time_offset = 4;
  if (this->time_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->time_offset());
  }

  // uint32 src_module_id = 5;
  if (this->src_module_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->src_module_id());
  }

  // uint32 dst_module_id = 6;
  if (this->dst_module_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->dst_module_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_head_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Msg_head_message*>(
      &from));
}

void Msg_head_message::MergeFrom(const Msg_head_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Msg_head_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.time_offset() != 0) {
    set_time_offset(from.time_offset());
  }
  if (from.src_module_id() != 0) {
    set_src_module_id(from.src_module_id());
  }
  if (from.dst_module_id() != 0) {
    set_dst_module_id(from.dst_module_id());
  }
}

void Msg_head_message::CopyFrom(const Msg_head_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Msg_head_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_head_message::IsInitialized() const {
  return true;
}

void Msg_head_message::InternalSwap(Msg_head_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
  swap(sequence_, other->sequence_);
  swap(timestamp_, other->timestamp_);
  swap(time_offset_, other->time_offset_);
  swap(src_module_id_, other->src_module_id_);
  swap(dst_module_id_, other->dst_module_id_);
}

std::string Msg_head_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Msg_head_message";
}


// ===================================================================

void ObstacleList_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_ObstacleList_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::Msg_head_message*>(
      ::phoenix::ad_data_upload::Msg_head_message::internal_default_instance());
}
class ObstacleList_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Msg_head_message& msg_head(const ObstacleList_message* msg);
};

const ::phoenix::ad_data_upload::Msg_head_message&
ObstacleList_message::_Internal::msg_head(const ObstacleList_message* msg) {
  return *msg->msg_head_;
}
ObstacleList_message::ObstacleList_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ObstacleList_message)
}
ObstacleList_message::ObstacleList_message(const ObstacleList_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::Msg_head_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  obstacle_num_ = from.obstacle_num_;
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ObstacleList_message)
}

void ObstacleList_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_num_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(obstacle_num_));
}

ObstacleList_message::~ObstacleList_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ObstacleList_message)
  SharedDtor();
}

void ObstacleList_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
}

void ObstacleList_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleList_message& ObstacleList_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleList_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void ObstacleList_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ObstacleList_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  obstacle_num_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleList_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 obstacle_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          obstacle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleList_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ObstacleList_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 obstacle_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &obstacle_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ObstacleList_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ObstacleList_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleList_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ObstacleList_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // sint32 obstacle_num = 2;
  if (this->obstacle_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->obstacle_num(), output);
  }

  // repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ObstacleList_message)
}

size_t ObstacleList_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ObstacleList_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Obstacle_message Obstacles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.Msg_head_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // sint32 obstacle_num = 2;
  if (this->obstacle_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->obstacle_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleList_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObstacleList_message*>(
      &from));
}

void ObstacleList_message::MergeFrom(const ObstacleList_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ObstacleList_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::Msg_head_message::MergeFrom(from.msg_head());
  }
  if (from.obstacle_num() != 0) {
    set_obstacle_num(from.obstacle_num());
  }
}

void ObstacleList_message::CopyFrom(const ObstacleList_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ObstacleList_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleList_message::IsInitialized() const {
  return true;
}

void ObstacleList_message::InternalSwap(ObstacleList_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(msg_head_, other->msg_head_);
  swap(obstacle_num_, other->obstacle_num_);
}

std::string ObstacleList_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ObstacleList_message";
}


// ===================================================================

void Perception_Display_Data_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Perception_Display_Data_message_default_instance_._instance.get_mutable()->obstacle_list_ = const_cast< ::phoenix::ad_data_upload::ObstacleList_message*>(
      ::phoenix::ad_data_upload::ObstacleList_message::internal_default_instance());
}
class Perception_Display_Data_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::ObstacleList_message& obstacle_list(const Perception_Display_Data_message* msg);
};

const ::phoenix::ad_data_upload::ObstacleList_message&
Perception_Display_Data_message::_Internal::obstacle_list(const Perception_Display_Data_message* msg) {
  return *msg->obstacle_list_;
}
Perception_Display_Data_message::Perception_Display_Data_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Perception_Display_Data_message)
}
Perception_Display_Data_message::Perception_Display_Data_message(const Perception_Display_Data_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacle_list()) {
    obstacle_list_ = new ::phoenix::ad_data_upload::ObstacleList_message(*from.obstacle_list_);
  } else {
    obstacle_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Perception_Display_Data_message)
}

void Perception_Display_Data_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Perception_Display_Data_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  obstacle_list_ = nullptr;
}

Perception_Display_Data_message::~Perception_Display_Data_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Perception_Display_Data_message)
  SharedDtor();
}

void Perception_Display_Data_message::SharedDtor() {
  if (this != internal_default_instance()) delete obstacle_list_;
}

void Perception_Display_Data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Perception_Display_Data_message& Perception_Display_Data_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Perception_Display_Data_message_Sys_5fDataUploadProto_5fperception_2eproto.base);
  return *internal_default_instance();
}


void Perception_Display_Data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obstacle_list_ != nullptr) {
    delete obstacle_list_;
  }
  obstacle_list_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Perception_Display_Data_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_obstacle_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Perception_Display_Data_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Perception_Display_Data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Perception_Display_Data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Perception_Display_Data_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
  if (this->has_obstacle_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::obstacle_list(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Perception_Display_Data_message)
}

size_t Perception_Display_Data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ObstacleList_message obstacle_list = 1;
  if (this->has_obstacle_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_list_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Perception_Display_Data_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Perception_Display_Data_message*>(
      &from));
}

void Perception_Display_Data_message::MergeFrom(const Perception_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obstacle_list()) {
    mutable_obstacle_list()->::phoenix::ad_data_upload::ObstacleList_message::MergeFrom(from.obstacle_list());
  }
}

void Perception_Display_Data_message::CopyFrom(const Perception_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Perception_Display_Data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perception_Display_Data_message::IsInitialized() const {
  return true;
}

void Perception_Display_Data_message::InternalSwap(Perception_Display_Data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obstacle_list_, other->obstacle_list_);
}

std::string Perception_Display_Data_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Perception_Display_Data_message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::OBBox_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::OBBox_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::OBBox_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ProjOnMajorRefLine_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ProjOnMajorRefLine_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ProjOnMajorRefLine_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::PredPath_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::PredPath_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::PredPath_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TrackedPath_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TrackedPath_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TrackedPath_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Obstacle_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Obstacle_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Obstacle_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Msg_head_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Msg_head_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Msg_head_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ObstacleList_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ObstacleList_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ObstacleList_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Perception_Display_Data_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Perception_Display_Data_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Perception_Display_Data_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
