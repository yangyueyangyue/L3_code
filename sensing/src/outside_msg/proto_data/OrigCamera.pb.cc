// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrigCamera.proto

#include "OrigCamera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OrigCamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraLineItem_OrigCamera_2eproto;
namespace OrigCamera {
class CameraLineItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraLineItem> _instance;
} _CameraLineItem_default_instance_;
class CameraLaneSectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraLaneSection> _instance;
} _CameraLaneSection_default_instance_;
}  // namespace OrigCamera
static void InitDefaultsscc_info_CameraLaneSection_OrigCamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OrigCamera::_CameraLaneSection_default_instance_;
    new (ptr) ::OrigCamera::CameraLaneSection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OrigCamera::CameraLaneSection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraLaneSection_OrigCamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CameraLaneSection_OrigCamera_2eproto}, {
      &scc_info_CameraLineItem_OrigCamera_2eproto.base,}};

static void InitDefaultsscc_info_CameraLineItem_OrigCamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OrigCamera::_CameraLineItem_default_instance_;
    new (ptr) ::OrigCamera::CameraLineItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OrigCamera::CameraLineItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraLineItem_OrigCamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraLineItem_OrigCamera_2eproto}, {}};

namespace OrigCamera {
bool CameraLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CameraLineType_strings[14] = {};

static const char CameraLineType_names[] =
  "BACKGROUND"
  "BARRIER"
  "BOLD"
  "BOTT_DOTS"
  "DASHED_SOLID"
  "DECELERATION_STRIP"
  "DOUBLE_SOLIDYELLOW"
  "INVALID"
  "ROUDEDGE"
  "SINGLE_DASHEDWHITE"
  "SINGLE_DASHEDYELLOW"
  "SINGLE_SOLIDWHITE"
  "SINGLE_SOLIDYELLOW"
  "SOLID_DASHED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CameraLineType_entries[] = {
  { {CameraLineType_names + 0, 10}, 0 },
  { {CameraLineType_names + 10, 7}, 12 },
  { {CameraLineType_names + 17, 4}, 9 },
  { {CameraLineType_names + 21, 9}, 11 },
  { {CameraLineType_names + 30, 12}, 6 },
  { {CameraLineType_names + 42, 18}, 8 },
  { {CameraLineType_names + 60, 18}, 5 },
  { {CameraLineType_names + 78, 7}, 15 },
  { {CameraLineType_names + 85, 8}, 10 },
  { {CameraLineType_names + 93, 18}, 2 },
  { {CameraLineType_names + 111, 19}, 4 },
  { {CameraLineType_names + 130, 17}, 1 },
  { {CameraLineType_names + 147, 18}, 3 },
  { {CameraLineType_names + 165, 12}, 7 },
};

static const int CameraLineType_entries_by_number[] = {
  0, // 0 -> BACKGROUND
  11, // 1 -> SINGLE_SOLIDWHITE
  9, // 2 -> SINGLE_DASHEDWHITE
  12, // 3 -> SINGLE_SOLIDYELLOW
  10, // 4 -> SINGLE_DASHEDYELLOW
  6, // 5 -> DOUBLE_SOLIDYELLOW
  4, // 6 -> DASHED_SOLID
  13, // 7 -> SOLID_DASHED
  5, // 8 -> DECELERATION_STRIP
  2, // 9 -> BOLD
  8, // 10 -> ROUDEDGE
  3, // 11 -> BOTT_DOTS
  1, // 12 -> BARRIER
  7, // 15 -> INVALID
};

const std::string& CameraLineType_Name(
    CameraLineType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CameraLineType_entries,
          CameraLineType_entries_by_number,
          14, CameraLineType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CameraLineType_entries,
      CameraLineType_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CameraLineType_strings[idx].get();
}
bool CameraLineType_Parse(
    const std::string& name, CameraLineType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CameraLineType_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<CameraLineType>(int_value);
  }
  return success;
}
bool CameraLaneDirect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CameraLaneDirect_strings[3] = {};

static const char CameraLaneDirect_names[] =
  "LANE_DIRET_LEFT"
  "LANE_DIRET_RIGHT"
  "LANE_DIRET_STRAIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CameraLaneDirect_entries[] = {
  { {CameraLaneDirect_names + 0, 15}, 1 },
  { {CameraLaneDirect_names + 15, 16}, 2 },
  { {CameraLaneDirect_names + 31, 19}, 0 },
};

static const int CameraLaneDirect_entries_by_number[] = {
  2, // 0 -> LANE_DIRET_STRAIGHT
  0, // 1 -> LANE_DIRET_LEFT
  1, // 2 -> LANE_DIRET_RIGHT
};

const std::string& CameraLaneDirect_Name(
    CameraLaneDirect value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CameraLaneDirect_entries,
          CameraLaneDirect_entries_by_number,
          3, CameraLaneDirect_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CameraLaneDirect_entries,
      CameraLaneDirect_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CameraLaneDirect_strings[idx].get();
}
bool CameraLaneDirect_Parse(
    const std::string& name, CameraLaneDirect* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CameraLaneDirect_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CameraLaneDirect>(int_value);
  }
  return success;
}

// ===================================================================

void CameraLineItem::InitAsDefaultInstance() {
}
class CameraLineItem::_Internal {
 public:
};

CameraLineItem::CameraLineItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrigCamera.CameraLineItem)
}
CameraLineItem::CameraLineItem(const CameraLineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_ucameralaneid8_, &from.m_ucameralaneid8_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_fcameralanecurvature3_) -
    reinterpret_cast<char*>(&m_ucameralaneid8_)) + sizeof(m_fcameralanecurvature3_));
  // @@protoc_insertion_point(copy_constructor:OrigCamera.CameraLineItem)
}

void CameraLineItem::SharedCtor() {
  ::memset(&m_ucameralaneid8_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_fcameralanecurvature3_) -
      reinterpret_cast<char*>(&m_ucameralaneid8_)) + sizeof(m_fcameralanecurvature3_));
}

CameraLineItem::~CameraLineItem() {
  // @@protoc_insertion_point(destructor:OrigCamera.CameraLineItem)
  SharedDtor();
}

void CameraLineItem::SharedDtor() {
}

void CameraLineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraLineItem& CameraLineItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraLineItem_OrigCamera_2eproto.base);
  return *internal_default_instance();
}


void CameraLineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:OrigCamera.CameraLineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_ucameralaneid8_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_fcameralanecurvature3_) -
      reinterpret_cast<char*>(&m_ucameralaneid8_)) + sizeof(m_fcameralanecurvature3_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraLineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_uCameraLaneID8 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_ucameralaneid8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLineType m_eCameraLaneType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_m_ecameralanetype(static_cast<::OrigCamera::CameraLineType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 m_uCameraCurveRadius16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_ucameracurveradius16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double m_fCameraLaneCurvature0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          m_fcameralanecurvature0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float m_fCameraLaneHeadingAngle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m_fcameralaneheadingangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m_fCameraLaneProbOfExist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m_fcameralaneprobofexist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_m_ecameralanecurvdiret(static_cast<::OrigCamera::CameraLaneDirect>(val));
        } else goto handle_unusual;
        continue;
      // double m_fCameraLaneCurvature1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          m_fcameralanecurvature1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_fCameraLaneCurvature2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          m_fcameralanecurvature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_fCameraLaneCurvature3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          m_fcameralanecurvature3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraLineItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:OrigCamera.CameraLineItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_uCameraLaneID8 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ucameralaneid8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLineType m_eCameraLaneType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_m_ecameralanetype(static_cast< ::OrigCamera::CameraLineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_uCameraCurveRadius16 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ucameracurveradius16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_fCameraLaneCurvature0 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_fcameralanecurvature0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_fCameraLaneHeadingAngle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_fcameralaneheadingangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_fCameraLaneProbOfExist = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_fcameralaneprobofexist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_m_ecameralanecurvdiret(static_cast< ::OrigCamera::CameraLaneDirect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_fCameraLaneCurvature1 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_fcameralanecurvature1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_fCameraLaneCurvature2 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_fcameralanecurvature2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_fCameraLaneCurvature3 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_fcameralanecurvature3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrigCamera.CameraLineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrigCamera.CameraLineItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraLineItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrigCamera.CameraLineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_uCameraLaneID8 = 1;
  if (this->m_ucameralaneid8() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->m_ucameralaneid8(), output);
  }

  // .OrigCamera.CameraLineType m_eCameraLaneType = 2;
  if (this->m_ecameralanetype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->m_ecameralanetype(), output);
  }

  // uint32 m_uCameraCurveRadius16 = 3;
  if (this->m_ucameracurveradius16() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->m_ucameracurveradius16(), output);
  }

  // double m_fCameraLaneCurvature0 = 4;
  if (!(this->m_fcameralanecurvature0() <= 0 && this->m_fcameralanecurvature0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->m_fcameralanecurvature0(), output);
  }

  // float m_fCameraLaneHeadingAngle = 5;
  if (!(this->m_fcameralaneheadingangle() <= 0 && this->m_fcameralaneheadingangle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->m_fcameralaneheadingangle(), output);
  }

  // float m_fCameraLaneProbOfExist = 6;
  if (!(this->m_fcameralaneprobofexist() <= 0 && this->m_fcameralaneprobofexist() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->m_fcameralaneprobofexist(), output);
  }

  // .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
  if (this->m_ecameralanecurvdiret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->m_ecameralanecurvdiret(), output);
  }

  // double m_fCameraLaneCurvature1 = 8;
  if (!(this->m_fcameralanecurvature1() <= 0 && this->m_fcameralanecurvature1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->m_fcameralanecurvature1(), output);
  }

  // double m_fCameraLaneCurvature2 = 9;
  if (!(this->m_fcameralanecurvature2() <= 0 && this->m_fcameralanecurvature2() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->m_fcameralanecurvature2(), output);
  }

  // double m_fCameraLaneCurvature3 = 10;
  if (!(this->m_fcameralanecurvature3() <= 0 && this->m_fcameralanecurvature3() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->m_fcameralanecurvature3(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:OrigCamera.CameraLineItem)
}

size_t CameraLineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OrigCamera.CameraLineItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 m_uCameraLaneID8 = 1;
  if (this->m_ucameralaneid8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_ucameralaneid8());
  }

  // .OrigCamera.CameraLineType m_eCameraLaneType = 2;
  if (this->m_ecameralanetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->m_ecameralanetype());
  }

  // double m_fCameraLaneCurvature0 = 4;
  if (!(this->m_fcameralanecurvature0() <= 0 && this->m_fcameralanecurvature0() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 m_uCameraCurveRadius16 = 3;
  if (this->m_ucameracurveradius16() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_ucameracurveradius16());
  }

  // float m_fCameraLaneHeadingAngle = 5;
  if (!(this->m_fcameralaneheadingangle() <= 0 && this->m_fcameralaneheadingangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float m_fCameraLaneProbOfExist = 6;
  if (!(this->m_fcameralaneprobofexist() <= 0 && this->m_fcameralaneprobofexist() >= 0)) {
    total_size += 1 + 4;
  }

  // .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
  if (this->m_ecameralanecurvdiret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->m_ecameralanecurvdiret());
  }

  // double m_fCameraLaneCurvature1 = 8;
  if (!(this->m_fcameralanecurvature1() <= 0 && this->m_fcameralanecurvature1() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_fCameraLaneCurvature2 = 9;
  if (!(this->m_fcameralanecurvature2() <= 0 && this->m_fcameralanecurvature2() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_fCameraLaneCurvature3 = 10;
  if (!(this->m_fcameralanecurvature3() <= 0 && this->m_fcameralanecurvature3() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLineItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CameraLineItem*>(
      &from));
}

void CameraLineItem::MergeFrom(const CameraLineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OrigCamera.CameraLineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_ucameralaneid8() != 0) {
    set_m_ucameralaneid8(from.m_ucameralaneid8());
  }
  if (from.m_ecameralanetype() != 0) {
    set_m_ecameralanetype(from.m_ecameralanetype());
  }
  if (!(from.m_fcameralanecurvature0() <= 0 && from.m_fcameralanecurvature0() >= 0)) {
    set_m_fcameralanecurvature0(from.m_fcameralanecurvature0());
  }
  if (from.m_ucameracurveradius16() != 0) {
    set_m_ucameracurveradius16(from.m_ucameracurveradius16());
  }
  if (!(from.m_fcameralaneheadingangle() <= 0 && from.m_fcameralaneheadingangle() >= 0)) {
    set_m_fcameralaneheadingangle(from.m_fcameralaneheadingangle());
  }
  if (!(from.m_fcameralaneprobofexist() <= 0 && from.m_fcameralaneprobofexist() >= 0)) {
    set_m_fcameralaneprobofexist(from.m_fcameralaneprobofexist());
  }
  if (from.m_ecameralanecurvdiret() != 0) {
    set_m_ecameralanecurvdiret(from.m_ecameralanecurvdiret());
  }
  if (!(from.m_fcameralanecurvature1() <= 0 && from.m_fcameralanecurvature1() >= 0)) {
    set_m_fcameralanecurvature1(from.m_fcameralanecurvature1());
  }
  if (!(from.m_fcameralanecurvature2() <= 0 && from.m_fcameralanecurvature2() >= 0)) {
    set_m_fcameralanecurvature2(from.m_fcameralanecurvature2());
  }
  if (!(from.m_fcameralanecurvature3() <= 0 && from.m_fcameralanecurvature3() >= 0)) {
    set_m_fcameralanecurvature3(from.m_fcameralanecurvature3());
  }
}

void CameraLineItem::CopyFrom(const CameraLineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OrigCamera.CameraLineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLineItem::IsInitialized() const {
  return true;
}

void CameraLineItem::InternalSwap(CameraLineItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_ucameralaneid8_, other->m_ucameralaneid8_);
  swap(m_ecameralanetype_, other->m_ecameralanetype_);
  swap(m_fcameralanecurvature0_, other->m_fcameralanecurvature0_);
  swap(m_ucameracurveradius16_, other->m_ucameracurveradius16_);
  swap(m_fcameralaneheadingangle_, other->m_fcameralaneheadingangle_);
  swap(m_fcameralaneprobofexist_, other->m_fcameralaneprobofexist_);
  swap(m_ecameralanecurvdiret_, other->m_ecameralanecurvdiret_);
  swap(m_fcameralanecurvature1_, other->m_fcameralanecurvature1_);
  swap(m_fcameralanecurvature2_, other->m_fcameralanecurvature2_);
  swap(m_fcameralanecurvature3_, other->m_fcameralanecurvature3_);
}

std::string CameraLineItem::GetTypeName() const {
  return "OrigCamera.CameraLineItem";
}


// ===================================================================

void CameraLaneSection::InitAsDefaultInstance() {
  ::OrigCamera::_CameraLaneSection_default_instance_._instance.get_mutable()->m_leftlineitem_ = const_cast< ::OrigCamera::CameraLineItem*>(
      ::OrigCamera::CameraLineItem::internal_default_instance());
  ::OrigCamera::_CameraLaneSection_default_instance_._instance.get_mutable()->m_rightlineitem_ = const_cast< ::OrigCamera::CameraLineItem*>(
      ::OrigCamera::CameraLineItem::internal_default_instance());
  ::OrigCamera::_CameraLaneSection_default_instance_._instance.get_mutable()->m_leftleftlineitem_ = const_cast< ::OrigCamera::CameraLineItem*>(
      ::OrigCamera::CameraLineItem::internal_default_instance());
  ::OrigCamera::_CameraLaneSection_default_instance_._instance.get_mutable()->m_rightrightitem_ = const_cast< ::OrigCamera::CameraLineItem*>(
      ::OrigCamera::CameraLineItem::internal_default_instance());
}
class CameraLaneSection::_Internal {
 public:
  static const ::OrigCamera::CameraLineItem& m_leftlineitem(const CameraLaneSection* msg);
  static const ::OrigCamera::CameraLineItem& m_rightlineitem(const CameraLaneSection* msg);
  static const ::OrigCamera::CameraLineItem& m_leftleftlineitem(const CameraLaneSection* msg);
  static const ::OrigCamera::CameraLineItem& m_rightrightitem(const CameraLaneSection* msg);
};

const ::OrigCamera::CameraLineItem&
CameraLaneSection::_Internal::m_leftlineitem(const CameraLaneSection* msg) {
  return *msg->m_leftlineitem_;
}
const ::OrigCamera::CameraLineItem&
CameraLaneSection::_Internal::m_rightlineitem(const CameraLaneSection* msg) {
  return *msg->m_rightlineitem_;
}
const ::OrigCamera::CameraLineItem&
CameraLaneSection::_Internal::m_leftleftlineitem(const CameraLaneSection* msg) {
  return *msg->m_leftleftlineitem_;
}
const ::OrigCamera::CameraLineItem&
CameraLaneSection::_Internal::m_rightrightitem(const CameraLaneSection* msg) {
  return *msg->m_rightrightitem_;
}
CameraLaneSection::CameraLaneSection()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrigCamera.CameraLaneSection)
}
CameraLaneSection::CameraLaneSection(const CameraLaneSection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_leftlineitem()) {
    m_leftlineitem_ = new ::OrigCamera::CameraLineItem(*from.m_leftlineitem_);
  } else {
    m_leftlineitem_ = nullptr;
  }
  if (from.has_m_rightlineitem()) {
    m_rightlineitem_ = new ::OrigCamera::CameraLineItem(*from.m_rightlineitem_);
  } else {
    m_rightlineitem_ = nullptr;
  }
  if (from.has_m_leftleftlineitem()) {
    m_leftleftlineitem_ = new ::OrigCamera::CameraLineItem(*from.m_leftleftlineitem_);
  } else {
    m_leftleftlineitem_ = nullptr;
  }
  if (from.has_m_rightrightitem()) {
    m_rightrightitem_ = new ::OrigCamera::CameraLineItem(*from.m_rightrightitem_);
  } else {
    m_rightrightitem_ = nullptr;
  }
  m_utimestamp_ = from.m_utimestamp_;
  // @@protoc_insertion_point(copy_constructor:OrigCamera.CameraLaneSection)
}

void CameraLaneSection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraLaneSection_OrigCamera_2eproto.base);
  ::memset(&m_leftlineitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_utimestamp_) -
      reinterpret_cast<char*>(&m_leftlineitem_)) + sizeof(m_utimestamp_));
}

CameraLaneSection::~CameraLaneSection() {
  // @@protoc_insertion_point(destructor:OrigCamera.CameraLaneSection)
  SharedDtor();
}

void CameraLaneSection::SharedDtor() {
  if (this != internal_default_instance()) delete m_leftlineitem_;
  if (this != internal_default_instance()) delete m_rightlineitem_;
  if (this != internal_default_instance()) delete m_leftleftlineitem_;
  if (this != internal_default_instance()) delete m_rightrightitem_;
}

void CameraLaneSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraLaneSection& CameraLaneSection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraLaneSection_OrigCamera_2eproto.base);
  return *internal_default_instance();
}


void CameraLaneSection::Clear() {
// @@protoc_insertion_point(message_clear_start:OrigCamera.CameraLaneSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && m_leftlineitem_ != nullptr) {
    delete m_leftlineitem_;
  }
  m_leftlineitem_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_rightlineitem_ != nullptr) {
    delete m_rightlineitem_;
  }
  m_rightlineitem_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_leftleftlineitem_ != nullptr) {
    delete m_leftleftlineitem_;
  }
  m_leftleftlineitem_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_rightrightitem_ != nullptr) {
    delete m_rightrightitem_;
  }
  m_rightrightitem_ = nullptr;
  m_utimestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraLaneSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_uTimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_utimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLineItem m_LeftLineItem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_m_leftlineitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLineItem m_RightLineItem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_m_rightlineitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_m_leftleftlineitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OrigCamera.CameraLineItem m_RightRightItem = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_m_rightrightitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraLaneSection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:OrigCamera.CameraLaneSection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_uTimeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_utimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLineItem m_LeftLineItem = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_leftlineitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLineItem m_RightLineItem = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_rightlineitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_leftleftlineitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OrigCamera.CameraLineItem m_RightRightItem = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_rightrightitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrigCamera.CameraLaneSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrigCamera.CameraLaneSection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraLaneSection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrigCamera.CameraLaneSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_uTimeStamp = 1;
  if (this->m_utimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_utimestamp(), output);
  }

  // .OrigCamera.CameraLineItem m_LeftLineItem = 2;
  if (this->has_m_leftlineitem()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::m_leftlineitem(this), output);
  }

  // .OrigCamera.CameraLineItem m_RightLineItem = 3;
  if (this->has_m_rightlineitem()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::m_rightlineitem(this), output);
  }

  // .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
  if (this->has_m_leftleftlineitem()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::m_leftleftlineitem(this), output);
  }

  // .OrigCamera.CameraLineItem m_RightRightItem = 5;
  if (this->has_m_rightrightitem()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::m_rightrightitem(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:OrigCamera.CameraLaneSection)
}

size_t CameraLaneSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OrigCamera.CameraLaneSection)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OrigCamera.CameraLineItem m_LeftLineItem = 2;
  if (this->has_m_leftlineitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_leftlineitem_);
  }

  // .OrigCamera.CameraLineItem m_RightLineItem = 3;
  if (this->has_m_rightlineitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_rightlineitem_);
  }

  // .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
  if (this->has_m_leftleftlineitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_leftleftlineitem_);
  }

  // .OrigCamera.CameraLineItem m_RightRightItem = 5;
  if (this->has_m_rightrightitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_rightrightitem_);
  }

  // uint64 m_uTimeStamp = 1;
  if (this->m_utimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_utimestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLaneSection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CameraLaneSection*>(
      &from));
}

void CameraLaneSection::MergeFrom(const CameraLaneSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OrigCamera.CameraLaneSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_leftlineitem()) {
    mutable_m_leftlineitem()->::OrigCamera::CameraLineItem::MergeFrom(from.m_leftlineitem());
  }
  if (from.has_m_rightlineitem()) {
    mutable_m_rightlineitem()->::OrigCamera::CameraLineItem::MergeFrom(from.m_rightlineitem());
  }
  if (from.has_m_leftleftlineitem()) {
    mutable_m_leftleftlineitem()->::OrigCamera::CameraLineItem::MergeFrom(from.m_leftleftlineitem());
  }
  if (from.has_m_rightrightitem()) {
    mutable_m_rightrightitem()->::OrigCamera::CameraLineItem::MergeFrom(from.m_rightrightitem());
  }
  if (from.m_utimestamp() != 0) {
    set_m_utimestamp(from.m_utimestamp());
  }
}

void CameraLaneSection::CopyFrom(const CameraLaneSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OrigCamera.CameraLaneSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLaneSection::IsInitialized() const {
  return true;
}

void CameraLaneSection::InternalSwap(CameraLaneSection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_leftlineitem_, other->m_leftlineitem_);
  swap(m_rightlineitem_, other->m_rightlineitem_);
  swap(m_leftleftlineitem_, other->m_leftleftlineitem_);
  swap(m_rightrightitem_, other->m_rightrightitem_);
  swap(m_utimestamp_, other->m_utimestamp_);
}

std::string CameraLaneSection::GetTypeName() const {
  return "OrigCamera.CameraLaneSection";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OrigCamera
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OrigCamera::CameraLineItem* Arena::CreateMaybeMessage< ::OrigCamera::CameraLineItem >(Arena* arena) {
  return Arena::CreateInternal< ::OrigCamera::CameraLineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::OrigCamera::CameraLaneSection* Arena::CreateMaybeMessage< ::OrigCamera::CameraLaneSection >(Arena* arena) {
  return Arena::CreateInternal< ::OrigCamera::CameraLaneSection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
