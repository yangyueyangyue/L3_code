// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrigCamera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OrigCamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OrigCamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OrigCamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OrigCamera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace OrigCamera {
class CameraLaneSection;
class CameraLaneSectionDefaultTypeInternal;
extern CameraLaneSectionDefaultTypeInternal _CameraLaneSection_default_instance_;
class CameraLineItem;
class CameraLineItemDefaultTypeInternal;
extern CameraLineItemDefaultTypeInternal _CameraLineItem_default_instance_;
}  // namespace OrigCamera
PROTOBUF_NAMESPACE_OPEN
template<> ::OrigCamera::CameraLaneSection* Arena::CreateMaybeMessage<::OrigCamera::CameraLaneSection>(Arena*);
template<> ::OrigCamera::CameraLineItem* Arena::CreateMaybeMessage<::OrigCamera::CameraLineItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OrigCamera {

enum CameraLineType : int {
  BACKGROUND = 0,
  SINGLE_SOLIDWHITE = 1,
  SINGLE_DASHEDWHITE = 2,
  SINGLE_SOLIDYELLOW = 3,
  SINGLE_DASHEDYELLOW = 4,
  DOUBLE_SOLIDYELLOW = 5,
  DASHED_SOLID = 6,
  SOLID_DASHED = 7,
  DECELERATION_STRIP = 8,
  BOLD = 9,
  ROUDEDGE = 10,
  BOTT_DOTS = 11,
  BARRIER = 12,
  INVALID = 15,
  CameraLineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraLineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraLineType_IsValid(int value);
constexpr CameraLineType CameraLineType_MIN = BACKGROUND;
constexpr CameraLineType CameraLineType_MAX = INVALID;
constexpr int CameraLineType_ARRAYSIZE = CameraLineType_MAX + 1;

const std::string& CameraLineType_Name(CameraLineType value);
template<typename T>
inline const std::string& CameraLineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraLineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraLineType_Name.");
  return CameraLineType_Name(static_cast<CameraLineType>(enum_t_value));
}
bool CameraLineType_Parse(
    const std::string& name, CameraLineType* value);
enum CameraLaneDirect : int {
  LANE_DIRET_STRAIGHT = 0,
  LANE_DIRET_LEFT = 1,
  LANE_DIRET_RIGHT = 2,
  CameraLaneDirect_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraLaneDirect_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraLaneDirect_IsValid(int value);
constexpr CameraLaneDirect CameraLaneDirect_MIN = LANE_DIRET_STRAIGHT;
constexpr CameraLaneDirect CameraLaneDirect_MAX = LANE_DIRET_RIGHT;
constexpr int CameraLaneDirect_ARRAYSIZE = CameraLaneDirect_MAX + 1;

const std::string& CameraLaneDirect_Name(CameraLaneDirect value);
template<typename T>
inline const std::string& CameraLaneDirect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraLaneDirect>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraLaneDirect_Name.");
  return CameraLaneDirect_Name(static_cast<CameraLaneDirect>(enum_t_value));
}
bool CameraLaneDirect_Parse(
    const std::string& name, CameraLaneDirect* value);
// ===================================================================

class CameraLineItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:OrigCamera.CameraLineItem) */ {
 public:
  CameraLineItem();
  virtual ~CameraLineItem();

  CameraLineItem(const CameraLineItem& from);
  CameraLineItem(CameraLineItem&& from) noexcept
    : CameraLineItem() {
    *this = ::std::move(from);
  }

  inline CameraLineItem& operator=(const CameraLineItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraLineItem& operator=(CameraLineItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CameraLineItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLineItem* internal_default_instance() {
    return reinterpret_cast<const CameraLineItem*>(
               &_CameraLineItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraLineItem& a, CameraLineItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraLineItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraLineItem* New() const final {
    return CreateMaybeMessage<CameraLineItem>(nullptr);
  }

  CameraLineItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraLineItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CameraLineItem& from);
  void MergeFrom(const CameraLineItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraLineItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrigCamera.CameraLineItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUCameraLaneID8FieldNumber = 1,
    kMECameraLaneTypeFieldNumber = 2,
    kMFCameraLaneCurvature0FieldNumber = 4,
    kMUCameraCurveRadius16FieldNumber = 3,
    kMFCameraLaneHeadingAngleFieldNumber = 5,
    kMFCameraLaneProbOfExistFieldNumber = 6,
    kMECameraLaneCurvDiretFieldNumber = 7,
    kMFCameraLaneCurvature1FieldNumber = 8,
    kMFCameraLaneCurvature2FieldNumber = 9,
    kMFCameraLaneCurvature3FieldNumber = 10,
  };
  // uint32 m_uCameraLaneID8 = 1;
  void clear_m_ucameralaneid8();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_ucameralaneid8() const;
  void set_m_ucameralaneid8(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .OrigCamera.CameraLineType m_eCameraLaneType = 2;
  void clear_m_ecameralanetype();
  ::OrigCamera::CameraLineType m_ecameralanetype() const;
  void set_m_ecameralanetype(::OrigCamera::CameraLineType value);

  // double m_fCameraLaneCurvature0 = 4;
  void clear_m_fcameralanecurvature0();
  double m_fcameralanecurvature0() const;
  void set_m_fcameralanecurvature0(double value);

  // uint32 m_uCameraCurveRadius16 = 3;
  void clear_m_ucameracurveradius16();
  ::PROTOBUF_NAMESPACE_ID::uint32 m_ucameracurveradius16() const;
  void set_m_ucameracurveradius16(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float m_fCameraLaneHeadingAngle = 5;
  void clear_m_fcameralaneheadingangle();
  float m_fcameralaneheadingangle() const;
  void set_m_fcameralaneheadingangle(float value);

  // float m_fCameraLaneProbOfExist = 6;
  void clear_m_fcameralaneprobofexist();
  float m_fcameralaneprobofexist() const;
  void set_m_fcameralaneprobofexist(float value);

  // .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
  void clear_m_ecameralanecurvdiret();
  ::OrigCamera::CameraLaneDirect m_ecameralanecurvdiret() const;
  void set_m_ecameralanecurvdiret(::OrigCamera::CameraLaneDirect value);

  // double m_fCameraLaneCurvature1 = 8;
  void clear_m_fcameralanecurvature1();
  double m_fcameralanecurvature1() const;
  void set_m_fcameralanecurvature1(double value);

  // double m_fCameraLaneCurvature2 = 9;
  void clear_m_fcameralanecurvature2();
  double m_fcameralanecurvature2() const;
  void set_m_fcameralanecurvature2(double value);

  // double m_fCameraLaneCurvature3 = 10;
  void clear_m_fcameralanecurvature3();
  double m_fcameralanecurvature3() const;
  void set_m_fcameralanecurvature3(double value);

  // @@protoc_insertion_point(class_scope:OrigCamera.CameraLineItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_ucameralaneid8_;
  int m_ecameralanetype_;
  double m_fcameralanecurvature0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_ucameracurveradius16_;
  float m_fcameralaneheadingangle_;
  float m_fcameralaneprobofexist_;
  int m_ecameralanecurvdiret_;
  double m_fcameralanecurvature1_;
  double m_fcameralanecurvature2_;
  double m_fcameralanecurvature3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrigCamera_2eproto;
};
// -------------------------------------------------------------------

class CameraLaneSection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:OrigCamera.CameraLaneSection) */ {
 public:
  CameraLaneSection();
  virtual ~CameraLaneSection();

  CameraLaneSection(const CameraLaneSection& from);
  CameraLaneSection(CameraLaneSection&& from) noexcept
    : CameraLaneSection() {
    *this = ::std::move(from);
  }

  inline CameraLaneSection& operator=(const CameraLaneSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraLaneSection& operator=(CameraLaneSection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CameraLaneSection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLaneSection* internal_default_instance() {
    return reinterpret_cast<const CameraLaneSection*>(
               &_CameraLaneSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraLaneSection& a, CameraLaneSection& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraLaneSection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraLaneSection* New() const final {
    return CreateMaybeMessage<CameraLaneSection>(nullptr);
  }

  CameraLaneSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraLaneSection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CameraLaneSection& from);
  void MergeFrom(const CameraLaneSection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraLaneSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrigCamera.CameraLaneSection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLeftLineItemFieldNumber = 2,
    kMRightLineItemFieldNumber = 3,
    kMLeftLeftLineItemFieldNumber = 4,
    kMRightRightItemFieldNumber = 5,
    kMUTimeStampFieldNumber = 1,
  };
  // .OrigCamera.CameraLineItem m_LeftLineItem = 2;
  bool has_m_leftlineitem() const;
  void clear_m_leftlineitem();
  const ::OrigCamera::CameraLineItem& m_leftlineitem() const;
  ::OrigCamera::CameraLineItem* release_m_leftlineitem();
  ::OrigCamera::CameraLineItem* mutable_m_leftlineitem();
  void set_allocated_m_leftlineitem(::OrigCamera::CameraLineItem* m_leftlineitem);

  // .OrigCamera.CameraLineItem m_RightLineItem = 3;
  bool has_m_rightlineitem() const;
  void clear_m_rightlineitem();
  const ::OrigCamera::CameraLineItem& m_rightlineitem() const;
  ::OrigCamera::CameraLineItem* release_m_rightlineitem();
  ::OrigCamera::CameraLineItem* mutable_m_rightlineitem();
  void set_allocated_m_rightlineitem(::OrigCamera::CameraLineItem* m_rightlineitem);

  // .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
  bool has_m_leftleftlineitem() const;
  void clear_m_leftleftlineitem();
  const ::OrigCamera::CameraLineItem& m_leftleftlineitem() const;
  ::OrigCamera::CameraLineItem* release_m_leftleftlineitem();
  ::OrigCamera::CameraLineItem* mutable_m_leftleftlineitem();
  void set_allocated_m_leftleftlineitem(::OrigCamera::CameraLineItem* m_leftleftlineitem);

  // .OrigCamera.CameraLineItem m_RightRightItem = 5;
  bool has_m_rightrightitem() const;
  void clear_m_rightrightitem();
  const ::OrigCamera::CameraLineItem& m_rightrightitem() const;
  ::OrigCamera::CameraLineItem* release_m_rightrightitem();
  ::OrigCamera::CameraLineItem* mutable_m_rightrightitem();
  void set_allocated_m_rightrightitem(::OrigCamera::CameraLineItem* m_rightrightitem);

  // uint64 m_uTimeStamp = 1;
  void clear_m_utimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_utimestamp() const;
  void set_m_utimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:OrigCamera.CameraLaneSection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::OrigCamera::CameraLineItem* m_leftlineitem_;
  ::OrigCamera::CameraLineItem* m_rightlineitem_;
  ::OrigCamera::CameraLineItem* m_leftleftlineitem_;
  ::OrigCamera::CameraLineItem* m_rightrightitem_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_utimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrigCamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraLineItem

// uint32 m_uCameraLaneID8 = 1;
inline void CameraLineItem::clear_m_ucameralaneid8() {
  m_ucameralaneid8_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraLineItem::m_ucameralaneid8() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_uCameraLaneID8)
  return m_ucameralaneid8_;
}
inline void CameraLineItem::set_m_ucameralaneid8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_ucameralaneid8_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_uCameraLaneID8)
}

// .OrigCamera.CameraLineType m_eCameraLaneType = 2;
inline void CameraLineItem::clear_m_ecameralanetype() {
  m_ecameralanetype_ = 0;
}
inline ::OrigCamera::CameraLineType CameraLineItem::m_ecameralanetype() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_eCameraLaneType)
  return static_cast< ::OrigCamera::CameraLineType >(m_ecameralanetype_);
}
inline void CameraLineItem::set_m_ecameralanetype(::OrigCamera::CameraLineType value) {
  
  m_ecameralanetype_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_eCameraLaneType)
}

// uint32 m_uCameraCurveRadius16 = 3;
inline void CameraLineItem::clear_m_ucameracurveradius16() {
  m_ucameracurveradius16_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraLineItem::m_ucameracurveradius16() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_uCameraCurveRadius16)
  return m_ucameracurveradius16_;
}
inline void CameraLineItem::set_m_ucameracurveradius16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_ucameracurveradius16_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_uCameraCurveRadius16)
}

// double m_fCameraLaneCurvature0 = 4;
inline void CameraLineItem::clear_m_fcameralanecurvature0() {
  m_fcameralanecurvature0_ = 0;
}
inline double CameraLineItem::m_fcameralanecurvature0() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneCurvature0)
  return m_fcameralanecurvature0_;
}
inline void CameraLineItem::set_m_fcameralanecurvature0(double value) {
  
  m_fcameralanecurvature0_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneCurvature0)
}

// float m_fCameraLaneHeadingAngle = 5;
inline void CameraLineItem::clear_m_fcameralaneheadingangle() {
  m_fcameralaneheadingangle_ = 0;
}
inline float CameraLineItem::m_fcameralaneheadingangle() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneHeadingAngle)
  return m_fcameralaneheadingangle_;
}
inline void CameraLineItem::set_m_fcameralaneheadingangle(float value) {
  
  m_fcameralaneheadingangle_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneHeadingAngle)
}

// float m_fCameraLaneProbOfExist = 6;
inline void CameraLineItem::clear_m_fcameralaneprobofexist() {
  m_fcameralaneprobofexist_ = 0;
}
inline float CameraLineItem::m_fcameralaneprobofexist() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneProbOfExist)
  return m_fcameralaneprobofexist_;
}
inline void CameraLineItem::set_m_fcameralaneprobofexist(float value) {
  
  m_fcameralaneprobofexist_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneProbOfExist)
}

// .OrigCamera.CameraLaneDirect m_eCameraLaneCurvDiret = 7;
inline void CameraLineItem::clear_m_ecameralanecurvdiret() {
  m_ecameralanecurvdiret_ = 0;
}
inline ::OrigCamera::CameraLaneDirect CameraLineItem::m_ecameralanecurvdiret() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_eCameraLaneCurvDiret)
  return static_cast< ::OrigCamera::CameraLaneDirect >(m_ecameralanecurvdiret_);
}
inline void CameraLineItem::set_m_ecameralanecurvdiret(::OrigCamera::CameraLaneDirect value) {
  
  m_ecameralanecurvdiret_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_eCameraLaneCurvDiret)
}

// double m_fCameraLaneCurvature1 = 8;
inline void CameraLineItem::clear_m_fcameralanecurvature1() {
  m_fcameralanecurvature1_ = 0;
}
inline double CameraLineItem::m_fcameralanecurvature1() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneCurvature1)
  return m_fcameralanecurvature1_;
}
inline void CameraLineItem::set_m_fcameralanecurvature1(double value) {
  
  m_fcameralanecurvature1_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneCurvature1)
}

// double m_fCameraLaneCurvature2 = 9;
inline void CameraLineItem::clear_m_fcameralanecurvature2() {
  m_fcameralanecurvature2_ = 0;
}
inline double CameraLineItem::m_fcameralanecurvature2() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneCurvature2)
  return m_fcameralanecurvature2_;
}
inline void CameraLineItem::set_m_fcameralanecurvature2(double value) {
  
  m_fcameralanecurvature2_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneCurvature2)
}

// double m_fCameraLaneCurvature3 = 10;
inline void CameraLineItem::clear_m_fcameralanecurvature3() {
  m_fcameralanecurvature3_ = 0;
}
inline double CameraLineItem::m_fcameralanecurvature3() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLineItem.m_fCameraLaneCurvature3)
  return m_fcameralanecurvature3_;
}
inline void CameraLineItem::set_m_fcameralanecurvature3(double value) {
  
  m_fcameralanecurvature3_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLineItem.m_fCameraLaneCurvature3)
}

// -------------------------------------------------------------------

// CameraLaneSection

// uint64 m_uTimeStamp = 1;
inline void CameraLaneSection::clear_m_utimestamp() {
  m_utimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraLaneSection::m_utimestamp() const {
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLaneSection.m_uTimeStamp)
  return m_utimestamp_;
}
inline void CameraLaneSection::set_m_utimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_utimestamp_ = value;
  // @@protoc_insertion_point(field_set:OrigCamera.CameraLaneSection.m_uTimeStamp)
}

// .OrigCamera.CameraLineItem m_LeftLineItem = 2;
inline bool CameraLaneSection::has_m_leftlineitem() const {
  return this != internal_default_instance() && m_leftlineitem_ != nullptr;
}
inline void CameraLaneSection::clear_m_leftlineitem() {
  if (GetArenaNoVirtual() == nullptr && m_leftlineitem_ != nullptr) {
    delete m_leftlineitem_;
  }
  m_leftlineitem_ = nullptr;
}
inline const ::OrigCamera::CameraLineItem& CameraLaneSection::m_leftlineitem() const {
  const ::OrigCamera::CameraLineItem* p = m_leftlineitem_;
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLaneSection.m_LeftLineItem)
  return p != nullptr ? *p : *reinterpret_cast<const ::OrigCamera::CameraLineItem*>(
      &::OrigCamera::_CameraLineItem_default_instance_);
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::release_m_leftlineitem() {
  // @@protoc_insertion_point(field_release:OrigCamera.CameraLaneSection.m_LeftLineItem)
  
  ::OrigCamera::CameraLineItem* temp = m_leftlineitem_;
  m_leftlineitem_ = nullptr;
  return temp;
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::mutable_m_leftlineitem() {
  
  if (m_leftlineitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::OrigCamera::CameraLineItem>(GetArenaNoVirtual());
    m_leftlineitem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OrigCamera.CameraLaneSection.m_LeftLineItem)
  return m_leftlineitem_;
}
inline void CameraLaneSection::set_allocated_m_leftlineitem(::OrigCamera::CameraLineItem* m_leftlineitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_leftlineitem_;
  }
  if (m_leftlineitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_leftlineitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_leftlineitem, submessage_arena);
    }
    
  } else {
    
  }
  m_leftlineitem_ = m_leftlineitem;
  // @@protoc_insertion_point(field_set_allocated:OrigCamera.CameraLaneSection.m_LeftLineItem)
}

// .OrigCamera.CameraLineItem m_RightLineItem = 3;
inline bool CameraLaneSection::has_m_rightlineitem() const {
  return this != internal_default_instance() && m_rightlineitem_ != nullptr;
}
inline void CameraLaneSection::clear_m_rightlineitem() {
  if (GetArenaNoVirtual() == nullptr && m_rightlineitem_ != nullptr) {
    delete m_rightlineitem_;
  }
  m_rightlineitem_ = nullptr;
}
inline const ::OrigCamera::CameraLineItem& CameraLaneSection::m_rightlineitem() const {
  const ::OrigCamera::CameraLineItem* p = m_rightlineitem_;
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLaneSection.m_RightLineItem)
  return p != nullptr ? *p : *reinterpret_cast<const ::OrigCamera::CameraLineItem*>(
      &::OrigCamera::_CameraLineItem_default_instance_);
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::release_m_rightlineitem() {
  // @@protoc_insertion_point(field_release:OrigCamera.CameraLaneSection.m_RightLineItem)
  
  ::OrigCamera::CameraLineItem* temp = m_rightlineitem_;
  m_rightlineitem_ = nullptr;
  return temp;
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::mutable_m_rightlineitem() {
  
  if (m_rightlineitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::OrigCamera::CameraLineItem>(GetArenaNoVirtual());
    m_rightlineitem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OrigCamera.CameraLaneSection.m_RightLineItem)
  return m_rightlineitem_;
}
inline void CameraLaneSection::set_allocated_m_rightlineitem(::OrigCamera::CameraLineItem* m_rightlineitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_rightlineitem_;
  }
  if (m_rightlineitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_rightlineitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_rightlineitem, submessage_arena);
    }
    
  } else {
    
  }
  m_rightlineitem_ = m_rightlineitem;
  // @@protoc_insertion_point(field_set_allocated:OrigCamera.CameraLaneSection.m_RightLineItem)
}

// .OrigCamera.CameraLineItem m_LeftLeftLineItem = 4;
inline bool CameraLaneSection::has_m_leftleftlineitem() const {
  return this != internal_default_instance() && m_leftleftlineitem_ != nullptr;
}
inline void CameraLaneSection::clear_m_leftleftlineitem() {
  if (GetArenaNoVirtual() == nullptr && m_leftleftlineitem_ != nullptr) {
    delete m_leftleftlineitem_;
  }
  m_leftleftlineitem_ = nullptr;
}
inline const ::OrigCamera::CameraLineItem& CameraLaneSection::m_leftleftlineitem() const {
  const ::OrigCamera::CameraLineItem* p = m_leftleftlineitem_;
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLaneSection.m_LeftLeftLineItem)
  return p != nullptr ? *p : *reinterpret_cast<const ::OrigCamera::CameraLineItem*>(
      &::OrigCamera::_CameraLineItem_default_instance_);
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::release_m_leftleftlineitem() {
  // @@protoc_insertion_point(field_release:OrigCamera.CameraLaneSection.m_LeftLeftLineItem)
  
  ::OrigCamera::CameraLineItem* temp = m_leftleftlineitem_;
  m_leftleftlineitem_ = nullptr;
  return temp;
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::mutable_m_leftleftlineitem() {
  
  if (m_leftleftlineitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::OrigCamera::CameraLineItem>(GetArenaNoVirtual());
    m_leftleftlineitem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OrigCamera.CameraLaneSection.m_LeftLeftLineItem)
  return m_leftleftlineitem_;
}
inline void CameraLaneSection::set_allocated_m_leftleftlineitem(::OrigCamera::CameraLineItem* m_leftleftlineitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_leftleftlineitem_;
  }
  if (m_leftleftlineitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_leftleftlineitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_leftleftlineitem, submessage_arena);
    }
    
  } else {
    
  }
  m_leftleftlineitem_ = m_leftleftlineitem;
  // @@protoc_insertion_point(field_set_allocated:OrigCamera.CameraLaneSection.m_LeftLeftLineItem)
}

// .OrigCamera.CameraLineItem m_RightRightItem = 5;
inline bool CameraLaneSection::has_m_rightrightitem() const {
  return this != internal_default_instance() && m_rightrightitem_ != nullptr;
}
inline void CameraLaneSection::clear_m_rightrightitem() {
  if (GetArenaNoVirtual() == nullptr && m_rightrightitem_ != nullptr) {
    delete m_rightrightitem_;
  }
  m_rightrightitem_ = nullptr;
}
inline const ::OrigCamera::CameraLineItem& CameraLaneSection::m_rightrightitem() const {
  const ::OrigCamera::CameraLineItem* p = m_rightrightitem_;
  // @@protoc_insertion_point(field_get:OrigCamera.CameraLaneSection.m_RightRightItem)
  return p != nullptr ? *p : *reinterpret_cast<const ::OrigCamera::CameraLineItem*>(
      &::OrigCamera::_CameraLineItem_default_instance_);
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::release_m_rightrightitem() {
  // @@protoc_insertion_point(field_release:OrigCamera.CameraLaneSection.m_RightRightItem)
  
  ::OrigCamera::CameraLineItem* temp = m_rightrightitem_;
  m_rightrightitem_ = nullptr;
  return temp;
}
inline ::OrigCamera::CameraLineItem* CameraLaneSection::mutable_m_rightrightitem() {
  
  if (m_rightrightitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::OrigCamera::CameraLineItem>(GetArenaNoVirtual());
    m_rightrightitem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:OrigCamera.CameraLaneSection.m_RightRightItem)
  return m_rightrightitem_;
}
inline void CameraLaneSection::set_allocated_m_rightrightitem(::OrigCamera::CameraLineItem* m_rightrightitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_rightrightitem_;
  }
  if (m_rightrightitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_rightrightitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_rightrightitem, submessage_arena);
    }
    
  } else {
    
  }
  m_rightrightitem_ = m_rightrightitem;
  // @@protoc_insertion_point(field_set_allocated:OrigCamera.CameraLaneSection.m_RightRightItem)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OrigCamera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OrigCamera::CameraLineType> : ::std::true_type {};
template <> struct is_proto_enum< ::OrigCamera::CameraLaneDirect> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OrigCamera_2eproto
