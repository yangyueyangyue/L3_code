// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CorrectPosition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CorrectPosition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CorrectPosition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CorrectPosition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CorrectPosition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace CorrectPosition {
class CorrectPosition;
class CorrectPositionDefaultTypeInternal;
extern CorrectPositionDefaultTypeInternal _CorrectPosition_default_instance_;
class DatumPosition;
class DatumPositionDefaultTypeInternal;
extern DatumPositionDefaultTypeInternal _DatumPosition_default_instance_;
class WGS84;
class WGS84DefaultTypeInternal;
extern WGS84DefaultTypeInternal _WGS84_default_instance_;
}  // namespace CorrectPosition
PROTOBUF_NAMESPACE_OPEN
template<> ::CorrectPosition::CorrectPosition* Arena::CreateMaybeMessage<::CorrectPosition::CorrectPosition>(Arena*);
template<> ::CorrectPosition::DatumPosition* Arena::CreateMaybeMessage<::CorrectPosition::DatumPosition>(Arena*);
template<> ::CorrectPosition::WGS84* Arena::CreateMaybeMessage<::CorrectPosition::WGS84>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CorrectPosition {

// ===================================================================

class WGS84 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CorrectPosition.WGS84) */ {
 public:
  WGS84();
  virtual ~WGS84();

  WGS84(const WGS84& from);
  WGS84(WGS84&& from) noexcept
    : WGS84() {
    *this = ::std::move(from);
  }

  inline WGS84& operator=(const WGS84& from) {
    CopyFrom(from);
    return *this;
  }
  inline WGS84& operator=(WGS84&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WGS84& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WGS84* internal_default_instance() {
    return reinterpret_cast<const WGS84*>(
               &_WGS84_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WGS84& a, WGS84& b) {
    a.Swap(&b);
  }
  inline void Swap(WGS84* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WGS84* New() const final {
    return CreateMaybeMessage<WGS84>(nullptr);
  }

  WGS84* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WGS84>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WGS84& from);
  void MergeFrom(const WGS84& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WGS84* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CorrectPosition.WGS84";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kHeadingFieldNumber = 4,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);

  // float heading = 4;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // @@protoc_insertion_point(class_scope:CorrectPosition.WGS84)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  float heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CorrectPosition_2eproto;
};
// -------------------------------------------------------------------

class DatumPosition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CorrectPosition.DatumPosition) */ {
 public:
  DatumPosition();
  virtual ~DatumPosition();

  DatumPosition(const DatumPosition& from);
  DatumPosition(DatumPosition&& from) noexcept
    : DatumPosition() {
    *this = ::std::move(from);
  }

  inline DatumPosition& operator=(const DatumPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatumPosition& operator=(DatumPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DatumPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatumPosition* internal_default_instance() {
    return reinterpret_cast<const DatumPosition*>(
               &_DatumPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DatumPosition& a, DatumPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(DatumPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatumPosition* New() const final {
    return CreateMaybeMessage<DatumPosition>(nullptr);
  }

  DatumPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatumPosition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DatumPosition& from);
  void MergeFrom(const DatumPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatumPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CorrectPosition.DatumPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMDatumpositionFieldNumber = 2,
    kMDatumTimestampFieldNumber = 1,
    kMDatumcorrectFieldNumber = 3,
  };
  // .CorrectPosition.WGS84 m_datumposition = 2;
  bool has_m_datumposition() const;
  void clear_m_datumposition();
  const ::CorrectPosition::WGS84& m_datumposition() const;
  ::CorrectPosition::WGS84* release_m_datumposition();
  ::CorrectPosition::WGS84* mutable_m_datumposition();
  void set_allocated_m_datumposition(::CorrectPosition::WGS84* m_datumposition);

  // uint64 m_datumTimestamp = 1;
  void clear_m_datumtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumtimestamp() const;
  void set_m_datumtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool m_datumcorrect = 3;
  void clear_m_datumcorrect();
  bool m_datumcorrect() const;
  void set_m_datumcorrect(bool value);

  // @@protoc_insertion_point(class_scope:CorrectPosition.DatumPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::CorrectPosition::WGS84* m_datumposition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumtimestamp_;
  bool m_datumcorrect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CorrectPosition_2eproto;
};
// -------------------------------------------------------------------

class CorrectPosition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CorrectPosition.CorrectPosition) */ {
 public:
  CorrectPosition();
  virtual ~CorrectPosition();

  CorrectPosition(const CorrectPosition& from);
  CorrectPosition(CorrectPosition&& from) noexcept
    : CorrectPosition() {
    *this = ::std::move(from);
  }

  inline CorrectPosition& operator=(const CorrectPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrectPosition& operator=(CorrectPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CorrectPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CorrectPosition* internal_default_instance() {
    return reinterpret_cast<const CorrectPosition*>(
               &_CorrectPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CorrectPosition& a, CorrectPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CorrectPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CorrectPosition* New() const final {
    return CreateMaybeMessage<CorrectPosition>(nullptr);
  }

  CorrectPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CorrectPosition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CorrectPosition& from);
  void MergeFrom(const CorrectPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CorrectPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CorrectPosition.CorrectPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMDatumPositionFieldNumber = 3,
    kMVehiclePositionFieldNumber = 4,
    kMCorrectPositionFieldNumber = 5,
    kMSpeedPositionFieldNumber = 6,
    kMTimestampFieldNumber = 1,
    kMDatumTimestampFieldNumber = 2,
  };
  // .CorrectPosition.DatumPosition m_datumPosition = 3;
  bool has_m_datumposition() const;
  void clear_m_datumposition();
  const ::CorrectPosition::DatumPosition& m_datumposition() const;
  ::CorrectPosition::DatumPosition* release_m_datumposition();
  ::CorrectPosition::DatumPosition* mutable_m_datumposition();
  void set_allocated_m_datumposition(::CorrectPosition::DatumPosition* m_datumposition);

  // .CorrectPosition.WGS84 m_VehiclePosition = 4;
  bool has_m_vehicleposition() const;
  void clear_m_vehicleposition();
  const ::CorrectPosition::WGS84& m_vehicleposition() const;
  ::CorrectPosition::WGS84* release_m_vehicleposition();
  ::CorrectPosition::WGS84* mutable_m_vehicleposition();
  void set_allocated_m_vehicleposition(::CorrectPosition::WGS84* m_vehicleposition);

  // .CorrectPosition.WGS84 m_CorrectPosition = 5;
  bool has_m_correctposition() const;
  void clear_m_correctposition();
  const ::CorrectPosition::WGS84& m_correctposition() const;
  ::CorrectPosition::WGS84* release_m_correctposition();
  ::CorrectPosition::WGS84* mutable_m_correctposition();
  void set_allocated_m_correctposition(::CorrectPosition::WGS84* m_correctposition);

  // .CorrectPosition.WGS84 m_SpeedPosition = 6;
  bool has_m_speedposition() const;
  void clear_m_speedposition();
  const ::CorrectPosition::WGS84& m_speedposition() const;
  ::CorrectPosition::WGS84* release_m_speedposition();
  ::CorrectPosition::WGS84* mutable_m_speedposition();
  void set_allocated_m_speedposition(::CorrectPosition::WGS84* m_speedposition);

  // uint64 m_Timestamp = 1;
  void clear_m_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp() const;
  void set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 m_datumTimestamp = 2;
  void clear_m_datumtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumtimestamp() const;
  void set_m_datumtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:CorrectPosition.CorrectPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::CorrectPosition::DatumPosition* m_datumposition_;
  ::CorrectPosition::WGS84* m_vehicleposition_;
  ::CorrectPosition::WGS84* m_correctposition_;
  ::CorrectPosition::WGS84* m_speedposition_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_datumtimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CorrectPosition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WGS84

// double longitude = 1;
inline void WGS84::clear_longitude() {
  longitude_ = 0;
}
inline double WGS84::longitude() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.WGS84.longitude)
  return longitude_;
}
inline void WGS84::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.WGS84.longitude)
}

// double latitude = 2;
inline void WGS84::clear_latitude() {
  latitude_ = 0;
}
inline double WGS84::latitude() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.WGS84.latitude)
  return latitude_;
}
inline void WGS84::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.WGS84.latitude)
}

// double altitude = 3;
inline void WGS84::clear_altitude() {
  altitude_ = 0;
}
inline double WGS84::altitude() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.WGS84.altitude)
  return altitude_;
}
inline void WGS84::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.WGS84.altitude)
}

// float heading = 4;
inline void WGS84::clear_heading() {
  heading_ = 0;
}
inline float WGS84::heading() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.WGS84.heading)
  return heading_;
}
inline void WGS84::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.WGS84.heading)
}

// -------------------------------------------------------------------

// DatumPosition

// uint64 m_datumTimestamp = 1;
inline void DatumPosition::clear_m_datumtimestamp() {
  m_datumtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DatumPosition::m_datumtimestamp() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.DatumPosition.m_datumTimestamp)
  return m_datumtimestamp_;
}
inline void DatumPosition::set_m_datumtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_datumtimestamp_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.DatumPosition.m_datumTimestamp)
}

// .CorrectPosition.WGS84 m_datumposition = 2;
inline bool DatumPosition::has_m_datumposition() const {
  return this != internal_default_instance() && m_datumposition_ != nullptr;
}
inline void DatumPosition::clear_m_datumposition() {
  if (GetArenaNoVirtual() == nullptr && m_datumposition_ != nullptr) {
    delete m_datumposition_;
  }
  m_datumposition_ = nullptr;
}
inline const ::CorrectPosition::WGS84& DatumPosition::m_datumposition() const {
  const ::CorrectPosition::WGS84* p = m_datumposition_;
  // @@protoc_insertion_point(field_get:CorrectPosition.DatumPosition.m_datumposition)
  return p != nullptr ? *p : *reinterpret_cast<const ::CorrectPosition::WGS84*>(
      &::CorrectPosition::_WGS84_default_instance_);
}
inline ::CorrectPosition::WGS84* DatumPosition::release_m_datumposition() {
  // @@protoc_insertion_point(field_release:CorrectPosition.DatumPosition.m_datumposition)
  
  ::CorrectPosition::WGS84* temp = m_datumposition_;
  m_datumposition_ = nullptr;
  return temp;
}
inline ::CorrectPosition::WGS84* DatumPosition::mutable_m_datumposition() {
  
  if (m_datumposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CorrectPosition::WGS84>(GetArenaNoVirtual());
    m_datumposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CorrectPosition.DatumPosition.m_datumposition)
  return m_datumposition_;
}
inline void DatumPosition::set_allocated_m_datumposition(::CorrectPosition::WGS84* m_datumposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_datumposition_;
  }
  if (m_datumposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_datumposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_datumposition, submessage_arena);
    }
    
  } else {
    
  }
  m_datumposition_ = m_datumposition;
  // @@protoc_insertion_point(field_set_allocated:CorrectPosition.DatumPosition.m_datumposition)
}

// bool m_datumcorrect = 3;
inline void DatumPosition::clear_m_datumcorrect() {
  m_datumcorrect_ = false;
}
inline bool DatumPosition::m_datumcorrect() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.DatumPosition.m_datumcorrect)
  return m_datumcorrect_;
}
inline void DatumPosition::set_m_datumcorrect(bool value) {
  
  m_datumcorrect_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.DatumPosition.m_datumcorrect)
}

// -------------------------------------------------------------------

// CorrectPosition

// uint64 m_Timestamp = 1;
inline void CorrectPosition::clear_m_timestamp() {
  m_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CorrectPosition::m_timestamp() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_Timestamp)
  return m_timestamp_;
}
inline void CorrectPosition::set_m_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.CorrectPosition.m_Timestamp)
}

// uint64 m_datumTimestamp = 2;
inline void CorrectPosition::clear_m_datumtimestamp() {
  m_datumtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CorrectPosition::m_datumtimestamp() const {
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_datumTimestamp)
  return m_datumtimestamp_;
}
inline void CorrectPosition::set_m_datumtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_datumtimestamp_ = value;
  // @@protoc_insertion_point(field_set:CorrectPosition.CorrectPosition.m_datumTimestamp)
}

// .CorrectPosition.DatumPosition m_datumPosition = 3;
inline bool CorrectPosition::has_m_datumposition() const {
  return this != internal_default_instance() && m_datumposition_ != nullptr;
}
inline void CorrectPosition::clear_m_datumposition() {
  if (GetArenaNoVirtual() == nullptr && m_datumposition_ != nullptr) {
    delete m_datumposition_;
  }
  m_datumposition_ = nullptr;
}
inline const ::CorrectPosition::DatumPosition& CorrectPosition::m_datumposition() const {
  const ::CorrectPosition::DatumPosition* p = m_datumposition_;
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_datumPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::CorrectPosition::DatumPosition*>(
      &::CorrectPosition::_DatumPosition_default_instance_);
}
inline ::CorrectPosition::DatumPosition* CorrectPosition::release_m_datumposition() {
  // @@protoc_insertion_point(field_release:CorrectPosition.CorrectPosition.m_datumPosition)
  
  ::CorrectPosition::DatumPosition* temp = m_datumposition_;
  m_datumposition_ = nullptr;
  return temp;
}
inline ::CorrectPosition::DatumPosition* CorrectPosition::mutable_m_datumposition() {
  
  if (m_datumposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CorrectPosition::DatumPosition>(GetArenaNoVirtual());
    m_datumposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CorrectPosition.CorrectPosition.m_datumPosition)
  return m_datumposition_;
}
inline void CorrectPosition::set_allocated_m_datumposition(::CorrectPosition::DatumPosition* m_datumposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_datumposition_;
  }
  if (m_datumposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_datumposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_datumposition, submessage_arena);
    }
    
  } else {
    
  }
  m_datumposition_ = m_datumposition;
  // @@protoc_insertion_point(field_set_allocated:CorrectPosition.CorrectPosition.m_datumPosition)
}

// .CorrectPosition.WGS84 m_VehiclePosition = 4;
inline bool CorrectPosition::has_m_vehicleposition() const {
  return this != internal_default_instance() && m_vehicleposition_ != nullptr;
}
inline void CorrectPosition::clear_m_vehicleposition() {
  if (GetArenaNoVirtual() == nullptr && m_vehicleposition_ != nullptr) {
    delete m_vehicleposition_;
  }
  m_vehicleposition_ = nullptr;
}
inline const ::CorrectPosition::WGS84& CorrectPosition::m_vehicleposition() const {
  const ::CorrectPosition::WGS84* p = m_vehicleposition_;
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_VehiclePosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::CorrectPosition::WGS84*>(
      &::CorrectPosition::_WGS84_default_instance_);
}
inline ::CorrectPosition::WGS84* CorrectPosition::release_m_vehicleposition() {
  // @@protoc_insertion_point(field_release:CorrectPosition.CorrectPosition.m_VehiclePosition)
  
  ::CorrectPosition::WGS84* temp = m_vehicleposition_;
  m_vehicleposition_ = nullptr;
  return temp;
}
inline ::CorrectPosition::WGS84* CorrectPosition::mutable_m_vehicleposition() {
  
  if (m_vehicleposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CorrectPosition::WGS84>(GetArenaNoVirtual());
    m_vehicleposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CorrectPosition.CorrectPosition.m_VehiclePosition)
  return m_vehicleposition_;
}
inline void CorrectPosition::set_allocated_m_vehicleposition(::CorrectPosition::WGS84* m_vehicleposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_vehicleposition_;
  }
  if (m_vehicleposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_vehicleposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_vehicleposition, submessage_arena);
    }
    
  } else {
    
  }
  m_vehicleposition_ = m_vehicleposition;
  // @@protoc_insertion_point(field_set_allocated:CorrectPosition.CorrectPosition.m_VehiclePosition)
}

// .CorrectPosition.WGS84 m_CorrectPosition = 5;
inline bool CorrectPosition::has_m_correctposition() const {
  return this != internal_default_instance() && m_correctposition_ != nullptr;
}
inline void CorrectPosition::clear_m_correctposition() {
  if (GetArenaNoVirtual() == nullptr && m_correctposition_ != nullptr) {
    delete m_correctposition_;
  }
  m_correctposition_ = nullptr;
}
inline const ::CorrectPosition::WGS84& CorrectPosition::m_correctposition() const {
  const ::CorrectPosition::WGS84* p = m_correctposition_;
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_CorrectPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::CorrectPosition::WGS84*>(
      &::CorrectPosition::_WGS84_default_instance_);
}
inline ::CorrectPosition::WGS84* CorrectPosition::release_m_correctposition() {
  // @@protoc_insertion_point(field_release:CorrectPosition.CorrectPosition.m_CorrectPosition)
  
  ::CorrectPosition::WGS84* temp = m_correctposition_;
  m_correctposition_ = nullptr;
  return temp;
}
inline ::CorrectPosition::WGS84* CorrectPosition::mutable_m_correctposition() {
  
  if (m_correctposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CorrectPosition::WGS84>(GetArenaNoVirtual());
    m_correctposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CorrectPosition.CorrectPosition.m_CorrectPosition)
  return m_correctposition_;
}
inline void CorrectPosition::set_allocated_m_correctposition(::CorrectPosition::WGS84* m_correctposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_correctposition_;
  }
  if (m_correctposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_correctposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_correctposition, submessage_arena);
    }
    
  } else {
    
  }
  m_correctposition_ = m_correctposition;
  // @@protoc_insertion_point(field_set_allocated:CorrectPosition.CorrectPosition.m_CorrectPosition)
}

// .CorrectPosition.WGS84 m_SpeedPosition = 6;
inline bool CorrectPosition::has_m_speedposition() const {
  return this != internal_default_instance() && m_speedposition_ != nullptr;
}
inline void CorrectPosition::clear_m_speedposition() {
  if (GetArenaNoVirtual() == nullptr && m_speedposition_ != nullptr) {
    delete m_speedposition_;
  }
  m_speedposition_ = nullptr;
}
inline const ::CorrectPosition::WGS84& CorrectPosition::m_speedposition() const {
  const ::CorrectPosition::WGS84* p = m_speedposition_;
  // @@protoc_insertion_point(field_get:CorrectPosition.CorrectPosition.m_SpeedPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::CorrectPosition::WGS84*>(
      &::CorrectPosition::_WGS84_default_instance_);
}
inline ::CorrectPosition::WGS84* CorrectPosition::release_m_speedposition() {
  // @@protoc_insertion_point(field_release:CorrectPosition.CorrectPosition.m_SpeedPosition)
  
  ::CorrectPosition::WGS84* temp = m_speedposition_;
  m_speedposition_ = nullptr;
  return temp;
}
inline ::CorrectPosition::WGS84* CorrectPosition::mutable_m_speedposition() {
  
  if (m_speedposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::CorrectPosition::WGS84>(GetArenaNoVirtual());
    m_speedposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CorrectPosition.CorrectPosition.m_SpeedPosition)
  return m_speedposition_;
}
inline void CorrectPosition::set_allocated_m_speedposition(::CorrectPosition::WGS84* m_speedposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete m_speedposition_;
  }
  if (m_speedposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      m_speedposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_speedposition, submessage_arena);
    }
    
  } else {
    
  }
  m_speedposition_ = m_speedposition;
  // @@protoc_insertion_point(field_set_allocated:CorrectPosition.CorrectPosition.m_SpeedPosition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CorrectPosition

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CorrectPosition_2eproto
