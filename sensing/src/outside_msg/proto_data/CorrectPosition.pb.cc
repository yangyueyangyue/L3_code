// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CorrectPosition.proto

#include "CorrectPosition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CorrectPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatumPosition_CorrectPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CorrectPosition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WGS84_CorrectPosition_2eproto;
namespace CorrectPosition {
class WGS84DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WGS84> _instance;
} _WGS84_default_instance_;
class DatumPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatumPosition> _instance;
} _DatumPosition_default_instance_;
class CorrectPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CorrectPosition> _instance;
} _CorrectPosition_default_instance_;
}  // namespace CorrectPosition
static void InitDefaultsscc_info_CorrectPosition_CorrectPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CorrectPosition::_CorrectPosition_default_instance_;
    new (ptr) ::CorrectPosition::CorrectPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CorrectPosition::CorrectPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CorrectPosition_CorrectPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CorrectPosition_CorrectPosition_2eproto}, {
      &scc_info_DatumPosition_CorrectPosition_2eproto.base,
      &scc_info_WGS84_CorrectPosition_2eproto.base,}};

static void InitDefaultsscc_info_DatumPosition_CorrectPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CorrectPosition::_DatumPosition_default_instance_;
    new (ptr) ::CorrectPosition::DatumPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CorrectPosition::DatumPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatumPosition_CorrectPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DatumPosition_CorrectPosition_2eproto}, {
      &scc_info_WGS84_CorrectPosition_2eproto.base,}};

static void InitDefaultsscc_info_WGS84_CorrectPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CorrectPosition::_WGS84_default_instance_;
    new (ptr) ::CorrectPosition::WGS84();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CorrectPosition::WGS84::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WGS84_CorrectPosition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WGS84_CorrectPosition_2eproto}, {}};

namespace CorrectPosition {

// ===================================================================

void WGS84::InitAsDefaultInstance() {
}
class WGS84::_Internal {
 public:
};

WGS84::WGS84()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CorrectPosition.WGS84)
}
WGS84::WGS84(const WGS84& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:CorrectPosition.WGS84)
}

void WGS84::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(heading_));
}

WGS84::~WGS84() {
  // @@protoc_insertion_point(destructor:CorrectPosition.WGS84)
  SharedDtor();
}

void WGS84::SharedDtor() {
}

void WGS84::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WGS84& WGS84::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WGS84_CorrectPosition_2eproto.base);
  return *internal_default_instance();
}


void WGS84::Clear() {
// @@protoc_insertion_point(message_clear_start:CorrectPosition.WGS84)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(heading_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WGS84::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WGS84::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CorrectPosition.WGS84)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CorrectPosition.WGS84)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CorrectPosition.WGS84)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WGS84::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CorrectPosition.WGS84)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->heading(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CorrectPosition.WGS84)
}

size_t WGS84::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CorrectPosition.WGS84)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WGS84::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WGS84*>(
      &from));
}

void WGS84::MergeFrom(const WGS84& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CorrectPosition.WGS84)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    set_altitude(from.altitude());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
}

void WGS84::CopyFrom(const WGS84& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CorrectPosition.WGS84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGS84::IsInitialized() const {
  return true;
}

void WGS84::InternalSwap(WGS84* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
}

std::string WGS84::GetTypeName() const {
  return "CorrectPosition.WGS84";
}


// ===================================================================

void DatumPosition::InitAsDefaultInstance() {
  ::CorrectPosition::_DatumPosition_default_instance_._instance.get_mutable()->m_datumposition_ = const_cast< ::CorrectPosition::WGS84*>(
      ::CorrectPosition::WGS84::internal_default_instance());
}
class DatumPosition::_Internal {
 public:
  static const ::CorrectPosition::WGS84& m_datumposition(const DatumPosition* msg);
};

const ::CorrectPosition::WGS84&
DatumPosition::_Internal::m_datumposition(const DatumPosition* msg) {
  return *msg->m_datumposition_;
}
DatumPosition::DatumPosition()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CorrectPosition.DatumPosition)
}
DatumPosition::DatumPosition(const DatumPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_datumposition()) {
    m_datumposition_ = new ::CorrectPosition::WGS84(*from.m_datumposition_);
  } else {
    m_datumposition_ = nullptr;
  }
  ::memcpy(&m_datumtimestamp_, &from.m_datumtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_datumcorrect_) -
    reinterpret_cast<char*>(&m_datumtimestamp_)) + sizeof(m_datumcorrect_));
  // @@protoc_insertion_point(copy_constructor:CorrectPosition.DatumPosition)
}

void DatumPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatumPosition_CorrectPosition_2eproto.base);
  ::memset(&m_datumposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_datumcorrect_) -
      reinterpret_cast<char*>(&m_datumposition_)) + sizeof(m_datumcorrect_));
}

DatumPosition::~DatumPosition() {
  // @@protoc_insertion_point(destructor:CorrectPosition.DatumPosition)
  SharedDtor();
}

void DatumPosition::SharedDtor() {
  if (this != internal_default_instance()) delete m_datumposition_;
}

void DatumPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatumPosition& DatumPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatumPosition_CorrectPosition_2eproto.base);
  return *internal_default_instance();
}


void DatumPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CorrectPosition.DatumPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && m_datumposition_ != nullptr) {
    delete m_datumposition_;
  }
  m_datumposition_ = nullptr;
  ::memset(&m_datumtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_datumcorrect_) -
      reinterpret_cast<char*>(&m_datumtimestamp_)) + sizeof(m_datumcorrect_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatumPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_datumTimestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_datumtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CorrectPosition.WGS84 m_datumposition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_m_datumposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_datumcorrect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_datumcorrect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatumPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CorrectPosition.DatumPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_datumTimestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_datumtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CorrectPosition.WGS84 m_datumposition = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_datumposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool m_datumcorrect = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_datumcorrect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CorrectPosition.DatumPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CorrectPosition.DatumPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatumPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CorrectPosition.DatumPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_datumTimestamp = 1;
  if (this->m_datumtimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_datumtimestamp(), output);
  }

  // .CorrectPosition.WGS84 m_datumposition = 2;
  if (this->has_m_datumposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::m_datumposition(this), output);
  }

  // bool m_datumcorrect = 3;
  if (this->m_datumcorrect() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->m_datumcorrect(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CorrectPosition.DatumPosition)
}

size_t DatumPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CorrectPosition.DatumPosition)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CorrectPosition.WGS84 m_datumposition = 2;
  if (this->has_m_datumposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_datumposition_);
  }

  // uint64 m_datumTimestamp = 1;
  if (this->m_datumtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_datumtimestamp());
  }

  // bool m_datumcorrect = 3;
  if (this->m_datumcorrect() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatumPosition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatumPosition*>(
      &from));
}

void DatumPosition::MergeFrom(const DatumPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CorrectPosition.DatumPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_datumposition()) {
    mutable_m_datumposition()->::CorrectPosition::WGS84::MergeFrom(from.m_datumposition());
  }
  if (from.m_datumtimestamp() != 0) {
    set_m_datumtimestamp(from.m_datumtimestamp());
  }
  if (from.m_datumcorrect() != 0) {
    set_m_datumcorrect(from.m_datumcorrect());
  }
}

void DatumPosition::CopyFrom(const DatumPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CorrectPosition.DatumPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatumPosition::IsInitialized() const {
  return true;
}

void DatumPosition::InternalSwap(DatumPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_datumposition_, other->m_datumposition_);
  swap(m_datumtimestamp_, other->m_datumtimestamp_);
  swap(m_datumcorrect_, other->m_datumcorrect_);
}

std::string DatumPosition::GetTypeName() const {
  return "CorrectPosition.DatumPosition";
}


// ===================================================================

void CorrectPosition::InitAsDefaultInstance() {
  ::CorrectPosition::_CorrectPosition_default_instance_._instance.get_mutable()->m_datumposition_ = const_cast< ::CorrectPosition::DatumPosition*>(
      ::CorrectPosition::DatumPosition::internal_default_instance());
  ::CorrectPosition::_CorrectPosition_default_instance_._instance.get_mutable()->m_vehicleposition_ = const_cast< ::CorrectPosition::WGS84*>(
      ::CorrectPosition::WGS84::internal_default_instance());
  ::CorrectPosition::_CorrectPosition_default_instance_._instance.get_mutable()->m_correctposition_ = const_cast< ::CorrectPosition::WGS84*>(
      ::CorrectPosition::WGS84::internal_default_instance());
  ::CorrectPosition::_CorrectPosition_default_instance_._instance.get_mutable()->m_speedposition_ = const_cast< ::CorrectPosition::WGS84*>(
      ::CorrectPosition::WGS84::internal_default_instance());
}
class CorrectPosition::_Internal {
 public:
  static const ::CorrectPosition::DatumPosition& m_datumposition(const CorrectPosition* msg);
  static const ::CorrectPosition::WGS84& m_vehicleposition(const CorrectPosition* msg);
  static const ::CorrectPosition::WGS84& m_correctposition(const CorrectPosition* msg);
  static const ::CorrectPosition::WGS84& m_speedposition(const CorrectPosition* msg);
};

const ::CorrectPosition::DatumPosition&
CorrectPosition::_Internal::m_datumposition(const CorrectPosition* msg) {
  return *msg->m_datumposition_;
}
const ::CorrectPosition::WGS84&
CorrectPosition::_Internal::m_vehicleposition(const CorrectPosition* msg) {
  return *msg->m_vehicleposition_;
}
const ::CorrectPosition::WGS84&
CorrectPosition::_Internal::m_correctposition(const CorrectPosition* msg) {
  return *msg->m_correctposition_;
}
const ::CorrectPosition::WGS84&
CorrectPosition::_Internal::m_speedposition(const CorrectPosition* msg) {
  return *msg->m_speedposition_;
}
CorrectPosition::CorrectPosition()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CorrectPosition.CorrectPosition)
}
CorrectPosition::CorrectPosition(const CorrectPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_datumposition()) {
    m_datumposition_ = new ::CorrectPosition::DatumPosition(*from.m_datumposition_);
  } else {
    m_datumposition_ = nullptr;
  }
  if (from.has_m_vehicleposition()) {
    m_vehicleposition_ = new ::CorrectPosition::WGS84(*from.m_vehicleposition_);
  } else {
    m_vehicleposition_ = nullptr;
  }
  if (from.has_m_correctposition()) {
    m_correctposition_ = new ::CorrectPosition::WGS84(*from.m_correctposition_);
  } else {
    m_correctposition_ = nullptr;
  }
  if (from.has_m_speedposition()) {
    m_speedposition_ = new ::CorrectPosition::WGS84(*from.m_speedposition_);
  } else {
    m_speedposition_ = nullptr;
  }
  ::memcpy(&m_timestamp_, &from.m_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_datumtimestamp_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_datumtimestamp_));
  // @@protoc_insertion_point(copy_constructor:CorrectPosition.CorrectPosition)
}

void CorrectPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CorrectPosition_CorrectPosition_2eproto.base);
  ::memset(&m_datumposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_datumtimestamp_) -
      reinterpret_cast<char*>(&m_datumposition_)) + sizeof(m_datumtimestamp_));
}

CorrectPosition::~CorrectPosition() {
  // @@protoc_insertion_point(destructor:CorrectPosition.CorrectPosition)
  SharedDtor();
}

void CorrectPosition::SharedDtor() {
  if (this != internal_default_instance()) delete m_datumposition_;
  if (this != internal_default_instance()) delete m_vehicleposition_;
  if (this != internal_default_instance()) delete m_correctposition_;
  if (this != internal_default_instance()) delete m_speedposition_;
}

void CorrectPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CorrectPosition& CorrectPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CorrectPosition_CorrectPosition_2eproto.base);
  return *internal_default_instance();
}


void CorrectPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CorrectPosition.CorrectPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && m_datumposition_ != nullptr) {
    delete m_datumposition_;
  }
  m_datumposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_vehicleposition_ != nullptr) {
    delete m_vehicleposition_;
  }
  m_vehicleposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_correctposition_ != nullptr) {
    delete m_correctposition_;
  }
  m_correctposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && m_speedposition_ != nullptr) {
    delete m_speedposition_;
  }
  m_speedposition_ = nullptr;
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_datumtimestamp_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_datumtimestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CorrectPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_datumTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_datumtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CorrectPosition.DatumPosition m_datumPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_m_datumposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CorrectPosition.WGS84 m_VehiclePosition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_m_vehicleposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CorrectPosition.WGS84 m_CorrectPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_m_correctposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CorrectPosition.WGS84 m_SpeedPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_m_speedposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CorrectPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CorrectPosition.CorrectPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_Timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_datumTimestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_datumtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CorrectPosition.DatumPosition m_datumPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_datumposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CorrectPosition.WGS84 m_VehiclePosition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_vehicleposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CorrectPosition.WGS84 m_CorrectPosition = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_correctposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CorrectPosition.WGS84 m_SpeedPosition = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_speedposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CorrectPosition.CorrectPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CorrectPosition.CorrectPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CorrectPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CorrectPosition.CorrectPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_Timestamp = 1;
  if (this->m_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_timestamp(), output);
  }

  // uint64 m_datumTimestamp = 2;
  if (this->m_datumtimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_datumtimestamp(), output);
  }

  // .CorrectPosition.DatumPosition m_datumPosition = 3;
  if (this->has_m_datumposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::m_datumposition(this), output);
  }

  // .CorrectPosition.WGS84 m_VehiclePosition = 4;
  if (this->has_m_vehicleposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::m_vehicleposition(this), output);
  }

  // .CorrectPosition.WGS84 m_CorrectPosition = 5;
  if (this->has_m_correctposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::m_correctposition(this), output);
  }

  // .CorrectPosition.WGS84 m_SpeedPosition = 6;
  if (this->has_m_speedposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::m_speedposition(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CorrectPosition.CorrectPosition)
}

size_t CorrectPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CorrectPosition.CorrectPosition)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CorrectPosition.DatumPosition m_datumPosition = 3;
  if (this->has_m_datumposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_datumposition_);
  }

  // .CorrectPosition.WGS84 m_VehiclePosition = 4;
  if (this->has_m_vehicleposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_vehicleposition_);
  }

  // .CorrectPosition.WGS84 m_CorrectPosition = 5;
  if (this->has_m_correctposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_correctposition_);
  }

  // .CorrectPosition.WGS84 m_SpeedPosition = 6;
  if (this->has_m_speedposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_speedposition_);
  }

  // uint64 m_Timestamp = 1;
  if (this->m_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_timestamp());
  }

  // uint64 m_datumTimestamp = 2;
  if (this->m_datumtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_datumtimestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CorrectPosition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CorrectPosition*>(
      &from));
}

void CorrectPosition::MergeFrom(const CorrectPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CorrectPosition.CorrectPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_datumposition()) {
    mutable_m_datumposition()->::CorrectPosition::DatumPosition::MergeFrom(from.m_datumposition());
  }
  if (from.has_m_vehicleposition()) {
    mutable_m_vehicleposition()->::CorrectPosition::WGS84::MergeFrom(from.m_vehicleposition());
  }
  if (from.has_m_correctposition()) {
    mutable_m_correctposition()->::CorrectPosition::WGS84::MergeFrom(from.m_correctposition());
  }
  if (from.has_m_speedposition()) {
    mutable_m_speedposition()->::CorrectPosition::WGS84::MergeFrom(from.m_speedposition());
  }
  if (from.m_timestamp() != 0) {
    set_m_timestamp(from.m_timestamp());
  }
  if (from.m_datumtimestamp() != 0) {
    set_m_datumtimestamp(from.m_datumtimestamp());
  }
}

void CorrectPosition::CopyFrom(const CorrectPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CorrectPosition.CorrectPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectPosition::IsInitialized() const {
  return true;
}

void CorrectPosition::InternalSwap(CorrectPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_datumposition_, other->m_datumposition_);
  swap(m_vehicleposition_, other->m_vehicleposition_);
  swap(m_correctposition_, other->m_correctposition_);
  swap(m_speedposition_, other->m_speedposition_);
  swap(m_timestamp_, other->m_timestamp_);
  swap(m_datumtimestamp_, other->m_datumtimestamp_);
}

std::string CorrectPosition::GetTypeName() const {
  return "CorrectPosition.CorrectPosition";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CorrectPosition
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CorrectPosition::WGS84* Arena::CreateMaybeMessage< ::CorrectPosition::WGS84 >(Arena* arena) {
  return Arena::CreateInternal< ::CorrectPosition::WGS84 >(arena);
}
template<> PROTOBUF_NOINLINE ::CorrectPosition::DatumPosition* Arena::CreateMaybeMessage< ::CorrectPosition::DatumPosition >(Arena* arena) {
  return Arena::CreateInternal< ::CorrectPosition::DatumPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CorrectPosition::CorrectPosition* Arena::CreateMaybeMessage< ::CorrectPosition::CorrectPosition >(Arena* arena) {
  return Arena::CreateInternal< ::CorrectPosition::CorrectPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
