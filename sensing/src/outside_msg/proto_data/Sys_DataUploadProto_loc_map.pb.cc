// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_loc_map.proto

#include "Sys_DataUploadProto_loc_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5floc_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto;
namespace phoenix {
namespace ad_data_upload {
class LaneItem_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneItem_message> _instance;
} _LaneItem_message_default_instance_;
class LaneCurve_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneCurve_message> _instance;
} _LaneCurve_message_default_instance_;
class Coordinate_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinate_message> _instance;
} _Coordinate_message_default_instance_;
class PositionMessage_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionMessage_message> _instance;
} _PositionMessage_message_default_instance_;
class Lane_Position_Display_Data_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane_Position_Display_Data_message> _instance;
} _Lane_Position_Display_Data_message_default_instance_;
class OffsetFloatEntry_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OffsetFloatEntry_message> _instance;
} _OffsetFloatEntry_message_default_instance_;
class LineControlPoint_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineControlPoint_message> _instance;
} _LineControlPoint_message_default_instance_;
class LineControlPoints_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineControlPoints_message> _instance;
} _LineControlPoints_message_default_instance_;
class MapLaneInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapLaneInfo_message> _instance;
} _MapLaneInfo_message_default_instance_;
class MPUMapVecLaneInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPUMapVecLaneInfo_message> _instance;
} _MPUMapVecLaneInfo_message_default_instance_;
class Map_Display_Data_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_Display_Data_message> _instance;
} _Map_Display_Data_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
static void InitDefaultsscc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Coordinate_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Coordinate_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Coordinate_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LaneCurve_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LaneCurve_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LaneCurve_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LaneItem_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LaneItem_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LaneItem_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Lane_Position_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Lane_Position_Display_Data_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Lane_Position_Display_Data_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Lane_Position_Display_Data_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lane_Position_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Lane_Position_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,
      &scc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LineControlPoint_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LineControlPoint_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LineControlPoint_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_LineControlPoints_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LineControlPoints_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LineControlPoints_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LineControlPoints_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineControlPoints_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LineControlPoints_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_MPUMapVecLaneInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_MapLaneInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::MapLaneInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::MapLaneInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,
      &scc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Map_Display_Data_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Map_Display_Data_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Map_Display_Data_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Map_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_OffsetFloatEntry_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::OffsetFloatEntry_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::OffsetFloatEntry_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_PositionMessage_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::PositionMessage_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::PositionMessage_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto}, {
      &scc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base,}};

namespace phoenix {
namespace ad_data_upload {

// ===================================================================

void LaneItem_message::InitAsDefaultInstance() {
}
class LaneItem_message::_Internal {
 public:
};

LaneItem_message::LaneItem_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LaneItem_message)
}
LaneItem_message::LaneItem_message(const LaneItem_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_lane_id_, &from.camera_lane_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_lane_curvature3_) -
    reinterpret_cast<char*>(&camera_lane_id_)) + sizeof(camera_lane_curvature3_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LaneItem_message)
}

void LaneItem_message::SharedCtor() {
  ::memset(&camera_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_lane_curvature3_) -
      reinterpret_cast<char*>(&camera_lane_id_)) + sizeof(camera_lane_curvature3_));
}

LaneItem_message::~LaneItem_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LaneItem_message)
  SharedDtor();
}

void LaneItem_message::SharedDtor() {
}

void LaneItem_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneItem_message& LaneItem_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneItem_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void LaneItem_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LaneItem_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_lane_curvature3_) -
      reinterpret_cast<char*>(&camera_lane_id_)) + sizeof(camera_lane_curvature3_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneItem_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 camera_Lane_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 camera_Lane_Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          camera_lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Camera_Lane_ProbOfExist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          camera_lane_probofexist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Camera_Lane_Curvature0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          camera_lane_curvature0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Camera_Lane_Curvature1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          camera_lane_curvature1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Camera_Lane_Curvature2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          camera_lane_curvature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Camera_Lane_Curvature3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          camera_lane_curvature3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 reverse1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reverse1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reverse2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reverse2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneItem_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LaneItem_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camera_Lane_ID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 camera_Lane_Type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Camera_Lane_ProbOfExist = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_lane_probofexist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Camera_Lane_Curvature0 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_lane_curvature0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Camera_Lane_Curvature1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_lane_curvature1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Camera_Lane_Curvature2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_lane_curvature2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Camera_Lane_Curvature3 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_lane_curvature3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reverse1 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reverse1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reverse2 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reverse2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LaneItem_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LaneItem_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneItem_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LaneItem_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_Lane_ID = 1;
  if (this->camera_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->camera_lane_id(), output);
  }

  // uint32 camera_Lane_Type = 2;
  if (this->camera_lane_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->camera_lane_type(), output);
  }

  // uint32 Camera_Lane_ProbOfExist = 3;
  if (this->camera_lane_probofexist() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->camera_lane_probofexist(), output);
  }

  // float Camera_Lane_Curvature0 = 4;
  if (!(this->camera_lane_curvature0() <= 0 && this->camera_lane_curvature0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->camera_lane_curvature0(), output);
  }

  // float Camera_Lane_Curvature1 = 5;
  if (!(this->camera_lane_curvature1() <= 0 && this->camera_lane_curvature1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->camera_lane_curvature1(), output);
  }

  // float Camera_Lane_Curvature2 = 6;
  if (!(this->camera_lane_curvature2() <= 0 && this->camera_lane_curvature2() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->camera_lane_curvature2(), output);
  }

  // float Camera_Lane_Curvature3 = 7;
  if (!(this->camera_lane_curvature3() <= 0 && this->camera_lane_curvature3() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->camera_lane_curvature3(), output);
  }

  // uint64 reverse1 = 8;
  if (this->reverse1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->reverse1(), output);
  }

  // uint64 reverse2 = 9;
  if (this->reverse2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->reverse2(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LaneItem_message)
}

size_t LaneItem_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LaneItem_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 camera_Lane_ID = 1;
  if (this->camera_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->camera_lane_id());
  }

  // uint32 camera_Lane_Type = 2;
  if (this->camera_lane_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->camera_lane_type());
  }

  // uint32 Camera_Lane_ProbOfExist = 3;
  if (this->camera_lane_probofexist() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->camera_lane_probofexist());
  }

  // float Camera_Lane_Curvature0 = 4;
  if (!(this->camera_lane_curvature0() <= 0 && this->camera_lane_curvature0() >= 0)) {
    total_size += 1 + 4;
  }

  // float Camera_Lane_Curvature1 = 5;
  if (!(this->camera_lane_curvature1() <= 0 && this->camera_lane_curvature1() >= 0)) {
    total_size += 1 + 4;
  }

  // float Camera_Lane_Curvature2 = 6;
  if (!(this->camera_lane_curvature2() <= 0 && this->camera_lane_curvature2() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 reverse1 = 8;
  if (this->reverse1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->reverse1());
  }

  // uint64 reverse2 = 9;
  if (this->reverse2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->reverse2());
  }

  // float Camera_Lane_Curvature3 = 7;
  if (!(this->camera_lane_curvature3() <= 0 && this->camera_lane_curvature3() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneItem_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LaneItem_message*>(
      &from));
}

void LaneItem_message::MergeFrom(const LaneItem_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LaneItem_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_lane_id() != 0) {
    set_camera_lane_id(from.camera_lane_id());
  }
  if (from.camera_lane_type() != 0) {
    set_camera_lane_type(from.camera_lane_type());
  }
  if (from.camera_lane_probofexist() != 0) {
    set_camera_lane_probofexist(from.camera_lane_probofexist());
  }
  if (!(from.camera_lane_curvature0() <= 0 && from.camera_lane_curvature0() >= 0)) {
    set_camera_lane_curvature0(from.camera_lane_curvature0());
  }
  if (!(from.camera_lane_curvature1() <= 0 && from.camera_lane_curvature1() >= 0)) {
    set_camera_lane_curvature1(from.camera_lane_curvature1());
  }
  if (!(from.camera_lane_curvature2() <= 0 && from.camera_lane_curvature2() >= 0)) {
    set_camera_lane_curvature2(from.camera_lane_curvature2());
  }
  if (from.reverse1() != 0) {
    set_reverse1(from.reverse1());
  }
  if (from.reverse2() != 0) {
    set_reverse2(from.reverse2());
  }
  if (!(from.camera_lane_curvature3() <= 0 && from.camera_lane_curvature3() >= 0)) {
    set_camera_lane_curvature3(from.camera_lane_curvature3());
  }
}

void LaneItem_message::CopyFrom(const LaneItem_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LaneItem_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneItem_message::IsInitialized() const {
  return true;
}

void LaneItem_message::InternalSwap(LaneItem_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_lane_id_, other->camera_lane_id_);
  swap(camera_lane_type_, other->camera_lane_type_);
  swap(camera_lane_probofexist_, other->camera_lane_probofexist_);
  swap(camera_lane_curvature0_, other->camera_lane_curvature0_);
  swap(camera_lane_curvature1_, other->camera_lane_curvature1_);
  swap(camera_lane_curvature2_, other->camera_lane_curvature2_);
  swap(reverse1_, other->reverse1_);
  swap(reverse2_, other->reverse2_);
  swap(camera_lane_curvature3_, other->camera_lane_curvature3_);
}

std::string LaneItem_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LaneItem_message";
}


// ===================================================================

void LaneCurve_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_LaneCurve_message_default_instance_._instance.get_mutable()->stcurleftlane_ = const_cast< ::phoenix::ad_data_upload::LaneItem_message*>(
      ::phoenix::ad_data_upload::LaneItem_message::internal_default_instance());
  ::phoenix::ad_data_upload::_LaneCurve_message_default_instance_._instance.get_mutable()->stcurrightlane_ = const_cast< ::phoenix::ad_data_upload::LaneItem_message*>(
      ::phoenix::ad_data_upload::LaneItem_message::internal_default_instance());
  ::phoenix::ad_data_upload::_LaneCurve_message_default_instance_._instance.get_mutable()->stleftleftlane_ = const_cast< ::phoenix::ad_data_upload::LaneItem_message*>(
      ::phoenix::ad_data_upload::LaneItem_message::internal_default_instance());
  ::phoenix::ad_data_upload::_LaneCurve_message_default_instance_._instance.get_mutable()->strightrightlane_ = const_cast< ::phoenix::ad_data_upload::LaneItem_message*>(
      ::phoenix::ad_data_upload::LaneItem_message::internal_default_instance());
}
class LaneCurve_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::LaneItem_message& stcurleftlane(const LaneCurve_message* msg);
  static const ::phoenix::ad_data_upload::LaneItem_message& stcurrightlane(const LaneCurve_message* msg);
  static const ::phoenix::ad_data_upload::LaneItem_message& stleftleftlane(const LaneCurve_message* msg);
  static const ::phoenix::ad_data_upload::LaneItem_message& strightrightlane(const LaneCurve_message* msg);
};

const ::phoenix::ad_data_upload::LaneItem_message&
LaneCurve_message::_Internal::stcurleftlane(const LaneCurve_message* msg) {
  return *msg->stcurleftlane_;
}
const ::phoenix::ad_data_upload::LaneItem_message&
LaneCurve_message::_Internal::stcurrightlane(const LaneCurve_message* msg) {
  return *msg->stcurrightlane_;
}
const ::phoenix::ad_data_upload::LaneItem_message&
LaneCurve_message::_Internal::stleftleftlane(const LaneCurve_message* msg) {
  return *msg->stleftleftlane_;
}
const ::phoenix::ad_data_upload::LaneItem_message&
LaneCurve_message::_Internal::strightrightlane(const LaneCurve_message* msg) {
  return *msg->strightrightlane_;
}
LaneCurve_message::LaneCurve_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LaneCurve_message)
}
LaneCurve_message::LaneCurve_message(const LaneCurve_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stcurleftlane()) {
    stcurleftlane_ = new ::phoenix::ad_data_upload::LaneItem_message(*from.stcurleftlane_);
  } else {
    stcurleftlane_ = nullptr;
  }
  if (from.has_stcurrightlane()) {
    stcurrightlane_ = new ::phoenix::ad_data_upload::LaneItem_message(*from.stcurrightlane_);
  } else {
    stcurrightlane_ = nullptr;
  }
  if (from.has_stleftleftlane()) {
    stleftleftlane_ = new ::phoenix::ad_data_upload::LaneItem_message(*from.stleftleftlane_);
  } else {
    stleftleftlane_ = nullptr;
  }
  if (from.has_strightrightlane()) {
    strightrightlane_ = new ::phoenix::ad_data_upload::LaneItem_message(*from.strightrightlane_);
  } else {
    strightrightlane_ = nullptr;
  }
  utype_ = from.utype_;
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LaneCurve_message)
}

void LaneCurve_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&stcurleftlane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utype_) -
      reinterpret_cast<char*>(&stcurleftlane_)) + sizeof(utype_));
}

LaneCurve_message::~LaneCurve_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LaneCurve_message)
  SharedDtor();
}

void LaneCurve_message::SharedDtor() {
  if (this != internal_default_instance()) delete stcurleftlane_;
  if (this != internal_default_instance()) delete stcurrightlane_;
  if (this != internal_default_instance()) delete stleftleftlane_;
  if (this != internal_default_instance()) delete strightrightlane_;
}

void LaneCurve_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneCurve_message& LaneCurve_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneCurve_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void LaneCurve_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LaneCurve_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stcurleftlane_ != nullptr) {
    delete stcurleftlane_;
  }
  stcurleftlane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stcurrightlane_ != nullptr) {
    delete stcurrightlane_;
  }
  stcurrightlane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stleftleftlane_ != nullptr) {
    delete stleftleftlane_;
  }
  stleftleftlane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && strightrightlane_ != nullptr) {
    delete strightrightlane_;
  }
  strightrightlane_ = nullptr;
  utype_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneCurve_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          utype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_stcurleftlane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_stcurrightlane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_stleftleftlane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_strightrightlane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneCurve_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LaneCurve_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stcurleftlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stcurrightlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stleftleftlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strightrightlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LaneCurve_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LaneCurve_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneCurve_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LaneCurve_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uType = 1;
  if (this->utype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->utype(), output);
  }

  // .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
  if (this->has_stcurleftlane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::stcurleftlane(this), output);
  }

  // .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
  if (this->has_stcurrightlane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::stcurrightlane(this), output);
  }

  // .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
  if (this->has_stleftleftlane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::stleftleftlane(this), output);
  }

  // .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
  if (this->has_strightrightlane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::strightrightlane(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LaneCurve_message)
}

size_t LaneCurve_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LaneCurve_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.LaneItem_message stCurLeftLane = 2;
  if (this->has_stcurleftlane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcurleftlane_);
  }

  // .phoenix.ad_data_upload.LaneItem_message stCurRightLane = 3;
  if (this->has_stcurrightlane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcurrightlane_);
  }

  // .phoenix.ad_data_upload.LaneItem_message stLeftLeftLane = 4;
  if (this->has_stleftleftlane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stleftleftlane_);
  }

  // .phoenix.ad_data_upload.LaneItem_message stRightRightLane = 5;
  if (this->has_strightrightlane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strightrightlane_);
  }

  // uint32 uType = 1;
  if (this->utype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->utype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneCurve_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LaneCurve_message*>(
      &from));
}

void LaneCurve_message::MergeFrom(const LaneCurve_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LaneCurve_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stcurleftlane()) {
    mutable_stcurleftlane()->::phoenix::ad_data_upload::LaneItem_message::MergeFrom(from.stcurleftlane());
  }
  if (from.has_stcurrightlane()) {
    mutable_stcurrightlane()->::phoenix::ad_data_upload::LaneItem_message::MergeFrom(from.stcurrightlane());
  }
  if (from.has_stleftleftlane()) {
    mutable_stleftleftlane()->::phoenix::ad_data_upload::LaneItem_message::MergeFrom(from.stleftleftlane());
  }
  if (from.has_strightrightlane()) {
    mutable_strightrightlane()->::phoenix::ad_data_upload::LaneItem_message::MergeFrom(from.strightrightlane());
  }
  if (from.utype() != 0) {
    set_utype(from.utype());
  }
}

void LaneCurve_message::CopyFrom(const LaneCurve_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LaneCurve_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCurve_message::IsInitialized() const {
  return true;
}

void LaneCurve_message::InternalSwap(LaneCurve_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stcurleftlane_, other->stcurleftlane_);
  swap(stcurrightlane_, other->stcurrightlane_);
  swap(stleftleftlane_, other->stleftleftlane_);
  swap(strightrightlane_, other->strightrightlane_);
  swap(utype_, other->utype_);
}

std::string LaneCurve_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LaneCurve_message";
}


// ===================================================================

void Coordinate_message::InitAsDefaultInstance() {
}
class Coordinate_message::_Internal {
 public:
};

Coordinate_message::Coordinate_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Coordinate_message)
}
Coordinate_message::Coordinate_message(const Coordinate_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_x_, &from.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_z_) -
    reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Coordinate_message)
}

void Coordinate_message::SharedCtor() {
  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_z_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
}

Coordinate_message::~Coordinate_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Coordinate_message)
  SharedDtor();
}

void Coordinate_message::SharedDtor() {
}

void Coordinate_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinate_message& Coordinate_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinate_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Coordinate_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Coordinate_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_z_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Coordinate_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double m_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          m_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Coordinate_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Coordinate_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double m_x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double m_z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Coordinate_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Coordinate_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Coordinate_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Coordinate_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double m_x = 1;
  if (!(this->m_x() <= 0 && this->m_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->m_x(), output);
  }

  // double m_y = 2;
  if (!(this->m_y() <= 0 && this->m_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->m_y(), output);
  }

  // double m_z = 3;
  if (!(this->m_z() <= 0 && this->m_z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->m_z(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Coordinate_message)
}

size_t Coordinate_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Coordinate_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double m_x = 1;
  if (!(this->m_x() <= 0 && this->m_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_y = 2;
  if (!(this->m_y() <= 0 && this->m_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double m_z = 3;
  if (!(this->m_z() <= 0 && this->m_z() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Coordinate_message*>(
      &from));
}

void Coordinate_message::MergeFrom(const Coordinate_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Coordinate_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m_x() <= 0 && from.m_x() >= 0)) {
    set_m_x(from.m_x());
  }
  if (!(from.m_y() <= 0 && from.m_y() >= 0)) {
    set_m_y(from.m_y());
  }
  if (!(from.m_z() <= 0 && from.m_z() >= 0)) {
    set_m_z(from.m_z());
  }
}

void Coordinate_message::CopyFrom(const Coordinate_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Coordinate_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate_message::IsInitialized() const {
  return true;
}

void Coordinate_message::InternalSwap(Coordinate_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_x_, other->m_x_);
  swap(m_y_, other->m_y_);
  swap(m_z_, other->m_z_);
}

std::string Coordinate_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Coordinate_message";
}


// ===================================================================

void PositionMessage_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_PositionMessage_message_default_instance_._instance.get_mutable()->m_point_ = const_cast< ::phoenix::ad_data_upload::Coordinate_message*>(
      ::phoenix::ad_data_upload::Coordinate_message::internal_default_instance());
}
class PositionMessage_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Coordinate_message& m_point(const PositionMessage_message* msg);
};

const ::phoenix::ad_data_upload::Coordinate_message&
PositionMessage_message::_Internal::m_point(const PositionMessage_message* msg) {
  return *msg->m_point_;
}
PositionMessage_message::PositionMessage_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.PositionMessage_message)
}
PositionMessage_message::PositionMessage_message(const PositionMessage_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m_point()) {
    m_point_ = new ::phoenix::ad_data_upload::Coordinate_message(*from.m_point_);
  } else {
    m_point_ = nullptr;
  }
  ::memcpy(&m_timestamp_, &from.m_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_proability_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_proability_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.PositionMessage_message)
}

void PositionMessage_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&m_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_proability_) -
      reinterpret_cast<char*>(&m_point_)) + sizeof(m_proability_));
}

PositionMessage_message::~PositionMessage_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.PositionMessage_message)
  SharedDtor();
}

void PositionMessage_message::SharedDtor() {
  if (this != internal_default_instance()) delete m_point_;
}

void PositionMessage_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionMessage_message& PositionMessage_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionMessage_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void PositionMessage_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.PositionMessage_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && m_point_ != nullptr) {
    delete m_point_;
  }
  m_point_ = nullptr;
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_proability_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(m_proability_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionMessage_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_positionAge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_positionage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float m_datum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m_datum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          m_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m_proability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m_proability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Coordinate_message m_point = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_m_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionMessage_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.PositionMessage_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_positionAge = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_positionage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_datum = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_datum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_heading = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_speed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_proability = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_proability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Coordinate_message m_point = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.PositionMessage_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.PositionMessage_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionMessage_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.PositionMessage_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_timestamp = 1;
  if (this->m_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_timestamp(), output);
  }

  // uint64 m_positionAge = 2;
  if (this->m_positionage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_positionage(), output);
  }

  // float m_datum = 3;
  if (!(this->m_datum() <= 0 && this->m_datum() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->m_datum(), output);
  }

  // float m_heading = 4;
  if (!(this->m_heading() <= 0 && this->m_heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->m_heading(), output);
  }

  // float m_speed = 5;
  if (!(this->m_speed() <= 0 && this->m_speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->m_speed(), output);
  }

  // float m_proability = 6;
  if (!(this->m_proability() <= 0 && this->m_proability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->m_proability(), output);
  }

  // .phoenix.ad_data_upload.Coordinate_message m_point = 7;
  if (this->has_m_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::m_point(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.PositionMessage_message)
}

size_t PositionMessage_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.PositionMessage_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Coordinate_message m_point = 7;
  if (this->has_m_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_point_);
  }

  // uint64 m_timestamp = 1;
  if (this->m_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_timestamp());
  }

  // uint64 m_positionAge = 2;
  if (this->m_positionage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_positionage());
  }

  // float m_datum = 3;
  if (!(this->m_datum() <= 0 && this->m_datum() >= 0)) {
    total_size += 1 + 4;
  }

  // float m_heading = 4;
  if (!(this->m_heading() <= 0 && this->m_heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float m_speed = 5;
  if (!(this->m_speed() <= 0 && this->m_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float m_proability = 6;
  if (!(this->m_proability() <= 0 && this->m_proability() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionMessage_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PositionMessage_message*>(
      &from));
}

void PositionMessage_message::MergeFrom(const PositionMessage_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.PositionMessage_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_point()) {
    mutable_m_point()->::phoenix::ad_data_upload::Coordinate_message::MergeFrom(from.m_point());
  }
  if (from.m_timestamp() != 0) {
    set_m_timestamp(from.m_timestamp());
  }
  if (from.m_positionage() != 0) {
    set_m_positionage(from.m_positionage());
  }
  if (!(from.m_datum() <= 0 && from.m_datum() >= 0)) {
    set_m_datum(from.m_datum());
  }
  if (!(from.m_heading() <= 0 && from.m_heading() >= 0)) {
    set_m_heading(from.m_heading());
  }
  if (!(from.m_speed() <= 0 && from.m_speed() >= 0)) {
    set_m_speed(from.m_speed());
  }
  if (!(from.m_proability() <= 0 && from.m_proability() >= 0)) {
    set_m_proability(from.m_proability());
  }
}

void PositionMessage_message::CopyFrom(const PositionMessage_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.PositionMessage_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionMessage_message::IsInitialized() const {
  return true;
}

void PositionMessage_message::InternalSwap(PositionMessage_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_point_, other->m_point_);
  swap(m_timestamp_, other->m_timestamp_);
  swap(m_positionage_, other->m_positionage_);
  swap(m_datum_, other->m_datum_);
  swap(m_heading_, other->m_heading_);
  swap(m_speed_, other->m_speed_);
  swap(m_proability_, other->m_proability_);
}

std::string PositionMessage_message::GetTypeName() const {
  return "phoenix.ad_data_upload.PositionMessage_message";
}


// ===================================================================

void Lane_Position_Display_Data_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Lane_Position_Display_Data_message_default_instance_._instance.get_mutable()->lane_curve_ = const_cast< ::phoenix::ad_data_upload::LaneCurve_message*>(
      ::phoenix::ad_data_upload::LaneCurve_message::internal_default_instance());
  ::phoenix::ad_data_upload::_Lane_Position_Display_Data_message_default_instance_._instance.get_mutable()->position_message_ = const_cast< ::phoenix::ad_data_upload::PositionMessage_message*>(
      ::phoenix::ad_data_upload::PositionMessage_message::internal_default_instance());
}
class Lane_Position_Display_Data_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::LaneCurve_message& lane_curve(const Lane_Position_Display_Data_message* msg);
  static const ::phoenix::ad_data_upload::PositionMessage_message& position_message(const Lane_Position_Display_Data_message* msg);
};

const ::phoenix::ad_data_upload::LaneCurve_message&
Lane_Position_Display_Data_message::_Internal::lane_curve(const Lane_Position_Display_Data_message* msg) {
  return *msg->lane_curve_;
}
const ::phoenix::ad_data_upload::PositionMessage_message&
Lane_Position_Display_Data_message::_Internal::position_message(const Lane_Position_Display_Data_message* msg) {
  return *msg->position_message_;
}
Lane_Position_Display_Data_message::Lane_Position_Display_Data_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
}
Lane_Position_Display_Data_message::Lane_Position_Display_Data_message(const Lane_Position_Display_Data_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_curve()) {
    lane_curve_ = new ::phoenix::ad_data_upload::LaneCurve_message(*from.lane_curve_);
  } else {
    lane_curve_ = nullptr;
  }
  if (from.has_position_message()) {
    position_message_ = new ::phoenix::ad_data_upload::PositionMessage_message(*from.position_message_);
  } else {
    position_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
}

void Lane_Position_Display_Data_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_Position_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&lane_curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_message_) -
      reinterpret_cast<char*>(&lane_curve_)) + sizeof(position_message_));
}

Lane_Position_Display_Data_message::~Lane_Position_Display_Data_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  SharedDtor();
}

void Lane_Position_Display_Data_message::SharedDtor() {
  if (this != internal_default_instance()) delete lane_curve_;
  if (this != internal_default_instance()) delete position_message_;
}

void Lane_Position_Display_Data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane_Position_Display_Data_message& Lane_Position_Display_Data_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_Position_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Lane_Position_Display_Data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && lane_curve_ != nullptr) {
    delete lane_curve_;
  }
  lane_curve_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_message_ != nullptr) {
    delete position_message_;
  }
  position_message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane_Position_Display_Data_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_lane_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane_Position_Display_Data_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane_Position_Display_Data_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
  if (this->has_lane_curve()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::lane_curve(this), output);
  }

  // .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
  if (this->has_position_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::position_message(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
}

size_t Lane_Position_Display_Data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.LaneCurve_message lane_curve = 1;
  if (this->has_lane_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_curve_);
  }

  // .phoenix.ad_data_upload.PositionMessage_message position_message = 2;
  if (this->has_position_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane_Position_Display_Data_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Lane_Position_Display_Data_message*>(
      &from));
}

void Lane_Position_Display_Data_message::MergeFrom(const Lane_Position_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lane_curve()) {
    mutable_lane_curve()->::phoenix::ad_data_upload::LaneCurve_message::MergeFrom(from.lane_curve());
  }
  if (from.has_position_message()) {
    mutable_position_message()->::phoenix::ad_data_upload::PositionMessage_message::MergeFrom(from.position_message());
  }
}

void Lane_Position_Display_Data_message::CopyFrom(const Lane_Position_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Lane_Position_Display_Data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Position_Display_Data_message::IsInitialized() const {
  return true;
}

void Lane_Position_Display_Data_message::InternalSwap(Lane_Position_Display_Data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lane_curve_, other->lane_curve_);
  swap(position_message_, other->position_message_);
}

std::string Lane_Position_Display_Data_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Lane_Position_Display_Data_message";
}


// ===================================================================

void OffsetFloatEntry_message::InitAsDefaultInstance() {
}
class OffsetFloatEntry_message::_Internal {
 public:
};

OffsetFloatEntry_message::OffsetFloatEntry_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.OffsetFloatEntry_message)
}
OffsetFloatEntry_message::OffsetFloatEntry_message(const OffsetFloatEntry_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_offset_, &from.m_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_value_) -
    reinterpret_cast<char*>(&m_offset_)) + sizeof(m_value_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.OffsetFloatEntry_message)
}

void OffsetFloatEntry_message::SharedCtor() {
  ::memset(&m_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_value_) -
      reinterpret_cast<char*>(&m_offset_)) + sizeof(m_value_));
}

OffsetFloatEntry_message::~OffsetFloatEntry_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.OffsetFloatEntry_message)
  SharedDtor();
}

void OffsetFloatEntry_message::SharedDtor() {
}

void OffsetFloatEntry_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OffsetFloatEntry_message& OffsetFloatEntry_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OffsetFloatEntry_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void OffsetFloatEntry_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_value_) -
      reinterpret_cast<char*>(&m_offset_)) + sizeof(m_value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OffsetFloatEntry_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OffsetFloatEntry_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_offset = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.OffsetFloatEntry_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.OffsetFloatEntry_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OffsetFloatEntry_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_offset = 1;
  if (this->m_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->m_offset(), output);
  }

  // float m_value = 2;
  if (!(this->m_value() <= 0 && this->m_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->m_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.OffsetFloatEntry_message)
}

size_t OffsetFloatEntry_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 m_offset = 1;
  if (this->m_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_offset());
  }

  // float m_value = 2;
  if (!(this->m_value() <= 0 && this->m_value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OffsetFloatEntry_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OffsetFloatEntry_message*>(
      &from));
}

void OffsetFloatEntry_message::MergeFrom(const OffsetFloatEntry_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_offset() != 0) {
    set_m_offset(from.m_offset());
  }
  if (!(from.m_value() <= 0 && from.m_value() >= 0)) {
    set_m_value(from.m_value());
  }
}

void OffsetFloatEntry_message::CopyFrom(const OffsetFloatEntry_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.OffsetFloatEntry_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffsetFloatEntry_message::IsInitialized() const {
  return true;
}

void OffsetFloatEntry_message::InternalSwap(OffsetFloatEntry_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_offset_, other->m_offset_);
  swap(m_value_, other->m_value_);
}

std::string OffsetFloatEntry_message::GetTypeName() const {
  return "phoenix.ad_data_upload.OffsetFloatEntry_message";
}


// ===================================================================

void LineControlPoint_message::InitAsDefaultInstance() {
}
class LineControlPoint_message::_Internal {
 public:
};

LineControlPoint_message::LineControlPoint_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LineControlPoint_message)
}
LineControlPoint_message::LineControlPoint_message(const LineControlPoint_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_dist_, &from.m_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_value_) -
    reinterpret_cast<char*>(&m_dist_)) + sizeof(m_value_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LineControlPoint_message)
}

void LineControlPoint_message::SharedCtor() {
  ::memset(&m_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_value_) -
      reinterpret_cast<char*>(&m_dist_)) + sizeof(m_value_));
}

LineControlPoint_message::~LineControlPoint_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LineControlPoint_message)
  SharedDtor();
}

void LineControlPoint_message::SharedDtor() {
}

void LineControlPoint_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineControlPoint_message& LineControlPoint_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineControlPoint_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void LineControlPoint_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LineControlPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_value_) -
      reinterpret_cast<char*>(&m_dist_)) + sizeof(m_value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LineControlPoint_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_dist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LineControlPoint_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LineControlPoint_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_dist = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LineControlPoint_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LineControlPoint_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LineControlPoint_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LineControlPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_dist = 1;
  if (this->m_dist() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->m_dist(), output);
  }

  // uint32 m_value = 2;
  if (this->m_value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->m_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LineControlPoint_message)
}

size_t LineControlPoint_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LineControlPoint_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 m_dist = 1;
  if (this->m_dist() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_dist());
  }

  // uint32 m_value = 2;
  if (this->m_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineControlPoint_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LineControlPoint_message*>(
      &from));
}

void LineControlPoint_message::MergeFrom(const LineControlPoint_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LineControlPoint_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.m_dist() != 0) {
    set_m_dist(from.m_dist());
  }
  if (from.m_value() != 0) {
    set_m_value(from.m_value());
  }
}

void LineControlPoint_message::CopyFrom(const LineControlPoint_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LineControlPoint_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineControlPoint_message::IsInitialized() const {
  return true;
}

void LineControlPoint_message::InternalSwap(LineControlPoint_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m_dist_, other->m_dist_);
  swap(m_value_, other->m_value_);
}

std::string LineControlPoint_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LineControlPoint_message";
}


// ===================================================================

void LineControlPoints_message::InitAsDefaultInstance() {
}
class LineControlPoints_message::_Internal {
 public:
};

LineControlPoints_message::LineControlPoints_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LineControlPoints_message)
}
LineControlPoints_message::LineControlPoints_message(const LineControlPoints_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      m_control_points_(from.m_control_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_lineid_, &from.m_lineid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_control_points_size_t_) -
    reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_control_points_size_t_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LineControlPoints_message)
}

void LineControlPoints_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineControlPoints_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&m_lineid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_control_points_size_t_) -
      reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_control_points_size_t_));
}

LineControlPoints_message::~LineControlPoints_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LineControlPoints_message)
  SharedDtor();
}

void LineControlPoints_message::SharedDtor() {
}

void LineControlPoints_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineControlPoints_message& LineControlPoints_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineControlPoints_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void LineControlPoints_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LineControlPoints_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_control_points_.Clear();
  ::memset(&m_lineid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_control_points_size_t_) -
      reinterpret_cast<char*>(&m_lineid_)) + sizeof(m_control_points_size_t_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LineControlPoints_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m_lineId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_control_points_size_t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_control_points_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_control_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LineControlPoints_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LineControlPoints_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 m_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 m_lineId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_lineid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 m_control_points_size_t = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_control_points_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_control_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LineControlPoints_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LineControlPoints_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LineControlPoints_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LineControlPoints_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_type = 1;
  if (this->m_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->m_type(), output);
  }

  // uint64 m_lineId = 2;
  if (this->m_lineid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->m_lineid(), output);
  }

  // uint32 m_control_points_size_t = 3;
  if (this->m_control_points_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->m_control_points_size_t(), output);
  }

  // repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_control_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->m_control_points(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LineControlPoints_message)
}

size_t LineControlPoints_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LineControlPoints_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.LineControlPoint_message m_control_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->m_control_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_control_points(static_cast<int>(i)));
    }
  }

  // uint64 m_lineId = 2;
  if (this->m_lineid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_lineid());
  }

  // uint32 m_type = 1;
  if (this->m_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_type());
  }

  // uint32 m_control_points_size_t = 3;
  if (this->m_control_points_size_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->m_control_points_size_t());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineControlPoints_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LineControlPoints_message*>(
      &from));
}

void LineControlPoints_message::MergeFrom(const LineControlPoints_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LineControlPoints_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_control_points_.MergeFrom(from.m_control_points_);
  if (from.m_lineid() != 0) {
    set_m_lineid(from.m_lineid());
  }
  if (from.m_type() != 0) {
    set_m_type(from.m_type());
  }
  if (from.m_control_points_size_t() != 0) {
    set_m_control_points_size_t(from.m_control_points_size_t());
  }
}

void LineControlPoints_message::CopyFrom(const LineControlPoints_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LineControlPoints_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineControlPoints_message::IsInitialized() const {
  return true;
}

void LineControlPoints_message::InternalSwap(LineControlPoints_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&m_control_points_)->InternalSwap(CastToBase(&other->m_control_points_));
  swap(m_lineid_, other->m_lineid_);
  swap(m_type_, other->m_type_);
  swap(m_control_points_size_t_, other->m_control_points_size_t_);
}

std::string LineControlPoints_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LineControlPoints_message";
}


// ===================================================================

void MapLaneInfo_message::InitAsDefaultInstance() {
}
class MapLaneInfo_message::_Internal {
 public:
};

MapLaneInfo_message::MapLaneInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.MapLaneInfo_message)
}
MapLaneInfo_message::MapLaneInfo_message(const MapLaneInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      next_lane_id_(from.next_lane_id_),
      pre_lane_id_(from.pre_lane_id_),
      center_points_(from.center_points_),
      left_points_(from.left_points_),
      right_points_(from.right_points_),
      curvarture_(from.curvarture_),
      latslope_(from.latslope_),
      lngslope_(from.lngslope_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_timestamp_, &from.m_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&lngslope_size_t_) -
    reinterpret_cast<char*>(&m_timestamp_)) + sizeof(lngslope_size_t_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.MapLaneInfo_message)
}

void MapLaneInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lngslope_size_t_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(lngslope_size_t_));
}

MapLaneInfo_message::~MapLaneInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.MapLaneInfo_message)
  SharedDtor();
}

void MapLaneInfo_message::SharedDtor() {
}

void MapLaneInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapLaneInfo_message& MapLaneInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MapLaneInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.MapLaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_lane_id_.Clear();
  pre_lane_id_.Clear();
  center_points_.Clear();
  left_points_.Clear();
  right_points_.Clear();
  curvarture_.Clear();
  latslope_.Clear();
  lngslope_.Clear();
  ::memset(&m_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lngslope_size_t_) -
      reinterpret_cast<char*>(&m_timestamp_)) + sizeof(lngslope_size_t_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapLaneInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 m_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float m_datum_Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m_datum_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 base_lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          base_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 left_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          left_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 right_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          right_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_lane_id_size_t = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          next_lane_id_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pre_lane_id_size_t = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pre_lane_id_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 next_lane_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_next_lane_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          add_next_lane_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pre_lane_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pre_lane_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          add_pre_lane_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_transition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lane_transition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_connecttype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lane_connecttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pathId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_offset_start = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          lane_offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_offset_end = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          lane_offset_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lane_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lane_number = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          lane_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 center_points_size_t = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          center_points_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 left_points_size_t = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          left_points_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 right_points_size_t = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          right_points_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_center_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_left_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_right_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // uint32 speed_limit_max = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          speed_limit_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed_limit_min = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          speed_limit_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 curvarture_size_t = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          curvarture_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Latslope_size_t = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          latslope_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Lngslope_size_t = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          lngslope_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_curvarture(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 490);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_latslope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_lngslope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 506);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapLaneInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.MapLaneInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 m_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m_datum_Timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_datum_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 base_lane_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 left_lane_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 right_lane_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &right_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 next_lane_id_size_t = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_lane_id_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pre_lane_id_size_t = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_lane_id_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 next_lane_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_next_lane_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 66u, input, this->mutable_next_lane_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pre_lane_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pre_lane_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 74u, input, this->mutable_pre_lane_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_transition = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_transition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_connecttype = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_connecttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pathId = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pathid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_offset_start = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_offset_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_offset_end = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_offset_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_index = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_number = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 center_points_size_t = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_points_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_points_size_t = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_points_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 right_points_size_t = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_points_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_center_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_limit_max = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_limit_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_limit_min = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_limit_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (205 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 curvarture_size_t = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvarture_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Latslope_size_t = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latslope_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Lngslope_size_t = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lngslope_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_curvarture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_latslope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lngslope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.MapLaneInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.MapLaneInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapLaneInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.MapLaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 m_timestamp = 1;
  if (this->m_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->m_timestamp(), output);
  }

  // float m_datum_Timestamp = 2;
  if (!(this->m_datum_timestamp() <= 0 && this->m_datum_timestamp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->m_datum_timestamp(), output);
  }

  // uint64 base_lane_id = 3;
  if (this->base_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->base_lane_id(), output);
  }

  // uint64 left_lane_id = 4;
  if (this->left_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->left_lane_id(), output);
  }

  // uint64 right_lane_id = 5;
  if (this->right_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->right_lane_id(), output);
  }

  // uint32 next_lane_id_size_t = 6;
  if (this->next_lane_id_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->next_lane_id_size_t(), output);
  }

  // uint32 pre_lane_id_size_t = 7;
  if (this->pre_lane_id_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->pre_lane_id_size_t(), output);
  }

  // repeated uint64 next_lane_id = 8;
  if (this->next_lane_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_next_lane_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->next_lane_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->next_lane_id(i), output);
  }

  // repeated uint64 pre_lane_id = 9;
  if (this->pre_lane_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pre_lane_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pre_lane_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->pre_lane_id(i), output);
  }

  // uint32 lane_transition = 10;
  if (this->lane_transition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->lane_transition(), output);
  }

  // uint32 lane_connecttype = 11;
  if (this->lane_connecttype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->lane_connecttype(), output);
  }

  // uint32 pathId = 12;
  if (this->pathid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->pathid(), output);
  }

  // uint32 lane_offset_start = 13;
  if (this->lane_offset_start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->lane_offset_start(), output);
  }

  // uint32 lane_offset_end = 14;
  if (this->lane_offset_end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->lane_offset_end(), output);
  }

  // uint32 lane_index = 15;
  if (this->lane_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->lane_index(), output);
  }

  // uint32 lane_number = 16;
  if (this->lane_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->lane_number(), output);
  }

  // uint32 center_points_size_t = 17;
  if (this->center_points_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->center_points_size_t(), output);
  }

  // uint32 left_points_size_t = 18;
  if (this->left_points_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->left_points_size_t(), output);
  }

  // uint32 right_points_size_t = 19;
  if (this->right_points_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->right_points_size_t(), output);
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->center_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->center_points(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21,
      this->left_points(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22,
      this->right_points(static_cast<int>(i)),
      output);
  }

  // uint32 speed_limit_max = 23;
  if (this->speed_limit_max() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(23, this->speed_limit_max(), output);
  }

  // uint32 speed_limit_min = 24;
  if (this->speed_limit_min() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(24, this->speed_limit_min(), output);
  }

  // float length = 25;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(25, this->length(), output);
  }

  // uint32 curvarture_size_t = 26;
  if (this->curvarture_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(26, this->curvarture_size_t(), output);
  }

  // uint32 Latslope_size_t = 27;
  if (this->latslope_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(27, this->latslope_size_t(), output);
  }

  // uint32 Lngslope_size_t = 28;
  if (this->lngslope_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(28, this->lngslope_size_t(), output);
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curvarture_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29,
      this->curvarture(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latslope_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30,
      this->latslope(static_cast<int>(i)),
      output);
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lngslope_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31,
      this->lngslope(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.MapLaneInfo_message)
}

size_t MapLaneInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.MapLaneInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 next_lane_id = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->next_lane_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _next_lane_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 pre_lane_id = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pre_lane_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pre_lane_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message center_points = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->center_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->center_points(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message left_points = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->left_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_points(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.Coordinate_message right_points = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->right_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_points(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message curvarture = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->curvarture_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->curvarture(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Latslope = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->latslope_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->latslope(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.OffsetFloatEntry_message Lngslope = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->lngslope_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lngslope(static_cast<int>(i)));
    }
  }

  // uint64 m_timestamp = 1;
  if (this->m_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->m_timestamp());
  }

  // uint64 base_lane_id = 3;
  if (this->base_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->base_lane_id());
  }

  // uint64 left_lane_id = 4;
  if (this->left_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->left_lane_id());
  }

  // float m_datum_Timestamp = 2;
  if (!(this->m_datum_timestamp() <= 0 && this->m_datum_timestamp() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 next_lane_id_size_t = 6;
  if (this->next_lane_id_size_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->next_lane_id_size_t());
  }

  // uint64 right_lane_id = 5;
  if (this->right_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->right_lane_id());
  }

  // uint32 pre_lane_id_size_t = 7;
  if (this->pre_lane_id_size_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->pre_lane_id_size_t());
  }

  // uint32 lane_transition = 10;
  if (this->lane_transition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_transition());
  }

  // uint32 lane_connecttype = 11;
  if (this->lane_connecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_connecttype());
  }

  // uint32 pathId = 12;
  if (this->pathid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->pathid());
  }

  // uint32 lane_offset_start = 13;
  if (this->lane_offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_offset_start());
  }

  // uint32 lane_offset_end = 14;
  if (this->lane_offset_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_offset_end());
  }

  // uint32 lane_index = 15;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_index());
  }

  // uint32 lane_number = 16;
  if (this->lane_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_number());
  }

  // uint32 center_points_size_t = 17;
  if (this->center_points_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->center_points_size_t());
  }

  // uint32 left_points_size_t = 18;
  if (this->left_points_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->left_points_size_t());
  }

  // uint32 right_points_size_t = 19;
  if (this->right_points_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->right_points_size_t());
  }

  // uint32 speed_limit_max = 23;
  if (this->speed_limit_max() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->speed_limit_max());
  }

  // uint32 speed_limit_min = 24;
  if (this->speed_limit_min() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->speed_limit_min());
  }

  // float length = 25;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 curvarture_size_t = 26;
  if (this->curvarture_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->curvarture_size_t());
  }

  // uint32 Latslope_size_t = 27;
  if (this->latslope_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->latslope_size_t());
  }

  // uint32 Lngslope_size_t = 28;
  if (this->lngslope_size_t() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lngslope_size_t());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLaneInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MapLaneInfo_message*>(
      &from));
}

void MapLaneInfo_message::MergeFrom(const MapLaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.MapLaneInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_lane_id_.MergeFrom(from.next_lane_id_);
  pre_lane_id_.MergeFrom(from.pre_lane_id_);
  center_points_.MergeFrom(from.center_points_);
  left_points_.MergeFrom(from.left_points_);
  right_points_.MergeFrom(from.right_points_);
  curvarture_.MergeFrom(from.curvarture_);
  latslope_.MergeFrom(from.latslope_);
  lngslope_.MergeFrom(from.lngslope_);
  if (from.m_timestamp() != 0) {
    set_m_timestamp(from.m_timestamp());
  }
  if (from.base_lane_id() != 0) {
    set_base_lane_id(from.base_lane_id());
  }
  if (from.left_lane_id() != 0) {
    set_left_lane_id(from.left_lane_id());
  }
  if (!(from.m_datum_timestamp() <= 0 && from.m_datum_timestamp() >= 0)) {
    set_m_datum_timestamp(from.m_datum_timestamp());
  }
  if (from.next_lane_id_size_t() != 0) {
    set_next_lane_id_size_t(from.next_lane_id_size_t());
  }
  if (from.right_lane_id() != 0) {
    set_right_lane_id(from.right_lane_id());
  }
  if (from.pre_lane_id_size_t() != 0) {
    set_pre_lane_id_size_t(from.pre_lane_id_size_t());
  }
  if (from.lane_transition() != 0) {
    set_lane_transition(from.lane_transition());
  }
  if (from.lane_connecttype() != 0) {
    set_lane_connecttype(from.lane_connecttype());
  }
  if (from.pathid() != 0) {
    set_pathid(from.pathid());
  }
  if (from.lane_offset_start() != 0) {
    set_lane_offset_start(from.lane_offset_start());
  }
  if (from.lane_offset_end() != 0) {
    set_lane_offset_end(from.lane_offset_end());
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
  if (from.lane_number() != 0) {
    set_lane_number(from.lane_number());
  }
  if (from.center_points_size_t() != 0) {
    set_center_points_size_t(from.center_points_size_t());
  }
  if (from.left_points_size_t() != 0) {
    set_left_points_size_t(from.left_points_size_t());
  }
  if (from.right_points_size_t() != 0) {
    set_right_points_size_t(from.right_points_size_t());
  }
  if (from.speed_limit_max() != 0) {
    set_speed_limit_max(from.speed_limit_max());
  }
  if (from.speed_limit_min() != 0) {
    set_speed_limit_min(from.speed_limit_min());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (from.curvarture_size_t() != 0) {
    set_curvarture_size_t(from.curvarture_size_t());
  }
  if (from.latslope_size_t() != 0) {
    set_latslope_size_t(from.latslope_size_t());
  }
  if (from.lngslope_size_t() != 0) {
    set_lngslope_size_t(from.lngslope_size_t());
  }
}

void MapLaneInfo_message::CopyFrom(const MapLaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.MapLaneInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLaneInfo_message::IsInitialized() const {
  return true;
}

void MapLaneInfo_message::InternalSwap(MapLaneInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  next_lane_id_.InternalSwap(&other->next_lane_id_);
  pre_lane_id_.InternalSwap(&other->pre_lane_id_);
  CastToBase(&center_points_)->InternalSwap(CastToBase(&other->center_points_));
  CastToBase(&left_points_)->InternalSwap(CastToBase(&other->left_points_));
  CastToBase(&right_points_)->InternalSwap(CastToBase(&other->right_points_));
  CastToBase(&curvarture_)->InternalSwap(CastToBase(&other->curvarture_));
  CastToBase(&latslope_)->InternalSwap(CastToBase(&other->latslope_));
  CastToBase(&lngslope_)->InternalSwap(CastToBase(&other->lngslope_));
  swap(m_timestamp_, other->m_timestamp_);
  swap(base_lane_id_, other->base_lane_id_);
  swap(left_lane_id_, other->left_lane_id_);
  swap(m_datum_timestamp_, other->m_datum_timestamp_);
  swap(next_lane_id_size_t_, other->next_lane_id_size_t_);
  swap(right_lane_id_, other->right_lane_id_);
  swap(pre_lane_id_size_t_, other->pre_lane_id_size_t_);
  swap(lane_transition_, other->lane_transition_);
  swap(lane_connecttype_, other->lane_connecttype_);
  swap(pathid_, other->pathid_);
  swap(lane_offset_start_, other->lane_offset_start_);
  swap(lane_offset_end_, other->lane_offset_end_);
  swap(lane_index_, other->lane_index_);
  swap(lane_number_, other->lane_number_);
  swap(center_points_size_t_, other->center_points_size_t_);
  swap(left_points_size_t_, other->left_points_size_t_);
  swap(right_points_size_t_, other->right_points_size_t_);
  swap(speed_limit_max_, other->speed_limit_max_);
  swap(speed_limit_min_, other->speed_limit_min_);
  swap(length_, other->length_);
  swap(curvarture_size_t_, other->curvarture_size_t_);
  swap(latslope_size_t_, other->latslope_size_t_);
  swap(lngslope_size_t_, other->lngslope_size_t_);
}

std::string MapLaneInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.MapLaneInfo_message";
}


// ===================================================================

void MPUMapVecLaneInfo_message::InitAsDefaultInstance() {
}
class MPUMapVecLaneInfo_message::_Internal {
 public:
};

MPUMapVecLaneInfo_message::MPUMapVecLaneInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
}
MPUMapVecLaneInfo_message::MPUMapVecLaneInfo_message(const MPUMapVecLaneInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_size_t_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_size_t_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
}

void MPUMapVecLaneInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_t_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_size_t_));
}

MPUMapVecLaneInfo_message::~MPUMapVecLaneInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  SharedDtor();
}

void MPUMapVecLaneInfo_message::SharedDtor() {
}

void MPUMapVecLaneInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPUMapVecLaneInfo_message& MPUMapVecLaneInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPUMapVecLaneInfo_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MPUMapVecLaneInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_t_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(data_size_t_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MPUMapVecLaneInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_size_t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_size_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MPUMapVecLaneInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Time_stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_size_t = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MPUMapVecLaneInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time_stamp(), output);
  }

  // uint32 data_size_t = 2;
  if (this->data_size_t() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->data_size_t(), output);
  }

  // repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->data(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
}

size_t MPUMapVecLaneInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.MapLaneInfo_message data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // uint64 Time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time_stamp());
  }

  // uint32 data_size_t = 2;
  if (this->data_size_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->data_size_t());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPUMapVecLaneInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MPUMapVecLaneInfo_message*>(
      &from));
}

void MPUMapVecLaneInfo_message::MergeFrom(const MPUMapVecLaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.data_size_t() != 0) {
    set_data_size_t(from.data_size_t());
  }
}

void MPUMapVecLaneInfo_message::CopyFrom(const MPUMapVecLaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.MPUMapVecLaneInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPUMapVecLaneInfo_message::IsInitialized() const {
  return true;
}

void MPUMapVecLaneInfo_message::InternalSwap(MPUMapVecLaneInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(time_stamp_, other->time_stamp_);
  swap(data_size_t_, other->data_size_t_);
}

std::string MPUMapVecLaneInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.MPUMapVecLaneInfo_message";
}


// ===================================================================

void Map_Display_Data_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Map_Display_Data_message_default_instance_._instance.get_mutable()->map_lane_info_ = const_cast< ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message*>(
      ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message::internal_default_instance());
}
class Map_Display_Data_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message& map_lane_info(const Map_Display_Data_message* msg);
};

const ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message&
Map_Display_Data_message::_Internal::map_lane_info(const Map_Display_Data_message* msg) {
  return *msg->map_lane_info_;
}
Map_Display_Data_message::Map_Display_Data_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Map_Display_Data_message)
}
Map_Display_Data_message::Map_Display_Data_message(const Map_Display_Data_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_lane_info()) {
    map_lane_info_ = new ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message(*from.map_lane_info_);
  } else {
    map_lane_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Map_Display_Data_message)
}

void Map_Display_Data_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  map_lane_info_ = nullptr;
}

Map_Display_Data_message::~Map_Display_Data_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Map_Display_Data_message)
  SharedDtor();
}

void Map_Display_Data_message::SharedDtor() {
  if (this != internal_default_instance()) delete map_lane_info_;
}

void Map_Display_Data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_Display_Data_message& Map_Display_Data_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_Display_Data_message_Sys_5fDataUploadProto_5floc_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Map_Display_Data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Map_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && map_lane_info_ != nullptr) {
    delete map_lane_info_;
  }
  map_lane_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Map_Display_Data_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_map_lane_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Map_Display_Data_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Map_Display_Data_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_lane_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Map_Display_Data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Map_Display_Data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Map_Display_Data_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Map_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
  if (this->has_map_lane_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::map_lane_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Map_Display_Data_message)
}

size_t Map_Display_Data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Map_Display_Data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MPUMapVecLaneInfo_message map_lane_info = 1;
  if (this->has_map_lane_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_lane_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_Display_Data_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Map_Display_Data_message*>(
      &from));
}

void Map_Display_Data_message::MergeFrom(const Map_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Map_Display_Data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_lane_info()) {
    mutable_map_lane_info()->::phoenix::ad_data_upload::MPUMapVecLaneInfo_message::MergeFrom(from.map_lane_info());
  }
}

void Map_Display_Data_message::CopyFrom(const Map_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Map_Display_Data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_Display_Data_message::IsInitialized() const {
  return true;
}

void Map_Display_Data_message::InternalSwap(Map_Display_Data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(map_lane_info_, other->map_lane_info_);
}

std::string Map_Display_Data_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Map_Display_Data_message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LaneItem_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LaneItem_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LaneItem_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LaneCurve_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LaneCurve_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LaneCurve_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Coordinate_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Coordinate_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Coordinate_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::PositionMessage_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::PositionMessage_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::PositionMessage_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Lane_Position_Display_Data_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Lane_Position_Display_Data_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Lane_Position_Display_Data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::OffsetFloatEntry_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::OffsetFloatEntry_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::OffsetFloatEntry_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LineControlPoint_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LineControlPoint_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LineControlPoint_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LineControlPoints_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LineControlPoints_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LineControlPoints_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::MapLaneInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::MapLaneInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::MapLaneInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::MPUMapVecLaneInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Map_Display_Data_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Map_Display_Data_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Map_Display_Data_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
