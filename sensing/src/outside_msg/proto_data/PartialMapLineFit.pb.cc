// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartialMapLineFit.proto

#include "PartialMapLineFit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PartialMapLineFit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FitCurveSegment_PartialMapLineFit_2eproto;
namespace FitMapLine {
class FitCurveSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FitCurveSegment> _instance;
} _FitCurveSegment_default_instance_;
class FitCurveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FitCurve> _instance;
} _FitCurve_default_instance_;
}  // namespace FitMapLine
static void InitDefaultsscc_info_FitCurve_PartialMapLineFit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FitMapLine::_FitCurve_default_instance_;
    new (ptr) ::FitMapLine::FitCurve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FitMapLine::FitCurve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FitCurve_PartialMapLineFit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FitCurve_PartialMapLineFit_2eproto}, {
      &scc_info_FitCurveSegment_PartialMapLineFit_2eproto.base,}};

static void InitDefaultsscc_info_FitCurveSegment_PartialMapLineFit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FitMapLine::_FitCurveSegment_default_instance_;
    new (ptr) ::FitMapLine::FitCurveSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FitMapLine::FitCurveSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FitCurveSegment_PartialMapLineFit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FitCurveSegment_PartialMapLineFit_2eproto}, {}};

namespace FitMapLine {

// ===================================================================

void FitCurveSegment::InitAsDefaultInstance() {
}
class FitCurveSegment::_Internal {
 public:
};

FitCurveSegment::FitCurveSegment()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FitMapLine.FitCurveSegment)
}
FitCurveSegment::FitCurveSegment(const FitCurveSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      f_coefficient_x_(from.f_coefficient_x_),
      f_coefficient_y_(from.f_coefficient_y_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f_seg_offset_, &from.f_seg_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_seg_y_s_) -
    reinterpret_cast<char*>(&f_seg_offset_)) + sizeof(f_seg_y_s_));
  // @@protoc_insertion_point(copy_constructor:FitMapLine.FitCurveSegment)
}

void FitCurveSegment::SharedCtor() {
  ::memset(&f_seg_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_seg_y_s_) -
      reinterpret_cast<char*>(&f_seg_offset_)) + sizeof(f_seg_y_s_));
}

FitCurveSegment::~FitCurveSegment() {
  // @@protoc_insertion_point(destructor:FitMapLine.FitCurveSegment)
  SharedDtor();
}

void FitCurveSegment::SharedDtor() {
}

void FitCurveSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FitCurveSegment& FitCurveSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FitCurveSegment_PartialMapLineFit_2eproto.base);
  return *internal_default_instance();
}


void FitCurveSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:FitMapLine.FitCurveSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f_coefficient_x_.Clear();
  f_coefficient_y_.Clear();
  ::memset(&f_seg_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_seg_y_s_) -
      reinterpret_cast<char*>(&f_seg_offset_)) + sizeof(f_seg_y_s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FitCurveSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float f_seg_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          f_seg_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_seg_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f_seg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_seg_e = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f_seg_e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_seg_x_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          f_seg_x_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_seg_y_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f_seg_y_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double f_coefficient_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_f_coefficient_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          add_f_coefficient_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double f_coefficient_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_f_coefficient_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          add_f_coefficient_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FitCurveSegment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:FitMapLine.FitCurveSegment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float f_seg_offset = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_seg_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_seg_s = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_seg_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_seg_e = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_seg_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_scale = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_seg_x_s = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_seg_x_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f_seg_y_s = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_seg_y_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double f_coefficient_x = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_f_coefficient_x())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_f_coefficient_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double f_coefficient_y = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_f_coefficient_y())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_f_coefficient_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FitMapLine.FitCurveSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FitMapLine.FitCurveSegment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FitCurveSegment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FitMapLine.FitCurveSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f_seg_offset = 1;
  if (!(this->f_seg_offset() <= 0 && this->f_seg_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->f_seg_offset(), output);
  }

  // float f_seg_s = 2;
  if (!(this->f_seg_s() <= 0 && this->f_seg_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->f_seg_s(), output);
  }

  // float f_seg_e = 3;
  if (!(this->f_seg_e() <= 0 && this->f_seg_e() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->f_seg_e(), output);
  }

  // float f_scale = 4;
  if (!(this->f_scale() <= 0 && this->f_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->f_scale(), output);
  }

  // float f_seg_x_s = 5;
  if (!(this->f_seg_x_s() <= 0 && this->f_seg_x_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->f_seg_x_s(), output);
  }

  // float f_seg_y_s = 6;
  if (!(this->f_seg_y_s() <= 0 && this->f_seg_y_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->f_seg_y_s(), output);
  }

  // repeated double f_coefficient_x = 7;
  if (this->f_coefficient_x_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f_coefficient_x_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->f_coefficient_x().data(), this->f_coefficient_x_size(), output);
  }

  // repeated double f_coefficient_y = 8;
  if (this->f_coefficient_y_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f_coefficient_y_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->f_coefficient_y().data(), this->f_coefficient_y_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:FitMapLine.FitCurveSegment)
}

size_t FitCurveSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FitMapLine.FitCurveSegment)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double f_coefficient_x = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->f_coefficient_x_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_coefficient_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double f_coefficient_y = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->f_coefficient_y_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_coefficient_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float f_seg_offset = 1;
  if (!(this->f_seg_offset() <= 0 && this->f_seg_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_seg_s = 2;
  if (!(this->f_seg_s() <= 0 && this->f_seg_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_seg_e = 3;
  if (!(this->f_seg_e() <= 0 && this->f_seg_e() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_scale = 4;
  if (!(this->f_scale() <= 0 && this->f_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_seg_x_s = 5;
  if (!(this->f_seg_x_s() <= 0 && this->f_seg_x_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_seg_y_s = 6;
  if (!(this->f_seg_y_s() <= 0 && this->f_seg_y_s() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FitCurveSegment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FitCurveSegment*>(
      &from));
}

void FitCurveSegment::MergeFrom(const FitCurveSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FitMapLine.FitCurveSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f_coefficient_x_.MergeFrom(from.f_coefficient_x_);
  f_coefficient_y_.MergeFrom(from.f_coefficient_y_);
  if (!(from.f_seg_offset() <= 0 && from.f_seg_offset() >= 0)) {
    set_f_seg_offset(from.f_seg_offset());
  }
  if (!(from.f_seg_s() <= 0 && from.f_seg_s() >= 0)) {
    set_f_seg_s(from.f_seg_s());
  }
  if (!(from.f_seg_e() <= 0 && from.f_seg_e() >= 0)) {
    set_f_seg_e(from.f_seg_e());
  }
  if (!(from.f_scale() <= 0 && from.f_scale() >= 0)) {
    set_f_scale(from.f_scale());
  }
  if (!(from.f_seg_x_s() <= 0 && from.f_seg_x_s() >= 0)) {
    set_f_seg_x_s(from.f_seg_x_s());
  }
  if (!(from.f_seg_y_s() <= 0 && from.f_seg_y_s() >= 0)) {
    set_f_seg_y_s(from.f_seg_y_s());
  }
}

void FitCurveSegment::CopyFrom(const FitCurveSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FitMapLine.FitCurveSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitCurveSegment::IsInitialized() const {
  return true;
}

void FitCurveSegment::InternalSwap(FitCurveSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  f_coefficient_x_.InternalSwap(&other->f_coefficient_x_);
  f_coefficient_y_.InternalSwap(&other->f_coefficient_y_);
  swap(f_seg_offset_, other->f_seg_offset_);
  swap(f_seg_s_, other->f_seg_s_);
  swap(f_seg_e_, other->f_seg_e_);
  swap(f_scale_, other->f_scale_);
  swap(f_seg_x_s_, other->f_seg_x_s_);
  swap(f_seg_y_s_, other->f_seg_y_s_);
}

std::string FitCurveSegment::GetTypeName() const {
  return "FitMapLine.FitCurveSegment";
}


// ===================================================================

void FitCurve::InitAsDefaultInstance() {
}
class FitCurve::_Internal {
 public:
};

FitCurve::FitCurve()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FitMapLine.FitCurve)
}
FitCurve::FitCurve(const FitCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      fit_curves_(from.fit_curves_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u_timestamp_ = from.u_timestamp_;
  // @@protoc_insertion_point(copy_constructor:FitMapLine.FitCurve)
}

void FitCurve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FitCurve_PartialMapLineFit_2eproto.base);
  u_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FitCurve::~FitCurve() {
  // @@protoc_insertion_point(destructor:FitMapLine.FitCurve)
  SharedDtor();
}

void FitCurve::SharedDtor() {
}

void FitCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FitCurve& FitCurve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FitCurve_PartialMapLineFit_2eproto.base);
  return *internal_default_instance();
}


void FitCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:FitMapLine.FitCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fit_curves_.Clear();
  u_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FitCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FitMapLine.FitCurveSegment fit_curves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fit_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FitCurve::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:FitMapLine.FitCurve)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 u_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &u_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FitMapLine.FitCurveSegment fit_curves = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fit_curves()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FitMapLine.FitCurve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FitMapLine.FitCurve)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FitCurve::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FitMapLine.FitCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u_timestamp = 1;
  if (this->u_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->u_timestamp(), output);
  }

  // repeated .FitMapLine.FitCurveSegment fit_curves = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fit_curves_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->fit_curves(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:FitMapLine.FitCurve)
}

size_t FitCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FitMapLine.FitCurve)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FitMapLine.FitCurveSegment fit_curves = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fit_curves_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fit_curves(static_cast<int>(i)));
    }
  }

  // uint64 u_timestamp = 1;
  if (this->u_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->u_timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FitCurve::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FitCurve*>(
      &from));
}

void FitCurve::MergeFrom(const FitCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FitMapLine.FitCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fit_curves_.MergeFrom(from.fit_curves_);
  if (from.u_timestamp() != 0) {
    set_u_timestamp(from.u_timestamp());
  }
}

void FitCurve::CopyFrom(const FitCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FitMapLine.FitCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitCurve::IsInitialized() const {
  return true;
}

void FitCurve::InternalSwap(FitCurve* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fit_curves_)->InternalSwap(CastToBase(&other->fit_curves_));
  swap(u_timestamp_, other->u_timestamp_);
}

std::string FitCurve::GetTypeName() const {
  return "FitMapLine.FitCurve";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FitMapLine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FitMapLine::FitCurveSegment* Arena::CreateMaybeMessage< ::FitMapLine::FitCurveSegment >(Arena* arena) {
  return Arena::CreateInternal< ::FitMapLine::FitCurveSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::FitMapLine::FitCurve* Arena::CreateMaybeMessage< ::FitMapLine::FitCurve >(Arena* arena) {
  return Arena::CreateInternal< ::FitMapLine::FitCurve >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
