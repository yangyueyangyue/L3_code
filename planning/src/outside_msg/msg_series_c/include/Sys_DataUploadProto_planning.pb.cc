// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_planning.proto

#include "Sys_DataUploadProto_planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto;
namespace phoenix {
namespace ad_data_upload {
class MsgHead_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgHead_message> _instance;
} _MsgHead_message_default_instance_;
class Vec2d_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2d_message> _instance;
} _Vec2d_message_default_instance_;
class PathPoint_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPoint_message> _instance;
} _PathPoint_message_default_instance_;
class OBBox2d_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBBox2d_message> _instance;
} _OBBox2d_message_default_instance_;
class ByPassingReq_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ByPassingReq_message> _instance;
} _ByPassingReq_message_default_instance_;
class EventChangingLaneReq_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventChangingLaneReq_message> _instance;
} _EventChangingLaneReq_message_default_instance_;
class ActionPlanningResult_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionPlanningResult_message> _instance;
} _ActionPlanningResult_message_default_instance_;
class point_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<point_message> _instance;
} _point_message_default_instance_;
class TarTrj_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TarTrj_message> _instance;
} _TarTrj_message_default_instance_;
class PlanningResult_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningResult_message> _instance;
} _PlanningResult_message_default_instance_;
class TarPos_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TarPos_message> _instance;
} _TarPos_message_default_instance_;
class TarObj_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TarObj_message> _instance;
} _TarObj_message_default_instance_;
class VelocityPlanningResult_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityPlanningResult_message> _instance;
} _VelocityPlanningResult_message_default_instance_;
class ReferenceLineInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceLineInfo_message> _instance;
} _ReferenceLineInfo_message_default_instance_;
class TrajectoryPoint_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPoint_message> _instance;
} _TrajectoryPoint_message_default_instance_;
class ObjInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjInfo_message> _instance;
} _ObjInfo_message_default_instance_;
class FollowingTarget_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FollowingTarget_message> _instance;
} _FollowingTarget_message_default_instance_;
class DrivingMapInfo_2_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrivingMapInfo_2_message> _instance;
} _DrivingMapInfo_2_message_default_instance_;
class Behavior_Planning_Result_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Behavior_Planning_Result_message> _instance;
} _Behavior_Planning_Result_message_default_instance_;
class Decision_Planning_Result_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decision_Planning_Result_message> _instance;
} _Decision_Planning_Result_message_default_instance_;
class Speed_Planning_Result_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Speed_Planning_Result_message> _instance;
} _Speed_Planning_Result_message_default_instance_;
class DrivingMapInfo2_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrivingMapInfo2_message> _instance;
} _DrivingMapInfo2_message_default_instance_;
class Spd_Pln_Display_Data_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Spd_Pln_Display_Data_message> _instance;
} _Spd_Pln_Display_Data_message_default_instance_;
class Pos_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pos_message> _instance;
} _Pos_message_default_instance_;
class Sample_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample_message> _instance;
} _Sample_message_default_instance_;
class Lat_Err_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lat_Err_message> _instance;
} _Lat_Err_message_default_instance_;
class EventChangingLaneRsp_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventChangingLaneRsp_message> _instance;
} _EventChangingLaneRsp_message_default_instance_;
class Trj_Change_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trj_Change_message> _instance;
} _Trj_Change_message_default_instance_;
class TrajectoryPlanningResult_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPlanningResult_message> _instance;
} _TrajectoryPlanningResult_message_default_instance_;
class BoundaryAssociation_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryAssociation_message> _instance;
} _BoundaryAssociation_message_default_instance_;
class Boundary_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Boundary_message> _instance;
} _Boundary_message_default_instance_;
class ID_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ID_message> _instance;
} _ID_message_default_instance_;
class LaneInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneInfo_message> _instance;
} _LaneInfo_message_default_instance_;
class LineSegment2d_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineSegment2d_message> _instance;
} _LineSegment2d_message_default_instance_;
class MapTrafficLight_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapTrafficLight_message> _instance;
} _MapTrafficLight_message_default_instance_;
class MapInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapInfo_message> _instance;
} _MapInfo_message_default_instance_;
class RoadBoundary_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadBoundary_message> _instance;
} _RoadBoundary_message_default_instance_;
class ObstacleInfo_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleInfo_message> _instance;
} _ObstacleInfo_message_default_instance_;
class DrivingMapInfo_1_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrivingMapInfo_1_message> _instance;
} _DrivingMapInfo_1_message_default_instance_;
class Trajectory_Planning_Result_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory_Planning_Result_message> _instance;
} _Trajectory_Planning_Result_message_default_instance_;
class DrivingMap_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrivingMap_message> _instance;
} _DrivingMap_message_default_instance_;
class PathPln_Display_Data_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPln_Display_Data_message> _instance;
} _PathPln_Display_Data_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
static void InitDefaultsscc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ActionPlanningResult_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ActionPlanningResult_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ActionPlanningResult_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Behavior_Planning_Result_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Behavior_Planning_Result_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Behavior_Planning_Result_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_BoundaryAssociation_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::BoundaryAssociation_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::BoundaryAssociation_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Boundary_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Boundary_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Boundary_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ByPassingReq_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ByPassingReq_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ByPassingReq_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Decision_Planning_Result_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Decision_Planning_Result_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Decision_Planning_Result_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_DrivingMapInfo2_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::DrivingMapInfo2_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::DrivingMapInfo2_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_DrivingMapInfo_1_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::DrivingMapInfo_1_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::DrivingMapInfo_1_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_DrivingMapInfo_2_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::DrivingMapInfo_2_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::DrivingMapInfo_2_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_DrivingMap_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::DrivingMap_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::DrivingMap_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_EventChangingLaneReq_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::EventChangingLaneReq_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::EventChangingLaneReq_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_EventChangingLaneRsp_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::EventChangingLaneRsp_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::EventChangingLaneRsp_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_FollowingTarget_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::FollowingTarget_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::FollowingTarget_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ID_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ID_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ID_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LaneInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LaneInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LaneInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Lat_Err_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Lat_Err_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Lat_Err_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_LineSegment2d_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::LineSegment2d_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::LineSegment2d_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_MapInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::MapInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::MapInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_MapTrafficLight_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::MapTrafficLight_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::MapTrafficLight_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_MsgHead_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::MsgHead_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::MsgHead_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_OBBox2d_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::OBBox2d_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::OBBox2d_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ObjInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ObjInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ObjInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ObstacleInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ObstacleInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ObstacleInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_PathPln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_PathPln_Display_Data_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::PathPln_Display_Data_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::PathPln_Display_Data_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PathPln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_PathPoint_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::PathPoint_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::PathPoint_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_PlanningResult_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::PlanningResult_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::PlanningResult_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Pos_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Pos_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Pos_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_ReferenceLineInfo_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::ReferenceLineInfo_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::ReferenceLineInfo_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_RoadBoundary_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::RoadBoundary_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::RoadBoundary_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Sample_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Sample_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Sample_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_Spd_Pln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Spd_Pln_Display_Data_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Spd_Pln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Spd_Pln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Speed_Planning_Result_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Speed_Planning_Result_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Speed_Planning_Result_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TarObj_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TarObj_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TarObj_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TarPos_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TarPos_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TarPos_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TarTrj_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TarTrj_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TarTrj_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TrajectoryPlanningResult_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TrajectoryPlanningResult_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_TrajectoryPoint_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::TrajectoryPoint_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::TrajectoryPoint_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Trajectory_Planning_Result_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Trajectory_Planning_Result_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Trajectory_Planning_Result_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Trj_Change_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Trj_Change_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Trj_Change_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_Vec2d_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::Vec2d_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::Vec2d_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

static void InitDefaultsscc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_VelocityPlanningResult_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::VelocityPlanningResult_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::VelocityPlanningResult_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {
      &scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,
      &scc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto.base,}};

static void InitDefaultsscc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::ad_data_upload::_point_message_default_instance_;
    new (ptr) ::phoenix::ad_data_upload::point_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::ad_data_upload::point_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto}, {}};

namespace phoenix {
namespace ad_data_upload {

// ===================================================================

void MsgHead_message::InitAsDefaultInstance() {
}
class MsgHead_message::_Internal {
 public:
};

MsgHead_message::MsgHead_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.MsgHead_message)
}
MsgHead_message::MsgHead_message(const MsgHead_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vaild_, &from.vaild_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_module_id_) -
    reinterpret_cast<char*>(&vaild_)) + sizeof(dst_module_id_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.MsgHead_message)
}

void MsgHead_message::SharedCtor() {
  ::memset(&vaild_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_module_id_) -
      reinterpret_cast<char*>(&vaild_)) + sizeof(dst_module_id_));
}

MsgHead_message::~MsgHead_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.MsgHead_message)
  SharedDtor();
}

void MsgHead_message::SharedDtor() {
}

void MsgHead_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgHead_message& MsgHead_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgHead_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void MsgHead_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.MsgHead_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vaild_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_module_id_) -
      reinterpret_cast<char*>(&vaild_)) + sizeof(dst_module_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgHead_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool vaild = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vaild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 time_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_module_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          src_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_module_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dst_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgHead_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.MsgHead_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool vaild = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vaild_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 time_offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 src_module_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dst_module_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.MsgHead_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.MsgHead_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgHead_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.MsgHead_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool vaild = 1;
  if (this->vaild() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->vaild(), output);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // sint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(3, this->timestamp(), output);
  }

  // sint32 time_offset = 4;
  if (this->time_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->time_offset(), output);
  }

  // uint32 src_module_id = 5;
  if (this->src_module_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->src_module_id(), output);
  }

  // uint32 dst_module_id = 6;
  if (this->dst_module_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->dst_module_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.MsgHead_message)
}

size_t MsgHead_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.MsgHead_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool vaild = 1;
  if (this->vaild() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  // sint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->timestamp());
  }

  // sint32 time_offset = 4;
  if (this->time_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->time_offset());
  }

  // uint32 src_module_id = 5;
  if (this->src_module_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->src_module_id());
  }

  // uint32 dst_module_id = 6;
  if (this->dst_module_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->dst_module_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHead_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MsgHead_message*>(
      &from));
}

void MsgHead_message::MergeFrom(const MsgHead_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.MsgHead_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vaild() != 0) {
    set_vaild(from.vaild());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.time_offset() != 0) {
    set_time_offset(from.time_offset());
  }
  if (from.src_module_id() != 0) {
    set_src_module_id(from.src_module_id());
  }
  if (from.dst_module_id() != 0) {
    set_dst_module_id(from.dst_module_id());
  }
}

void MsgHead_message::CopyFrom(const MsgHead_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.MsgHead_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead_message::IsInitialized() const {
  return true;
}

void MsgHead_message::InternalSwap(MsgHead_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vaild_, other->vaild_);
  swap(sequence_, other->sequence_);
  swap(timestamp_, other->timestamp_);
  swap(time_offset_, other->time_offset_);
  swap(src_module_id_, other->src_module_id_);
  swap(dst_module_id_, other->dst_module_id_);
}

std::string MsgHead_message::GetTypeName() const {
  return "phoenix.ad_data_upload.MsgHead_message";
}


// ===================================================================

void Vec2d_message::InitAsDefaultInstance() {
}
class Vec2d_message::_Internal {
 public:
};

Vec2d_message::Vec2d_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Vec2d_message)
}
Vec2d_message::Vec2d_message(const Vec2d_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      vec__(from.vec__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Vec2d_message)
}

void Vec2d_message::SharedCtor() {
}

Vec2d_message::~Vec2d_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Vec2d_message)
  SharedDtor();
}

void Vec2d_message::SharedDtor() {
}

void Vec2d_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2d_message& Vec2d_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Vec2d_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Vec2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec__.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec2d_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float vec_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_vec_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_vec_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec2d_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Vec2d_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float vec_ = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vec_())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_vec_())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Vec2d_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Vec2d_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec2d_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Vec2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vec_ = 1;
  if (this->vec__size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vec__cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->vec_().data(), this->vec__size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Vec2d_message)
}

size_t Vec2d_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Vec2d_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vec_ = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vec__size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2d_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Vec2d_message*>(
      &from));
}

void Vec2d_message::MergeFrom(const Vec2d_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Vec2d_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec__.MergeFrom(from.vec__);
}

void Vec2d_message::CopyFrom(const Vec2d_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Vec2d_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2d_message::IsInitialized() const {
  return true;
}

void Vec2d_message::InternalSwap(Vec2d_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec__.InternalSwap(&other->vec__);
}

std::string Vec2d_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Vec2d_message";
}


// ===================================================================

void PathPoint_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_PathPoint_message_default_instance_._instance.get_mutable()->point_ = const_cast< ::phoenix::ad_data_upload::Vec2d_message*>(
      ::phoenix::ad_data_upload::Vec2d_message::internal_default_instance());
}
class PathPoint_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Vec2d_message& point(const PathPoint_message* msg);
};

const ::phoenix::ad_data_upload::Vec2d_message&
PathPoint_message::_Internal::point(const PathPoint_message* msg) {
  return *msg->point_;
}
PathPoint_message::PathPoint_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.PathPoint_message)
}
PathPoint_message::PathPoint_message(const PathPoint_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::phoenix::ad_data_upload::Vec2d_message(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.PathPoint_message)
}

void PathPoint_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&point_)) + sizeof(l_));
}

PathPoint_message::~PathPoint_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.PathPoint_message)
  SharedDtor();
}

void PathPoint_message::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void PathPoint_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPoint_message& PathPoint_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void PathPoint_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.PathPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(l_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PathPoint_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.Vec2d_message point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float l = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PathPoint_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.PathPoint_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.Vec2d_message point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.PathPoint_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.PathPoint_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PathPoint_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.PathPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Vec2d_message point = 1;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::point(this), output);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // float curvature = 3;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->curvature(), output);
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  // float l = 5;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->l(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.PathPoint_message)
}

size_t PathPoint_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.PathPoint_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Vec2d_message point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // float heading = 2;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 3;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float l = 5;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPoint_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PathPoint_message*>(
      &from));
}

void PathPoint_message::MergeFrom(const PathPoint_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.PathPoint_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::phoenix::ad_data_upload::Vec2d_message::MergeFrom(from.point());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    set_curvature(from.curvature());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    set_l(from.l());
  }
}

void PathPoint_message::CopyFrom(const PathPoint_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.PathPoint_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint_message::IsInitialized() const {
  return true;
}

void PathPoint_message::InternalSwap(PathPoint_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_, other->point_);
  swap(heading_, other->heading_);
  swap(curvature_, other->curvature_);
  swap(s_, other->s_);
  swap(l_, other->l_);
}

std::string PathPoint_message::GetTypeName() const {
  return "phoenix.ad_data_upload.PathPoint_message";
}


// ===================================================================

void OBBox2d_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_OBBox2d_message_default_instance_._instance.get_mutable()->center__ = const_cast< ::phoenix::ad_data_upload::Vec2d_message*>(
      ::phoenix::ad_data_upload::Vec2d_message::internal_default_instance());
  ::phoenix::ad_data_upload::_OBBox2d_message_default_instance_._instance.get_mutable()->extents__ = const_cast< ::phoenix::ad_data_upload::Vec2d_message*>(
      ::phoenix::ad_data_upload::Vec2d_message::internal_default_instance());
}
class OBBox2d_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Vec2d_message& center_(const OBBox2d_message* msg);
  static const ::phoenix::ad_data_upload::Vec2d_message& extents_(const OBBox2d_message* msg);
};

const ::phoenix::ad_data_upload::Vec2d_message&
OBBox2d_message::_Internal::center_(const OBBox2d_message* msg) {
  return *msg->center__;
}
const ::phoenix::ad_data_upload::Vec2d_message&
OBBox2d_message::_Internal::extents_(const OBBox2d_message* msg) {
  return *msg->extents__;
}
OBBox2d_message::OBBox2d_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.OBBox2d_message)
}
OBBox2d_message::OBBox2d_message(const OBBox2d_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      unit_direction__(from.unit_direction__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center_()) {
    center__ = new ::phoenix::ad_data_upload::Vec2d_message(*from.center__);
  } else {
    center__ = nullptr;
  }
  if (from.has_extents_()) {
    extents__ = new ::phoenix::ad_data_upload::Vec2d_message(*from.extents__);
  } else {
    extents__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.OBBox2d_message)
}

void OBBox2d_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&center__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extents__) -
      reinterpret_cast<char*>(&center__)) + sizeof(extents__));
}

OBBox2d_message::~OBBox2d_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.OBBox2d_message)
  SharedDtor();
}

void OBBox2d_message::SharedDtor() {
  if (this != internal_default_instance()) delete center__;
  if (this != internal_default_instance()) delete extents__;
}

void OBBox2d_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBBox2d_message& OBBox2d_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBBox2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void OBBox2d_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.OBBox2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_direction__.Clear();
  if (GetArenaNoVirtual() == nullptr && center__ != nullptr) {
    delete center__;
  }
  center__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extents__ != nullptr) {
    delete extents__;
  }
  extents__ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OBBox2d_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.Vec2d_message center_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_center_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_unit_direction_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_extents_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OBBox2d_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.OBBox2d_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.Vec2d_message center_ = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_unit_direction_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extents_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.OBBox2d_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.OBBox2d_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OBBox2d_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.OBBox2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Vec2d_message center_ = 1;
  if (this->has_center_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::center_(this), output);
  }

  // repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unit_direction__size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->unit_direction_(static_cast<int>(i)),
      output);
  }

  // .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
  if (this->has_extents_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::extents_(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.OBBox2d_message)
}

size_t OBBox2d_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.OBBox2d_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->unit_direction__size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->unit_direction_(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.Vec2d_message center_ = 1;
  if (this->has_center_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center__);
  }

  // .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
  if (this->has_extents_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extents__);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBBox2d_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBBox2d_message*>(
      &from));
}

void OBBox2d_message::MergeFrom(const OBBox2d_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.OBBox2d_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_direction__.MergeFrom(from.unit_direction__);
  if (from.has_center_()) {
    mutable_center_()->::phoenix::ad_data_upload::Vec2d_message::MergeFrom(from.center_());
  }
  if (from.has_extents_()) {
    mutable_extents_()->::phoenix::ad_data_upload::Vec2d_message::MergeFrom(from.extents_());
  }
}

void OBBox2d_message::CopyFrom(const OBBox2d_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.OBBox2d_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBBox2d_message::IsInitialized() const {
  return true;
}

void OBBox2d_message::InternalSwap(OBBox2d_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&unit_direction__)->InternalSwap(CastToBase(&other->unit_direction__));
  swap(center__, other->center__);
  swap(extents__, other->extents__);
}

std::string OBBox2d_message::GetTypeName() const {
  return "phoenix.ad_data_upload.OBBox2d_message";
}


// ===================================================================

void ByPassingReq_message::InitAsDefaultInstance() {
}
class ByPassingReq_message::_Internal {
 public:
};

ByPassingReq_message::ByPassingReq_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ByPassingReq_message)
}
ByPassingReq_message::ByPassingReq_message(const ByPassingReq_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_turning_left_, &from.allow_turning_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_turning_right_) -
    reinterpret_cast<char*>(&allow_turning_left_)) + sizeof(allow_turning_right_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ByPassingReq_message)
}

void ByPassingReq_message::SharedCtor() {
  ::memset(&allow_turning_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_turning_right_) -
      reinterpret_cast<char*>(&allow_turning_left_)) + sizeof(allow_turning_right_));
}

ByPassingReq_message::~ByPassingReq_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ByPassingReq_message)
  SharedDtor();
}

void ByPassingReq_message::SharedDtor() {
}

void ByPassingReq_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ByPassingReq_message& ByPassingReq_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ByPassingReq_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ByPassingReq_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ByPassingReq_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_turning_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_turning_right_) -
      reinterpret_cast<char*>(&allow_turning_left_)) + sizeof(allow_turning_right_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ByPassingReq_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_turning_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_turning_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_turning_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          allow_turning_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ByPassingReq_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ByPassingReq_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool allow_turning_left = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_turning_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_turning_right = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_turning_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ByPassingReq_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ByPassingReq_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ByPassingReq_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ByPassingReq_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_turning_left = 1;
  if (this->allow_turning_left() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->allow_turning_left(), output);
  }

  // bool allow_turning_right = 2;
  if (this->allow_turning_right() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->allow_turning_right(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ByPassingReq_message)
}

size_t ByPassingReq_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ByPassingReq_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_turning_left = 1;
  if (this->allow_turning_left() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_turning_right = 2;
  if (this->allow_turning_right() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ByPassingReq_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ByPassingReq_message*>(
      &from));
}

void ByPassingReq_message::MergeFrom(const ByPassingReq_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ByPassingReq_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_turning_left() != 0) {
    set_allow_turning_left(from.allow_turning_left());
  }
  if (from.allow_turning_right() != 0) {
    set_allow_turning_right(from.allow_turning_right());
  }
}

void ByPassingReq_message::CopyFrom(const ByPassingReq_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ByPassingReq_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByPassingReq_message::IsInitialized() const {
  return true;
}

void ByPassingReq_message::InternalSwap(ByPassingReq_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(allow_turning_left_, other->allow_turning_left_);
  swap(allow_turning_right_, other->allow_turning_right_);
}

std::string ByPassingReq_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ByPassingReq_message";
}


// ===================================================================

void EventChangingLaneReq_message::InitAsDefaultInstance() {
}
class EventChangingLaneReq_message::_Internal {
 public:
};

EventChangingLaneReq_message::EventChangingLaneReq_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.EventChangingLaneReq_message)
}
EventChangingLaneReq_message::EventChangingLaneReq_message(const EventChangingLaneReq_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_auto_changing_to_right__) -
    reinterpret_cast<char*>(&id_)) + sizeof(allow_auto_changing_to_right__));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.EventChangingLaneReq_message)
}

void EventChangingLaneReq_message::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_auto_changing_to_right__) -
      reinterpret_cast<char*>(&id_)) + sizeof(allow_auto_changing_to_right__));
}

EventChangingLaneReq_message::~EventChangingLaneReq_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.EventChangingLaneReq_message)
  SharedDtor();
}

void EventChangingLaneReq_message::SharedDtor() {
}

void EventChangingLaneReq_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventChangingLaneReq_message& EventChangingLaneReq_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventChangingLaneReq_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void EventChangingLaneReq_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_auto_changing_to_right__) -
      reinterpret_cast<char*>(&id_)) + sizeof(allow_auto_changing_to_right__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventChangingLaneReq_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 request_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sequence_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_auto_changing_to_left_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_auto_changing_to_left__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_auto_changing_to_right_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          allow_auto_changing_to_right__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventChangingLaneReq_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 request_ = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &request__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 sequence_ = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sequence__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_auto_changing_to_left_ = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_auto_changing_to_left__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_auto_changing_to_right_ = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_auto_changing_to_right__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.EventChangingLaneReq_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.EventChangingLaneReq_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventChangingLaneReq_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // sint32 request_ = 2;
  if (this->request_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->request_(), output);
  }

  // sint32 sequence_ = 3;
  if (this->sequence_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->sequence_(), output);
  }

  // bool allow_auto_changing_to_left_ = 4;
  if (this->allow_auto_changing_to_left_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->allow_auto_changing_to_left_(), output);
  }

  // bool allow_auto_changing_to_right_ = 5;
  if (this->allow_auto_changing_to_right_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->allow_auto_changing_to_right_(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.EventChangingLaneReq_message)
}

size_t EventChangingLaneReq_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  // sint32 request_ = 2;
  if (this->request_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->request_());
  }

  // sint32 sequence_ = 3;
  if (this->sequence_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->sequence_());
  }

  // bool allow_auto_changing_to_left_ = 4;
  if (this->allow_auto_changing_to_left_() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_auto_changing_to_right_ = 5;
  if (this->allow_auto_changing_to_right_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventChangingLaneReq_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventChangingLaneReq_message*>(
      &from));
}

void EventChangingLaneReq_message::MergeFrom(const EventChangingLaneReq_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.request_() != 0) {
    set_request_(from.request_());
  }
  if (from.sequence_() != 0) {
    set_sequence_(from.sequence_());
  }
  if (from.allow_auto_changing_to_left_() != 0) {
    set_allow_auto_changing_to_left_(from.allow_auto_changing_to_left_());
  }
  if (from.allow_auto_changing_to_right_() != 0) {
    set_allow_auto_changing_to_right_(from.allow_auto_changing_to_right_());
  }
}

void EventChangingLaneReq_message::CopyFrom(const EventChangingLaneReq_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.EventChangingLaneReq_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChangingLaneReq_message::IsInitialized() const {
  return true;
}

void EventChangingLaneReq_message::InternalSwap(EventChangingLaneReq_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(request__, other->request__);
  swap(sequence__, other->sequence__);
  swap(allow_auto_changing_to_left__, other->allow_auto_changing_to_left__);
  swap(allow_auto_changing_to_right__, other->allow_auto_changing_to_right__);
}

std::string EventChangingLaneReq_message::GetTypeName() const {
  return "phoenix.ad_data_upload.EventChangingLaneReq_message";
}


// ===================================================================

void ActionPlanningResult_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_ActionPlanningResult_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_ActionPlanningResult_message_default_instance_._instance.get_mutable()->bypassing_req_ = const_cast< ::phoenix::ad_data_upload::ByPassingReq_message*>(
      ::phoenix::ad_data_upload::ByPassingReq_message::internal_default_instance());
  ::phoenix::ad_data_upload::_ActionPlanningResult_message_default_instance_._instance.get_mutable()->event_changing_lane_req_ = const_cast< ::phoenix::ad_data_upload::EventChangingLaneReq_message*>(
      ::phoenix::ad_data_upload::EventChangingLaneReq_message::internal_default_instance());
}
class ActionPlanningResult_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const ActionPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::ByPassingReq_message& bypassing_req(const ActionPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::EventChangingLaneReq_message& event_changing_lane_req(const ActionPlanningResult_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
ActionPlanningResult_message::_Internal::msg_head(const ActionPlanningResult_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::ByPassingReq_message&
ActionPlanningResult_message::_Internal::bypassing_req(const ActionPlanningResult_message* msg) {
  return *msg->bypassing_req_;
}
const ::phoenix::ad_data_upload::EventChangingLaneReq_message&
ActionPlanningResult_message::_Internal::event_changing_lane_req(const ActionPlanningResult_message* msg) {
  return *msg->event_changing_lane_req_;
}
ActionPlanningResult_message::ActionPlanningResult_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ActionPlanningResult_message)
}
ActionPlanningResult_message::ActionPlanningResult_message(const ActionPlanningResult_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_bypassing_req()) {
    bypassing_req_ = new ::phoenix::ad_data_upload::ByPassingReq_message(*from.bypassing_req_);
  } else {
    bypassing_req_ = nullptr;
  }
  if (from.has_event_changing_lane_req()) {
    event_changing_lane_req_ = new ::phoenix::ad_data_upload::EventChangingLaneReq_message(*from.event_changing_lane_req_);
  } else {
    event_changing_lane_req_ = nullptr;
  }
  ::memcpy(&enable_adas_, &from.enable_adas_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_lamp_) -
    reinterpret_cast<char*>(&enable_adas_)) + sizeof(turn_lamp_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ActionPlanningResult_message)
}

void ActionPlanningResult_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_lamp_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(turn_lamp_));
}

ActionPlanningResult_message::~ActionPlanningResult_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ActionPlanningResult_message)
  SharedDtor();
}

void ActionPlanningResult_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete bypassing_req_;
  if (this != internal_default_instance()) delete event_changing_lane_req_;
}

void ActionPlanningResult_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionPlanningResult_message& ActionPlanningResult_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ActionPlanningResult_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bypassing_req_ != nullptr) {
    delete bypassing_req_;
  }
  bypassing_req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_changing_lane_req_ != nullptr) {
    delete event_changing_lane_req_;
  }
  event_changing_lane_req_ = nullptr;
  ::memset(&enable_adas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_lamp_) -
      reinterpret_cast<char*>(&enable_adas_)) + sizeof(turn_lamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionPlanningResult_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_adas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_adas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_aeb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_aeb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_acc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_lka = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_lka_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_alc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_alc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_isl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enable_isl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_ngp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_ngp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float v_setting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          v_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_setting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          a_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_gap_setting = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          time_gap_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 driving_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 gear = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 turn_lamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          turn_lamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_bypassing_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_event_changing_lane_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionPlanningResult_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_adas = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_adas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_aeb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_aeb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_acc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_lka = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_lka_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_alc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_alc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_isl = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_isl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ngp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ngp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v_setting = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a_setting = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_gap_setting = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_gap_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 driving_mode = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 gear = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 turn_lamp = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &turn_lamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bypassing_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event_changing_lane_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ActionPlanningResult_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ActionPlanningResult_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionPlanningResult_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // bool enable_adas = 2;
  if (this->enable_adas() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->enable_adas(), output);
  }

  // bool enable_aeb = 3;
  if (this->enable_aeb() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->enable_aeb(), output);
  }

  // bool enable_acc = 4;
  if (this->enable_acc() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_acc(), output);
  }

  // bool enable_lka = 5;
  if (this->enable_lka() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->enable_lka(), output);
  }

  // bool enable_alc = 6;
  if (this->enable_alc() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->enable_alc(), output);
  }

  // bool enable_isl = 7;
  if (this->enable_isl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->enable_isl(), output);
  }

  // bool enable_ngp = 8;
  if (this->enable_ngp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->enable_ngp(), output);
  }

  // float v_setting = 9;
  if (!(this->v_setting() <= 0 && this->v_setting() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->v_setting(), output);
  }

  // float a_setting = 10;
  if (!(this->a_setting() <= 0 && this->a_setting() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->a_setting(), output);
  }

  // float time_gap_setting = 11;
  if (!(this->time_gap_setting() <= 0 && this->time_gap_setting() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->time_gap_setting(), output);
  }

  // sint32 driving_mode = 12;
  if (this->driving_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(12, this->driving_mode(), output);
  }

  // sint32 gear = 13;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(13, this->gear(), output);
  }

  // sint32 turn_lamp = 14;
  if (this->turn_lamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(14, this->turn_lamp(), output);
  }

  // .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
  if (this->has_bypassing_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::bypassing_req(this), output);
  }

  // .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
  if (this->has_event_changing_lane_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::event_changing_lane_req(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ActionPlanningResult_message)
}

size_t ActionPlanningResult_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
  if (this->has_bypassing_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bypassing_req_);
  }

  // .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
  if (this->has_event_changing_lane_req()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_changing_lane_req_);
  }

  // bool enable_adas = 2;
  if (this->enable_adas() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aeb = 3;
  if (this->enable_aeb() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_acc = 4;
  if (this->enable_acc() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_lka = 5;
  if (this->enable_lka() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_alc = 6;
  if (this->enable_alc() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_isl = 7;
  if (this->enable_isl() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_ngp = 8;
  if (this->enable_ngp() != 0) {
    total_size += 1 + 1;
  }

  // float v_setting = 9;
  if (!(this->v_setting() <= 0 && this->v_setting() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_setting = 10;
  if (!(this->a_setting() <= 0 && this->a_setting() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_gap_setting = 11;
  if (!(this->time_gap_setting() <= 0 && this->time_gap_setting() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 driving_mode = 12;
  if (this->driving_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->driving_mode());
  }

  // sint32 gear = 13;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->gear());
  }

  // sint32 turn_lamp = 14;
  if (this->turn_lamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->turn_lamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionPlanningResult_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActionPlanningResult_message*>(
      &from));
}

void ActionPlanningResult_message::MergeFrom(const ActionPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_bypassing_req()) {
    mutable_bypassing_req()->::phoenix::ad_data_upload::ByPassingReq_message::MergeFrom(from.bypassing_req());
  }
  if (from.has_event_changing_lane_req()) {
    mutable_event_changing_lane_req()->::phoenix::ad_data_upload::EventChangingLaneReq_message::MergeFrom(from.event_changing_lane_req());
  }
  if (from.enable_adas() != 0) {
    set_enable_adas(from.enable_adas());
  }
  if (from.enable_aeb() != 0) {
    set_enable_aeb(from.enable_aeb());
  }
  if (from.enable_acc() != 0) {
    set_enable_acc(from.enable_acc());
  }
  if (from.enable_lka() != 0) {
    set_enable_lka(from.enable_lka());
  }
  if (from.enable_alc() != 0) {
    set_enable_alc(from.enable_alc());
  }
  if (from.enable_isl() != 0) {
    set_enable_isl(from.enable_isl());
  }
  if (from.enable_ngp() != 0) {
    set_enable_ngp(from.enable_ngp());
  }
  if (!(from.v_setting() <= 0 && from.v_setting() >= 0)) {
    set_v_setting(from.v_setting());
  }
  if (!(from.a_setting() <= 0 && from.a_setting() >= 0)) {
    set_a_setting(from.a_setting());
  }
  if (!(from.time_gap_setting() <= 0 && from.time_gap_setting() >= 0)) {
    set_time_gap_setting(from.time_gap_setting());
  }
  if (from.driving_mode() != 0) {
    set_driving_mode(from.driving_mode());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.turn_lamp() != 0) {
    set_turn_lamp(from.turn_lamp());
  }
}

void ActionPlanningResult_message::CopyFrom(const ActionPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ActionPlanningResult_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPlanningResult_message::IsInitialized() const {
  return true;
}

void ActionPlanningResult_message::InternalSwap(ActionPlanningResult_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_head_, other->msg_head_);
  swap(bypassing_req_, other->bypassing_req_);
  swap(event_changing_lane_req_, other->event_changing_lane_req_);
  swap(enable_adas_, other->enable_adas_);
  swap(enable_aeb_, other->enable_aeb_);
  swap(enable_acc_, other->enable_acc_);
  swap(enable_lka_, other->enable_lka_);
  swap(enable_alc_, other->enable_alc_);
  swap(enable_isl_, other->enable_isl_);
  swap(enable_ngp_, other->enable_ngp_);
  swap(v_setting_, other->v_setting_);
  swap(a_setting_, other->a_setting_);
  swap(time_gap_setting_, other->time_gap_setting_);
  swap(driving_mode_, other->driving_mode_);
  swap(gear_, other->gear_);
  swap(turn_lamp_, other->turn_lamp_);
}

std::string ActionPlanningResult_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ActionPlanningResult_message";
}


// ===================================================================

void point_message::InitAsDefaultInstance() {
}
class point_message::_Internal {
 public:
};

point_message::point_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.point_message)
}
point_message::point_message(const point_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.point_message)
}

void point_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

point_message::~point_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.point_message)
  SharedDtor();
}

void point_message::SharedDtor() {
}

void point_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const point_message& point_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_point_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void point_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* point_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool point_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.point_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.point_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.point_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void point_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.point_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->curvature(), output);
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->s(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.point_message)
}

size_t point_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.point_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void point_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const point_message*>(
      &from));
}

void point_message::MergeFrom(const point_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.point_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    set_curvature(from.curvature());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
}

void point_message::CopyFrom(const point_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.point_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point_message::IsInitialized() const {
  return true;
}

void point_message::InternalSwap(point_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(curvature_, other->curvature_);
  swap(s_, other->s_);
}

std::string point_message::GetTypeName() const {
  return "phoenix.ad_data_upload.point_message";
}


// ===================================================================

void TarTrj_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_TarTrj_message_default_instance_._instance.get_mutable()->curr_pos_ = const_cast< ::phoenix::ad_data_upload::Pos_message*>(
      ::phoenix::ad_data_upload::Pos_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TarTrj_message_default_instance_._instance.get_mutable()->leading_pos_ = const_cast< ::phoenix::ad_data_upload::Pos_message*>(
      ::phoenix::ad_data_upload::Pos_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TarTrj_message_default_instance_._instance.get_mutable()->lat_err_ = const_cast< ::phoenix::ad_data_upload::Lat_Err_message*>(
      ::phoenix::ad_data_upload::Lat_Err_message::internal_default_instance());
}
class TarTrj_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Pos_message& curr_pos(const TarTrj_message* msg);
  static const ::phoenix::ad_data_upload::Pos_message& leading_pos(const TarTrj_message* msg);
  static const ::phoenix::ad_data_upload::Lat_Err_message& lat_err(const TarTrj_message* msg);
};

const ::phoenix::ad_data_upload::Pos_message&
TarTrj_message::_Internal::curr_pos(const TarTrj_message* msg) {
  return *msg->curr_pos_;
}
const ::phoenix::ad_data_upload::Pos_message&
TarTrj_message::_Internal::leading_pos(const TarTrj_message* msg) {
  return *msg->leading_pos_;
}
const ::phoenix::ad_data_upload::Lat_Err_message&
TarTrj_message::_Internal::lat_err(const TarTrj_message* msg) {
  return *msg->lat_err_;
}
TarTrj_message::TarTrj_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TarTrj_message)
}
TarTrj_message::TarTrj_message(const TarTrj_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curr_pos()) {
    curr_pos_ = new ::phoenix::ad_data_upload::Pos_message(*from.curr_pos_);
  } else {
    curr_pos_ = nullptr;
  }
  if (from.has_leading_pos()) {
    leading_pos_ = new ::phoenix::ad_data_upload::Pos_message(*from.leading_pos_);
  } else {
    leading_pos_ = nullptr;
  }
  if (from.has_lat_err()) {
    lat_err_ = new ::phoenix::ad_data_upload::Lat_Err_message(*from.lat_err_);
  } else {
    lat_err_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(points_num_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TarTrj_message)
}

void TarTrj_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&curr_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_num_) -
      reinterpret_cast<char*>(&curr_pos_)) + sizeof(points_num_));
}

TarTrj_message::~TarTrj_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TarTrj_message)
  SharedDtor();
}

void TarTrj_message::SharedDtor() {
  if (this != internal_default_instance()) delete curr_pos_;
  if (this != internal_default_instance()) delete leading_pos_;
  if (this != internal_default_instance()) delete lat_err_;
}

void TarTrj_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TarTrj_message& TarTrj_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TarTrj_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void TarTrj_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TarTrj_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaNoVirtual() == nullptr && curr_pos_ != nullptr) {
    delete curr_pos_;
  }
  curr_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leading_pos_ != nullptr) {
    delete leading_pos_;
  }
  leading_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lat_err_ != nullptr) {
    delete lat_err_;
  }
  lat_err_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(points_num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TarTrj_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_curr_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leading_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lat_err(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trj_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trj_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 points_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          points_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.point_message points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TarTrj_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TarTrj_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curr_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leading_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trj_direction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trj_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 points_num = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &points_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.point_message points = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TarTrj_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TarTrj_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TarTrj_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TarTrj_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(1, this->timestamp(), output);
  }

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  if (this->has_curr_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::curr_pos(this), output);
  }

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  if (this->has_leading_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::leading_pos(this), output);
  }

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  if (this->has_lat_err()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::lat_err(this), output);
  }

  // uint32 trj_direction = 5;
  if (this->trj_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->trj_direction(), output);
  }

  // sint32 points_num = 6;
  if (this->points_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(6, this->points_num(), output);
  }

  // repeated .phoenix.ad_data_upload.point_message points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->points(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TarTrj_message)
}

size_t TarTrj_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TarTrj_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.point_message points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  if (this->has_curr_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curr_pos_);
  }

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  if (this->has_leading_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leading_pos_);
  }

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  if (this->has_lat_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_err_);
  }

  // sint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->timestamp());
  }

  // uint32 trj_direction = 5;
  if (this->trj_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->trj_direction());
  }

  // sint32 points_num = 6;
  if (this->points_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->points_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TarTrj_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TarTrj_message*>(
      &from));
}

void TarTrj_message::MergeFrom(const TarTrj_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TarTrj_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_curr_pos()) {
    mutable_curr_pos()->::phoenix::ad_data_upload::Pos_message::MergeFrom(from.curr_pos());
  }
  if (from.has_leading_pos()) {
    mutable_leading_pos()->::phoenix::ad_data_upload::Pos_message::MergeFrom(from.leading_pos());
  }
  if (from.has_lat_err()) {
    mutable_lat_err()->::phoenix::ad_data_upload::Lat_Err_message::MergeFrom(from.lat_err());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.trj_direction() != 0) {
    set_trj_direction(from.trj_direction());
  }
  if (from.points_num() != 0) {
    set_points_num(from.points_num());
  }
}

void TarTrj_message::CopyFrom(const TarTrj_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TarTrj_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TarTrj_message::IsInitialized() const {
  return true;
}

void TarTrj_message::InternalSwap(TarTrj_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(curr_pos_, other->curr_pos_);
  swap(leading_pos_, other->leading_pos_);
  swap(lat_err_, other->lat_err_);
  swap(timestamp_, other->timestamp_);
  swap(trj_direction_, other->trj_direction_);
  swap(points_num_, other->points_num_);
}

std::string TarTrj_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TarTrj_message";
}


// ===================================================================

void PlanningResult_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_PlanningResult_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_PlanningResult_message_default_instance_._instance.get_mutable()->tar_trj_ = const_cast< ::phoenix::ad_data_upload::TarTrj_message*>(
      ::phoenix::ad_data_upload::TarTrj_message::internal_default_instance());
}
class PlanningResult_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const PlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::TarTrj_message& tar_trj(const PlanningResult_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
PlanningResult_message::_Internal::msg_head(const PlanningResult_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::TarTrj_message&
PlanningResult_message::_Internal::tar_trj(const PlanningResult_message* msg) {
  return *msg->tar_trj_;
}
PlanningResult_message::PlanningResult_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.PlanningResult_message)
}
PlanningResult_message::PlanningResult_message(const PlanningResult_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_tar_trj()) {
    tar_trj_ = new ::phoenix::ad_data_upload::TarTrj_message(*from.tar_trj_);
  } else {
    tar_trj_ = nullptr;
  }
  ::memcpy(&cur_status_, &from.cur_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&tar_a_) -
    reinterpret_cast<char*>(&cur_status_)) + sizeof(tar_a_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.PlanningResult_message)
}

void PlanningResult_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tar_a_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(tar_a_));
}

PlanningResult_message::~PlanningResult_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.PlanningResult_message)
  SharedDtor();
}

void PlanningResult_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete tar_trj_;
}

void PlanningResult_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningResult_message& PlanningResult_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void PlanningResult_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.PlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tar_trj_ != nullptr) {
    delete tar_trj_;
  }
  tar_trj_ = nullptr;
  ::memset(&cur_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tar_a_) -
      reinterpret_cast<char*>(&cur_status_)) + sizeof(tar_a_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningResult_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 cur_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 tar_driving_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tar_driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 enable_eps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 enable_throttle_sys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_throttle_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 enable_ebs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_ebs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 hold_steering_wheel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hold_steering_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 release_throttle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          release_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 tar_gear = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tar_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 tar_turn_lamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tar_turn_lamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 tar_brake_lamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tar_brake_lamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float tar_v = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          tar_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tar_a = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          tar_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_tar_trj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningResult_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.PlanningResult_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 cur_status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cur_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tar_driving_mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 enable_eps = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 enable_throttle_sys = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_throttle_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 enable_ebs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_ebs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 hold_steering_wheel = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hold_steering_wheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 release_throttle = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &release_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tar_gear = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tar_turn_lamp = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_turn_lamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tar_brake_lamp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_brake_lamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tar_v = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tar_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tar_a = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tar_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_trj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.PlanningResult_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.PlanningResult_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningResult_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.PlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // sint32 cur_status = 2;
  if (this->cur_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->cur_status(), output);
  }

  // sint32 tar_driving_mode = 3;
  if (this->tar_driving_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->tar_driving_mode(), output);
  }

  // sint32 enable_eps = 4;
  if (this->enable_eps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->enable_eps(), output);
  }

  // sint32 enable_throttle_sys = 5;
  if (this->enable_throttle_sys() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(5, this->enable_throttle_sys(), output);
  }

  // sint32 enable_ebs = 6;
  if (this->enable_ebs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(6, this->enable_ebs(), output);
  }

  // sint32 hold_steering_wheel = 7;
  if (this->hold_steering_wheel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(7, this->hold_steering_wheel(), output);
  }

  // sint32 release_throttle = 8;
  if (this->release_throttle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(8, this->release_throttle(), output);
  }

  // sint32 tar_gear = 9;
  if (this->tar_gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(9, this->tar_gear(), output);
  }

  // sint32 tar_turn_lamp = 10;
  if (this->tar_turn_lamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(10, this->tar_turn_lamp(), output);
  }

  // sint32 tar_brake_lamp = 11;
  if (this->tar_brake_lamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(11, this->tar_brake_lamp(), output);
  }

  // float tar_v = 12;
  if (!(this->tar_v() <= 0 && this->tar_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->tar_v(), output);
  }

  // float tar_a = 13;
  if (!(this->tar_a() <= 0 && this->tar_a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->tar_a(), output);
  }

  // .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
  if (this->has_tar_trj()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::tar_trj(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.PlanningResult_message)
}

size_t PlanningResult_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.PlanningResult_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
  if (this->has_tar_trj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tar_trj_);
  }

  // sint32 cur_status = 2;
  if (this->cur_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->cur_status());
  }

  // sint32 tar_driving_mode = 3;
  if (this->tar_driving_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tar_driving_mode());
  }

  // sint32 enable_eps = 4;
  if (this->enable_eps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->enable_eps());
  }

  // sint32 enable_throttle_sys = 5;
  if (this->enable_throttle_sys() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->enable_throttle_sys());
  }

  // sint32 enable_ebs = 6;
  if (this->enable_ebs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->enable_ebs());
  }

  // sint32 hold_steering_wheel = 7;
  if (this->hold_steering_wheel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->hold_steering_wheel());
  }

  // sint32 release_throttle = 8;
  if (this->release_throttle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->release_throttle());
  }

  // sint32 tar_gear = 9;
  if (this->tar_gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tar_gear());
  }

  // sint32 tar_turn_lamp = 10;
  if (this->tar_turn_lamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tar_turn_lamp());
  }

  // sint32 tar_brake_lamp = 11;
  if (this->tar_brake_lamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tar_brake_lamp());
  }

  // float tar_v = 12;
  if (!(this->tar_v() <= 0 && this->tar_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float tar_a = 13;
  if (!(this->tar_a() <= 0 && this->tar_a() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningResult_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlanningResult_message*>(
      &from));
}

void PlanningResult_message::MergeFrom(const PlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.PlanningResult_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_tar_trj()) {
    mutable_tar_trj()->::phoenix::ad_data_upload::TarTrj_message::MergeFrom(from.tar_trj());
  }
  if (from.cur_status() != 0) {
    set_cur_status(from.cur_status());
  }
  if (from.tar_driving_mode() != 0) {
    set_tar_driving_mode(from.tar_driving_mode());
  }
  if (from.enable_eps() != 0) {
    set_enable_eps(from.enable_eps());
  }
  if (from.enable_throttle_sys() != 0) {
    set_enable_throttle_sys(from.enable_throttle_sys());
  }
  if (from.enable_ebs() != 0) {
    set_enable_ebs(from.enable_ebs());
  }
  if (from.hold_steering_wheel() != 0) {
    set_hold_steering_wheel(from.hold_steering_wheel());
  }
  if (from.release_throttle() != 0) {
    set_release_throttle(from.release_throttle());
  }
  if (from.tar_gear() != 0) {
    set_tar_gear(from.tar_gear());
  }
  if (from.tar_turn_lamp() != 0) {
    set_tar_turn_lamp(from.tar_turn_lamp());
  }
  if (from.tar_brake_lamp() != 0) {
    set_tar_brake_lamp(from.tar_brake_lamp());
  }
  if (!(from.tar_v() <= 0 && from.tar_v() >= 0)) {
    set_tar_v(from.tar_v());
  }
  if (!(from.tar_a() <= 0 && from.tar_a() >= 0)) {
    set_tar_a(from.tar_a());
  }
}

void PlanningResult_message::CopyFrom(const PlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.PlanningResult_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult_message::IsInitialized() const {
  return true;
}

void PlanningResult_message::InternalSwap(PlanningResult_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_head_, other->msg_head_);
  swap(tar_trj_, other->tar_trj_);
  swap(cur_status_, other->cur_status_);
  swap(tar_driving_mode_, other->tar_driving_mode_);
  swap(enable_eps_, other->enable_eps_);
  swap(enable_throttle_sys_, other->enable_throttle_sys_);
  swap(enable_ebs_, other->enable_ebs_);
  swap(hold_steering_wheel_, other->hold_steering_wheel_);
  swap(release_throttle_, other->release_throttle_);
  swap(tar_gear_, other->tar_gear_);
  swap(tar_turn_lamp_, other->tar_turn_lamp_);
  swap(tar_brake_lamp_, other->tar_brake_lamp_);
  swap(tar_v_, other->tar_v_);
  swap(tar_a_, other->tar_a_);
}

std::string PlanningResult_message::GetTypeName() const {
  return "phoenix.ad_data_upload.PlanningResult_message";
}


// ===================================================================

void TarPos_message::InitAsDefaultInstance() {
}
class TarPos_message::_Internal {
 public:
};

TarPos_message::TarPos_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TarPos_message)
}
TarPos_message::TarPos_message(const TarPos_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TarPos_message)
}

void TarPos_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

TarPos_message::~TarPos_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TarPos_message)
  SharedDtor();
}

void TarPos_message::SharedDtor() {
}

void TarPos_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TarPos_message& TarPos_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TarPos_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void TarPos_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TarPos_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TarPos_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TarPos_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TarPos_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TarPos_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TarPos_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TarPos_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TarPos_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TarPos_message)
}

size_t TarPos_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TarPos_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TarPos_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TarPos_message*>(
      &from));
}

void TarPos_message::MergeFrom(const TarPos_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TarPos_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
}

void TarPos_message::CopyFrom(const TarPos_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TarPos_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TarPos_message::IsInitialized() const {
  return true;
}

void TarPos_message::InternalSwap(TarPos_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(s_, other->s_);
}

std::string TarPos_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TarPos_message";
}


// ===================================================================

void TarObj_message::InitAsDefaultInstance() {
}
class TarObj_message::_Internal {
 public:
};

TarObj_message::TarObj_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TarObj_message)
}
TarObj_message::TarObj_message(const TarObj_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rel_spd_level_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(rel_spd_level_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TarObj_message)
}

void TarObj_message::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_level_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(rel_spd_level_));
}

TarObj_message::~TarObj_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TarObj_message)
  SharedDtor();
}

void TarObj_message::SharedDtor() {
}

void TarObj_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TarObj_message& TarObj_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TarObj_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void TarObj_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TarObj_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_spd_level_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(rel_spd_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TarObj_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 obj_dec_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          obj_dec_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dist_to_obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dist_to_obj_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_gap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          time_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float relative_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          relative_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ttc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_v = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          obj_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 dist_gap_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dist_gap_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 rel_spd_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rel_spd_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TarObj_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TarObj_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 obj_dec_status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &obj_dec_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dist_to_obj = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_to_obj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_gap = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_v = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ttc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obj_v = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 dist_gap_level = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dist_gap_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 rel_spd_level = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rel_spd_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TarObj_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TarObj_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TarObj_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TarObj_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // sint32 obj_dec_status = 2;
  if (this->obj_dec_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->obj_dec_status(), output);
  }

  // float dist_to_obj = 3;
  if (!(this->dist_to_obj() <= 0 && this->dist_to_obj() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dist_to_obj(), output);
  }

  // float time_gap = 4;
  if (!(this->time_gap() <= 0 && this->time_gap() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->time_gap(), output);
  }

  // float relative_v = 5;
  if (!(this->relative_v() <= 0 && this->relative_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->relative_v(), output);
  }

  // float ttc = 6;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->ttc(), output);
  }

  // float obj_v = 7;
  if (!(this->obj_v() <= 0 && this->obj_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->obj_v(), output);
  }

  // sint32 dist_gap_level = 8;
  if (this->dist_gap_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(8, this->dist_gap_level(), output);
  }

  // sint32 rel_spd_level = 9;
  if (this->rel_spd_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(9, this->rel_spd_level(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TarObj_message)
}

size_t TarObj_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TarObj_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // sint32 obj_dec_status = 2;
  if (this->obj_dec_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->obj_dec_status());
  }

  // float dist_to_obj = 3;
  if (!(this->dist_to_obj() <= 0 && this->dist_to_obj() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_gap = 4;
  if (!(this->time_gap() <= 0 && this->time_gap() >= 0)) {
    total_size += 1 + 4;
  }

  // float relative_v = 5;
  if (!(this->relative_v() <= 0 && this->relative_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float ttc = 6;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_v = 7;
  if (!(this->obj_v() <= 0 && this->obj_v() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 dist_gap_level = 8;
  if (this->dist_gap_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->dist_gap_level());
  }

  // sint32 rel_spd_level = 9;
  if (this->rel_spd_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->rel_spd_level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TarObj_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TarObj_message*>(
      &from));
}

void TarObj_message::MergeFrom(const TarObj_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TarObj_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.obj_dec_status() != 0) {
    set_obj_dec_status(from.obj_dec_status());
  }
  if (!(from.dist_to_obj() <= 0 && from.dist_to_obj() >= 0)) {
    set_dist_to_obj(from.dist_to_obj());
  }
  if (!(from.time_gap() <= 0 && from.time_gap() >= 0)) {
    set_time_gap(from.time_gap());
  }
  if (!(from.relative_v() <= 0 && from.relative_v() >= 0)) {
    set_relative_v(from.relative_v());
  }
  if (!(from.ttc() <= 0 && from.ttc() >= 0)) {
    set_ttc(from.ttc());
  }
  if (!(from.obj_v() <= 0 && from.obj_v() >= 0)) {
    set_obj_v(from.obj_v());
  }
  if (from.dist_gap_level() != 0) {
    set_dist_gap_level(from.dist_gap_level());
  }
  if (from.rel_spd_level() != 0) {
    set_rel_spd_level(from.rel_spd_level());
  }
}

void TarObj_message::CopyFrom(const TarObj_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TarObj_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TarObj_message::IsInitialized() const {
  return true;
}

void TarObj_message::InternalSwap(TarObj_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
  swap(obj_dec_status_, other->obj_dec_status_);
  swap(dist_to_obj_, other->dist_to_obj_);
  swap(time_gap_, other->time_gap_);
  swap(relative_v_, other->relative_v_);
  swap(ttc_, other->ttc_);
  swap(obj_v_, other->obj_v_);
  swap(dist_gap_level_, other->dist_gap_level_);
  swap(rel_spd_level_, other->rel_spd_level_);
}

std::string TarObj_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TarObj_message";
}


// ===================================================================

void VelocityPlanningResult_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_VelocityPlanningResult_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_VelocityPlanningResult_message_default_instance_._instance.get_mutable()->tar_pos_ = const_cast< ::phoenix::ad_data_upload::TarPos_message*>(
      ::phoenix::ad_data_upload::TarPos_message::internal_default_instance());
  ::phoenix::ad_data_upload::_VelocityPlanningResult_message_default_instance_._instance.get_mutable()->tar_obj_ = const_cast< ::phoenix::ad_data_upload::TarObj_message*>(
      ::phoenix::ad_data_upload::TarObj_message::internal_default_instance());
}
class VelocityPlanningResult_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const VelocityPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::TarPos_message& tar_pos(const VelocityPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::TarObj_message& tar_obj(const VelocityPlanningResult_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
VelocityPlanningResult_message::_Internal::msg_head(const VelocityPlanningResult_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::TarPos_message&
VelocityPlanningResult_message::_Internal::tar_pos(const VelocityPlanningResult_message* msg) {
  return *msg->tar_pos_;
}
const ::phoenix::ad_data_upload::TarObj_message&
VelocityPlanningResult_message::_Internal::tar_obj(const VelocityPlanningResult_message* msg) {
  return *msg->tar_obj_;
}
VelocityPlanningResult_message::VelocityPlanningResult_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.VelocityPlanningResult_message)
}
VelocityPlanningResult_message::VelocityPlanningResult_message(const VelocityPlanningResult_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_tar_pos()) {
    tar_pos_ = new ::phoenix::ad_data_upload::TarPos_message(*from.tar_pos_);
  } else {
    tar_pos_ = nullptr;
  }
  if (from.has_tar_obj()) {
    tar_obj_ = new ::phoenix::ad_data_upload::TarObj_message(*from.tar_obj_);
  } else {
    tar_obj_ = nullptr;
  }
  ::memcpy(&tar_type_, &from.tar_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&aeb_action_) -
    reinterpret_cast<char*>(&tar_type_)) + sizeof(aeb_action_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.VelocityPlanningResult_message)
}

void VelocityPlanningResult_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_action_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(aeb_action_));
}

VelocityPlanningResult_message::~VelocityPlanningResult_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.VelocityPlanningResult_message)
  SharedDtor();
}

void VelocityPlanningResult_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete tar_pos_;
  if (this != internal_default_instance()) delete tar_obj_;
}

void VelocityPlanningResult_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityPlanningResult_message& VelocityPlanningResult_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void VelocityPlanningResult_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tar_pos_ != nullptr) {
    delete tar_pos_;
  }
  tar_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tar_obj_ != nullptr) {
    delete tar_obj_;
  }
  tar_obj_ = nullptr;
  ::memset(&tar_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_action_) -
      reinterpret_cast<char*>(&tar_type_)) + sizeof(aeb_action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VelocityPlanningResult_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 tar_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tar_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float tar_v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tar_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tar_a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          tar_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_tar_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool release_throttle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          release_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool aeb_warning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          aeb_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool aeb_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          aeb_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_tar_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VelocityPlanningResult_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 tar_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tar_v = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tar_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tar_a = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tar_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool release_throttle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &release_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool aeb_warning = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aeb_warning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool aeb_action = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aeb_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_obj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.VelocityPlanningResult_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.VelocityPlanningResult_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VelocityPlanningResult_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // sint32 tar_type = 2;
  if (this->tar_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->tar_type(), output);
  }

  // float tar_v = 3;
  if (!(this->tar_v() <= 0 && this->tar_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tar_v(), output);
  }

  // float tar_a = 4;
  if (!(this->tar_a() <= 0 && this->tar_a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->tar_a(), output);
  }

  // .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
  if (this->has_tar_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::tar_pos(this), output);
  }

  // bool release_throttle = 6;
  if (this->release_throttle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->release_throttle(), output);
  }

  // bool aeb_warning = 7;
  if (this->aeb_warning() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->aeb_warning(), output);
  }

  // bool aeb_action = 8;
  if (this->aeb_action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->aeb_action(), output);
  }

  // .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
  if (this->has_tar_obj()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::tar_obj(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.VelocityPlanningResult_message)
}

size_t VelocityPlanningResult_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
  if (this->has_tar_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tar_pos_);
  }

  // .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
  if (this->has_tar_obj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tar_obj_);
  }

  // sint32 tar_type = 2;
  if (this->tar_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->tar_type());
  }

  // float tar_v = 3;
  if (!(this->tar_v() <= 0 && this->tar_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float tar_a = 4;
  if (!(this->tar_a() <= 0 && this->tar_a() >= 0)) {
    total_size += 1 + 4;
  }

  // bool release_throttle = 6;
  if (this->release_throttle() != 0) {
    total_size += 1 + 1;
  }

  // bool aeb_warning = 7;
  if (this->aeb_warning() != 0) {
    total_size += 1 + 1;
  }

  // bool aeb_action = 8;
  if (this->aeb_action() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityPlanningResult_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VelocityPlanningResult_message*>(
      &from));
}

void VelocityPlanningResult_message::MergeFrom(const VelocityPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_tar_pos()) {
    mutable_tar_pos()->::phoenix::ad_data_upload::TarPos_message::MergeFrom(from.tar_pos());
  }
  if (from.has_tar_obj()) {
    mutable_tar_obj()->::phoenix::ad_data_upload::TarObj_message::MergeFrom(from.tar_obj());
  }
  if (from.tar_type() != 0) {
    set_tar_type(from.tar_type());
  }
  if (!(from.tar_v() <= 0 && from.tar_v() >= 0)) {
    set_tar_v(from.tar_v());
  }
  if (!(from.tar_a() <= 0 && from.tar_a() >= 0)) {
    set_tar_a(from.tar_a());
  }
  if (from.release_throttle() != 0) {
    set_release_throttle(from.release_throttle());
  }
  if (from.aeb_warning() != 0) {
    set_aeb_warning(from.aeb_warning());
  }
  if (from.aeb_action() != 0) {
    set_aeb_action(from.aeb_action());
  }
}

void VelocityPlanningResult_message::CopyFrom(const VelocityPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.VelocityPlanningResult_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityPlanningResult_message::IsInitialized() const {
  return true;
}

void VelocityPlanningResult_message::InternalSwap(VelocityPlanningResult_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_head_, other->msg_head_);
  swap(tar_pos_, other->tar_pos_);
  swap(tar_obj_, other->tar_obj_);
  swap(tar_type_, other->tar_type_);
  swap(tar_v_, other->tar_v_);
  swap(tar_a_, other->tar_a_);
  swap(release_throttle_, other->release_throttle_);
  swap(aeb_warning_, other->aeb_warning_);
  swap(aeb_action_, other->aeb_action_);
}

std::string VelocityPlanningResult_message::GetTypeName() const {
  return "phoenix.ad_data_upload.VelocityPlanningResult_message";
}


// ===================================================================

void ReferenceLineInfo_message::InitAsDefaultInstance() {
}
class ReferenceLineInfo_message::_Internal {
 public:
};

ReferenceLineInfo_message::ReferenceLineInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ReferenceLineInfo_message)
}
ReferenceLineInfo_message::ReferenceLineInfo_message(const ReferenceLineInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      curve_(from.curve_),
      smooth_curve_(from.smooth_curve_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curve_count_, &from.curve_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&smooth_curve_count_) -
    reinterpret_cast<char*>(&curve_count_)) + sizeof(smooth_curve_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ReferenceLineInfo_message)
}

void ReferenceLineInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&curve_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smooth_curve_count_) -
      reinterpret_cast<char*>(&curve_count_)) + sizeof(smooth_curve_count_));
}

ReferenceLineInfo_message::~ReferenceLineInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ReferenceLineInfo_message)
  SharedDtor();
}

void ReferenceLineInfo_message::SharedDtor() {
}

void ReferenceLineInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceLineInfo_message& ReferenceLineInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceLineInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ReferenceLineInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_.Clear();
  smooth_curve_.Clear();
  ::memset(&curve_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smooth_curve_count_) -
      reinterpret_cast<char*>(&curve_count_)) + sizeof(smooth_curve_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReferenceLineInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 curve_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curve_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 smooth_curve_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          smooth_curve_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_smooth_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReferenceLineInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 curve_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curve_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 smooth_curve_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smooth_curve_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_smooth_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ReferenceLineInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ReferenceLineInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReferenceLineInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 curve_count = 1;
  if (this->curve_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->curve_count(), output);
  }

  // repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->curve(static_cast<int>(i)),
      output);
  }

  // uint32 smooth_curve_count = 3;
  if (this->smooth_curve_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->smooth_curve_count(), output);
  }

  // repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->smooth_curve_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->smooth_curve(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ReferenceLineInfo_message)
}

size_t ReferenceLineInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->curve_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->curve(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->smooth_curve_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->smooth_curve(static_cast<int>(i)));
    }
  }

  // uint32 curve_count = 1;
  if (this->curve_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->curve_count());
  }

  // uint32 smooth_curve_count = 3;
  if (this->smooth_curve_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->smooth_curve_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReferenceLineInfo_message*>(
      &from));
}

void ReferenceLineInfo_message::MergeFrom(const ReferenceLineInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_.MergeFrom(from.curve_);
  smooth_curve_.MergeFrom(from.smooth_curve_);
  if (from.curve_count() != 0) {
    set_curve_count(from.curve_count());
  }
  if (from.smooth_curve_count() != 0) {
    set_smooth_curve_count(from.smooth_curve_count());
  }
}

void ReferenceLineInfo_message::CopyFrom(const ReferenceLineInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ReferenceLineInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineInfo_message::IsInitialized() const {
  return true;
}

void ReferenceLineInfo_message::InternalSwap(ReferenceLineInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&curve_)->InternalSwap(CastToBase(&other->curve_));
  CastToBase(&smooth_curve_)->InternalSwap(CastToBase(&other->smooth_curve_));
  swap(curve_count_, other->curve_count_);
  swap(smooth_curve_count_, other->smooth_curve_count_);
}

std::string ReferenceLineInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ReferenceLineInfo_message";
}


// ===================================================================

void TrajectoryPoint_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_TrajectoryPoint_message_default_instance_._instance.get_mutable()->path_point_info_ = const_cast< ::phoenix::ad_data_upload::PathPoint_message*>(
      ::phoenix::ad_data_upload::PathPoint_message::internal_default_instance());
}
class TrajectoryPoint_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::PathPoint_message& path_point_info(const TrajectoryPoint_message* msg);
};

const ::phoenix::ad_data_upload::PathPoint_message&
TrajectoryPoint_message::_Internal::path_point_info(const TrajectoryPoint_message* msg) {
  return *msg->path_point_info_;
}
TrajectoryPoint_message::TrajectoryPoint_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TrajectoryPoint_message)
}
TrajectoryPoint_message::TrajectoryPoint_message(const TrajectoryPoint_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point_info()) {
    path_point_info_ = new ::phoenix::ad_data_upload::PathPoint_message(*from.path_point_info_);
  } else {
    path_point_info_ = nullptr;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TrajectoryPoint_message)
}

void TrajectoryPoint_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&path_point_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_time_) -
      reinterpret_cast<char*>(&path_point_info_)) + sizeof(relative_time_));
}

TrajectoryPoint_message::~TrajectoryPoint_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TrajectoryPoint_message)
  SharedDtor();
}

void TrajectoryPoint_message::SharedDtor() {
  if (this != internal_default_instance()) delete path_point_info_;
}

void TrajectoryPoint_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPoint_message& TrajectoryPoint_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPoint_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPoint_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_point_info_ != nullptr) {
    delete path_point_info_;
  }
  path_point_info_ = nullptr;
  ::memset(&v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_time_) -
      reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPoint_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_path_point_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float relative_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPoint_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_path_point_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TrajectoryPoint_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TrajectoryPoint_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPoint_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
  if (this->has_path_point_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::path_point_info(this), output);
  }

  // float v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->v(), output);
  }

  // float a = 3;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->a(), output);
  }

  // float yaw_rate = 4;
  if (!(this->yaw_rate() <= 0 && this->yaw_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->yaw_rate(), output);
  }

  // float relative_time = 5;
  if (!(this->relative_time() <= 0 && this->relative_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->relative_time(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TrajectoryPoint_message)
}

size_t TrajectoryPoint_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
  if (this->has_path_point_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_point_info_);
  }

  // float v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 3;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 4;
  if (!(this->yaw_rate() <= 0 && this->yaw_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float relative_time = 5;
  if (!(this->relative_time() <= 0 && this->relative_time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPoint_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrajectoryPoint_message*>(
      &from));
}

void TrajectoryPoint_message::MergeFrom(const TrajectoryPoint_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path_point_info()) {
    mutable_path_point_info()->::phoenix::ad_data_upload::PathPoint_message::MergeFrom(from.path_point_info());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    set_v(from.v());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    set_a(from.a());
  }
  if (!(from.yaw_rate() <= 0 && from.yaw_rate() >= 0)) {
    set_yaw_rate(from.yaw_rate());
  }
  if (!(from.relative_time() <= 0 && from.relative_time() >= 0)) {
    set_relative_time(from.relative_time());
  }
}

void TrajectoryPoint_message::CopyFrom(const TrajectoryPoint_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TrajectoryPoint_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint_message::IsInitialized() const {
  return true;
}

void TrajectoryPoint_message::InternalSwap(TrajectoryPoint_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_point_info_, other->path_point_info_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(relative_time_, other->relative_time_);
}

std::string TrajectoryPoint_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TrajectoryPoint_message";
}


// ===================================================================

void ObjInfo_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_ObjInfo_message_default_instance_._instance.get_mutable()->obj_traj_point_ = const_cast< ::phoenix::ad_data_upload::TrajectoryPoint_message*>(
      ::phoenix::ad_data_upload::TrajectoryPoint_message::internal_default_instance());
}
class ObjInfo_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::TrajectoryPoint_message& obj_traj_point(const ObjInfo_message* msg);
};

const ::phoenix::ad_data_upload::TrajectoryPoint_message&
ObjInfo_message::_Internal::obj_traj_point(const ObjInfo_message* msg) {
  return *msg->obj_traj_point_;
}
ObjInfo_message::ObjInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ObjInfo_message)
}
ObjInfo_message::ObjInfo_message(const ObjInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obj_traj_point()) {
    obj_traj_point_ = new ::phoenix::ad_data_upload::TrajectoryPoint_message(*from.obj_traj_point_);
  } else {
    obj_traj_point_ = nullptr;
  }
  ::memcpy(&obj_list_index_, &from.obj_list_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_s_) -
    reinterpret_cast<char*>(&obj_list_index_)) + sizeof(collision_s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ObjInfo_message)
}

void ObjInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&obj_traj_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_s_) -
      reinterpret_cast<char*>(&obj_traj_point_)) + sizeof(collision_s_));
}

ObjInfo_message::~ObjInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ObjInfo_message)
  SharedDtor();
}

void ObjInfo_message::SharedDtor() {
  if (this != internal_default_instance()) delete obj_traj_point_;
}

void ObjInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjInfo_message& ObjInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ObjInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ObjInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obj_traj_point_ != nullptr) {
    delete obj_traj_point_;
  }
  obj_traj_point_ = nullptr;
  ::memset(&obj_list_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_s_) -
      reinterpret_cast<char*>(&obj_list_index_)) + sizeof(collision_s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 obj_list_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          obj_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 risk_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          risk_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dynamic_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dynamic_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float static_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          static_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_s_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          obj_s_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_l_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          obj_l_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float collision_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          collision_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_obj_traj_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ObjInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 obj_list_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &obj_list_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 risk_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &risk_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dynamic_distance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dynamic_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float static_distance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &static_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obj_s_ref = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_s_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obj_l_ref = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_l_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_s = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obj_traj_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ObjInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ObjInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ObjInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 obj_list_index = 1;
  if (this->obj_list_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->obj_list_index(), output);
  }

  // sint32 risk_value = 2;
  if (this->risk_value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->risk_value(), output);
  }

  // float dynamic_distance = 3;
  if (!(this->dynamic_distance() <= 0 && this->dynamic_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dynamic_distance(), output);
  }

  // float static_distance = 4;
  if (!(this->static_distance() <= 0 && this->static_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->static_distance(), output);
  }

  // float obj_s_ref = 5;
  if (!(this->obj_s_ref() <= 0 && this->obj_s_ref() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->obj_s_ref(), output);
  }

  // float obj_l_ref = 6;
  if (!(this->obj_l_ref() <= 0 && this->obj_l_ref() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->obj_l_ref(), output);
  }

  // float collision_s = 7;
  if (!(this->collision_s() <= 0 && this->collision_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->collision_s(), output);
  }

  // .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
  if (this->has_obj_traj_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::obj_traj_point(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ObjInfo_message)
}

size_t ObjInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ObjInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
  if (this->has_obj_traj_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obj_traj_point_);
  }

  // sint32 obj_list_index = 1;
  if (this->obj_list_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->obj_list_index());
  }

  // sint32 risk_value = 2;
  if (this->risk_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->risk_value());
  }

  // float dynamic_distance = 3;
  if (!(this->dynamic_distance() <= 0 && this->dynamic_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float static_distance = 4;
  if (!(this->static_distance() <= 0 && this->static_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_s_ref = 5;
  if (!(this->obj_s_ref() <= 0 && this->obj_s_ref() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_l_ref = 6;
  if (!(this->obj_l_ref() <= 0 && this->obj_l_ref() >= 0)) {
    total_size += 1 + 4;
  }

  // float collision_s = 7;
  if (!(this->collision_s() <= 0 && this->collision_s() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObjInfo_message*>(
      &from));
}

void ObjInfo_message::MergeFrom(const ObjInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ObjInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obj_traj_point()) {
    mutable_obj_traj_point()->::phoenix::ad_data_upload::TrajectoryPoint_message::MergeFrom(from.obj_traj_point());
  }
  if (from.obj_list_index() != 0) {
    set_obj_list_index(from.obj_list_index());
  }
  if (from.risk_value() != 0) {
    set_risk_value(from.risk_value());
  }
  if (!(from.dynamic_distance() <= 0 && from.dynamic_distance() >= 0)) {
    set_dynamic_distance(from.dynamic_distance());
  }
  if (!(from.static_distance() <= 0 && from.static_distance() >= 0)) {
    set_static_distance(from.static_distance());
  }
  if (!(from.obj_s_ref() <= 0 && from.obj_s_ref() >= 0)) {
    set_obj_s_ref(from.obj_s_ref());
  }
  if (!(from.obj_l_ref() <= 0 && from.obj_l_ref() >= 0)) {
    set_obj_l_ref(from.obj_l_ref());
  }
  if (!(from.collision_s() <= 0 && from.collision_s() >= 0)) {
    set_collision_s(from.collision_s());
  }
}

void ObjInfo_message::CopyFrom(const ObjInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ObjInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjInfo_message::IsInitialized() const {
  return true;
}

void ObjInfo_message::InternalSwap(ObjInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obj_traj_point_, other->obj_traj_point_);
  swap(obj_list_index_, other->obj_list_index_);
  swap(risk_value_, other->risk_value_);
  swap(dynamic_distance_, other->dynamic_distance_);
  swap(static_distance_, other->static_distance_);
  swap(obj_s_ref_, other->obj_s_ref_);
  swap(obj_l_ref_, other->obj_l_ref_);
  swap(collision_s_, other->collision_s_);
}

std::string ObjInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ObjInfo_message";
}


// ===================================================================

void FollowingTarget_message::InitAsDefaultInstance() {
}
class FollowingTarget_message::_Internal {
 public:
};

FollowingTarget_message::FollowingTarget_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.FollowingTarget_message)
}
FollowingTarget_message::FollowingTarget_message(const FollowingTarget_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_y_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(obj_y_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.FollowingTarget_message)
}

void FollowingTarget_message::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_y_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(obj_y_));
}

FollowingTarget_message::~FollowingTarget_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.FollowingTarget_message)
  SharedDtor();
}

void FollowingTarget_message::SharedDtor() {
}

void FollowingTarget_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FollowingTarget_message& FollowingTarget_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FollowingTarget_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void FollowingTarget_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.FollowingTarget_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_y_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(obj_y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FollowingTarget_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float obj_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          obj_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obj_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          obj_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FollowingTarget_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.FollowingTarget_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obj_x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obj_y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.FollowingTarget_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.FollowingTarget_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FollowingTarget_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.FollowingTarget_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // float obj_x = 2;
  if (!(this->obj_x() <= 0 && this->obj_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->obj_x(), output);
  }

  // float obj_y = 3;
  if (!(this->obj_y() <= 0 && this->obj_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->obj_y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.FollowingTarget_message)
}

size_t FollowingTarget_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.FollowingTarget_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // float obj_x = 2;
  if (!(this->obj_x() <= 0 && this->obj_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float obj_y = 3;
  if (!(this->obj_y() <= 0 && this->obj_y() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowingTarget_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FollowingTarget_message*>(
      &from));
}

void FollowingTarget_message::MergeFrom(const FollowingTarget_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.FollowingTarget_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (!(from.obj_x() <= 0 && from.obj_x() >= 0)) {
    set_obj_x(from.obj_x());
  }
  if (!(from.obj_y() <= 0 && from.obj_y() >= 0)) {
    set_obj_y(from.obj_y());
  }
}

void FollowingTarget_message::CopyFrom(const FollowingTarget_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.FollowingTarget_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowingTarget_message::IsInitialized() const {
  return true;
}

void FollowingTarget_message::InternalSwap(FollowingTarget_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
  swap(obj_x_, other->obj_x_);
  swap(obj_y_, other->obj_y_);
}

std::string FollowingTarget_message::GetTypeName() const {
  return "phoenix.ad_data_upload.FollowingTarget_message";
}


// ===================================================================

void DrivingMapInfo_2_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_DrivingMapInfo_2_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_DrivingMapInfo_2_message_default_instance_._instance.get_mutable()->nearest_point_to_veh_on_lane_ = const_cast< ::phoenix::ad_data_upload::PathPoint_message*>(
      ::phoenix::ad_data_upload::PathPoint_message::internal_default_instance());
  ::phoenix::ad_data_upload::_DrivingMapInfo_2_message_default_instance_._instance.get_mutable()->following_target_ = const_cast< ::phoenix::ad_data_upload::FollowingTarget_message*>(
      ::phoenix::ad_data_upload::FollowingTarget_message::internal_default_instance());
}
class DrivingMapInfo_2_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const DrivingMapInfo_2_message* msg);
  static const ::phoenix::ad_data_upload::PathPoint_message& nearest_point_to_veh_on_lane(const DrivingMapInfo_2_message* msg);
  static const ::phoenix::ad_data_upload::FollowingTarget_message& following_target(const DrivingMapInfo_2_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
DrivingMapInfo_2_message::_Internal::msg_head(const DrivingMapInfo_2_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::PathPoint_message&
DrivingMapInfo_2_message::_Internal::nearest_point_to_veh_on_lane(const DrivingMapInfo_2_message* msg) {
  return *msg->nearest_point_to_veh_on_lane_;
}
const ::phoenix::ad_data_upload::FollowingTarget_message&
DrivingMapInfo_2_message::_Internal::following_target(const DrivingMapInfo_2_message* msg) {
  return *msg->following_target_;
}
DrivingMapInfo_2_message::DrivingMapInfo_2_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.DrivingMapInfo_2_message)
}
DrivingMapInfo_2_message::DrivingMapInfo_2_message(const DrivingMapInfo_2_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      reference_lines_(from.reference_lines_),
      risky_obj_list_(from.risky_obj_list_),
      uncertain_list_(from.uncertain_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_nearest_point_to_veh_on_lane()) {
    nearest_point_to_veh_on_lane_ = new ::phoenix::ad_data_upload::PathPoint_message(*from.nearest_point_to_veh_on_lane_);
  } else {
    nearest_point_to_veh_on_lane_ = nullptr;
  }
  if (from.has_following_target()) {
    following_target_ = new ::phoenix::ad_data_upload::FollowingTarget_message(*from.following_target_);
  } else {
    following_target_ = nullptr;
  }
  ::memcpy(&current_reference_line_index_, &from.current_reference_line_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncertain_list_count_) -
    reinterpret_cast<char*>(&current_reference_line_index_)) + sizeof(uncertain_list_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.DrivingMapInfo_2_message)
}

void DrivingMapInfo_2_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncertain_list_count_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(uncertain_list_count_));
}

DrivingMapInfo_2_message::~DrivingMapInfo_2_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  SharedDtor();
}

void DrivingMapInfo_2_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete nearest_point_to_veh_on_lane_;
  if (this != internal_default_instance()) delete following_target_;
}

void DrivingMapInfo_2_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrivingMapInfo_2_message& DrivingMapInfo_2_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrivingMapInfo_2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void DrivingMapInfo_2_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_lines_.Clear();
  risky_obj_list_.Clear();
  uncertain_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nearest_point_to_veh_on_lane_ != nullptr) {
    delete nearest_point_to_veh_on_lane_;
  }
  nearest_point_to_veh_on_lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && following_target_ != nullptr) {
    delete following_target_;
  }
  following_target_ = nullptr;
  ::memset(&current_reference_line_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncertain_list_count_) -
      reinterpret_cast<char*>(&current_reference_line_index_)) + sizeof(uncertain_list_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrivingMapInfo_2_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_nearest_point_to_veh_on_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 current_reference_line_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_reference_line_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reference_lines_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reference_lines_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_reference_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // uint32 risky_obj_list_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          risky_obj_list_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_risky_obj_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // uint32 uncertain_list_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          uncertain_list_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_uncertain_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_following_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrivingMapInfo_2_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nearest_point_to_veh_on_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 current_reference_line_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &current_reference_line_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reference_lines_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_lines_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_reference_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 risky_obj_list_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &risky_obj_list_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_risky_obj_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uncertain_list_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncertain_list_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uncertain_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_following_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrivingMapInfo_2_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
  if (this->has_nearest_point_to_veh_on_lane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::nearest_point_to_veh_on_lane(this), output);
  }

  // sint32 current_reference_line_index = 3;
  if (this->current_reference_line_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->current_reference_line_index(), output);
  }

  // uint32 reference_lines_count = 4;
  if (this->reference_lines_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->reference_lines_count(), output);
  }

  // repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_lines_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->reference_lines(static_cast<int>(i)),
      output);
  }

  // uint32 risky_obj_list_count = 6;
  if (this->risky_obj_list_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->risky_obj_list_count(), output);
  }

  // repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->risky_obj_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->risky_obj_list(static_cast<int>(i)),
      output);
  }

  // uint32 uncertain_list_count = 8;
  if (this->uncertain_list_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->uncertain_list_count(), output);
  }

  // repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uncertain_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->uncertain_list(static_cast<int>(i)),
      output);
  }

  // .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
  if (this->has_following_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::following_target(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.DrivingMapInfo_2_message)
}

size_t DrivingMapInfo_2_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->reference_lines(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->risky_obj_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->risky_obj_list(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->uncertain_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uncertain_list(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
  if (this->has_nearest_point_to_veh_on_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nearest_point_to_veh_on_lane_);
  }

  // .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
  if (this->has_following_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *following_target_);
  }

  // sint32 current_reference_line_index = 3;
  if (this->current_reference_line_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->current_reference_line_index());
  }

  // uint32 reference_lines_count = 4;
  if (this->reference_lines_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->reference_lines_count());
  }

  // uint32 risky_obj_list_count = 6;
  if (this->risky_obj_list_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->risky_obj_list_count());
  }

  // uint32 uncertain_list_count = 8;
  if (this->uncertain_list_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->uncertain_list_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingMapInfo_2_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrivingMapInfo_2_message*>(
      &from));
}

void DrivingMapInfo_2_message::MergeFrom(const DrivingMapInfo_2_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_lines_.MergeFrom(from.reference_lines_);
  risky_obj_list_.MergeFrom(from.risky_obj_list_);
  uncertain_list_.MergeFrom(from.uncertain_list_);
  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_nearest_point_to_veh_on_lane()) {
    mutable_nearest_point_to_veh_on_lane()->::phoenix::ad_data_upload::PathPoint_message::MergeFrom(from.nearest_point_to_veh_on_lane());
  }
  if (from.has_following_target()) {
    mutable_following_target()->::phoenix::ad_data_upload::FollowingTarget_message::MergeFrom(from.following_target());
  }
  if (from.current_reference_line_index() != 0) {
    set_current_reference_line_index(from.current_reference_line_index());
  }
  if (from.reference_lines_count() != 0) {
    set_reference_lines_count(from.reference_lines_count());
  }
  if (from.risky_obj_list_count() != 0) {
    set_risky_obj_list_count(from.risky_obj_list_count());
  }
  if (from.uncertain_list_count() != 0) {
    set_uncertain_list_count(from.uncertain_list_count());
  }
}

void DrivingMapInfo_2_message::CopyFrom(const DrivingMapInfo_2_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.DrivingMapInfo_2_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingMapInfo_2_message::IsInitialized() const {
  return true;
}

void DrivingMapInfo_2_message::InternalSwap(DrivingMapInfo_2_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&reference_lines_)->InternalSwap(CastToBase(&other->reference_lines_));
  CastToBase(&risky_obj_list_)->InternalSwap(CastToBase(&other->risky_obj_list_));
  CastToBase(&uncertain_list_)->InternalSwap(CastToBase(&other->uncertain_list_));
  swap(msg_head_, other->msg_head_);
  swap(nearest_point_to_veh_on_lane_, other->nearest_point_to_veh_on_lane_);
  swap(following_target_, other->following_target_);
  swap(current_reference_line_index_, other->current_reference_line_index_);
  swap(reference_lines_count_, other->reference_lines_count_);
  swap(risky_obj_list_count_, other->risky_obj_list_count_);
  swap(uncertain_list_count_, other->uncertain_list_count_);
}

std::string DrivingMapInfo_2_message::GetTypeName() const {
  return "phoenix.ad_data_upload.DrivingMapInfo_2_message";
}


// ===================================================================

void Behavior_Planning_Result_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Behavior_Planning_Result_message_default_instance_._instance.get_mutable()->action_planning_result_ = const_cast< ::phoenix::ad_data_upload::ActionPlanningResult_message*>(
      ::phoenix::ad_data_upload::ActionPlanningResult_message::internal_default_instance());
}
class Behavior_Planning_Result_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::ActionPlanningResult_message& action_planning_result(const Behavior_Planning_Result_message* msg);
};

const ::phoenix::ad_data_upload::ActionPlanningResult_message&
Behavior_Planning_Result_message::_Internal::action_planning_result(const Behavior_Planning_Result_message* msg) {
  return *msg->action_planning_result_;
}
Behavior_Planning_Result_message::Behavior_Planning_Result_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Behavior_Planning_Result_message)
}
Behavior_Planning_Result_message::Behavior_Planning_Result_message(const Behavior_Planning_Result_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action_planning_result()) {
    action_planning_result_ = new ::phoenix::ad_data_upload::ActionPlanningResult_message(*from.action_planning_result_);
  } else {
    action_planning_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Behavior_Planning_Result_message)
}

void Behavior_Planning_Result_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  action_planning_result_ = nullptr;
}

Behavior_Planning_Result_message::~Behavior_Planning_Result_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  SharedDtor();
}

void Behavior_Planning_Result_message::SharedDtor() {
  if (this != internal_default_instance()) delete action_planning_result_;
}

void Behavior_Planning_Result_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Behavior_Planning_Result_message& Behavior_Planning_Result_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Behavior_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Behavior_Planning_Result_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && action_planning_result_ != nullptr) {
    delete action_planning_result_;
  }
  action_planning_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Behavior_Planning_Result_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_action_planning_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Behavior_Planning_Result_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action_planning_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Behavior_Planning_Result_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
  if (this->has_action_planning_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::action_planning_result(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Behavior_Planning_Result_message)
}

size_t Behavior_Planning_Result_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
  if (this->has_action_planning_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_planning_result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Behavior_Planning_Result_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Behavior_Planning_Result_message*>(
      &from));
}

void Behavior_Planning_Result_message::MergeFrom(const Behavior_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action_planning_result()) {
    mutable_action_planning_result()->::phoenix::ad_data_upload::ActionPlanningResult_message::MergeFrom(from.action_planning_result());
  }
}

void Behavior_Planning_Result_message::CopyFrom(const Behavior_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Behavior_Planning_Result_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Behavior_Planning_Result_message::IsInitialized() const {
  return true;
}

void Behavior_Planning_Result_message::InternalSwap(Behavior_Planning_Result_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_planning_result_, other->action_planning_result_);
}

std::string Behavior_Planning_Result_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Behavior_Planning_Result_message";
}


// ===================================================================

void Decision_Planning_Result_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Decision_Planning_Result_message_default_instance_._instance.get_mutable()->planning_result_ = const_cast< ::phoenix::ad_data_upload::PlanningResult_message*>(
      ::phoenix::ad_data_upload::PlanningResult_message::internal_default_instance());
}
class Decision_Planning_Result_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::PlanningResult_message& planning_result(const Decision_Planning_Result_message* msg);
};

const ::phoenix::ad_data_upload::PlanningResult_message&
Decision_Planning_Result_message::_Internal::planning_result(const Decision_Planning_Result_message* msg) {
  return *msg->planning_result_;
}
Decision_Planning_Result_message::Decision_Planning_Result_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Decision_Planning_Result_message)
}
Decision_Planning_Result_message::Decision_Planning_Result_message(const Decision_Planning_Result_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_result()) {
    planning_result_ = new ::phoenix::ad_data_upload::PlanningResult_message(*from.planning_result_);
  } else {
    planning_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Decision_Planning_Result_message)
}

void Decision_Planning_Result_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  planning_result_ = nullptr;
}

Decision_Planning_Result_message::~Decision_Planning_Result_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Decision_Planning_Result_message)
  SharedDtor();
}

void Decision_Planning_Result_message::SharedDtor() {
  if (this != internal_default_instance()) delete planning_result_;
}

void Decision_Planning_Result_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decision_Planning_Result_message& Decision_Planning_Result_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decision_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Decision_Planning_Result_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && planning_result_ != nullptr) {
    delete planning_result_;
  }
  planning_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Decision_Planning_Result_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_planning_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Decision_Planning_Result_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_planning_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Decision_Planning_Result_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Decision_Planning_Result_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Decision_Planning_Result_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
  if (this->has_planning_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::planning_result(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Decision_Planning_Result_message)
}

size_t Decision_Planning_Result_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
  if (this->has_planning_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decision_Planning_Result_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Decision_Planning_Result_message*>(
      &from));
}

void Decision_Planning_Result_message::MergeFrom(const Decision_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_planning_result()) {
    mutable_planning_result()->::phoenix::ad_data_upload::PlanningResult_message::MergeFrom(from.planning_result());
  }
}

void Decision_Planning_Result_message::CopyFrom(const Decision_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Decision_Planning_Result_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision_Planning_Result_message::IsInitialized() const {
  return true;
}

void Decision_Planning_Result_message::InternalSwap(Decision_Planning_Result_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(planning_result_, other->planning_result_);
}

std::string Decision_Planning_Result_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Decision_Planning_Result_message";
}


// ===================================================================

void Speed_Planning_Result_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Speed_Planning_Result_message_default_instance_._instance.get_mutable()->velocity_planning_result_ = const_cast< ::phoenix::ad_data_upload::VelocityPlanningResult_message*>(
      ::phoenix::ad_data_upload::VelocityPlanningResult_message::internal_default_instance());
}
class Speed_Planning_Result_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::VelocityPlanningResult_message& velocity_planning_result(const Speed_Planning_Result_message* msg);
};

const ::phoenix::ad_data_upload::VelocityPlanningResult_message&
Speed_Planning_Result_message::_Internal::velocity_planning_result(const Speed_Planning_Result_message* msg) {
  return *msg->velocity_planning_result_;
}
Speed_Planning_Result_message::Speed_Planning_Result_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Speed_Planning_Result_message)
}
Speed_Planning_Result_message::Speed_Planning_Result_message(const Speed_Planning_Result_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_velocity_planning_result()) {
    velocity_planning_result_ = new ::phoenix::ad_data_upload::VelocityPlanningResult_message(*from.velocity_planning_result_);
  } else {
    velocity_planning_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Speed_Planning_Result_message)
}

void Speed_Planning_Result_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  velocity_planning_result_ = nullptr;
}

Speed_Planning_Result_message::~Speed_Planning_Result_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Speed_Planning_Result_message)
  SharedDtor();
}

void Speed_Planning_Result_message::SharedDtor() {
  if (this != internal_default_instance()) delete velocity_planning_result_;
}

void Speed_Planning_Result_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speed_Planning_Result_message& Speed_Planning_Result_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Speed_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Speed_Planning_Result_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && velocity_planning_result_ != nullptr) {
    delete velocity_planning_result_;
  }
  velocity_planning_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Speed_Planning_Result_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_velocity_planning_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Speed_Planning_Result_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_planning_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Speed_Planning_Result_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Speed_Planning_Result_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Speed_Planning_Result_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
  if (this->has_velocity_planning_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::velocity_planning_result(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Speed_Planning_Result_message)
}

size_t Speed_Planning_Result_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
  if (this->has_velocity_planning_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_planning_result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed_Planning_Result_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Speed_Planning_Result_message*>(
      &from));
}

void Speed_Planning_Result_message::MergeFrom(const Speed_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_planning_result()) {
    mutable_velocity_planning_result()->::phoenix::ad_data_upload::VelocityPlanningResult_message::MergeFrom(from.velocity_planning_result());
  }
}

void Speed_Planning_Result_message::CopyFrom(const Speed_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Speed_Planning_Result_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed_Planning_Result_message::IsInitialized() const {
  return true;
}

void Speed_Planning_Result_message::InternalSwap(Speed_Planning_Result_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_planning_result_, other->velocity_planning_result_);
}

std::string Speed_Planning_Result_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Speed_Planning_Result_message";
}


// ===================================================================

void DrivingMapInfo2_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_DrivingMapInfo2_message_default_instance_._instance.get_mutable()->driving_map_info_2_ = const_cast< ::phoenix::ad_data_upload::DrivingMapInfo_2_message*>(
      ::phoenix::ad_data_upload::DrivingMapInfo_2_message::internal_default_instance());
}
class DrivingMapInfo2_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::DrivingMapInfo_2_message& driving_map_info_2(const DrivingMapInfo2_message* msg);
};

const ::phoenix::ad_data_upload::DrivingMapInfo_2_message&
DrivingMapInfo2_message::_Internal::driving_map_info_2(const DrivingMapInfo2_message* msg) {
  return *msg->driving_map_info_2_;
}
DrivingMapInfo2_message::DrivingMapInfo2_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.DrivingMapInfo2_message)
}
DrivingMapInfo2_message::DrivingMapInfo2_message(const DrivingMapInfo2_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driving_map_info_2()) {
    driving_map_info_2_ = new ::phoenix::ad_data_upload::DrivingMapInfo_2_message(*from.driving_map_info_2_);
  } else {
    driving_map_info_2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.DrivingMapInfo2_message)
}

void DrivingMapInfo2_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  driving_map_info_2_ = nullptr;
}

DrivingMapInfo2_message::~DrivingMapInfo2_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.DrivingMapInfo2_message)
  SharedDtor();
}

void DrivingMapInfo2_message::SharedDtor() {
  if (this != internal_default_instance()) delete driving_map_info_2_;
}

void DrivingMapInfo2_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrivingMapInfo2_message& DrivingMapInfo2_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrivingMapInfo2_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void DrivingMapInfo2_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && driving_map_info_2_ != nullptr) {
    delete driving_map_info_2_;
  }
  driving_map_info_2_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrivingMapInfo2_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_driving_map_info_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrivingMapInfo2_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driving_map_info_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.DrivingMapInfo2_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.DrivingMapInfo2_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrivingMapInfo2_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
  if (this->has_driving_map_info_2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::driving_map_info_2(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.DrivingMapInfo2_message)
}

size_t DrivingMapInfo2_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
  if (this->has_driving_map_info_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driving_map_info_2_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingMapInfo2_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrivingMapInfo2_message*>(
      &from));
}

void DrivingMapInfo2_message::MergeFrom(const DrivingMapInfo2_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_driving_map_info_2()) {
    mutable_driving_map_info_2()->::phoenix::ad_data_upload::DrivingMapInfo_2_message::MergeFrom(from.driving_map_info_2());
  }
}

void DrivingMapInfo2_message::CopyFrom(const DrivingMapInfo2_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.DrivingMapInfo2_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingMapInfo2_message::IsInitialized() const {
  return true;
}

void DrivingMapInfo2_message::InternalSwap(DrivingMapInfo2_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(driving_map_info_2_, other->driving_map_info_2_);
}

std::string DrivingMapInfo2_message::GetTypeName() const {
  return "phoenix.ad_data_upload.DrivingMapInfo2_message";
}


// ===================================================================

void Spd_Pln_Display_Data_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Spd_Pln_Display_Data_message_default_instance_._instance.get_mutable()->behavior_planning_result_info_ = const_cast< ::phoenix::ad_data_upload::Behavior_Planning_Result_message*>(
      ::phoenix::ad_data_upload::Behavior_Planning_Result_message::internal_default_instance());
  ::phoenix::ad_data_upload::_Spd_Pln_Display_Data_message_default_instance_._instance.get_mutable()->decision_planning_result_info_ = const_cast< ::phoenix::ad_data_upload::Decision_Planning_Result_message*>(
      ::phoenix::ad_data_upload::Decision_Planning_Result_message::internal_default_instance());
  ::phoenix::ad_data_upload::_Spd_Pln_Display_Data_message_default_instance_._instance.get_mutable()->speed_planning_result_info_ = const_cast< ::phoenix::ad_data_upload::Speed_Planning_Result_message*>(
      ::phoenix::ad_data_upload::Speed_Planning_Result_message::internal_default_instance());
  ::phoenix::ad_data_upload::_Spd_Pln_Display_Data_message_default_instance_._instance.get_mutable()->driving_map_info_2_ = const_cast< ::phoenix::ad_data_upload::DrivingMapInfo2_message*>(
      ::phoenix::ad_data_upload::DrivingMapInfo2_message::internal_default_instance());
}
class Spd_Pln_Display_Data_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Behavior_Planning_Result_message& behavior_planning_result_info(const Spd_Pln_Display_Data_message* msg);
  static const ::phoenix::ad_data_upload::Decision_Planning_Result_message& decision_planning_result_info(const Spd_Pln_Display_Data_message* msg);
  static const ::phoenix::ad_data_upload::Speed_Planning_Result_message& speed_planning_result_info(const Spd_Pln_Display_Data_message* msg);
  static const ::phoenix::ad_data_upload::DrivingMapInfo2_message& driving_map_info_2(const Spd_Pln_Display_Data_message* msg);
};

const ::phoenix::ad_data_upload::Behavior_Planning_Result_message&
Spd_Pln_Display_Data_message::_Internal::behavior_planning_result_info(const Spd_Pln_Display_Data_message* msg) {
  return *msg->behavior_planning_result_info_;
}
const ::phoenix::ad_data_upload::Decision_Planning_Result_message&
Spd_Pln_Display_Data_message::_Internal::decision_planning_result_info(const Spd_Pln_Display_Data_message* msg) {
  return *msg->decision_planning_result_info_;
}
const ::phoenix::ad_data_upload::Speed_Planning_Result_message&
Spd_Pln_Display_Data_message::_Internal::speed_planning_result_info(const Spd_Pln_Display_Data_message* msg) {
  return *msg->speed_planning_result_info_;
}
const ::phoenix::ad_data_upload::DrivingMapInfo2_message&
Spd_Pln_Display_Data_message::_Internal::driving_map_info_2(const Spd_Pln_Display_Data_message* msg) {
  return *msg->driving_map_info_2_;
}
Spd_Pln_Display_Data_message::Spd_Pln_Display_Data_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
}
Spd_Pln_Display_Data_message::Spd_Pln_Display_Data_message(const Spd_Pln_Display_Data_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_behavior_planning_result_info()) {
    behavior_planning_result_info_ = new ::phoenix::ad_data_upload::Behavior_Planning_Result_message(*from.behavior_planning_result_info_);
  } else {
    behavior_planning_result_info_ = nullptr;
  }
  if (from.has_decision_planning_result_info()) {
    decision_planning_result_info_ = new ::phoenix::ad_data_upload::Decision_Planning_Result_message(*from.decision_planning_result_info_);
  } else {
    decision_planning_result_info_ = nullptr;
  }
  if (from.has_speed_planning_result_info()) {
    speed_planning_result_info_ = new ::phoenix::ad_data_upload::Speed_Planning_Result_message(*from.speed_planning_result_info_);
  } else {
    speed_planning_result_info_ = nullptr;
  }
  if (from.has_driving_map_info_2()) {
    driving_map_info_2_ = new ::phoenix::ad_data_upload::DrivingMapInfo2_message(*from.driving_map_info_2_);
  } else {
    driving_map_info_2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
}

void Spd_Pln_Display_Data_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Spd_Pln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&behavior_planning_result_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_map_info_2_) -
      reinterpret_cast<char*>(&behavior_planning_result_info_)) + sizeof(driving_map_info_2_));
}

Spd_Pln_Display_Data_message::~Spd_Pln_Display_Data_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  SharedDtor();
}

void Spd_Pln_Display_Data_message::SharedDtor() {
  if (this != internal_default_instance()) delete behavior_planning_result_info_;
  if (this != internal_default_instance()) delete decision_planning_result_info_;
  if (this != internal_default_instance()) delete speed_planning_result_info_;
  if (this != internal_default_instance()) delete driving_map_info_2_;
}

void Spd_Pln_Display_Data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Spd_Pln_Display_Data_message& Spd_Pln_Display_Data_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Spd_Pln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Spd_Pln_Display_Data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && behavior_planning_result_info_ != nullptr) {
    delete behavior_planning_result_info_;
  }
  behavior_planning_result_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && decision_planning_result_info_ != nullptr) {
    delete decision_planning_result_info_;
  }
  decision_planning_result_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_planning_result_info_ != nullptr) {
    delete speed_planning_result_info_;
  }
  speed_planning_result_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && driving_map_info_2_ != nullptr) {
    delete driving_map_info_2_;
  }
  driving_map_info_2_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Spd_Pln_Display_Data_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_behavior_planning_result_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_decision_planning_result_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_speed_planning_result_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_driving_map_info_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Spd_Pln_Display_Data_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_behavior_planning_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_decision_planning_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_planning_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driving_map_info_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Spd_Pln_Display_Data_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
  if (this->has_behavior_planning_result_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::behavior_planning_result_info(this), output);
  }

  // .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
  if (this->has_decision_planning_result_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::decision_planning_result_info(this), output);
  }

  // .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
  if (this->has_speed_planning_result_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::speed_planning_result_info(this), output);
  }

  // .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
  if (this->has_driving_map_info_2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::driving_map_info_2(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
}

size_t Spd_Pln_Display_Data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
  if (this->has_behavior_planning_result_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behavior_planning_result_info_);
  }

  // .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
  if (this->has_decision_planning_result_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decision_planning_result_info_);
  }

  // .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
  if (this->has_speed_planning_result_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_planning_result_info_);
  }

  // .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
  if (this->has_driving_map_info_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driving_map_info_2_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spd_Pln_Display_Data_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Spd_Pln_Display_Data_message*>(
      &from));
}

void Spd_Pln_Display_Data_message::MergeFrom(const Spd_Pln_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_behavior_planning_result_info()) {
    mutable_behavior_planning_result_info()->::phoenix::ad_data_upload::Behavior_Planning_Result_message::MergeFrom(from.behavior_planning_result_info());
  }
  if (from.has_decision_planning_result_info()) {
    mutable_decision_planning_result_info()->::phoenix::ad_data_upload::Decision_Planning_Result_message::MergeFrom(from.decision_planning_result_info());
  }
  if (from.has_speed_planning_result_info()) {
    mutable_speed_planning_result_info()->::phoenix::ad_data_upload::Speed_Planning_Result_message::MergeFrom(from.speed_planning_result_info());
  }
  if (from.has_driving_map_info_2()) {
    mutable_driving_map_info_2()->::phoenix::ad_data_upload::DrivingMapInfo2_message::MergeFrom(from.driving_map_info_2());
  }
}

void Spd_Pln_Display_Data_message::CopyFrom(const Spd_Pln_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spd_Pln_Display_Data_message::IsInitialized() const {
  return true;
}

void Spd_Pln_Display_Data_message::InternalSwap(Spd_Pln_Display_Data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(behavior_planning_result_info_, other->behavior_planning_result_info_);
  swap(decision_planning_result_info_, other->decision_planning_result_info_);
  swap(speed_planning_result_info_, other->speed_planning_result_info_);
  swap(driving_map_info_2_, other->driving_map_info_2_);
}

std::string Spd_Pln_Display_Data_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Spd_Pln_Display_Data_message";
}


// ===================================================================

void Pos_message::InitAsDefaultInstance() {
}
class Pos_message::_Internal {
 public:
};

Pos_message::Pos_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Pos_message)
}
Pos_message::Pos_message(const Pos_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&x_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Pos_message)
}

void Pos_message::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&x_)) + sizeof(l_));
}

Pos_message::~Pos_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Pos_message)
  SharedDtor();
}

void Pos_message::SharedDtor() {
}

void Pos_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pos_message& Pos_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pos_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Pos_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Pos_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&x_)) + sizeof(l_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pos_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float l = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pos_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Pos_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Pos_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Pos_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pos_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Pos_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->curvature(), output);
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->s(), output);
  }

  // float l = 6;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->l(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Pos_message)
}

size_t Pos_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Pos_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 4;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float l = 6;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pos_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Pos_message*>(
      &from));
}

void Pos_message::MergeFrom(const Pos_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Pos_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    set_curvature(from.curvature());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    set_l(from.l());
  }
}

void Pos_message::CopyFrom(const Pos_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Pos_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos_message::IsInitialized() const {
  return true;
}

void Pos_message::InternalSwap(Pos_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(curvature_, other->curvature_);
  swap(s_, other->s_);
  swap(l_, other->l_);
}

std::string Pos_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Pos_message";
}


// ===================================================================

void Sample_message::InitAsDefaultInstance() {
}
class Sample_message::_Internal {
 public:
};

Sample_message::Sample_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Sample_message)
}
Sample_message::Sample_message(const Sample_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_err_, &from.lat_err_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_err_chg_rate_) -
    reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Sample_message)
}

void Sample_message::SharedCtor() {
  ::memset(&lat_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_err_chg_rate_) -
      reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
}

Sample_message::~Sample_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Sample_message)
  SharedDtor();
}

void Sample_message::SharedDtor() {
}

void Sample_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample_message& Sample_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Sample_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Sample_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_err_chg_rate_) -
      reinterpret_cast<char*>(&lat_err_)) + sizeof(yaw_err_chg_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lat_err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lat_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_err_chg_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lat_err_chg_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_err_chg_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_err_chg_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Sample_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lat_err = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_err_chg_rate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_err_chg_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_err = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_err_chg_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_err_chg_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Sample_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Sample_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Sample_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lat_err = 1;
  if (!(this->lat_err() <= 0 && this->lat_err() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->lat_err(), output);
  }

  // float lat_err_chg_rate = 2;
  if (!(this->lat_err_chg_rate() <= 0 && this->lat_err_chg_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lat_err_chg_rate(), output);
  }

  // float yaw_err = 3;
  if (!(this->yaw_err() <= 0 && this->yaw_err() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->yaw_err(), output);
  }

  // float yaw_err_chg_rate = 4;
  if (!(this->yaw_err_chg_rate() <= 0 && this->yaw_err_chg_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->yaw_err_chg_rate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Sample_message)
}

size_t Sample_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Sample_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lat_err = 1;
  if (!(this->lat_err() <= 0 && this->lat_err() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_err_chg_rate = 2;
  if (!(this->lat_err_chg_rate() <= 0 && this->lat_err_chg_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_err = 3;
  if (!(this->yaw_err() <= 0 && this->yaw_err() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_err_chg_rate = 4;
  if (!(this->yaw_err_chg_rate() <= 0 && this->yaw_err_chg_rate() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Sample_message*>(
      &from));
}

void Sample_message::MergeFrom(const Sample_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Sample_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat_err() <= 0 && from.lat_err() >= 0)) {
    set_lat_err(from.lat_err());
  }
  if (!(from.lat_err_chg_rate() <= 0 && from.lat_err_chg_rate() >= 0)) {
    set_lat_err_chg_rate(from.lat_err_chg_rate());
  }
  if (!(from.yaw_err() <= 0 && from.yaw_err() >= 0)) {
    set_yaw_err(from.yaw_err());
  }
  if (!(from.yaw_err_chg_rate() <= 0 && from.yaw_err_chg_rate() >= 0)) {
    set_yaw_err_chg_rate(from.yaw_err_chg_rate());
  }
}

void Sample_message::CopyFrom(const Sample_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Sample_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_message::IsInitialized() const {
  return true;
}

void Sample_message::InternalSwap(Sample_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_err_, other->lat_err_);
  swap(lat_err_chg_rate_, other->lat_err_chg_rate_);
  swap(yaw_err_, other->yaw_err_);
  swap(yaw_err_chg_rate_, other->yaw_err_chg_rate_);
}

std::string Sample_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Sample_message";
}


// ===================================================================

void Lat_Err_message::InitAsDefaultInstance() {
}
class Lat_Err_message::_Internal {
 public:
};

Lat_Err_message::Lat_Err_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Lat_Err_message)
}
Lat_Err_message::Lat_Err_message(const Lat_Err_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moving_flag_ = from.moving_flag_;
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Lat_Err_message)
}

void Lat_Err_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  moving_flag_ = 0;
}

Lat_Err_message::~Lat_Err_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Lat_Err_message)
  SharedDtor();
}

void Lat_Err_message::SharedDtor() {
}

void Lat_Err_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lat_Err_message& Lat_Err_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lat_Err_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Lat_Err_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Lat_Err_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  moving_flag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lat_Err_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 moving_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          moving_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Sample_message samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lat_Err_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Lat_Err_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 moving_flag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &moving_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Sample_message samples = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Lat_Err_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Lat_Err_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lat_Err_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Lat_Err_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 moving_flag = 1;
  if (this->moving_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->moving_flag(), output);
  }

  // repeated .phoenix.ad_data_upload.Sample_message samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->samples(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Lat_Err_message)
}

size_t Lat_Err_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Lat_Err_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Sample_message samples = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  // sint32 moving_flag = 1;
  if (this->moving_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->moving_flag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lat_Err_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Lat_Err_message*>(
      &from));
}

void Lat_Err_message::MergeFrom(const Lat_Err_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Lat_Err_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  if (from.moving_flag() != 0) {
    set_moving_flag(from.moving_flag());
  }
}

void Lat_Err_message::CopyFrom(const Lat_Err_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Lat_Err_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_Err_message::IsInitialized() const {
  return true;
}

void Lat_Err_message::InternalSwap(Lat_Err_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  swap(moving_flag_, other->moving_flag_);
}

std::string Lat_Err_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Lat_Err_message";
}


// ===================================================================

void EventChangingLaneRsp_message::InitAsDefaultInstance() {
}
class EventChangingLaneRsp_message::_Internal {
 public:
};

EventChangingLaneRsp_message::EventChangingLaneRsp_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.EventChangingLaneRsp_message)
}
EventChangingLaneRsp_message::EventChangingLaneRsp_message(const EventChangingLaneRsp_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status__) -
    reinterpret_cast<char*>(&id_)) + sizeof(status__));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.EventChangingLaneRsp_message)
}

void EventChangingLaneRsp_message::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status__) -
      reinterpret_cast<char*>(&id_)) + sizeof(status__));
}

EventChangingLaneRsp_message::~EventChangingLaneRsp_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  SharedDtor();
}

void EventChangingLaneRsp_message::SharedDtor() {
}

void EventChangingLaneRsp_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventChangingLaneRsp_message& EventChangingLaneRsp_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventChangingLaneRsp_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void EventChangingLaneRsp_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status__) -
      reinterpret_cast<char*>(&id_)) + sizeof(status__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventChangingLaneRsp_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 response_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          response__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 requset_sequence_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requset_sequence__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 status_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventChangingLaneRsp_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 response_ = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &response__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 requset_sequence_ = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &requset_sequence__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 status_ = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventChangingLaneRsp_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // sint32 response_ = 2;
  if (this->response_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->response_(), output);
  }

  // sint32 requset_sequence_ = 3;
  if (this->requset_sequence_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->requset_sequence_(), output);
  }

  // sint32 status_ = 4;
  if (this->status_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->status_(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.EventChangingLaneRsp_message)
}

size_t EventChangingLaneRsp_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  // sint32 response_ = 2;
  if (this->response_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->response_());
  }

  // sint32 requset_sequence_ = 3;
  if (this->requset_sequence_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->requset_sequence_());
  }

  // sint32 status_ = 4;
  if (this->status_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->status_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventChangingLaneRsp_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventChangingLaneRsp_message*>(
      &from));
}

void EventChangingLaneRsp_message::MergeFrom(const EventChangingLaneRsp_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.response_() != 0) {
    set_response_(from.response_());
  }
  if (from.requset_sequence_() != 0) {
    set_requset_sequence_(from.requset_sequence_());
  }
  if (from.status_() != 0) {
    set_status_(from.status_());
  }
}

void EventChangingLaneRsp_message::CopyFrom(const EventChangingLaneRsp_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.EventChangingLaneRsp_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChangingLaneRsp_message::IsInitialized() const {
  return true;
}

void EventChangingLaneRsp_message::InternalSwap(EventChangingLaneRsp_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(response__, other->response__);
  swap(requset_sequence__, other->requset_sequence__);
  swap(status__, other->status__);
}

std::string EventChangingLaneRsp_message::GetTypeName() const {
  return "phoenix.ad_data_upload.EventChangingLaneRsp_message";
}


// ===================================================================

void Trj_Change_message::InitAsDefaultInstance() {
}
class Trj_Change_message::_Internal {
 public:
};

Trj_Change_message::Trj_Change_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Trj_Change_message)
}
Trj_Change_message::Trj_Change_message(const Trj_Change_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      changed_trajectory_(from.changed_trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_changing_, &from.is_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&changed_trajectory_count_) -
    reinterpret_cast<char*>(&is_changing_)) + sizeof(changed_trajectory_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Trj_Change_message)
}

void Trj_Change_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&is_changing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_trajectory_count_) -
      reinterpret_cast<char*>(&is_changing_)) + sizeof(changed_trajectory_count_));
}

Trj_Change_message::~Trj_Change_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Trj_Change_message)
  SharedDtor();
}

void Trj_Change_message::SharedDtor() {
}

void Trj_Change_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trj_Change_message& Trj_Change_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trj_Change_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Trj_Change_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Trj_Change_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_trajectory_.Clear();
  ::memset(&is_changing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_trajectory_count_) -
      reinterpret_cast<char*>(&is_changing_)) + sizeof(changed_trajectory_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trj_Change_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_changing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lat_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lat_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 changed_trajectory_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          changed_trajectory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_changed_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trj_Change_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Trj_Change_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_changing = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 changed_trajectory_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_trajectory_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_changed_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Trj_Change_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Trj_Change_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trj_Change_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Trj_Change_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing = 1;
  if (this->is_changing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_changing(), output);
  }

  // float lat_offset = 2;
  if (!(this->lat_offset() <= 0 && this->lat_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lat_offset(), output);
  }

  // uint32 changed_trajectory_count = 3;
  if (this->changed_trajectory_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->changed_trajectory_count(), output);
  }

  // repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->changed_trajectory_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->changed_trajectory(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Trj_Change_message)
}

size_t Trj_Change_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Trj_Change_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->changed_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->changed_trajectory(static_cast<int>(i)));
    }
  }

  // bool is_changing = 1;
  if (this->is_changing() != 0) {
    total_size += 1 + 1;
  }

  // float lat_offset = 2;
  if (!(this->lat_offset() <= 0 && this->lat_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 changed_trajectory_count = 3;
  if (this->changed_trajectory_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->changed_trajectory_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trj_Change_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Trj_Change_message*>(
      &from));
}

void Trj_Change_message::MergeFrom(const Trj_Change_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Trj_Change_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_trajectory_.MergeFrom(from.changed_trajectory_);
  if (from.is_changing() != 0) {
    set_is_changing(from.is_changing());
  }
  if (!(from.lat_offset() <= 0 && from.lat_offset() >= 0)) {
    set_lat_offset(from.lat_offset());
  }
  if (from.changed_trajectory_count() != 0) {
    set_changed_trajectory_count(from.changed_trajectory_count());
  }
}

void Trj_Change_message::CopyFrom(const Trj_Change_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Trj_Change_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trj_Change_message::IsInitialized() const {
  return true;
}

void Trj_Change_message::InternalSwap(Trj_Change_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&changed_trajectory_)->InternalSwap(CastToBase(&other->changed_trajectory_));
  swap(is_changing_, other->is_changing_);
  swap(lat_offset_, other->lat_offset_);
  swap(changed_trajectory_count_, other->changed_trajectory_count_);
}

std::string Trj_Change_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Trj_Change_message";
}


// ===================================================================

void TrajectoryPlanningResult_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->curr_pos_ = const_cast< ::phoenix::ad_data_upload::Pos_message*>(
      ::phoenix::ad_data_upload::Pos_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->leading_pos_ = const_cast< ::phoenix::ad_data_upload::Pos_message*>(
      ::phoenix::ad_data_upload::Pos_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->lat_err_ = const_cast< ::phoenix::ad_data_upload::Lat_Err_message*>(
      ::phoenix::ad_data_upload::Lat_Err_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->trj_changing_ = const_cast< ::phoenix::ad_data_upload::Trj_Change_message*>(
      ::phoenix::ad_data_upload::Trj_Change_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->changing_lane_req_ = const_cast< ::phoenix::ad_data_upload::EventChangingLaneReq_message*>(
      ::phoenix::ad_data_upload::EventChangingLaneReq_message::internal_default_instance());
  ::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_._instance.get_mutable()->changing_lane_rsp_ = const_cast< ::phoenix::ad_data_upload::EventChangingLaneRsp_message*>(
      ::phoenix::ad_data_upload::EventChangingLaneRsp_message::internal_default_instance());
}
class TrajectoryPlanningResult_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::Pos_message& curr_pos(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::Pos_message& leading_pos(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::Lat_Err_message& lat_err(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::Trj_Change_message& trj_changing(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::EventChangingLaneReq_message& changing_lane_req(const TrajectoryPlanningResult_message* msg);
  static const ::phoenix::ad_data_upload::EventChangingLaneRsp_message& changing_lane_rsp(const TrajectoryPlanningResult_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
TrajectoryPlanningResult_message::_Internal::msg_head(const TrajectoryPlanningResult_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::Pos_message&
TrajectoryPlanningResult_message::_Internal::curr_pos(const TrajectoryPlanningResult_message* msg) {
  return *msg->curr_pos_;
}
const ::phoenix::ad_data_upload::Pos_message&
TrajectoryPlanningResult_message::_Internal::leading_pos(const TrajectoryPlanningResult_message* msg) {
  return *msg->leading_pos_;
}
const ::phoenix::ad_data_upload::Lat_Err_message&
TrajectoryPlanningResult_message::_Internal::lat_err(const TrajectoryPlanningResult_message* msg) {
  return *msg->lat_err_;
}
const ::phoenix::ad_data_upload::Trj_Change_message&
TrajectoryPlanningResult_message::_Internal::trj_changing(const TrajectoryPlanningResult_message* msg) {
  return *msg->trj_changing_;
}
const ::phoenix::ad_data_upload::EventChangingLaneReq_message&
TrajectoryPlanningResult_message::_Internal::changing_lane_req(const TrajectoryPlanningResult_message* msg) {
  return *msg->changing_lane_req_;
}
const ::phoenix::ad_data_upload::EventChangingLaneRsp_message&
TrajectoryPlanningResult_message::_Internal::changing_lane_rsp(const TrajectoryPlanningResult_message* msg) {
  return *msg->changing_lane_rsp_;
}
TrajectoryPlanningResult_message::TrajectoryPlanningResult_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
}
TrajectoryPlanningResult_message::TrajectoryPlanningResult_message(const TrajectoryPlanningResult_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      target_trajectory_sample_points_(from.target_trajectory_sample_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_curr_pos()) {
    curr_pos_ = new ::phoenix::ad_data_upload::Pos_message(*from.curr_pos_);
  } else {
    curr_pos_ = nullptr;
  }
  if (from.has_leading_pos()) {
    leading_pos_ = new ::phoenix::ad_data_upload::Pos_message(*from.leading_pos_);
  } else {
    leading_pos_ = nullptr;
  }
  if (from.has_lat_err()) {
    lat_err_ = new ::phoenix::ad_data_upload::Lat_Err_message(*from.lat_err_);
  } else {
    lat_err_ = nullptr;
  }
  if (from.has_trj_changing()) {
    trj_changing_ = new ::phoenix::ad_data_upload::Trj_Change_message(*from.trj_changing_);
  } else {
    trj_changing_ = nullptr;
  }
  if (from.has_changing_lane_req()) {
    changing_lane_req_ = new ::phoenix::ad_data_upload::EventChangingLaneReq_message(*from.changing_lane_req_);
  } else {
    changing_lane_req_ = nullptr;
  }
  if (from.has_changing_lane_rsp()) {
    changing_lane_rsp_ = new ::phoenix::ad_data_upload::EventChangingLaneRsp_message(*from.changing_lane_rsp_);
  } else {
    changing_lane_rsp_ = nullptr;
  }
  ::memcpy(&trj_direction_, &from.trj_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&hold_steering_wheel_) -
    reinterpret_cast<char*>(&trj_direction_)) + sizeof(hold_steering_wheel_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
}

void TrajectoryPlanningResult_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hold_steering_wheel_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(hold_steering_wheel_));
}

TrajectoryPlanningResult_message::~TrajectoryPlanningResult_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  SharedDtor();
}

void TrajectoryPlanningResult_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete curr_pos_;
  if (this != internal_default_instance()) delete leading_pos_;
  if (this != internal_default_instance()) delete lat_err_;
  if (this != internal_default_instance()) delete trj_changing_;
  if (this != internal_default_instance()) delete changing_lane_req_;
  if (this != internal_default_instance()) delete changing_lane_rsp_;
}

void TrajectoryPlanningResult_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPlanningResult_message& TrajectoryPlanningResult_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPlanningResult_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPlanningResult_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_trajectory_sample_points_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && curr_pos_ != nullptr) {
    delete curr_pos_;
  }
  curr_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leading_pos_ != nullptr) {
    delete leading_pos_;
  }
  leading_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lat_err_ != nullptr) {
    delete lat_err_;
  }
  lat_err_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trj_changing_ != nullptr) {
    delete trj_changing_;
  }
  trj_changing_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && changing_lane_req_ != nullptr) {
    delete changing_lane_req_;
  }
  changing_lane_req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && changing_lane_rsp_ != nullptr) {
    delete changing_lane_rsp_;
  }
  changing_lane_rsp_ = nullptr;
  ::memset(&trj_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hold_steering_wheel_) -
      reinterpret_cast<char*>(&trj_direction_)) + sizeof(hold_steering_wheel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPlanningResult_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_curr_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leading_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lat_err(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 trj_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trj_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_trajectory_sample_points_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_trajectory_sample_points_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_target_trajectory_sample_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_trj_changing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hold_steering_wheel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hold_steering_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_changing_lane_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_changing_lane_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPlanningResult_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curr_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leading_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 trj_direction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trj_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_trajectory_sample_points_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_trajectory_sample_points_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_target_trajectory_sample_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trj_changing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hold_steering_wheel = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hold_steering_wheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_changing_lane_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_changing_lane_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPlanningResult_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  if (this->has_curr_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::curr_pos(this), output);
  }

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  if (this->has_leading_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::leading_pos(this), output);
  }

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  if (this->has_lat_err()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::lat_err(this), output);
  }

  // sint32 trj_direction = 5;
  if (this->trj_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(5, this->trj_direction(), output);
  }

  // uint32 target_trajectory_sample_points_count = 6;
  if (this->target_trajectory_sample_points_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->target_trajectory_sample_points_count(), output);
  }

  // repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_trajectory_sample_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->target_trajectory_sample_points(static_cast<int>(i)),
      output);
  }

  // .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
  if (this->has_trj_changing()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::trj_changing(this), output);
  }

  // bool hold_steering_wheel = 9;
  if (this->hold_steering_wheel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->hold_steering_wheel(), output);
  }

  // .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
  if (this->has_changing_lane_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::changing_lane_req(this), output);
  }

  // .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
  if (this->has_changing_lane_rsp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::changing_lane_rsp(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
}

size_t TrajectoryPlanningResult_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->target_trajectory_sample_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->target_trajectory_sample_points(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  if (this->has_curr_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curr_pos_);
  }

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  if (this->has_leading_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leading_pos_);
  }

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  if (this->has_lat_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_err_);
  }

  // .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
  if (this->has_trj_changing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trj_changing_);
  }

  // .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
  if (this->has_changing_lane_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changing_lane_req_);
  }

  // .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
  if (this->has_changing_lane_rsp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changing_lane_rsp_);
  }

  // sint32 trj_direction = 5;
  if (this->trj_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->trj_direction());
  }

  // uint32 target_trajectory_sample_points_count = 6;
  if (this->target_trajectory_sample_points_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_trajectory_sample_points_count());
  }

  // bool hold_steering_wheel = 9;
  if (this->hold_steering_wheel() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPlanningResult_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrajectoryPlanningResult_message*>(
      &from));
}

void TrajectoryPlanningResult_message::MergeFrom(const TrajectoryPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_trajectory_sample_points_.MergeFrom(from.target_trajectory_sample_points_);
  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_curr_pos()) {
    mutable_curr_pos()->::phoenix::ad_data_upload::Pos_message::MergeFrom(from.curr_pos());
  }
  if (from.has_leading_pos()) {
    mutable_leading_pos()->::phoenix::ad_data_upload::Pos_message::MergeFrom(from.leading_pos());
  }
  if (from.has_lat_err()) {
    mutable_lat_err()->::phoenix::ad_data_upload::Lat_Err_message::MergeFrom(from.lat_err());
  }
  if (from.has_trj_changing()) {
    mutable_trj_changing()->::phoenix::ad_data_upload::Trj_Change_message::MergeFrom(from.trj_changing());
  }
  if (from.has_changing_lane_req()) {
    mutable_changing_lane_req()->::phoenix::ad_data_upload::EventChangingLaneReq_message::MergeFrom(from.changing_lane_req());
  }
  if (from.has_changing_lane_rsp()) {
    mutable_changing_lane_rsp()->::phoenix::ad_data_upload::EventChangingLaneRsp_message::MergeFrom(from.changing_lane_rsp());
  }
  if (from.trj_direction() != 0) {
    set_trj_direction(from.trj_direction());
  }
  if (from.target_trajectory_sample_points_count() != 0) {
    set_target_trajectory_sample_points_count(from.target_trajectory_sample_points_count());
  }
  if (from.hold_steering_wheel() != 0) {
    set_hold_steering_wheel(from.hold_steering_wheel());
  }
}

void TrajectoryPlanningResult_message::CopyFrom(const TrajectoryPlanningResult_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPlanningResult_message::IsInitialized() const {
  return true;
}

void TrajectoryPlanningResult_message::InternalSwap(TrajectoryPlanningResult_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&target_trajectory_sample_points_)->InternalSwap(CastToBase(&other->target_trajectory_sample_points_));
  swap(msg_head_, other->msg_head_);
  swap(curr_pos_, other->curr_pos_);
  swap(leading_pos_, other->leading_pos_);
  swap(lat_err_, other->lat_err_);
  swap(trj_changing_, other->trj_changing_);
  swap(changing_lane_req_, other->changing_lane_req_);
  swap(changing_lane_rsp_, other->changing_lane_rsp_);
  swap(trj_direction_, other->trj_direction_);
  swap(target_trajectory_sample_points_count_, other->target_trajectory_sample_points_count_);
  swap(hold_steering_wheel_, other->hold_steering_wheel_);
}

std::string TrajectoryPlanningResult_message::GetTypeName() const {
  return "phoenix.ad_data_upload.TrajectoryPlanningResult_message";
}


// ===================================================================

void BoundaryAssociation_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_BoundaryAssociation_message_default_instance_._instance.get_mutable()->point_ = const_cast< ::phoenix::ad_data_upload::Vec2d_message*>(
      ::phoenix::ad_data_upload::Vec2d_message::internal_default_instance());
}
class BoundaryAssociation_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Vec2d_message& point(const BoundaryAssociation_message* msg);
};

const ::phoenix::ad_data_upload::Vec2d_message&
BoundaryAssociation_message::_Internal::point(const BoundaryAssociation_message* msg) {
  return *msg->point_;
}
BoundaryAssociation_message::BoundaryAssociation_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.BoundaryAssociation_message)
}
BoundaryAssociation_message::BoundaryAssociation_message(const BoundaryAssociation_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::phoenix::ad_data_upload::Vec2d_message(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.BoundaryAssociation_message)
}

void BoundaryAssociation_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&point_)) + sizeof(type_));
}

BoundaryAssociation_message::~BoundaryAssociation_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.BoundaryAssociation_message)
  SharedDtor();
}

void BoundaryAssociation_message::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void BoundaryAssociation_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryAssociation_message& BoundaryAssociation_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryAssociation_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void BoundaryAssociation_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&s_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundaryAssociation_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Vec2d_message point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundaryAssociation_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Vec2d_message point = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.BoundaryAssociation_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.BoundaryAssociation_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundaryAssociation_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->s(), output);
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  // sint32 type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->type(), output);
  }

  // .phoenix.ad_data_upload.Vec2d_message point = 4;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::point(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.BoundaryAssociation_message)
}

size_t BoundaryAssociation_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Vec2d_message point = 4;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // float s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryAssociation_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoundaryAssociation_message*>(
      &from));
}

void BoundaryAssociation_message::MergeFrom(const BoundaryAssociation_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::phoenix::ad_data_upload::Vec2d_message::MergeFrom(from.point());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BoundaryAssociation_message::CopyFrom(const BoundaryAssociation_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.BoundaryAssociation_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryAssociation_message::IsInitialized() const {
  return true;
}

void BoundaryAssociation_message::InternalSwap(BoundaryAssociation_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_, other->point_);
  swap(s_, other->s_);
  swap(width_, other->width_);
  swap(type_, other->type_);
}

std::string BoundaryAssociation_message::GetTypeName() const {
  return "phoenix.ad_data_upload.BoundaryAssociation_message";
}


// ===================================================================

void Boundary_message::InitAsDefaultInstance() {
}
class Boundary_message::_Internal {
 public:
};

Boundary_message::Boundary_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Boundary_message)
}
Boundary_message::Boundary_message(const Boundary_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      curve_(from.curve_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  curve_count_ = from.curve_count_;
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Boundary_message)
}

void Boundary_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  curve_count_ = 0u;
}

Boundary_message::~Boundary_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Boundary_message)
  SharedDtor();
}

void Boundary_message::SharedDtor() {
}

void Boundary_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Boundary_message& Boundary_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Boundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Boundary_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Boundary_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_.Clear();
  curve_count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Boundary_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 curve_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          curve_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Boundary_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Boundary_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 curve_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curve_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Boundary_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Boundary_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Boundary_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Boundary_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 curve_count = 1;
  if (this->curve_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->curve_count(), output);
  }

  // repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->curve(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Boundary_message)
}

size_t Boundary_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Boundary_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->curve_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->curve(static_cast<int>(i)));
    }
  }

  // uint32 curve_count = 1;
  if (this->curve_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->curve_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boundary_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Boundary_message*>(
      &from));
}

void Boundary_message::MergeFrom(const Boundary_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Boundary_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_.MergeFrom(from.curve_);
  if (from.curve_count() != 0) {
    set_curve_count(from.curve_count());
  }
}

void Boundary_message::CopyFrom(const Boundary_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Boundary_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boundary_message::IsInitialized() const {
  return true;
}

void Boundary_message::InternalSwap(Boundary_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&curve_)->InternalSwap(CastToBase(&other->curve_));
  swap(curve_count_, other->curve_count_);
}

std::string Boundary_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Boundary_message";
}


// ===================================================================

void ID_message::InitAsDefaultInstance() {
}
class ID_message::_Internal {
 public:
};

ID_message::ID_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ID_message)
}
ID_message::ID_message(const ID_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ID_message)
}

void ID_message::SharedCtor() {
  id_ = 0;
}

ID_message::~ID_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ID_message)
  SharedDtor();
}

void ID_message::SharedDtor() {
}

void ID_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ID_message& ID_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ID_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ID_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ID_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ID_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ID_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ID_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ID_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ID_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ID_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ID_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ID_message)
}

size_t ID_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ID_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ID_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ID_message*>(
      &from));
}

void ID_message::MergeFrom(const ID_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ID_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ID_message::CopyFrom(const ID_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ID_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ID_message::IsInitialized() const {
  return true;
}

void ID_message::InternalSwap(ID_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string ID_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ID_message";
}


// ===================================================================

void LaneInfo_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_LaneInfo_message_default_instance_._instance.get_mutable()->lane_id_ = const_cast< ::phoenix::ad_data_upload::ID_message*>(
      ::phoenix::ad_data_upload::ID_message::internal_default_instance());
  ::phoenix::ad_data_upload::_LaneInfo_message_default_instance_._instance.get_mutable()->left_boundary_ = const_cast< ::phoenix::ad_data_upload::Boundary_message*>(
      ::phoenix::ad_data_upload::Boundary_message::internal_default_instance());
  ::phoenix::ad_data_upload::_LaneInfo_message_default_instance_._instance.get_mutable()->right_boundary_ = const_cast< ::phoenix::ad_data_upload::Boundary_message*>(
      ::phoenix::ad_data_upload::Boundary_message::internal_default_instance());
}
class LaneInfo_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::ID_message& lane_id(const LaneInfo_message* msg);
  static const ::phoenix::ad_data_upload::Boundary_message& left_boundary(const LaneInfo_message* msg);
  static const ::phoenix::ad_data_upload::Boundary_message& right_boundary(const LaneInfo_message* msg);
};

const ::phoenix::ad_data_upload::ID_message&
LaneInfo_message::_Internal::lane_id(const LaneInfo_message* msg) {
  return *msg->lane_id_;
}
const ::phoenix::ad_data_upload::Boundary_message&
LaneInfo_message::_Internal::left_boundary(const LaneInfo_message* msg) {
  return *msg->left_boundary_;
}
const ::phoenix::ad_data_upload::Boundary_message&
LaneInfo_message::_Internal::right_boundary(const LaneInfo_message* msg) {
  return *msg->right_boundary_;
}
LaneInfo_message::LaneInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LaneInfo_message)
}
LaneInfo_message::LaneInfo_message(const LaneInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      central_curve_(from.central_curve_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_id()) {
    lane_id_ = new ::phoenix::ad_data_upload::ID_message(*from.lane_id_);
  } else {
    lane_id_ = nullptr;
  }
  if (from.has_left_boundary()) {
    left_boundary_ = new ::phoenix::ad_data_upload::Boundary_message(*from.left_boundary_);
  } else {
    left_boundary_ = nullptr;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::phoenix::ad_data_upload::Boundary_message(*from.right_boundary_);
  } else {
    right_boundary_ = nullptr;
  }
  ::memcpy(&lane_index_, &from.lane_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&central_curve_count_) -
    reinterpret_cast<char*>(&lane_index_)) + sizeof(central_curve_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LaneInfo_message)
}

void LaneInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&central_curve_count_) -
      reinterpret_cast<char*>(&lane_id_)) + sizeof(central_curve_count_));
}

LaneInfo_message::~LaneInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LaneInfo_message)
  SharedDtor();
}

void LaneInfo_message::SharedDtor() {
  if (this != internal_default_instance()) delete lane_id_;
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
}

void LaneInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneInfo_message& LaneInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void LaneInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  central_curve_.Clear();
  if (GetArenaNoVirtual() == nullptr && lane_id_ != nullptr) {
    delete lane_id_;
  }
  lane_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && left_boundary_ != nullptr) {
    delete left_boundary_;
  }
  left_boundary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_boundary_ != nullptr) {
    delete right_boundary_;
  }
  right_boundary_ = nullptr;
  ::memset(&lane_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&central_curve_count_) -
      reinterpret_cast<char*>(&lane_index_)) + sizeof(central_curve_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.ID_message lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lane_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lane_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 central_curve_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          central_curve_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_central_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_left_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_right_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LaneInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.ID_message lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 lane_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 quality = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 central_curve_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &central_curve_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LaneInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LaneInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LaneInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ID_message lane_id = 1;
  if (this->has_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::lane_id(this), output);
  }

  // sint32 lane_index = 2;
  if (this->lane_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->lane_index(), output);
  }

  // sint32 quality = 3;
  if (this->quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->quality(), output);
  }

  // uint32 central_curve_count = 4;
  if (this->central_curve_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->central_curve_count(), output);
  }

  // repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->central_curve_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->central_curve(static_cast<int>(i)),
      output);
  }

  // .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
  if (this->has_left_boundary()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::left_boundary(this), output);
  }

  // .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
  if (this->has_right_boundary()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::right_boundary(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LaneInfo_message)
}

size_t LaneInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LaneInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->central_curve_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->central_curve(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.ID_message lane_id = 1;
  if (this->has_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_id_);
  }

  // .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
  if (this->has_left_boundary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_boundary_);
  }

  // .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
  if (this->has_right_boundary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_boundary_);
  }

  // sint32 lane_index = 2;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->lane_index());
  }

  // sint32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->quality());
  }

  // uint32 central_curve_count = 4;
  if (this->central_curve_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->central_curve_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LaneInfo_message*>(
      &from));
}

void LaneInfo_message::MergeFrom(const LaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LaneInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  central_curve_.MergeFrom(from.central_curve_);
  if (from.has_lane_id()) {
    mutable_lane_id()->::phoenix::ad_data_upload::ID_message::MergeFrom(from.lane_id());
  }
  if (from.has_left_boundary()) {
    mutable_left_boundary()->::phoenix::ad_data_upload::Boundary_message::MergeFrom(from.left_boundary());
  }
  if (from.has_right_boundary()) {
    mutable_right_boundary()->::phoenix::ad_data_upload::Boundary_message::MergeFrom(from.right_boundary());
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.central_curve_count() != 0) {
    set_central_curve_count(from.central_curve_count());
  }
}

void LaneInfo_message::CopyFrom(const LaneInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LaneInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneInfo_message::IsInitialized() const {
  return true;
}

void LaneInfo_message::InternalSwap(LaneInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&central_curve_)->InternalSwap(CastToBase(&other->central_curve_));
  swap(lane_id_, other->lane_id_);
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_, other->right_boundary_);
  swap(lane_index_, other->lane_index_);
  swap(quality_, other->quality_);
  swap(central_curve_count_, other->central_curve_count_);
}

std::string LaneInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LaneInfo_message";
}


// ===================================================================

void LineSegment2d_message::InitAsDefaultInstance() {
}
class LineSegment2d_message::_Internal {
 public:
};

LineSegment2d_message::LineSegment2d_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.LineSegment2d_message)
}
LineSegment2d_message::LineSegment2d_message(const LineSegment2d_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      points__(from.points__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.LineSegment2d_message)
}

void LineSegment2d_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
}

LineSegment2d_message::~LineSegment2d_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.LineSegment2d_message)
  SharedDtor();
}

void LineSegment2d_message::SharedDtor() {
}

void LineSegment2d_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineSegment2d_message& LineSegment2d_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineSegment2d_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void LineSegment2d_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.LineSegment2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points__.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LineSegment2d_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LineSegment2d_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.LineSegment2d_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.LineSegment2d_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.LineSegment2d_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LineSegment2d_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.LineSegment2d_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points__size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->points_(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.LineSegment2d_message)
}

size_t LineSegment2d_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.LineSegment2d_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points__size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points_(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineSegment2d_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LineSegment2d_message*>(
      &from));
}

void LineSegment2d_message::MergeFrom(const LineSegment2d_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.LineSegment2d_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points__.MergeFrom(from.points__);
}

void LineSegment2d_message::CopyFrom(const LineSegment2d_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.LineSegment2d_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment2d_message::IsInitialized() const {
  return true;
}

void LineSegment2d_message::InternalSwap(LineSegment2d_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points__)->InternalSwap(CastToBase(&other->points__));
}

std::string LineSegment2d_message::GetTypeName() const {
  return "phoenix.ad_data_upload.LineSegment2d_message";
}


// ===================================================================

void MapTrafficLight_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_MapTrafficLight_message_default_instance_._instance.get_mutable()->id_ = const_cast< ::phoenix::ad_data_upload::ID_message*>(
      ::phoenix::ad_data_upload::ID_message::internal_default_instance());
  ::phoenix::ad_data_upload::_MapTrafficLight_message_default_instance_._instance.get_mutable()->stop_line_ = const_cast< ::phoenix::ad_data_upload::LineSegment2d_message*>(
      ::phoenix::ad_data_upload::LineSegment2d_message::internal_default_instance());
}
class MapTrafficLight_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::ID_message& id(const MapTrafficLight_message* msg);
  static const ::phoenix::ad_data_upload::LineSegment2d_message& stop_line(const MapTrafficLight_message* msg);
};

const ::phoenix::ad_data_upload::ID_message&
MapTrafficLight_message::_Internal::id(const MapTrafficLight_message* msg) {
  return *msg->id_;
}
const ::phoenix::ad_data_upload::LineSegment2d_message&
MapTrafficLight_message::_Internal::stop_line(const MapTrafficLight_message* msg) {
  return *msg->stop_line_;
}
MapTrafficLight_message::MapTrafficLight_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.MapTrafficLight_message)
}
MapTrafficLight_message::MapTrafficLight_message(const MapTrafficLight_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::phoenix::ad_data_upload::ID_message(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_stop_line()) {
    stop_line_ = new ::phoenix::ad_data_upload::LineSegment2d_message(*from.stop_line_);
  } else {
    stop_line_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.MapTrafficLight_message)
}

void MapTrafficLight_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_line_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stop_line_));
}

MapTrafficLight_message::~MapTrafficLight_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.MapTrafficLight_message)
  SharedDtor();
}

void MapTrafficLight_message::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete stop_line_;
}

void MapTrafficLight_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapTrafficLight_message& MapTrafficLight_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapTrafficLight_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void MapTrafficLight_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.MapTrafficLight_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stop_line_ != nullptr) {
    delete stop_line_;
  }
  stop_line_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapTrafficLight_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.ID_message id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_stop_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapTrafficLight_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.MapTrafficLight_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.ID_message id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.MapTrafficLight_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.MapTrafficLight_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapTrafficLight_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.MapTrafficLight_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ID_message id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::id(this), output);
  }

  // .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
  if (this->has_stop_line()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::stop_line(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.MapTrafficLight_message)
}

size_t MapTrafficLight_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.MapTrafficLight_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.ID_message id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
  if (this->has_stop_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_line_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapTrafficLight_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MapTrafficLight_message*>(
      &from));
}

void MapTrafficLight_message::MergeFrom(const MapTrafficLight_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.MapTrafficLight_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::phoenix::ad_data_upload::ID_message::MergeFrom(from.id());
  }
  if (from.has_stop_line()) {
    mutable_stop_line()->::phoenix::ad_data_upload::LineSegment2d_message::MergeFrom(from.stop_line());
  }
}

void MapTrafficLight_message::CopyFrom(const MapTrafficLight_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.MapTrafficLight_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTrafficLight_message::IsInitialized() const {
  return true;
}

void MapTrafficLight_message::InternalSwap(MapTrafficLight_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(stop_line_, other->stop_line_);
}

std::string MapTrafficLight_message::GetTypeName() const {
  return "phoenix.ad_data_upload.MapTrafficLight_message";
}


// ===================================================================

void MapInfo_message::InitAsDefaultInstance() {
}
class MapInfo_message::_Internal {
 public:
};

MapInfo_message::MapInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.MapInfo_message)
}
MapInfo_message::MapInfo_message(const MapInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      lane_table_(from.lane_table_),
      map_traffic_light_table_(from.map_traffic_light_table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_table_count_, &from.lane_table_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_traffic_light_table_count_) -
    reinterpret_cast<char*>(&lane_table_count_)) + sizeof(map_traffic_light_table_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.MapInfo_message)
}

void MapInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&lane_table_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_traffic_light_table_count_) -
      reinterpret_cast<char*>(&lane_table_count_)) + sizeof(map_traffic_light_table_count_));
}

MapInfo_message::~MapInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.MapInfo_message)
  SharedDtor();
}

void MapInfo_message::SharedDtor() {
}

void MapInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapInfo_message& MapInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void MapInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.MapInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_table_.Clear();
  map_traffic_light_table_.Clear();
  ::memset(&lane_table_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_traffic_light_table_count_) -
      reinterpret_cast<char*>(&lane_table_count_)) + sizeof(map_traffic_light_table_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lane_table_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_table_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 map_traffic_light_table_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          map_traffic_light_table_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_traffic_light_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.MapInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 lane_table_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_table_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_traffic_light_table_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_traffic_light_table_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_traffic_light_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.MapInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.MapInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.MapInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lane_table_count = 1;
  if (this->lane_table_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->lane_table_count(), output);
  }

  // repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_table_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->lane_table(static_cast<int>(i)),
      output);
  }

  // uint32 map_traffic_light_table_count = 3;
  if (this->map_traffic_light_table_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->map_traffic_light_table_count(), output);
  }

  // repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_traffic_light_table_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->map_traffic_light_table(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.MapInfo_message)
}

size_t MapInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.MapInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_table(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->map_traffic_light_table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_traffic_light_table(static_cast<int>(i)));
    }
  }

  // uint32 lane_table_count = 1;
  if (this->lane_table_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_table_count());
  }

  // uint32 map_traffic_light_table_count = 3;
  if (this->map_traffic_light_table_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->map_traffic_light_table_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MapInfo_message*>(
      &from));
}

void MapInfo_message::MergeFrom(const MapInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.MapInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_table_.MergeFrom(from.lane_table_);
  map_traffic_light_table_.MergeFrom(from.map_traffic_light_table_);
  if (from.lane_table_count() != 0) {
    set_lane_table_count(from.lane_table_count());
  }
  if (from.map_traffic_light_table_count() != 0) {
    set_map_traffic_light_table_count(from.map_traffic_light_table_count());
  }
}

void MapInfo_message::CopyFrom(const MapInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.MapInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo_message::IsInitialized() const {
  return true;
}

void MapInfo_message::InternalSwap(MapInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lane_table_)->InternalSwap(CastToBase(&other->lane_table_));
  CastToBase(&map_traffic_light_table_)->InternalSwap(CastToBase(&other->map_traffic_light_table_));
  swap(lane_table_count_, other->lane_table_count_);
  swap(map_traffic_light_table_count_, other->map_traffic_light_table_count_);
}

std::string MapInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.MapInfo_message";
}


// ===================================================================

void RoadBoundary_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_RoadBoundary_message_default_instance_._instance.get_mutable()->ref_point_ = const_cast< ::phoenix::ad_data_upload::PathPoint_message*>(
      ::phoenix::ad_data_upload::PathPoint_message::internal_default_instance());
  ::phoenix::ad_data_upload::_RoadBoundary_message_default_instance_._instance.get_mutable()->left_boundary_point_ = const_cast< ::phoenix::ad_data_upload::PathPoint_message*>(
      ::phoenix::ad_data_upload::PathPoint_message::internal_default_instance());
  ::phoenix::ad_data_upload::_RoadBoundary_message_default_instance_._instance.get_mutable()->right_boundary_point_ = const_cast< ::phoenix::ad_data_upload::PathPoint_message*>(
      ::phoenix::ad_data_upload::PathPoint_message::internal_default_instance());
}
class RoadBoundary_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::PathPoint_message& ref_point(const RoadBoundary_message* msg);
  static const ::phoenix::ad_data_upload::PathPoint_message& left_boundary_point(const RoadBoundary_message* msg);
  static const ::phoenix::ad_data_upload::PathPoint_message& right_boundary_point(const RoadBoundary_message* msg);
};

const ::phoenix::ad_data_upload::PathPoint_message&
RoadBoundary_message::_Internal::ref_point(const RoadBoundary_message* msg) {
  return *msg->ref_point_;
}
const ::phoenix::ad_data_upload::PathPoint_message&
RoadBoundary_message::_Internal::left_boundary_point(const RoadBoundary_message* msg) {
  return *msg->left_boundary_point_;
}
const ::phoenix::ad_data_upload::PathPoint_message&
RoadBoundary_message::_Internal::right_boundary_point(const RoadBoundary_message* msg) {
  return *msg->right_boundary_point_;
}
RoadBoundary_message::RoadBoundary_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.RoadBoundary_message)
}
RoadBoundary_message::RoadBoundary_message(const RoadBoundary_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ref_point()) {
    ref_point_ = new ::phoenix::ad_data_upload::PathPoint_message(*from.ref_point_);
  } else {
    ref_point_ = nullptr;
  }
  if (from.has_left_boundary_point()) {
    left_boundary_point_ = new ::phoenix::ad_data_upload::PathPoint_message(*from.left_boundary_point_);
  } else {
    left_boundary_point_ = nullptr;
  }
  if (from.has_right_boundary_point()) {
    right_boundary_point_ = new ::phoenix::ad_data_upload::PathPoint_message(*from.right_boundary_point_);
  } else {
    right_boundary_point_ = nullptr;
  }
  ::memcpy(&left_width_, &from.left_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_width_) -
    reinterpret_cast<char*>(&left_width_)) + sizeof(right_width_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.RoadBoundary_message)
}

void RoadBoundary_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&ref_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_width_) -
      reinterpret_cast<char*>(&ref_point_)) + sizeof(right_width_));
}

RoadBoundary_message::~RoadBoundary_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.RoadBoundary_message)
  SharedDtor();
}

void RoadBoundary_message::SharedDtor() {
  if (this != internal_default_instance()) delete ref_point_;
  if (this != internal_default_instance()) delete left_boundary_point_;
  if (this != internal_default_instance()) delete right_boundary_point_;
}

void RoadBoundary_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadBoundary_message& RoadBoundary_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadBoundary_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void RoadBoundary_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.RoadBoundary_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ref_point_ != nullptr) {
    delete ref_point_;
  }
  ref_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && left_boundary_point_ != nullptr) {
    delete left_boundary_point_;
  }
  left_boundary_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_boundary_point_ != nullptr) {
    delete right_boundary_point_;
  }
  right_boundary_point_ = nullptr;
  ::memset(&left_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_width_) -
      reinterpret_cast<char*>(&left_width_)) + sizeof(right_width_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadBoundary_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ref_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_left_boundary_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_right_boundary_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float left_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          left_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          right_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadBoundary_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.RoadBoundary_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ref_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.RoadBoundary_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.RoadBoundary_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadBoundary_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.RoadBoundary_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
  if (this->has_ref_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ref_point(this), output);
  }

  // .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
  if (this->has_left_boundary_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::left_boundary_point(this), output);
  }

  // .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
  if (this->has_right_boundary_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::right_boundary_point(this), output);
  }

  // float left_width = 4;
  if (!(this->left_width() <= 0 && this->left_width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->left_width(), output);
  }

  // float right_width = 5;
  if (!(this->right_width() <= 0 && this->right_width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->right_width(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.RoadBoundary_message)
}

size_t RoadBoundary_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.RoadBoundary_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
  if (this->has_ref_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_point_);
  }

  // .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
  if (this->has_left_boundary_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_boundary_point_);
  }

  // .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
  if (this->has_right_boundary_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_boundary_point_);
  }

  // float left_width = 4;
  if (!(this->left_width() <= 0 && this->left_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_width = 5;
  if (!(this->right_width() <= 0 && this->right_width() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadBoundary_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RoadBoundary_message*>(
      &from));
}

void RoadBoundary_message::MergeFrom(const RoadBoundary_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.RoadBoundary_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ref_point()) {
    mutable_ref_point()->::phoenix::ad_data_upload::PathPoint_message::MergeFrom(from.ref_point());
  }
  if (from.has_left_boundary_point()) {
    mutable_left_boundary_point()->::phoenix::ad_data_upload::PathPoint_message::MergeFrom(from.left_boundary_point());
  }
  if (from.has_right_boundary_point()) {
    mutable_right_boundary_point()->::phoenix::ad_data_upload::PathPoint_message::MergeFrom(from.right_boundary_point());
  }
  if (!(from.left_width() <= 0 && from.left_width() >= 0)) {
    set_left_width(from.left_width());
  }
  if (!(from.right_width() <= 0 && from.right_width() >= 0)) {
    set_right_width(from.right_width());
  }
}

void RoadBoundary_message::CopyFrom(const RoadBoundary_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.RoadBoundary_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary_message::IsInitialized() const {
  return true;
}

void RoadBoundary_message::InternalSwap(RoadBoundary_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ref_point_, other->ref_point_);
  swap(left_boundary_point_, other->left_boundary_point_);
  swap(right_boundary_point_, other->right_boundary_point_);
  swap(left_width_, other->left_width_);
  swap(right_width_, other->right_width_);
}

std::string RoadBoundary_message::GetTypeName() const {
  return "phoenix.ad_data_upload.RoadBoundary_message";
}


// ===================================================================

void ObstacleInfo_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_ObstacleInfo_message_default_instance_._instance.get_mutable()->obb_ = const_cast< ::phoenix::ad_data_upload::OBBox2d_message*>(
      ::phoenix::ad_data_upload::OBBox2d_message::internal_default_instance());
}
class ObstacleInfo_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::OBBox2d_message& obb(const ObstacleInfo_message* msg);
};

const ::phoenix::ad_data_upload::OBBox2d_message&
ObstacleInfo_message::_Internal::obb(const ObstacleInfo_message* msg) {
  return *msg->obb_;
}
ObstacleInfo_message::ObstacleInfo_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.ObstacleInfo_message)
}
ObstacleInfo_message::ObstacleInfo_message(const ObstacleInfo_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      pred_trajectory_count_num_(from.pred_trajectory_count_num_),
      pred_trajectory_(from.pred_trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obb()) {
    obb_ = new ::phoenix::ad_data_upload::OBBox2d_message(*from.obb_);
  } else {
    obb_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pred_trajectory_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pred_trajectory_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.ObstacleInfo_message)
}

void ObstacleInfo_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&obb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_trajectory_count_) -
      reinterpret_cast<char*>(&obb_)) + sizeof(pred_trajectory_count_));
}

ObstacleInfo_message::~ObstacleInfo_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.ObstacleInfo_message)
  SharedDtor();
}

void ObstacleInfo_message::SharedDtor() {
  if (this != internal_default_instance()) delete obb_;
}

void ObstacleInfo_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleInfo_message& ObstacleInfo_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleInfo_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void ObstacleInfo_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.ObstacleInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pred_trajectory_count_num_.Clear();
  pred_trajectory_.Clear();
  if (GetArenaNoVirtual() == nullptr && obb_ != nullptr) {
    delete obb_;
  }
  obb_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_trajectory_count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pred_trajectory_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleInfo_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.OBBox2d_message obb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_obb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool uncertain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          uncertain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float V = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s_ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float l_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          l_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 pred_trajectory_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pred_trajectory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 pred_trajectory_count_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_pred_trajectory_count_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          add_pred_trajectory_count_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pred_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleInfo_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.ObstacleInfo_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.OBBox2d_message obb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 dynamic = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool uncertain = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uncertain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float V = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_ref = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float l_ref = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pred_trajectory_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pred_trajectory_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pred_trajectory_count_num = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pred_trajectory_count_num())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_pred_trajectory_count_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pred_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.ObstacleInfo_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.ObstacleInfo_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleInfo_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.ObstacleInfo_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // .phoenix.ad_data_upload.OBBox2d_message obb = 2;
  if (this->has_obb()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::obb(this), output);
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // sint32 type = 4;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  // sint32 dynamic = 5;
  if (this->dynamic() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(5, this->dynamic(), output);
  }

  // bool ignore = 6;
  if (this->ignore() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->ignore(), output);
  }

  // bool uncertain = 7;
  if (this->uncertain() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->uncertain(), output);
  }

  // float V = 8;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->v(), output);
  }

  // float s_ref = 9;
  if (!(this->s_ref() <= 0 && this->s_ref() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->s_ref(), output);
  }

  // float l_ref = 10;
  if (!(this->l_ref() <= 0 && this->l_ref() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->l_ref(), output);
  }

  // uint32 pred_trajectory_count = 11;
  if (this->pred_trajectory_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->pred_trajectory_count(), output);
  }

  // repeated uint32 pred_trajectory_count_num = 12;
  if (this->pred_trajectory_count_num_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pred_trajectory_count_num_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pred_trajectory_count_num_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->pred_trajectory_count_num(i), output);
  }

  // repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pred_trajectory_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13,
      this->pred_trajectory(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.ObstacleInfo_message)
}

size_t ObstacleInfo_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.ObstacleInfo_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pred_trajectory_count_num = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pred_trajectory_count_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pred_trajectory_count_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pred_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pred_trajectory(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.OBBox2d_message obb = 2;
  if (this->has_obb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obb_);
  }

  // sint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  // float heading = 3;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  // sint32 dynamic = 5;
  if (this->dynamic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->dynamic());
  }

  // bool ignore = 6;
  if (this->ignore() != 0) {
    total_size += 1 + 1;
  }

  // bool uncertain = 7;
  if (this->uncertain() != 0) {
    total_size += 1 + 1;
  }

  // float V = 8;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  // float s_ref = 9;
  if (!(this->s_ref() <= 0 && this->s_ref() >= 0)) {
    total_size += 1 + 4;
  }

  // float l_ref = 10;
  if (!(this->l_ref() <= 0 && this->l_ref() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 pred_trajectory_count = 11;
  if (this->pred_trajectory_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->pred_trajectory_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleInfo_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObstacleInfo_message*>(
      &from));
}

void ObstacleInfo_message::MergeFrom(const ObstacleInfo_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.ObstacleInfo_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pred_trajectory_count_num_.MergeFrom(from.pred_trajectory_count_num_);
  pred_trajectory_.MergeFrom(from.pred_trajectory_);
  if (from.has_obb()) {
    mutable_obb()->::phoenix::ad_data_upload::OBBox2d_message::MergeFrom(from.obb());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.dynamic() != 0) {
    set_dynamic(from.dynamic());
  }
  if (from.ignore() != 0) {
    set_ignore(from.ignore());
  }
  if (from.uncertain() != 0) {
    set_uncertain(from.uncertain());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    set_v(from.v());
  }
  if (!(from.s_ref() <= 0 && from.s_ref() >= 0)) {
    set_s_ref(from.s_ref());
  }
  if (!(from.l_ref() <= 0 && from.l_ref() >= 0)) {
    set_l_ref(from.l_ref());
  }
  if (from.pred_trajectory_count() != 0) {
    set_pred_trajectory_count(from.pred_trajectory_count());
  }
}

void ObstacleInfo_message::CopyFrom(const ObstacleInfo_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.ObstacleInfo_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInfo_message::IsInitialized() const {
  return true;
}

void ObstacleInfo_message::InternalSwap(ObstacleInfo_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pred_trajectory_count_num_.InternalSwap(&other->pred_trajectory_count_num_);
  CastToBase(&pred_trajectory_)->InternalSwap(CastToBase(&other->pred_trajectory_));
  swap(obb_, other->obb_);
  swap(id_, other->id_);
  swap(heading_, other->heading_);
  swap(type_, other->type_);
  swap(dynamic_, other->dynamic_);
  swap(ignore_, other->ignore_);
  swap(uncertain_, other->uncertain_);
  swap(v_, other->v_);
  swap(s_ref_, other->s_ref_);
  swap(l_ref_, other->l_ref_);
  swap(pred_trajectory_count_, other->pred_trajectory_count_);
}

std::string ObstacleInfo_message::GetTypeName() const {
  return "phoenix.ad_data_upload.ObstacleInfo_message";
}


// ===================================================================

void DrivingMapInfo_1_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_DrivingMapInfo_1_message_default_instance_._instance.get_mutable()->msg_head_ = const_cast< ::phoenix::ad_data_upload::MsgHead_message*>(
      ::phoenix::ad_data_upload::MsgHead_message::internal_default_instance());
  ::phoenix::ad_data_upload::_DrivingMapInfo_1_message_default_instance_._instance.get_mutable()->map_ = const_cast< ::phoenix::ad_data_upload::MapInfo_message*>(
      ::phoenix::ad_data_upload::MapInfo_message::internal_default_instance());
}
class DrivingMapInfo_1_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::MsgHead_message& msg_head(const DrivingMapInfo_1_message* msg);
  static const ::phoenix::ad_data_upload::MapInfo_message& map(const DrivingMapInfo_1_message* msg);
};

const ::phoenix::ad_data_upload::MsgHead_message&
DrivingMapInfo_1_message::_Internal::msg_head(const DrivingMapInfo_1_message* msg) {
  return *msg->msg_head_;
}
const ::phoenix::ad_data_upload::MapInfo_message&
DrivingMapInfo_1_message::_Internal::map(const DrivingMapInfo_1_message* msg) {
  return *msg->map_;
}
DrivingMapInfo_1_message::DrivingMapInfo_1_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.DrivingMapInfo_1_message)
}
DrivingMapInfo_1_message::DrivingMapInfo_1_message(const DrivingMapInfo_1_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      road_boundary_(from.road_boundary_),
      obstacle_list_(from.obstacle_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg_head()) {
    msg_head_ = new ::phoenix::ad_data_upload::MsgHead_message(*from.msg_head_);
  } else {
    msg_head_ = nullptr;
  }
  if (from.has_map()) {
    map_ = new ::phoenix::ad_data_upload::MapInfo_message(*from.map_);
  } else {
    map_ = nullptr;
  }
  ::memcpy(&road_boundary_count_, &from.road_boundary_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_list_count_) -
    reinterpret_cast<char*>(&road_boundary_count_)) + sizeof(obstacle_list_count_));
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.DrivingMapInfo_1_message)
}

void DrivingMapInfo_1_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&msg_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_list_count_) -
      reinterpret_cast<char*>(&msg_head_)) + sizeof(obstacle_list_count_));
}

DrivingMapInfo_1_message::~DrivingMapInfo_1_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  SharedDtor();
}

void DrivingMapInfo_1_message::SharedDtor() {
  if (this != internal_default_instance()) delete msg_head_;
  if (this != internal_default_instance()) delete map_;
}

void DrivingMapInfo_1_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrivingMapInfo_1_message& DrivingMapInfo_1_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrivingMapInfo_1_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void DrivingMapInfo_1_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_boundary_.Clear();
  obstacle_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  ::memset(&road_boundary_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_list_count_) -
      reinterpret_cast<char*>(&road_boundary_count_)) + sizeof(obstacle_list_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrivingMapInfo_1_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_msg_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.MapInfo_message map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_boundary_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          road_boundary_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_road_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // uint32 obstacle_list_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          obstacle_list_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacle_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrivingMapInfo_1_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.MapInfo_message map = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 road_boundary_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &road_boundary_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_road_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obstacle_list_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obstacle_list_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacle_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrivingMapInfo_1_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::msg_head(this), output);
  }

  // .phoenix.ad_data_upload.MapInfo_message map = 2;
  if (this->has_map()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::map(this), output);
  }

  // uint32 road_boundary_count = 3;
  if (this->road_boundary_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->road_boundary_count(), output);
  }

  // repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_boundary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->road_boundary(static_cast<int>(i)),
      output);
  }

  // uint32 obstacle_list_count = 5;
  if (this->obstacle_list_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->obstacle_list_count(), output);
  }

  // repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->obstacle_list(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.DrivingMapInfo_1_message)
}

size_t DrivingMapInfo_1_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->road_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->road_boundary(static_cast<int>(i)));
    }
  }

  // repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacle_list(static_cast<int>(i)));
    }
  }

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  if (this->has_msg_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_head_);
  }

  // .phoenix.ad_data_upload.MapInfo_message map = 2;
  if (this->has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // uint32 road_boundary_count = 3;
  if (this->road_boundary_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->road_boundary_count());
  }

  // uint32 obstacle_list_count = 5;
  if (this->obstacle_list_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->obstacle_list_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingMapInfo_1_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrivingMapInfo_1_message*>(
      &from));
}

void DrivingMapInfo_1_message::MergeFrom(const DrivingMapInfo_1_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_boundary_.MergeFrom(from.road_boundary_);
  obstacle_list_.MergeFrom(from.obstacle_list_);
  if (from.has_msg_head()) {
    mutable_msg_head()->::phoenix::ad_data_upload::MsgHead_message::MergeFrom(from.msg_head());
  }
  if (from.has_map()) {
    mutable_map()->::phoenix::ad_data_upload::MapInfo_message::MergeFrom(from.map());
  }
  if (from.road_boundary_count() != 0) {
    set_road_boundary_count(from.road_boundary_count());
  }
  if (from.obstacle_list_count() != 0) {
    set_obstacle_list_count(from.obstacle_list_count());
  }
}

void DrivingMapInfo_1_message::CopyFrom(const DrivingMapInfo_1_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.DrivingMapInfo_1_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingMapInfo_1_message::IsInitialized() const {
  return true;
}

void DrivingMapInfo_1_message::InternalSwap(DrivingMapInfo_1_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&road_boundary_)->InternalSwap(CastToBase(&other->road_boundary_));
  CastToBase(&obstacle_list_)->InternalSwap(CastToBase(&other->obstacle_list_));
  swap(msg_head_, other->msg_head_);
  swap(map_, other->map_);
  swap(road_boundary_count_, other->road_boundary_count_);
  swap(obstacle_list_count_, other->obstacle_list_count_);
}

std::string DrivingMapInfo_1_message::GetTypeName() const {
  return "phoenix.ad_data_upload.DrivingMapInfo_1_message";
}


// ===================================================================

void Trajectory_Planning_Result_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_Trajectory_Planning_Result_message_default_instance_._instance.get_mutable()->trajectory_planning_result_ = const_cast< ::phoenix::ad_data_upload::TrajectoryPlanningResult_message*>(
      ::phoenix::ad_data_upload::TrajectoryPlanningResult_message::internal_default_instance());
}
class Trajectory_Planning_Result_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message& trajectory_planning_result(const Trajectory_Planning_Result_message* msg);
};

const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message&
Trajectory_Planning_Result_message::_Internal::trajectory_planning_result(const Trajectory_Planning_Result_message* msg) {
  return *msg->trajectory_planning_result_;
}
Trajectory_Planning_Result_message::Trajectory_Planning_Result_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
}
Trajectory_Planning_Result_message::Trajectory_Planning_Result_message(const Trajectory_Planning_Result_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_planning_result()) {
    trajectory_planning_result_ = new ::phoenix::ad_data_upload::TrajectoryPlanningResult_message(*from.trajectory_planning_result_);
  } else {
    trajectory_planning_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
}

void Trajectory_Planning_Result_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  trajectory_planning_result_ = nullptr;
}

Trajectory_Planning_Result_message::~Trajectory_Planning_Result_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  SharedDtor();
}

void Trajectory_Planning_Result_message::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_planning_result_;
}

void Trajectory_Planning_Result_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory_Planning_Result_message& Trajectory_Planning_Result_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_Planning_Result_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void Trajectory_Planning_Result_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_planning_result_ != nullptr) {
    delete trajectory_planning_result_;
  }
  trajectory_planning_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trajectory_Planning_Result_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trajectory_planning_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trajectory_Planning_Result_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_planning_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trajectory_Planning_Result_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
  if (this->has_trajectory_planning_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::trajectory_planning_result(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
}

size_t Trajectory_Planning_Result_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
  if (this->has_trajectory_planning_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_planning_result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory_Planning_Result_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Trajectory_Planning_Result_message*>(
      &from));
}

void Trajectory_Planning_Result_message::MergeFrom(const Trajectory_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_planning_result()) {
    mutable_trajectory_planning_result()->::phoenix::ad_data_upload::TrajectoryPlanningResult_message::MergeFrom(from.trajectory_planning_result());
  }
}

void Trajectory_Planning_Result_message::CopyFrom(const Trajectory_Planning_Result_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Planning_Result_message::IsInitialized() const {
  return true;
}

void Trajectory_Planning_Result_message::InternalSwap(Trajectory_Planning_Result_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_planning_result_, other->trajectory_planning_result_);
}

std::string Trajectory_Planning_Result_message::GetTypeName() const {
  return "phoenix.ad_data_upload.Trajectory_Planning_Result_message";
}


// ===================================================================

void DrivingMap_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_DrivingMap_message_default_instance_._instance.get_mutable()->driving_map_info_1_ = const_cast< ::phoenix::ad_data_upload::DrivingMapInfo_1_message*>(
      ::phoenix::ad_data_upload::DrivingMapInfo_1_message::internal_default_instance());
}
class DrivingMap_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::DrivingMapInfo_1_message& driving_map_info_1(const DrivingMap_message* msg);
};

const ::phoenix::ad_data_upload::DrivingMapInfo_1_message&
DrivingMap_message::_Internal::driving_map_info_1(const DrivingMap_message* msg) {
  return *msg->driving_map_info_1_;
}
DrivingMap_message::DrivingMap_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.DrivingMap_message)
}
DrivingMap_message::DrivingMap_message(const DrivingMap_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driving_map_info_1()) {
    driving_map_info_1_ = new ::phoenix::ad_data_upload::DrivingMapInfo_1_message(*from.driving_map_info_1_);
  } else {
    driving_map_info_1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.DrivingMap_message)
}

void DrivingMap_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  driving_map_info_1_ = nullptr;
}

DrivingMap_message::~DrivingMap_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.DrivingMap_message)
  SharedDtor();
}

void DrivingMap_message::SharedDtor() {
  if (this != internal_default_instance()) delete driving_map_info_1_;
}

void DrivingMap_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrivingMap_message& DrivingMap_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrivingMap_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void DrivingMap_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.DrivingMap_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && driving_map_info_1_ != nullptr) {
    delete driving_map_info_1_;
  }
  driving_map_info_1_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrivingMap_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_driving_map_info_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrivingMap_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.DrivingMap_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driving_map_info_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.DrivingMap_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.DrivingMap_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrivingMap_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.DrivingMap_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
  if (this->has_driving_map_info_1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::driving_map_info_1(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.DrivingMap_message)
}

size_t DrivingMap_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.DrivingMap_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
  if (this->has_driving_map_info_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driving_map_info_1_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingMap_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrivingMap_message*>(
      &from));
}

void DrivingMap_message::MergeFrom(const DrivingMap_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.DrivingMap_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_driving_map_info_1()) {
    mutable_driving_map_info_1()->::phoenix::ad_data_upload::DrivingMapInfo_1_message::MergeFrom(from.driving_map_info_1());
  }
}

void DrivingMap_message::CopyFrom(const DrivingMap_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.DrivingMap_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingMap_message::IsInitialized() const {
  return true;
}

void DrivingMap_message::InternalSwap(DrivingMap_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(driving_map_info_1_, other->driving_map_info_1_);
}

std::string DrivingMap_message::GetTypeName() const {
  return "phoenix.ad_data_upload.DrivingMap_message";
}


// ===================================================================

void PathPln_Display_Data_message::InitAsDefaultInstance() {
  ::phoenix::ad_data_upload::_PathPln_Display_Data_message_default_instance_._instance.get_mutable()->traj_planning_result_ = const_cast< ::phoenix::ad_data_upload::Trajectory_Planning_Result_message*>(
      ::phoenix::ad_data_upload::Trajectory_Planning_Result_message::internal_default_instance());
  ::phoenix::ad_data_upload::_PathPln_Display_Data_message_default_instance_._instance.get_mutable()->driving_map_ = const_cast< ::phoenix::ad_data_upload::DrivingMap_message*>(
      ::phoenix::ad_data_upload::DrivingMap_message::internal_default_instance());
}
class PathPln_Display_Data_message::_Internal {
 public:
  static const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message& traj_planning_result(const PathPln_Display_Data_message* msg);
  static const ::phoenix::ad_data_upload::DrivingMap_message& driving_map(const PathPln_Display_Data_message* msg);
};

const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message&
PathPln_Display_Data_message::_Internal::traj_planning_result(const PathPln_Display_Data_message* msg) {
  return *msg->traj_planning_result_;
}
const ::phoenix::ad_data_upload::DrivingMap_message&
PathPln_Display_Data_message::_Internal::driving_map(const PathPln_Display_Data_message* msg) {
  return *msg->driving_map_;
}
PathPln_Display_Data_message::PathPln_Display_Data_message()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.ad_data_upload.PathPln_Display_Data_message)
}
PathPln_Display_Data_message::PathPln_Display_Data_message(const PathPln_Display_Data_message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_traj_planning_result()) {
    traj_planning_result_ = new ::phoenix::ad_data_upload::Trajectory_Planning_Result_message(*from.traj_planning_result_);
  } else {
    traj_planning_result_ = nullptr;
  }
  if (from.has_driving_map()) {
    driving_map_ = new ::phoenix::ad_data_upload::DrivingMap_message(*from.driving_map_);
  } else {
    driving_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.ad_data_upload.PathPln_Display_Data_message)
}

void PathPln_Display_Data_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  ::memset(&traj_planning_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_map_) -
      reinterpret_cast<char*>(&traj_planning_result_)) + sizeof(driving_map_));
}

PathPln_Display_Data_message::~PathPln_Display_Data_message() {
  // @@protoc_insertion_point(destructor:phoenix.ad_data_upload.PathPln_Display_Data_message)
  SharedDtor();
}

void PathPln_Display_Data_message::SharedDtor() {
  if (this != internal_default_instance()) delete traj_planning_result_;
  if (this != internal_default_instance()) delete driving_map_;
}

void PathPln_Display_Data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPln_Display_Data_message& PathPln_Display_Data_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPln_Display_Data_message_Sys_5fDataUploadProto_5fplanning_2eproto.base);
  return *internal_default_instance();
}


void PathPln_Display_Data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && traj_planning_result_ != nullptr) {
    delete traj_planning_result_;
  }
  traj_planning_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && driving_map_ != nullptr) {
    delete driving_map_;
  }
  driving_map_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PathPln_Display_Data_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_traj_planning_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_driving_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PathPln_Display_Data_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_traj_planning_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driving_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.ad_data_upload.PathPln_Display_Data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.ad_data_upload.PathPln_Display_Data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PathPln_Display_Data_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
  if (this->has_traj_planning_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::traj_planning_result(this), output);
  }

  // .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
  if (this->has_driving_map()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::driving_map(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:phoenix.ad_data_upload.PathPln_Display_Data_message)
}

size_t PathPln_Display_Data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
  if (this->has_traj_planning_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traj_planning_result_);
  }

  // .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
  if (this->has_driving_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driving_map_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPln_Display_Data_message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PathPln_Display_Data_message*>(
      &from));
}

void PathPln_Display_Data_message::MergeFrom(const PathPln_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_traj_planning_result()) {
    mutable_traj_planning_result()->::phoenix::ad_data_upload::Trajectory_Planning_Result_message::MergeFrom(from.traj_planning_result());
  }
  if (from.has_driving_map()) {
    mutable_driving_map()->::phoenix::ad_data_upload::DrivingMap_message::MergeFrom(from.driving_map());
  }
}

void PathPln_Display_Data_message::CopyFrom(const PathPln_Display_Data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.ad_data_upload.PathPln_Display_Data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPln_Display_Data_message::IsInitialized() const {
  return true;
}

void PathPln_Display_Data_message::InternalSwap(PathPln_Display_Data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(traj_planning_result_, other->traj_planning_result_);
  swap(driving_map_, other->driving_map_);
}

std::string PathPln_Display_Data_message::GetTypeName() const {
  return "phoenix.ad_data_upload.PathPln_Display_Data_message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::MsgHead_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::MsgHead_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::MsgHead_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Vec2d_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Vec2d_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Vec2d_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::PathPoint_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::PathPoint_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::PathPoint_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::OBBox2d_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::OBBox2d_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::OBBox2d_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ByPassingReq_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ByPassingReq_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ByPassingReq_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::EventChangingLaneReq_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::EventChangingLaneReq_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::EventChangingLaneReq_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ActionPlanningResult_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ActionPlanningResult_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ActionPlanningResult_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::point_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::point_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::point_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TarTrj_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TarTrj_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TarTrj_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::PlanningResult_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::PlanningResult_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::PlanningResult_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TarPos_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TarPos_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TarPos_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TarObj_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TarObj_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TarObj_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::VelocityPlanningResult_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::VelocityPlanningResult_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::VelocityPlanningResult_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ReferenceLineInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ReferenceLineInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ReferenceLineInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TrajectoryPoint_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TrajectoryPoint_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TrajectoryPoint_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ObjInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ObjInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ObjInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::FollowingTarget_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::FollowingTarget_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::FollowingTarget_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::DrivingMapInfo_2_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::DrivingMapInfo_2_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::DrivingMapInfo_2_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Behavior_Planning_Result_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Behavior_Planning_Result_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Behavior_Planning_Result_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Decision_Planning_Result_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Decision_Planning_Result_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Decision_Planning_Result_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Speed_Planning_Result_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Speed_Planning_Result_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Speed_Planning_Result_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::DrivingMapInfo2_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::DrivingMapInfo2_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::DrivingMapInfo2_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Pos_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Pos_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Pos_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Sample_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Sample_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Sample_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Lat_Err_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Lat_Err_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Lat_Err_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::EventChangingLaneRsp_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::EventChangingLaneRsp_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::EventChangingLaneRsp_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Trj_Change_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Trj_Change_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Trj_Change_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::TrajectoryPlanningResult_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::TrajectoryPlanningResult_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::BoundaryAssociation_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::BoundaryAssociation_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::BoundaryAssociation_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Boundary_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Boundary_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Boundary_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ID_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ID_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ID_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LaneInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LaneInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LaneInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::LineSegment2d_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::LineSegment2d_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::LineSegment2d_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::MapTrafficLight_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::MapTrafficLight_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::MapTrafficLight_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::MapInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::MapInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::MapInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::RoadBoundary_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::RoadBoundary_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::RoadBoundary_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::ObstacleInfo_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::ObstacleInfo_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::ObstacleInfo_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::DrivingMapInfo_1_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::DrivingMapInfo_1_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::DrivingMapInfo_1_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::Trajectory_Planning_Result_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::Trajectory_Planning_Result_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::DrivingMap_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::DrivingMap_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::DrivingMap_message >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::ad_data_upload::PathPln_Display_Data_message* Arena::CreateMaybeMessage< ::phoenix::ad_data_upload::PathPln_Display_Data_message >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::ad_data_upload::PathPln_Display_Data_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
