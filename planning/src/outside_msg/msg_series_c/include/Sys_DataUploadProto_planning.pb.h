// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sys_DataUploadProto_planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fplanning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fplanning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sys_5fDataUploadProto_5fplanning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[42]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace phoenix {
namespace ad_data_upload {
class ActionPlanningResult_message;
class ActionPlanningResult_messageDefaultTypeInternal;
extern ActionPlanningResult_messageDefaultTypeInternal _ActionPlanningResult_message_default_instance_;
class Behavior_Planning_Result_message;
class Behavior_Planning_Result_messageDefaultTypeInternal;
extern Behavior_Planning_Result_messageDefaultTypeInternal _Behavior_Planning_Result_message_default_instance_;
class BoundaryAssociation_message;
class BoundaryAssociation_messageDefaultTypeInternal;
extern BoundaryAssociation_messageDefaultTypeInternal _BoundaryAssociation_message_default_instance_;
class Boundary_message;
class Boundary_messageDefaultTypeInternal;
extern Boundary_messageDefaultTypeInternal _Boundary_message_default_instance_;
class ByPassingReq_message;
class ByPassingReq_messageDefaultTypeInternal;
extern ByPassingReq_messageDefaultTypeInternal _ByPassingReq_message_default_instance_;
class Decision_Planning_Result_message;
class Decision_Planning_Result_messageDefaultTypeInternal;
extern Decision_Planning_Result_messageDefaultTypeInternal _Decision_Planning_Result_message_default_instance_;
class DrivingMapInfo2_message;
class DrivingMapInfo2_messageDefaultTypeInternal;
extern DrivingMapInfo2_messageDefaultTypeInternal _DrivingMapInfo2_message_default_instance_;
class DrivingMapInfo_1_message;
class DrivingMapInfo_1_messageDefaultTypeInternal;
extern DrivingMapInfo_1_messageDefaultTypeInternal _DrivingMapInfo_1_message_default_instance_;
class DrivingMapInfo_2_message;
class DrivingMapInfo_2_messageDefaultTypeInternal;
extern DrivingMapInfo_2_messageDefaultTypeInternal _DrivingMapInfo_2_message_default_instance_;
class DrivingMap_message;
class DrivingMap_messageDefaultTypeInternal;
extern DrivingMap_messageDefaultTypeInternal _DrivingMap_message_default_instance_;
class EventChangingLaneReq_message;
class EventChangingLaneReq_messageDefaultTypeInternal;
extern EventChangingLaneReq_messageDefaultTypeInternal _EventChangingLaneReq_message_default_instance_;
class EventChangingLaneRsp_message;
class EventChangingLaneRsp_messageDefaultTypeInternal;
extern EventChangingLaneRsp_messageDefaultTypeInternal _EventChangingLaneRsp_message_default_instance_;
class FollowingTarget_message;
class FollowingTarget_messageDefaultTypeInternal;
extern FollowingTarget_messageDefaultTypeInternal _FollowingTarget_message_default_instance_;
class ID_message;
class ID_messageDefaultTypeInternal;
extern ID_messageDefaultTypeInternal _ID_message_default_instance_;
class LaneInfo_message;
class LaneInfo_messageDefaultTypeInternal;
extern LaneInfo_messageDefaultTypeInternal _LaneInfo_message_default_instance_;
class Lat_Err_message;
class Lat_Err_messageDefaultTypeInternal;
extern Lat_Err_messageDefaultTypeInternal _Lat_Err_message_default_instance_;
class LineSegment2d_message;
class LineSegment2d_messageDefaultTypeInternal;
extern LineSegment2d_messageDefaultTypeInternal _LineSegment2d_message_default_instance_;
class MapInfo_message;
class MapInfo_messageDefaultTypeInternal;
extern MapInfo_messageDefaultTypeInternal _MapInfo_message_default_instance_;
class MapTrafficLight_message;
class MapTrafficLight_messageDefaultTypeInternal;
extern MapTrafficLight_messageDefaultTypeInternal _MapTrafficLight_message_default_instance_;
class MsgHead_message;
class MsgHead_messageDefaultTypeInternal;
extern MsgHead_messageDefaultTypeInternal _MsgHead_message_default_instance_;
class OBBox2d_message;
class OBBox2d_messageDefaultTypeInternal;
extern OBBox2d_messageDefaultTypeInternal _OBBox2d_message_default_instance_;
class ObjInfo_message;
class ObjInfo_messageDefaultTypeInternal;
extern ObjInfo_messageDefaultTypeInternal _ObjInfo_message_default_instance_;
class ObstacleInfo_message;
class ObstacleInfo_messageDefaultTypeInternal;
extern ObstacleInfo_messageDefaultTypeInternal _ObstacleInfo_message_default_instance_;
class PathPln_Display_Data_message;
class PathPln_Display_Data_messageDefaultTypeInternal;
extern PathPln_Display_Data_messageDefaultTypeInternal _PathPln_Display_Data_message_default_instance_;
class PathPoint_message;
class PathPoint_messageDefaultTypeInternal;
extern PathPoint_messageDefaultTypeInternal _PathPoint_message_default_instance_;
class PlanningResult_message;
class PlanningResult_messageDefaultTypeInternal;
extern PlanningResult_messageDefaultTypeInternal _PlanningResult_message_default_instance_;
class Pos_message;
class Pos_messageDefaultTypeInternal;
extern Pos_messageDefaultTypeInternal _Pos_message_default_instance_;
class ReferenceLineInfo_message;
class ReferenceLineInfo_messageDefaultTypeInternal;
extern ReferenceLineInfo_messageDefaultTypeInternal _ReferenceLineInfo_message_default_instance_;
class RoadBoundary_message;
class RoadBoundary_messageDefaultTypeInternal;
extern RoadBoundary_messageDefaultTypeInternal _RoadBoundary_message_default_instance_;
class Sample_message;
class Sample_messageDefaultTypeInternal;
extern Sample_messageDefaultTypeInternal _Sample_message_default_instance_;
class Spd_Pln_Display_Data_message;
class Spd_Pln_Display_Data_messageDefaultTypeInternal;
extern Spd_Pln_Display_Data_messageDefaultTypeInternal _Spd_Pln_Display_Data_message_default_instance_;
class Speed_Planning_Result_message;
class Speed_Planning_Result_messageDefaultTypeInternal;
extern Speed_Planning_Result_messageDefaultTypeInternal _Speed_Planning_Result_message_default_instance_;
class TarObj_message;
class TarObj_messageDefaultTypeInternal;
extern TarObj_messageDefaultTypeInternal _TarObj_message_default_instance_;
class TarPos_message;
class TarPos_messageDefaultTypeInternal;
extern TarPos_messageDefaultTypeInternal _TarPos_message_default_instance_;
class TarTrj_message;
class TarTrj_messageDefaultTypeInternal;
extern TarTrj_messageDefaultTypeInternal _TarTrj_message_default_instance_;
class TrajectoryPlanningResult_message;
class TrajectoryPlanningResult_messageDefaultTypeInternal;
extern TrajectoryPlanningResult_messageDefaultTypeInternal _TrajectoryPlanningResult_message_default_instance_;
class TrajectoryPoint_message;
class TrajectoryPoint_messageDefaultTypeInternal;
extern TrajectoryPoint_messageDefaultTypeInternal _TrajectoryPoint_message_default_instance_;
class Trajectory_Planning_Result_message;
class Trajectory_Planning_Result_messageDefaultTypeInternal;
extern Trajectory_Planning_Result_messageDefaultTypeInternal _Trajectory_Planning_Result_message_default_instance_;
class Trj_Change_message;
class Trj_Change_messageDefaultTypeInternal;
extern Trj_Change_messageDefaultTypeInternal _Trj_Change_message_default_instance_;
class Vec2d_message;
class Vec2d_messageDefaultTypeInternal;
extern Vec2d_messageDefaultTypeInternal _Vec2d_message_default_instance_;
class VelocityPlanningResult_message;
class VelocityPlanningResult_messageDefaultTypeInternal;
extern VelocityPlanningResult_messageDefaultTypeInternal _VelocityPlanningResult_message_default_instance_;
class point_message;
class point_messageDefaultTypeInternal;
extern point_messageDefaultTypeInternal _point_message_default_instance_;
}  // namespace ad_data_upload
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::ad_data_upload::ActionPlanningResult_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ActionPlanningResult_message>(Arena*);
template<> ::phoenix::ad_data_upload::Behavior_Planning_Result_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Behavior_Planning_Result_message>(Arena*);
template<> ::phoenix::ad_data_upload::BoundaryAssociation_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::BoundaryAssociation_message>(Arena*);
template<> ::phoenix::ad_data_upload::Boundary_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Boundary_message>(Arena*);
template<> ::phoenix::ad_data_upload::ByPassingReq_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ByPassingReq_message>(Arena*);
template<> ::phoenix::ad_data_upload::Decision_Planning_Result_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Decision_Planning_Result_message>(Arena*);
template<> ::phoenix::ad_data_upload::DrivingMapInfo2_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo2_message>(Arena*);
template<> ::phoenix::ad_data_upload::DrivingMapInfo_1_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo_1_message>(Arena*);
template<> ::phoenix::ad_data_upload::DrivingMapInfo_2_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo_2_message>(Arena*);
template<> ::phoenix::ad_data_upload::DrivingMap_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMap_message>(Arena*);
template<> ::phoenix::ad_data_upload::EventChangingLaneReq_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::EventChangingLaneReq_message>(Arena*);
template<> ::phoenix::ad_data_upload::EventChangingLaneRsp_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::EventChangingLaneRsp_message>(Arena*);
template<> ::phoenix::ad_data_upload::FollowingTarget_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::FollowingTarget_message>(Arena*);
template<> ::phoenix::ad_data_upload::ID_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ID_message>(Arena*);
template<> ::phoenix::ad_data_upload::LaneInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LaneInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::Lat_Err_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Lat_Err_message>(Arena*);
template<> ::phoenix::ad_data_upload::LineSegment2d_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::LineSegment2d_message>(Arena*);
template<> ::phoenix::ad_data_upload::MapInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::MapInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::MapTrafficLight_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::MapTrafficLight_message>(Arena*);
template<> ::phoenix::ad_data_upload::MsgHead_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(Arena*);
template<> ::phoenix::ad_data_upload::OBBox2d_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::OBBox2d_message>(Arena*);
template<> ::phoenix::ad_data_upload::ObjInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ObjInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::ObstacleInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ObstacleInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::PathPln_Display_Data_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::PathPln_Display_Data_message>(Arena*);
template<> ::phoenix::ad_data_upload::PathPoint_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(Arena*);
template<> ::phoenix::ad_data_upload::PlanningResult_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::PlanningResult_message>(Arena*);
template<> ::phoenix::ad_data_upload::Pos_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Pos_message>(Arena*);
template<> ::phoenix::ad_data_upload::ReferenceLineInfo_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::ReferenceLineInfo_message>(Arena*);
template<> ::phoenix::ad_data_upload::RoadBoundary_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::RoadBoundary_message>(Arena*);
template<> ::phoenix::ad_data_upload::Sample_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Sample_message>(Arena*);
template<> ::phoenix::ad_data_upload::Spd_Pln_Display_Data_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Spd_Pln_Display_Data_message>(Arena*);
template<> ::phoenix::ad_data_upload::Speed_Planning_Result_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Speed_Planning_Result_message>(Arena*);
template<> ::phoenix::ad_data_upload::TarObj_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TarObj_message>(Arena*);
template<> ::phoenix::ad_data_upload::TarPos_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TarPos_message>(Arena*);
template<> ::phoenix::ad_data_upload::TarTrj_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TarTrj_message>(Arena*);
template<> ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TrajectoryPlanningResult_message>(Arena*);
template<> ::phoenix::ad_data_upload::TrajectoryPoint_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::TrajectoryPoint_message>(Arena*);
template<> ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Trajectory_Planning_Result_message>(Arena*);
template<> ::phoenix::ad_data_upload::Trj_Change_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Trj_Change_message>(Arena*);
template<> ::phoenix::ad_data_upload::Vec2d_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::Vec2d_message>(Arena*);
template<> ::phoenix::ad_data_upload::VelocityPlanningResult_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::VelocityPlanningResult_message>(Arena*);
template<> ::phoenix::ad_data_upload::point_message* Arena::CreateMaybeMessage<::phoenix::ad_data_upload::point_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace ad_data_upload {

// ===================================================================

class MsgHead_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.MsgHead_message) */ {
 public:
  MsgHead_message();
  virtual ~MsgHead_message();

  MsgHead_message(const MsgHead_message& from);
  MsgHead_message(MsgHead_message&& from) noexcept
    : MsgHead_message() {
    *this = ::std::move(from);
  }

  inline MsgHead_message& operator=(const MsgHead_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHead_message& operator=(MsgHead_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MsgHead_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHead_message* internal_default_instance() {
    return reinterpret_cast<const MsgHead_message*>(
               &_MsgHead_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHead_message& a, MsgHead_message& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHead_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHead_message* New() const final {
    return CreateMaybeMessage<MsgHead_message>(nullptr);
  }

  MsgHead_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHead_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MsgHead_message& from);
  void MergeFrom(const MsgHead_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgHead_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.MsgHead_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaildFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTimeOffsetFieldNumber = 4,
    kSrcModuleIdFieldNumber = 5,
    kDstModuleIdFieldNumber = 6,
  };
  // bool vaild = 1;
  void clear_vaild();
  bool vaild() const;
  void set_vaild(bool value);

  // uint32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // sint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint32 time_offset = 4;
  void clear_time_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 time_offset() const;
  void set_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 src_module_id = 5;
  void clear_src_module_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_module_id() const;
  void set_src_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 dst_module_id = 6;
  void clear_dst_module_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_module_id() const;
  void set_dst_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.MsgHead_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool vaild_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_module_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_module_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Vec2d_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Vec2d_message) */ {
 public:
  Vec2d_message();
  virtual ~Vec2d_message();

  Vec2d_message(const Vec2d_message& from);
  Vec2d_message(Vec2d_message&& from) noexcept
    : Vec2d_message() {
    *this = ::std::move(from);
  }

  inline Vec2d_message& operator=(const Vec2d_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2d_message& operator=(Vec2d_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Vec2d_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec2d_message* internal_default_instance() {
    return reinterpret_cast<const Vec2d_message*>(
               &_Vec2d_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vec2d_message& a, Vec2d_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2d_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2d_message* New() const final {
    return CreateMaybeMessage<Vec2d_message>(nullptr);
  }

  Vec2d_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2d_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Vec2d_message& from);
  void MergeFrom(const Vec2d_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vec2d_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Vec2d_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // repeated float vec_ = 1;
  int vec__size() const;
  void clear_vec_();
  float vec_(int index) const;
  void set_vec_(int index, float value);
  void add_vec_(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vec_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vec_();

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Vec2d_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vec__;
  mutable std::atomic<int> _vec__cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class PathPoint_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.PathPoint_message) */ {
 public:
  PathPoint_message();
  virtual ~PathPoint_message();

  PathPoint_message(const PathPoint_message& from);
  PathPoint_message(PathPoint_message&& from) noexcept
    : PathPoint_message() {
    *this = ::std::move(from);
  }

  inline PathPoint_message& operator=(const PathPoint_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPoint_message& operator=(PathPoint_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PathPoint_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint_message* internal_default_instance() {
    return reinterpret_cast<const PathPoint_message*>(
               &_PathPoint_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PathPoint_message& a, PathPoint_message& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPoint_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPoint_message* New() const final {
    return CreateMaybeMessage<PathPoint_message>(nullptr);
  }

  PathPoint_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PathPoint_message& from);
  void MergeFrom(const PathPoint_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathPoint_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.PathPoint_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kHeadingFieldNumber = 2,
    kCurvatureFieldNumber = 3,
    kSFieldNumber = 4,
    kLFieldNumber = 5,
  };
  // .phoenix.ad_data_upload.Vec2d_message point = 1;
  bool has_point() const;
  void clear_point();
  const ::phoenix::ad_data_upload::Vec2d_message& point() const;
  ::phoenix::ad_data_upload::Vec2d_message* release_point();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_point();
  void set_allocated_point(::phoenix::ad_data_upload::Vec2d_message* point);

  // float heading = 2;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float curvature = 3;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);

  // float s = 4;
  void clear_s();
  float s() const;
  void set_s(float value);

  // float l = 5;
  void clear_l();
  float l() const;
  void set_l(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.PathPoint_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::Vec2d_message* point_;
  float heading_;
  float curvature_;
  float s_;
  float l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class OBBox2d_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.OBBox2d_message) */ {
 public:
  OBBox2d_message();
  virtual ~OBBox2d_message();

  OBBox2d_message(const OBBox2d_message& from);
  OBBox2d_message(OBBox2d_message&& from) noexcept
    : OBBox2d_message() {
    *this = ::std::move(from);
  }

  inline OBBox2d_message& operator=(const OBBox2d_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBBox2d_message& operator=(OBBox2d_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OBBox2d_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBBox2d_message* internal_default_instance() {
    return reinterpret_cast<const OBBox2d_message*>(
               &_OBBox2d_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OBBox2d_message& a, OBBox2d_message& b) {
    a.Swap(&b);
  }
  inline void Swap(OBBox2d_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBBox2d_message* New() const final {
    return CreateMaybeMessage<OBBox2d_message>(nullptr);
  }

  OBBox2d_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBBox2d_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBBox2d_message& from);
  void MergeFrom(const OBBox2d_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBBox2d_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.OBBox2d_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitDirectionFieldNumber = 2,
    kCenterFieldNumber = 1,
    kExtentsFieldNumber = 3,
  };
  // repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
  int unit_direction__size() const;
  void clear_unit_direction_();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_unit_direction_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
      mutable_unit_direction_();
  const ::phoenix::ad_data_upload::Vec2d_message& unit_direction_(int index) const;
  ::phoenix::ad_data_upload::Vec2d_message* add_unit_direction_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
      unit_direction_() const;

  // .phoenix.ad_data_upload.Vec2d_message center_ = 1;
  bool has_center_() const;
  void clear_center_();
  const ::phoenix::ad_data_upload::Vec2d_message& center_() const;
  ::phoenix::ad_data_upload::Vec2d_message* release_center_();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_center_();
  void set_allocated_center_(::phoenix::ad_data_upload::Vec2d_message* center_);

  // .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
  bool has_extents_() const;
  void clear_extents_();
  const ::phoenix::ad_data_upload::Vec2d_message& extents_() const;
  ::phoenix::ad_data_upload::Vec2d_message* release_extents_();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_extents_();
  void set_allocated_extents_(::phoenix::ad_data_upload::Vec2d_message* extents_);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.OBBox2d_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message > unit_direction__;
  ::phoenix::ad_data_upload::Vec2d_message* center__;
  ::phoenix::ad_data_upload::Vec2d_message* extents__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ByPassingReq_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ByPassingReq_message) */ {
 public:
  ByPassingReq_message();
  virtual ~ByPassingReq_message();

  ByPassingReq_message(const ByPassingReq_message& from);
  ByPassingReq_message(ByPassingReq_message&& from) noexcept
    : ByPassingReq_message() {
    *this = ::std::move(from);
  }

  inline ByPassingReq_message& operator=(const ByPassingReq_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ByPassingReq_message& operator=(ByPassingReq_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ByPassingReq_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByPassingReq_message* internal_default_instance() {
    return reinterpret_cast<const ByPassingReq_message*>(
               &_ByPassingReq_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ByPassingReq_message& a, ByPassingReq_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ByPassingReq_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ByPassingReq_message* New() const final {
    return CreateMaybeMessage<ByPassingReq_message>(nullptr);
  }

  ByPassingReq_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ByPassingReq_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ByPassingReq_message& from);
  void MergeFrom(const ByPassingReq_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ByPassingReq_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ByPassingReq_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowTurningLeftFieldNumber = 1,
    kAllowTurningRightFieldNumber = 2,
  };
  // bool allow_turning_left = 1;
  void clear_allow_turning_left();
  bool allow_turning_left() const;
  void set_allow_turning_left(bool value);

  // bool allow_turning_right = 2;
  void clear_allow_turning_right();
  bool allow_turning_right() const;
  void set_allow_turning_right(bool value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ByPassingReq_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool allow_turning_left_;
  bool allow_turning_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class EventChangingLaneReq_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.EventChangingLaneReq_message) */ {
 public:
  EventChangingLaneReq_message();
  virtual ~EventChangingLaneReq_message();

  EventChangingLaneReq_message(const EventChangingLaneReq_message& from);
  EventChangingLaneReq_message(EventChangingLaneReq_message&& from) noexcept
    : EventChangingLaneReq_message() {
    *this = ::std::move(from);
  }

  inline EventChangingLaneReq_message& operator=(const EventChangingLaneReq_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventChangingLaneReq_message& operator=(EventChangingLaneReq_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EventChangingLaneReq_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventChangingLaneReq_message* internal_default_instance() {
    return reinterpret_cast<const EventChangingLaneReq_message*>(
               &_EventChangingLaneReq_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventChangingLaneReq_message& a, EventChangingLaneReq_message& b) {
    a.Swap(&b);
  }
  inline void Swap(EventChangingLaneReq_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventChangingLaneReq_message* New() const final {
    return CreateMaybeMessage<EventChangingLaneReq_message>(nullptr);
  }

  EventChangingLaneReq_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventChangingLaneReq_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventChangingLaneReq_message& from);
  void MergeFrom(const EventChangingLaneReq_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventChangingLaneReq_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.EventChangingLaneReq_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRequestFieldNumber = 2,
    kSequenceFieldNumber = 3,
    kAllowAutoChangingToLeftFieldNumber = 4,
    kAllowAutoChangingToRightFieldNumber = 5,
  };
  // sint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 request_ = 2;
  void clear_request_();
  ::PROTOBUF_NAMESPACE_ID::int32 request_() const;
  void set_request_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 sequence_ = 3;
  void clear_sequence_();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_() const;
  void set_sequence_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool allow_auto_changing_to_left_ = 4;
  void clear_allow_auto_changing_to_left_();
  bool allow_auto_changing_to_left_() const;
  void set_allow_auto_changing_to_left_(bool value);

  // bool allow_auto_changing_to_right_ = 5;
  void clear_allow_auto_changing_to_right_();
  bool allow_auto_changing_to_right_() const;
  void set_allow_auto_changing_to_right_(bool value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.EventChangingLaneReq_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request__;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence__;
  bool allow_auto_changing_to_left__;
  bool allow_auto_changing_to_right__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ActionPlanningResult_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ActionPlanningResult_message) */ {
 public:
  ActionPlanningResult_message();
  virtual ~ActionPlanningResult_message();

  ActionPlanningResult_message(const ActionPlanningResult_message& from);
  ActionPlanningResult_message(ActionPlanningResult_message&& from) noexcept
    : ActionPlanningResult_message() {
    *this = ::std::move(from);
  }

  inline ActionPlanningResult_message& operator=(const ActionPlanningResult_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionPlanningResult_message& operator=(ActionPlanningResult_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ActionPlanningResult_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionPlanningResult_message* internal_default_instance() {
    return reinterpret_cast<const ActionPlanningResult_message*>(
               &_ActionPlanningResult_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ActionPlanningResult_message& a, ActionPlanningResult_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionPlanningResult_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionPlanningResult_message* New() const final {
    return CreateMaybeMessage<ActionPlanningResult_message>(nullptr);
  }

  ActionPlanningResult_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionPlanningResult_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActionPlanningResult_message& from);
  void MergeFrom(const ActionPlanningResult_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionPlanningResult_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ActionPlanningResult_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 1,
    kBypassingReqFieldNumber = 15,
    kEventChangingLaneReqFieldNumber = 16,
    kEnableAdasFieldNumber = 2,
    kEnableAebFieldNumber = 3,
    kEnableAccFieldNumber = 4,
    kEnableLkaFieldNumber = 5,
    kEnableAlcFieldNumber = 6,
    kEnableIslFieldNumber = 7,
    kEnableNgpFieldNumber = 8,
    kVSettingFieldNumber = 9,
    kASettingFieldNumber = 10,
    kTimeGapSettingFieldNumber = 11,
    kDrivingModeFieldNumber = 12,
    kGearFieldNumber = 13,
    kTurnLampFieldNumber = 14,
  };
  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
  bool has_bypassing_req() const;
  void clear_bypassing_req();
  const ::phoenix::ad_data_upload::ByPassingReq_message& bypassing_req() const;
  ::phoenix::ad_data_upload::ByPassingReq_message* release_bypassing_req();
  ::phoenix::ad_data_upload::ByPassingReq_message* mutable_bypassing_req();
  void set_allocated_bypassing_req(::phoenix::ad_data_upload::ByPassingReq_message* bypassing_req);

  // .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
  bool has_event_changing_lane_req() const;
  void clear_event_changing_lane_req();
  const ::phoenix::ad_data_upload::EventChangingLaneReq_message& event_changing_lane_req() const;
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* release_event_changing_lane_req();
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* mutable_event_changing_lane_req();
  void set_allocated_event_changing_lane_req(::phoenix::ad_data_upload::EventChangingLaneReq_message* event_changing_lane_req);

  // bool enable_adas = 2;
  void clear_enable_adas();
  bool enable_adas() const;
  void set_enable_adas(bool value);

  // bool enable_aeb = 3;
  void clear_enable_aeb();
  bool enable_aeb() const;
  void set_enable_aeb(bool value);

  // bool enable_acc = 4;
  void clear_enable_acc();
  bool enable_acc() const;
  void set_enable_acc(bool value);

  // bool enable_lka = 5;
  void clear_enable_lka();
  bool enable_lka() const;
  void set_enable_lka(bool value);

  // bool enable_alc = 6;
  void clear_enable_alc();
  bool enable_alc() const;
  void set_enable_alc(bool value);

  // bool enable_isl = 7;
  void clear_enable_isl();
  bool enable_isl() const;
  void set_enable_isl(bool value);

  // bool enable_ngp = 8;
  void clear_enable_ngp();
  bool enable_ngp() const;
  void set_enable_ngp(bool value);

  // float v_setting = 9;
  void clear_v_setting();
  float v_setting() const;
  void set_v_setting(float value);

  // float a_setting = 10;
  void clear_a_setting();
  float a_setting() const;
  void set_a_setting(float value);

  // float time_gap_setting = 11;
  void clear_time_gap_setting();
  float time_gap_setting() const;
  void set_time_gap_setting(float value);

  // sint32 driving_mode = 12;
  void clear_driving_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 driving_mode() const;
  void set_driving_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 gear = 13;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 turn_lamp = 14;
  void clear_turn_lamp();
  ::PROTOBUF_NAMESPACE_ID::int32 turn_lamp() const;
  void set_turn_lamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ActionPlanningResult_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::ByPassingReq_message* bypassing_req_;
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* event_changing_lane_req_;
  bool enable_adas_;
  bool enable_aeb_;
  bool enable_acc_;
  bool enable_lka_;
  bool enable_alc_;
  bool enable_isl_;
  bool enable_ngp_;
  float v_setting_;
  float a_setting_;
  float time_gap_setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 driving_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 turn_lamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class point_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.point_message) */ {
 public:
  point_message();
  virtual ~point_message();

  point_message(const point_message& from);
  point_message(point_message&& from) noexcept
    : point_message() {
    *this = ::std::move(from);
  }

  inline point_message& operator=(const point_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline point_message& operator=(point_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const point_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const point_message* internal_default_instance() {
    return reinterpret_cast<const point_message*>(
               &_point_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(point_message& a, point_message& b) {
    a.Swap(&b);
  }
  inline void Swap(point_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline point_message* New() const final {
    return CreateMaybeMessage<point_message>(nullptr);
  }

  point_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<point_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const point_message& from);
  void MergeFrom(const point_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(point_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.point_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kCurvatureFieldNumber = 4,
    kSFieldNumber = 5,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float curvature = 4;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);

  // float s = 5;
  void clear_s();
  float s() const;
  void set_s(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.point_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  float curvature_;
  float s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class TarTrj_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TarTrj_message) */ {
 public:
  TarTrj_message();
  virtual ~TarTrj_message();

  TarTrj_message(const TarTrj_message& from);
  TarTrj_message(TarTrj_message&& from) noexcept
    : TarTrj_message() {
    *this = ::std::move(from);
  }

  inline TarTrj_message& operator=(const TarTrj_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TarTrj_message& operator=(TarTrj_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TarTrj_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TarTrj_message* internal_default_instance() {
    return reinterpret_cast<const TarTrj_message*>(
               &_TarTrj_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TarTrj_message& a, TarTrj_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TarTrj_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TarTrj_message* New() const final {
    return CreateMaybeMessage<TarTrj_message>(nullptr);
  }

  TarTrj_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TarTrj_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TarTrj_message& from);
  void MergeFrom(const TarTrj_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TarTrj_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TarTrj_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 7,
    kCurrPosFieldNumber = 2,
    kLeadingPosFieldNumber = 3,
    kLatErrFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kTrjDirectionFieldNumber = 5,
    kPointsNumFieldNumber = 6,
  };
  // repeated .phoenix.ad_data_upload.point_message points = 7;
  int points_size() const;
  void clear_points();
  ::phoenix::ad_data_upload::point_message* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::point_message >*
      mutable_points();
  const ::phoenix::ad_data_upload::point_message& points(int index) const;
  ::phoenix::ad_data_upload::point_message* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::point_message >&
      points() const;

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  bool has_curr_pos() const;
  void clear_curr_pos();
  const ::phoenix::ad_data_upload::Pos_message& curr_pos() const;
  ::phoenix::ad_data_upload::Pos_message* release_curr_pos();
  ::phoenix::ad_data_upload::Pos_message* mutable_curr_pos();
  void set_allocated_curr_pos(::phoenix::ad_data_upload::Pos_message* curr_pos);

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  bool has_leading_pos() const;
  void clear_leading_pos();
  const ::phoenix::ad_data_upload::Pos_message& leading_pos() const;
  ::phoenix::ad_data_upload::Pos_message* release_leading_pos();
  ::phoenix::ad_data_upload::Pos_message* mutable_leading_pos();
  void set_allocated_leading_pos(::phoenix::ad_data_upload::Pos_message* leading_pos);

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  bool has_lat_err() const;
  void clear_lat_err();
  const ::phoenix::ad_data_upload::Lat_Err_message& lat_err() const;
  ::phoenix::ad_data_upload::Lat_Err_message* release_lat_err();
  ::phoenix::ad_data_upload::Lat_Err_message* mutable_lat_err();
  void set_allocated_lat_err(::phoenix::ad_data_upload::Lat_Err_message* lat_err);

  // sint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint32 trj_direction = 5;
  void clear_trj_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 trj_direction() const;
  void set_trj_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // sint32 points_num = 6;
  void clear_points_num();
  ::PROTOBUF_NAMESPACE_ID::int32 points_num() const;
  void set_points_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TarTrj_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::point_message > points_;
  ::phoenix::ad_data_upload::Pos_message* curr_pos_;
  ::phoenix::ad_data_upload::Pos_message* leading_pos_;
  ::phoenix::ad_data_upload::Lat_Err_message* lat_err_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trj_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class PlanningResult_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.PlanningResult_message) */ {
 public:
  PlanningResult_message();
  virtual ~PlanningResult_message();

  PlanningResult_message(const PlanningResult_message& from);
  PlanningResult_message(PlanningResult_message&& from) noexcept
    : PlanningResult_message() {
    *this = ::std::move(from);
  }

  inline PlanningResult_message& operator=(const PlanningResult_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningResult_message& operator=(PlanningResult_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PlanningResult_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningResult_message* internal_default_instance() {
    return reinterpret_cast<const PlanningResult_message*>(
               &_PlanningResult_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlanningResult_message& a, PlanningResult_message& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningResult_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningResult_message* New() const final {
    return CreateMaybeMessage<PlanningResult_message>(nullptr);
  }

  PlanningResult_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningResult_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PlanningResult_message& from);
  void MergeFrom(const PlanningResult_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanningResult_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.PlanningResult_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 1,
    kTarTrjFieldNumber = 14,
    kCurStatusFieldNumber = 2,
    kTarDrivingModeFieldNumber = 3,
    kEnableEpsFieldNumber = 4,
    kEnableThrottleSysFieldNumber = 5,
    kEnableEbsFieldNumber = 6,
    kHoldSteeringWheelFieldNumber = 7,
    kReleaseThrottleFieldNumber = 8,
    kTarGearFieldNumber = 9,
    kTarTurnLampFieldNumber = 10,
    kTarBrakeLampFieldNumber = 11,
    kTarVFieldNumber = 12,
    kTarAFieldNumber = 13,
  };
  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
  bool has_tar_trj() const;
  void clear_tar_trj();
  const ::phoenix::ad_data_upload::TarTrj_message& tar_trj() const;
  ::phoenix::ad_data_upload::TarTrj_message* release_tar_trj();
  ::phoenix::ad_data_upload::TarTrj_message* mutable_tar_trj();
  void set_allocated_tar_trj(::phoenix::ad_data_upload::TarTrj_message* tar_trj);

  // sint32 cur_status = 2;
  void clear_cur_status();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_status() const;
  void set_cur_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 tar_driving_mode = 3;
  void clear_tar_driving_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 tar_driving_mode() const;
  void set_tar_driving_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 enable_eps = 4;
  void clear_enable_eps();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_eps() const;
  void set_enable_eps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 enable_throttle_sys = 5;
  void clear_enable_throttle_sys();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_throttle_sys() const;
  void set_enable_throttle_sys(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 enable_ebs = 6;
  void clear_enable_ebs();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_ebs() const;
  void set_enable_ebs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 hold_steering_wheel = 7;
  void clear_hold_steering_wheel();
  ::PROTOBUF_NAMESPACE_ID::int32 hold_steering_wheel() const;
  void set_hold_steering_wheel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 release_throttle = 8;
  void clear_release_throttle();
  ::PROTOBUF_NAMESPACE_ID::int32 release_throttle() const;
  void set_release_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 tar_gear = 9;
  void clear_tar_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 tar_gear() const;
  void set_tar_gear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 tar_turn_lamp = 10;
  void clear_tar_turn_lamp();
  ::PROTOBUF_NAMESPACE_ID::int32 tar_turn_lamp() const;
  void set_tar_turn_lamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 tar_brake_lamp = 11;
  void clear_tar_brake_lamp();
  ::PROTOBUF_NAMESPACE_ID::int32 tar_brake_lamp() const;
  void set_tar_brake_lamp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float tar_v = 12;
  void clear_tar_v();
  float tar_v() const;
  void set_tar_v(float value);

  // float tar_a = 13;
  void clear_tar_a();
  float tar_a() const;
  void set_tar_a(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.PlanningResult_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::TarTrj_message* tar_trj_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_driving_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_eps_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_throttle_sys_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_ebs_;
  ::PROTOBUF_NAMESPACE_ID::int32 hold_steering_wheel_;
  ::PROTOBUF_NAMESPACE_ID::int32 release_throttle_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_turn_lamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_brake_lamp_;
  float tar_v_;
  float tar_a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class TarPos_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TarPos_message) */ {
 public:
  TarPos_message();
  virtual ~TarPos_message();

  TarPos_message(const TarPos_message& from);
  TarPos_message(TarPos_message&& from) noexcept
    : TarPos_message() {
    *this = ::std::move(from);
  }

  inline TarPos_message& operator=(const TarPos_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TarPos_message& operator=(TarPos_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TarPos_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TarPos_message* internal_default_instance() {
    return reinterpret_cast<const TarPos_message*>(
               &_TarPos_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TarPos_message& a, TarPos_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TarPos_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TarPos_message* New() const final {
    return CreateMaybeMessage<TarPos_message>(nullptr);
  }

  TarPos_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TarPos_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TarPos_message& from);
  void MergeFrom(const TarPos_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TarPos_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TarPos_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kSFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float s = 4;
  void clear_s();
  float s() const;
  void set_s(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TarPos_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  float s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class TarObj_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TarObj_message) */ {
 public:
  TarObj_message();
  virtual ~TarObj_message();

  TarObj_message(const TarObj_message& from);
  TarObj_message(TarObj_message&& from) noexcept
    : TarObj_message() {
    *this = ::std::move(from);
  }

  inline TarObj_message& operator=(const TarObj_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TarObj_message& operator=(TarObj_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TarObj_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TarObj_message* internal_default_instance() {
    return reinterpret_cast<const TarObj_message*>(
               &_TarObj_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TarObj_message& a, TarObj_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TarObj_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TarObj_message* New() const final {
    return CreateMaybeMessage<TarObj_message>(nullptr);
  }

  TarObj_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TarObj_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TarObj_message& from);
  void MergeFrom(const TarObj_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TarObj_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TarObj_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kObjDecStatusFieldNumber = 2,
    kDistToObjFieldNumber = 3,
    kTimeGapFieldNumber = 4,
    kRelativeVFieldNumber = 5,
    kTtcFieldNumber = 6,
    kObjVFieldNumber = 7,
    kDistGapLevelFieldNumber = 8,
    kRelSpdLevelFieldNumber = 9,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);

  // sint32 obj_dec_status = 2;
  void clear_obj_dec_status();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_dec_status() const;
  void set_obj_dec_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float dist_to_obj = 3;
  void clear_dist_to_obj();
  float dist_to_obj() const;
  void set_dist_to_obj(float value);

  // float time_gap = 4;
  void clear_time_gap();
  float time_gap() const;
  void set_time_gap(float value);

  // float relative_v = 5;
  void clear_relative_v();
  float relative_v() const;
  void set_relative_v(float value);

  // float ttc = 6;
  void clear_ttc();
  float ttc() const;
  void set_ttc(float value);

  // float obj_v = 7;
  void clear_obj_v();
  float obj_v() const;
  void set_obj_v(float value);

  // sint32 dist_gap_level = 8;
  void clear_dist_gap_level();
  ::PROTOBUF_NAMESPACE_ID::int32 dist_gap_level() const;
  void set_dist_gap_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 rel_spd_level = 9;
  void clear_rel_spd_level();
  ::PROTOBUF_NAMESPACE_ID::int32 rel_spd_level() const;
  void set_rel_spd_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TarObj_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool valid_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_dec_status_;
  float dist_to_obj_;
  float time_gap_;
  float relative_v_;
  float ttc_;
  float obj_v_;
  ::PROTOBUF_NAMESPACE_ID::int32 dist_gap_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 rel_spd_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class VelocityPlanningResult_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.VelocityPlanningResult_message) */ {
 public:
  VelocityPlanningResult_message();
  virtual ~VelocityPlanningResult_message();

  VelocityPlanningResult_message(const VelocityPlanningResult_message& from);
  VelocityPlanningResult_message(VelocityPlanningResult_message&& from) noexcept
    : VelocityPlanningResult_message() {
    *this = ::std::move(from);
  }

  inline VelocityPlanningResult_message& operator=(const VelocityPlanningResult_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityPlanningResult_message& operator=(VelocityPlanningResult_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VelocityPlanningResult_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityPlanningResult_message* internal_default_instance() {
    return reinterpret_cast<const VelocityPlanningResult_message*>(
               &_VelocityPlanningResult_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VelocityPlanningResult_message& a, VelocityPlanningResult_message& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityPlanningResult_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityPlanningResult_message* New() const final {
    return CreateMaybeMessage<VelocityPlanningResult_message>(nullptr);
  }

  VelocityPlanningResult_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityPlanningResult_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VelocityPlanningResult_message& from);
  void MergeFrom(const VelocityPlanningResult_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VelocityPlanningResult_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.VelocityPlanningResult_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeadFieldNumber = 1,
    kTarPosFieldNumber = 5,
    kTarObjFieldNumber = 9,
    kTarTypeFieldNumber = 2,
    kTarVFieldNumber = 3,
    kTarAFieldNumber = 4,
    kReleaseThrottleFieldNumber = 6,
    kAebWarningFieldNumber = 7,
    kAebActionFieldNumber = 8,
  };
  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
  bool has_tar_pos() const;
  void clear_tar_pos();
  const ::phoenix::ad_data_upload::TarPos_message& tar_pos() const;
  ::phoenix::ad_data_upload::TarPos_message* release_tar_pos();
  ::phoenix::ad_data_upload::TarPos_message* mutable_tar_pos();
  void set_allocated_tar_pos(::phoenix::ad_data_upload::TarPos_message* tar_pos);

  // .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
  bool has_tar_obj() const;
  void clear_tar_obj();
  const ::phoenix::ad_data_upload::TarObj_message& tar_obj() const;
  ::phoenix::ad_data_upload::TarObj_message* release_tar_obj();
  ::phoenix::ad_data_upload::TarObj_message* mutable_tar_obj();
  void set_allocated_tar_obj(::phoenix::ad_data_upload::TarObj_message* tar_obj);

  // sint32 tar_type = 2;
  void clear_tar_type();
  ::PROTOBUF_NAMESPACE_ID::int32 tar_type() const;
  void set_tar_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float tar_v = 3;
  void clear_tar_v();
  float tar_v() const;
  void set_tar_v(float value);

  // float tar_a = 4;
  void clear_tar_a();
  float tar_a() const;
  void set_tar_a(float value);

  // bool release_throttle = 6;
  void clear_release_throttle();
  bool release_throttle() const;
  void set_release_throttle(bool value);

  // bool aeb_warning = 7;
  void clear_aeb_warning();
  bool aeb_warning() const;
  void set_aeb_warning(bool value);

  // bool aeb_action = 8;
  void clear_aeb_action();
  bool aeb_action() const;
  void set_aeb_action(bool value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.VelocityPlanningResult_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::TarPos_message* tar_pos_;
  ::phoenix::ad_data_upload::TarObj_message* tar_obj_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_type_;
  float tar_v_;
  float tar_a_;
  bool release_throttle_;
  bool aeb_warning_;
  bool aeb_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ReferenceLineInfo_message) */ {
 public:
  ReferenceLineInfo_message();
  virtual ~ReferenceLineInfo_message();

  ReferenceLineInfo_message(const ReferenceLineInfo_message& from);
  ReferenceLineInfo_message(ReferenceLineInfo_message&& from) noexcept
    : ReferenceLineInfo_message() {
    *this = ::std::move(from);
  }

  inline ReferenceLineInfo_message& operator=(const ReferenceLineInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineInfo_message& operator=(ReferenceLineInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReferenceLineInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceLineInfo_message* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineInfo_message*>(
               &_ReferenceLineInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReferenceLineInfo_message& a, ReferenceLineInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineInfo_message* New() const final {
    return CreateMaybeMessage<ReferenceLineInfo_message>(nullptr);
  }

  ReferenceLineInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReferenceLineInfo_message& from);
  void MergeFrom(const ReferenceLineInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferenceLineInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ReferenceLineInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveFieldNumber = 2,
    kSmoothCurveFieldNumber = 4,
    kCurveCountFieldNumber = 1,
    kSmoothCurveCountFieldNumber = 3,
  };
  // repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
  int curve_size() const;
  void clear_curve();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
      mutable_curve();
  const ::phoenix::ad_data_upload::PathPoint_message& curve(int index) const;
  ::phoenix::ad_data_upload::PathPoint_message* add_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
      curve() const;

  // repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
  int smooth_curve_size() const;
  void clear_smooth_curve();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_smooth_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
      mutable_smooth_curve();
  const ::phoenix::ad_data_upload::PathPoint_message& smooth_curve(int index) const;
  ::phoenix::ad_data_upload::PathPoint_message* add_smooth_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
      smooth_curve() const;

  // uint32 curve_count = 1;
  void clear_curve_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_count() const;
  void set_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 smooth_curve_count = 3;
  void clear_smooth_curve_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 smooth_curve_count() const;
  void set_smooth_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ReferenceLineInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message > curve_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message > smooth_curve_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smooth_curve_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPoint_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TrajectoryPoint_message) */ {
 public:
  TrajectoryPoint_message();
  virtual ~TrajectoryPoint_message();

  TrajectoryPoint_message(const TrajectoryPoint_message& from);
  TrajectoryPoint_message(TrajectoryPoint_message&& from) noexcept
    : TrajectoryPoint_message() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint_message& operator=(const TrajectoryPoint_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint_message& operator=(TrajectoryPoint_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TrajectoryPoint_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint_message* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint_message*>(
               &_TrajectoryPoint_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TrajectoryPoint_message& a, TrajectoryPoint_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint_message* New() const final {
    return CreateMaybeMessage<TrajectoryPoint_message>(nullptr);
  }

  TrajectoryPoint_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrajectoryPoint_message& from);
  void MergeFrom(const TrajectoryPoint_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrajectoryPoint_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TrajectoryPoint_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointInfoFieldNumber = 1,
    kVFieldNumber = 2,
    kAFieldNumber = 3,
    kYawRateFieldNumber = 4,
    kRelativeTimeFieldNumber = 5,
  };
  // .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
  bool has_path_point_info() const;
  void clear_path_point_info();
  const ::phoenix::ad_data_upload::PathPoint_message& path_point_info() const;
  ::phoenix::ad_data_upload::PathPoint_message* release_path_point_info();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_path_point_info();
  void set_allocated_path_point_info(::phoenix::ad_data_upload::PathPoint_message* path_point_info);

  // float v = 2;
  void clear_v();
  float v() const;
  void set_v(float value);

  // float a = 3;
  void clear_a();
  float a() const;
  void set_a(float value);

  // float yaw_rate = 4;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // float relative_time = 5;
  void clear_relative_time();
  float relative_time() const;
  void set_relative_time(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TrajectoryPoint_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::PathPoint_message* path_point_info_;
  float v_;
  float a_;
  float yaw_rate_;
  float relative_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ObjInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ObjInfo_message) */ {
 public:
  ObjInfo_message();
  virtual ~ObjInfo_message();

  ObjInfo_message(const ObjInfo_message& from);
  ObjInfo_message(ObjInfo_message&& from) noexcept
    : ObjInfo_message() {
    *this = ::std::move(from);
  }

  inline ObjInfo_message& operator=(const ObjInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjInfo_message& operator=(ObjInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObjInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjInfo_message* internal_default_instance() {
    return reinterpret_cast<const ObjInfo_message*>(
               &_ObjInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ObjInfo_message& a, ObjInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjInfo_message* New() const final {
    return CreateMaybeMessage<ObjInfo_message>(nullptr);
  }

  ObjInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObjInfo_message& from);
  void MergeFrom(const ObjInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ObjInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjTrajPointFieldNumber = 8,
    kObjListIndexFieldNumber = 1,
    kRiskValueFieldNumber = 2,
    kDynamicDistanceFieldNumber = 3,
    kStaticDistanceFieldNumber = 4,
    kObjSRefFieldNumber = 5,
    kObjLRefFieldNumber = 6,
    kCollisionSFieldNumber = 7,
  };
  // .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
  bool has_obj_traj_point() const;
  void clear_obj_traj_point();
  const ::phoenix::ad_data_upload::TrajectoryPoint_message& obj_traj_point() const;
  ::phoenix::ad_data_upload::TrajectoryPoint_message* release_obj_traj_point();
  ::phoenix::ad_data_upload::TrajectoryPoint_message* mutable_obj_traj_point();
  void set_allocated_obj_traj_point(::phoenix::ad_data_upload::TrajectoryPoint_message* obj_traj_point);

  // sint32 obj_list_index = 1;
  void clear_obj_list_index();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_list_index() const;
  void set_obj_list_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 risk_value = 2;
  void clear_risk_value();
  ::PROTOBUF_NAMESPACE_ID::int32 risk_value() const;
  void set_risk_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float dynamic_distance = 3;
  void clear_dynamic_distance();
  float dynamic_distance() const;
  void set_dynamic_distance(float value);

  // float static_distance = 4;
  void clear_static_distance();
  float static_distance() const;
  void set_static_distance(float value);

  // float obj_s_ref = 5;
  void clear_obj_s_ref();
  float obj_s_ref() const;
  void set_obj_s_ref(float value);

  // float obj_l_ref = 6;
  void clear_obj_l_ref();
  float obj_l_ref() const;
  void set_obj_l_ref(float value);

  // float collision_s = 7;
  void clear_collision_s();
  float collision_s() const;
  void set_collision_s(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ObjInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::TrajectoryPoint_message* obj_traj_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_list_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 risk_value_;
  float dynamic_distance_;
  float static_distance_;
  float obj_s_ref_;
  float obj_l_ref_;
  float collision_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class FollowingTarget_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.FollowingTarget_message) */ {
 public:
  FollowingTarget_message();
  virtual ~FollowingTarget_message();

  FollowingTarget_message(const FollowingTarget_message& from);
  FollowingTarget_message(FollowingTarget_message&& from) noexcept
    : FollowingTarget_message() {
    *this = ::std::move(from);
  }

  inline FollowingTarget_message& operator=(const FollowingTarget_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowingTarget_message& operator=(FollowingTarget_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FollowingTarget_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowingTarget_message* internal_default_instance() {
    return reinterpret_cast<const FollowingTarget_message*>(
               &_FollowingTarget_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FollowingTarget_message& a, FollowingTarget_message& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowingTarget_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowingTarget_message* New() const final {
    return CreateMaybeMessage<FollowingTarget_message>(nullptr);
  }

  FollowingTarget_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowingTarget_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FollowingTarget_message& from);
  void MergeFrom(const FollowingTarget_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FollowingTarget_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.FollowingTarget_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kObjXFieldNumber = 2,
    kObjYFieldNumber = 3,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);

  // float obj_x = 2;
  void clear_obj_x();
  float obj_x() const;
  void set_obj_x(float value);

  // float obj_y = 3;
  void clear_obj_y();
  float obj_y() const;
  void set_obj_y(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.FollowingTarget_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool valid_;
  float obj_x_;
  float obj_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class DrivingMapInfo_2_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.DrivingMapInfo_2_message) */ {
 public:
  DrivingMapInfo_2_message();
  virtual ~DrivingMapInfo_2_message();

  DrivingMapInfo_2_message(const DrivingMapInfo_2_message& from);
  DrivingMapInfo_2_message(DrivingMapInfo_2_message&& from) noexcept
    : DrivingMapInfo_2_message() {
    *this = ::std::move(from);
  }

  inline DrivingMapInfo_2_message& operator=(const DrivingMapInfo_2_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingMapInfo_2_message& operator=(DrivingMapInfo_2_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DrivingMapInfo_2_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingMapInfo_2_message* internal_default_instance() {
    return reinterpret_cast<const DrivingMapInfo_2_message*>(
               &_DrivingMapInfo_2_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DrivingMapInfo_2_message& a, DrivingMapInfo_2_message& b) {
    a.Swap(&b);
  }
  inline void Swap(DrivingMapInfo_2_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrivingMapInfo_2_message* New() const final {
    return CreateMaybeMessage<DrivingMapInfo_2_message>(nullptr);
  }

  DrivingMapInfo_2_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivingMapInfo_2_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrivingMapInfo_2_message& from);
  void MergeFrom(const DrivingMapInfo_2_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrivingMapInfo_2_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.DrivingMapInfo_2_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLinesFieldNumber = 5,
    kRiskyObjListFieldNumber = 7,
    kUncertainListFieldNumber = 9,
    kMsgHeadFieldNumber = 1,
    kNearestPointToVehOnLaneFieldNumber = 2,
    kFollowingTargetFieldNumber = 10,
    kCurrentReferenceLineIndexFieldNumber = 3,
    kReferenceLinesCountFieldNumber = 4,
    kRiskyObjListCountFieldNumber = 6,
    kUncertainListCountFieldNumber = 8,
  };
  // repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
  int reference_lines_size() const;
  void clear_reference_lines();
  ::phoenix::ad_data_upload::ReferenceLineInfo_message* mutable_reference_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ReferenceLineInfo_message >*
      mutable_reference_lines();
  const ::phoenix::ad_data_upload::ReferenceLineInfo_message& reference_lines(int index) const;
  ::phoenix::ad_data_upload::ReferenceLineInfo_message* add_reference_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ReferenceLineInfo_message >&
      reference_lines() const;

  // repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
  int risky_obj_list_size() const;
  void clear_risky_obj_list();
  ::phoenix::ad_data_upload::ObjInfo_message* mutable_risky_obj_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >*
      mutable_risky_obj_list();
  const ::phoenix::ad_data_upload::ObjInfo_message& risky_obj_list(int index) const;
  ::phoenix::ad_data_upload::ObjInfo_message* add_risky_obj_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >&
      risky_obj_list() const;

  // repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
  int uncertain_list_size() const;
  void clear_uncertain_list();
  ::phoenix::ad_data_upload::ObjInfo_message* mutable_uncertain_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >*
      mutable_uncertain_list();
  const ::phoenix::ad_data_upload::ObjInfo_message& uncertain_list(int index) const;
  ::phoenix::ad_data_upload::ObjInfo_message* add_uncertain_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >&
      uncertain_list() const;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
  bool has_nearest_point_to_veh_on_lane() const;
  void clear_nearest_point_to_veh_on_lane();
  const ::phoenix::ad_data_upload::PathPoint_message& nearest_point_to_veh_on_lane() const;
  ::phoenix::ad_data_upload::PathPoint_message* release_nearest_point_to_veh_on_lane();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_nearest_point_to_veh_on_lane();
  void set_allocated_nearest_point_to_veh_on_lane(::phoenix::ad_data_upload::PathPoint_message* nearest_point_to_veh_on_lane);

  // .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
  bool has_following_target() const;
  void clear_following_target();
  const ::phoenix::ad_data_upload::FollowingTarget_message& following_target() const;
  ::phoenix::ad_data_upload::FollowingTarget_message* release_following_target();
  ::phoenix::ad_data_upload::FollowingTarget_message* mutable_following_target();
  void set_allocated_following_target(::phoenix::ad_data_upload::FollowingTarget_message* following_target);

  // sint32 current_reference_line_index = 3;
  void clear_current_reference_line_index();
  ::PROTOBUF_NAMESPACE_ID::int32 current_reference_line_index() const;
  void set_current_reference_line_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 reference_lines_count = 4;
  void clear_reference_lines_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_lines_count() const;
  void set_reference_lines_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 risky_obj_list_count = 6;
  void clear_risky_obj_list_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 risky_obj_list_count() const;
  void set_risky_obj_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 uncertain_list_count = 8;
  void clear_uncertain_list_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 uncertain_list_count() const;
  void set_uncertain_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.DrivingMapInfo_2_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ReferenceLineInfo_message > reference_lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message > risky_obj_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message > uncertain_list_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::PathPoint_message* nearest_point_to_veh_on_lane_;
  ::phoenix::ad_data_upload::FollowingTarget_message* following_target_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_reference_line_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_lines_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 risky_obj_list_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uncertain_list_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Behavior_Planning_Result_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Behavior_Planning_Result_message) */ {
 public:
  Behavior_Planning_Result_message();
  virtual ~Behavior_Planning_Result_message();

  Behavior_Planning_Result_message(const Behavior_Planning_Result_message& from);
  Behavior_Planning_Result_message(Behavior_Planning_Result_message&& from) noexcept
    : Behavior_Planning_Result_message() {
    *this = ::std::move(from);
  }

  inline Behavior_Planning_Result_message& operator=(const Behavior_Planning_Result_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Behavior_Planning_Result_message& operator=(Behavior_Planning_Result_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Behavior_Planning_Result_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Behavior_Planning_Result_message* internal_default_instance() {
    return reinterpret_cast<const Behavior_Planning_Result_message*>(
               &_Behavior_Planning_Result_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Behavior_Planning_Result_message& a, Behavior_Planning_Result_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Behavior_Planning_Result_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Behavior_Planning_Result_message* New() const final {
    return CreateMaybeMessage<Behavior_Planning_Result_message>(nullptr);
  }

  Behavior_Planning_Result_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Behavior_Planning_Result_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Behavior_Planning_Result_message& from);
  void MergeFrom(const Behavior_Planning_Result_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Behavior_Planning_Result_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Behavior_Planning_Result_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionPlanningResultFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
  bool has_action_planning_result() const;
  void clear_action_planning_result();
  const ::phoenix::ad_data_upload::ActionPlanningResult_message& action_planning_result() const;
  ::phoenix::ad_data_upload::ActionPlanningResult_message* release_action_planning_result();
  ::phoenix::ad_data_upload::ActionPlanningResult_message* mutable_action_planning_result();
  void set_allocated_action_planning_result(::phoenix::ad_data_upload::ActionPlanningResult_message* action_planning_result);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Behavior_Planning_Result_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::ActionPlanningResult_message* action_planning_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Decision_Planning_Result_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Decision_Planning_Result_message) */ {
 public:
  Decision_Planning_Result_message();
  virtual ~Decision_Planning_Result_message();

  Decision_Planning_Result_message(const Decision_Planning_Result_message& from);
  Decision_Planning_Result_message(Decision_Planning_Result_message&& from) noexcept
    : Decision_Planning_Result_message() {
    *this = ::std::move(from);
  }

  inline Decision_Planning_Result_message& operator=(const Decision_Planning_Result_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decision_Planning_Result_message& operator=(Decision_Planning_Result_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Decision_Planning_Result_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decision_Planning_Result_message* internal_default_instance() {
    return reinterpret_cast<const Decision_Planning_Result_message*>(
               &_Decision_Planning_Result_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Decision_Planning_Result_message& a, Decision_Planning_Result_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Decision_Planning_Result_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decision_Planning_Result_message* New() const final {
    return CreateMaybeMessage<Decision_Planning_Result_message>(nullptr);
  }

  Decision_Planning_Result_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decision_Planning_Result_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Decision_Planning_Result_message& from);
  void MergeFrom(const Decision_Planning_Result_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Decision_Planning_Result_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Decision_Planning_Result_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanningResultFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
  bool has_planning_result() const;
  void clear_planning_result();
  const ::phoenix::ad_data_upload::PlanningResult_message& planning_result() const;
  ::phoenix::ad_data_upload::PlanningResult_message* release_planning_result();
  ::phoenix::ad_data_upload::PlanningResult_message* mutable_planning_result();
  void set_allocated_planning_result(::phoenix::ad_data_upload::PlanningResult_message* planning_result);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Decision_Planning_Result_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::PlanningResult_message* planning_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Speed_Planning_Result_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Speed_Planning_Result_message) */ {
 public:
  Speed_Planning_Result_message();
  virtual ~Speed_Planning_Result_message();

  Speed_Planning_Result_message(const Speed_Planning_Result_message& from);
  Speed_Planning_Result_message(Speed_Planning_Result_message&& from) noexcept
    : Speed_Planning_Result_message() {
    *this = ::std::move(from);
  }

  inline Speed_Planning_Result_message& operator=(const Speed_Planning_Result_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Speed_Planning_Result_message& operator=(Speed_Planning_Result_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Speed_Planning_Result_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Speed_Planning_Result_message* internal_default_instance() {
    return reinterpret_cast<const Speed_Planning_Result_message*>(
               &_Speed_Planning_Result_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Speed_Planning_Result_message& a, Speed_Planning_Result_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Speed_Planning_Result_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Speed_Planning_Result_message* New() const final {
    return CreateMaybeMessage<Speed_Planning_Result_message>(nullptr);
  }

  Speed_Planning_Result_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Speed_Planning_Result_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Speed_Planning_Result_message& from);
  void MergeFrom(const Speed_Planning_Result_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Speed_Planning_Result_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Speed_Planning_Result_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityPlanningResultFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
  bool has_velocity_planning_result() const;
  void clear_velocity_planning_result();
  const ::phoenix::ad_data_upload::VelocityPlanningResult_message& velocity_planning_result() const;
  ::phoenix::ad_data_upload::VelocityPlanningResult_message* release_velocity_planning_result();
  ::phoenix::ad_data_upload::VelocityPlanningResult_message* mutable_velocity_planning_result();
  void set_allocated_velocity_planning_result(::phoenix::ad_data_upload::VelocityPlanningResult_message* velocity_planning_result);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Speed_Planning_Result_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::VelocityPlanningResult_message* velocity_planning_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class DrivingMapInfo2_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.DrivingMapInfo2_message) */ {
 public:
  DrivingMapInfo2_message();
  virtual ~DrivingMapInfo2_message();

  DrivingMapInfo2_message(const DrivingMapInfo2_message& from);
  DrivingMapInfo2_message(DrivingMapInfo2_message&& from) noexcept
    : DrivingMapInfo2_message() {
    *this = ::std::move(from);
  }

  inline DrivingMapInfo2_message& operator=(const DrivingMapInfo2_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingMapInfo2_message& operator=(DrivingMapInfo2_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DrivingMapInfo2_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingMapInfo2_message* internal_default_instance() {
    return reinterpret_cast<const DrivingMapInfo2_message*>(
               &_DrivingMapInfo2_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DrivingMapInfo2_message& a, DrivingMapInfo2_message& b) {
    a.Swap(&b);
  }
  inline void Swap(DrivingMapInfo2_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrivingMapInfo2_message* New() const final {
    return CreateMaybeMessage<DrivingMapInfo2_message>(nullptr);
  }

  DrivingMapInfo2_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivingMapInfo2_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrivingMapInfo2_message& from);
  void MergeFrom(const DrivingMapInfo2_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrivingMapInfo2_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.DrivingMapInfo2_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivingMapInfo2FieldNumber = 1,
  };
  // .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
  bool has_driving_map_info_2() const;
  void clear_driving_map_info_2();
  const ::phoenix::ad_data_upload::DrivingMapInfo_2_message& driving_map_info_2() const;
  ::phoenix::ad_data_upload::DrivingMapInfo_2_message* release_driving_map_info_2();
  ::phoenix::ad_data_upload::DrivingMapInfo_2_message* mutable_driving_map_info_2();
  void set_allocated_driving_map_info_2(::phoenix::ad_data_upload::DrivingMapInfo_2_message* driving_map_info_2);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.DrivingMapInfo2_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::DrivingMapInfo_2_message* driving_map_info_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Spd_Pln_Display_Data_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Spd_Pln_Display_Data_message) */ {
 public:
  Spd_Pln_Display_Data_message();
  virtual ~Spd_Pln_Display_Data_message();

  Spd_Pln_Display_Data_message(const Spd_Pln_Display_Data_message& from);
  Spd_Pln_Display_Data_message(Spd_Pln_Display_Data_message&& from) noexcept
    : Spd_Pln_Display_Data_message() {
    *this = ::std::move(from);
  }

  inline Spd_Pln_Display_Data_message& operator=(const Spd_Pln_Display_Data_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spd_Pln_Display_Data_message& operator=(Spd_Pln_Display_Data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Spd_Pln_Display_Data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Spd_Pln_Display_Data_message* internal_default_instance() {
    return reinterpret_cast<const Spd_Pln_Display_Data_message*>(
               &_Spd_Pln_Display_Data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Spd_Pln_Display_Data_message& a, Spd_Pln_Display_Data_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Spd_Pln_Display_Data_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Spd_Pln_Display_Data_message* New() const final {
    return CreateMaybeMessage<Spd_Pln_Display_Data_message>(nullptr);
  }

  Spd_Pln_Display_Data_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Spd_Pln_Display_Data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Spd_Pln_Display_Data_message& from);
  void MergeFrom(const Spd_Pln_Display_Data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Spd_Pln_Display_Data_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Spd_Pln_Display_Data_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorPlanningResultInfoFieldNumber = 1,
    kDecisionPlanningResultInfoFieldNumber = 2,
    kSpeedPlanningResultInfoFieldNumber = 3,
    kDrivingMapInfo2FieldNumber = 4,
  };
  // .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
  bool has_behavior_planning_result_info() const;
  void clear_behavior_planning_result_info();
  const ::phoenix::ad_data_upload::Behavior_Planning_Result_message& behavior_planning_result_info() const;
  ::phoenix::ad_data_upload::Behavior_Planning_Result_message* release_behavior_planning_result_info();
  ::phoenix::ad_data_upload::Behavior_Planning_Result_message* mutable_behavior_planning_result_info();
  void set_allocated_behavior_planning_result_info(::phoenix::ad_data_upload::Behavior_Planning_Result_message* behavior_planning_result_info);

  // .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
  bool has_decision_planning_result_info() const;
  void clear_decision_planning_result_info();
  const ::phoenix::ad_data_upload::Decision_Planning_Result_message& decision_planning_result_info() const;
  ::phoenix::ad_data_upload::Decision_Planning_Result_message* release_decision_planning_result_info();
  ::phoenix::ad_data_upload::Decision_Planning_Result_message* mutable_decision_planning_result_info();
  void set_allocated_decision_planning_result_info(::phoenix::ad_data_upload::Decision_Planning_Result_message* decision_planning_result_info);

  // .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
  bool has_speed_planning_result_info() const;
  void clear_speed_planning_result_info();
  const ::phoenix::ad_data_upload::Speed_Planning_Result_message& speed_planning_result_info() const;
  ::phoenix::ad_data_upload::Speed_Planning_Result_message* release_speed_planning_result_info();
  ::phoenix::ad_data_upload::Speed_Planning_Result_message* mutable_speed_planning_result_info();
  void set_allocated_speed_planning_result_info(::phoenix::ad_data_upload::Speed_Planning_Result_message* speed_planning_result_info);

  // .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
  bool has_driving_map_info_2() const;
  void clear_driving_map_info_2();
  const ::phoenix::ad_data_upload::DrivingMapInfo2_message& driving_map_info_2() const;
  ::phoenix::ad_data_upload::DrivingMapInfo2_message* release_driving_map_info_2();
  ::phoenix::ad_data_upload::DrivingMapInfo2_message* mutable_driving_map_info_2();
  void set_allocated_driving_map_info_2(::phoenix::ad_data_upload::DrivingMapInfo2_message* driving_map_info_2);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Spd_Pln_Display_Data_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::Behavior_Planning_Result_message* behavior_planning_result_info_;
  ::phoenix::ad_data_upload::Decision_Planning_Result_message* decision_planning_result_info_;
  ::phoenix::ad_data_upload::Speed_Planning_Result_message* speed_planning_result_info_;
  ::phoenix::ad_data_upload::DrivingMapInfo2_message* driving_map_info_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Pos_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Pos_message) */ {
 public:
  Pos_message();
  virtual ~Pos_message();

  Pos_message(const Pos_message& from);
  Pos_message(Pos_message&& from) noexcept
    : Pos_message() {
    *this = ::std::move(from);
  }

  inline Pos_message& operator=(const Pos_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pos_message& operator=(Pos_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Pos_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pos_message* internal_default_instance() {
    return reinterpret_cast<const Pos_message*>(
               &_Pos_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Pos_message& a, Pos_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Pos_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pos_message* New() const final {
    return CreateMaybeMessage<Pos_message>(nullptr);
  }

  Pos_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pos_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Pos_message& from);
  void MergeFrom(const Pos_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pos_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Pos_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kCurvatureFieldNumber = 4,
    kSFieldNumber = 5,
    kLFieldNumber = 6,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // float curvature = 4;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);

  // float s = 5;
  void clear_s();
  float s() const;
  void set_s(float value);

  // float l = 6;
  void clear_l();
  float l() const;
  void set_l(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Pos_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  float curvature_;
  float s_;
  float l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Sample_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Sample_message) */ {
 public:
  Sample_message();
  virtual ~Sample_message();

  Sample_message(const Sample_message& from);
  Sample_message(Sample_message&& from) noexcept
    : Sample_message() {
    *this = ::std::move(from);
  }

  inline Sample_message& operator=(const Sample_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample_message& operator=(Sample_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Sample_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample_message* internal_default_instance() {
    return reinterpret_cast<const Sample_message*>(
               &_Sample_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Sample_message& a, Sample_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample_message* New() const final {
    return CreateMaybeMessage<Sample_message>(nullptr);
  }

  Sample_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Sample_message& from);
  void MergeFrom(const Sample_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sample_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Sample_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatErrFieldNumber = 1,
    kLatErrChgRateFieldNumber = 2,
    kYawErrFieldNumber = 3,
    kYawErrChgRateFieldNumber = 4,
  };
  // float lat_err = 1;
  void clear_lat_err();
  float lat_err() const;
  void set_lat_err(float value);

  // float lat_err_chg_rate = 2;
  void clear_lat_err_chg_rate();
  float lat_err_chg_rate() const;
  void set_lat_err_chg_rate(float value);

  // float yaw_err = 3;
  void clear_yaw_err();
  float yaw_err() const;
  void set_yaw_err(float value);

  // float yaw_err_chg_rate = 4;
  void clear_yaw_err_chg_rate();
  float yaw_err_chg_rate() const;
  void set_yaw_err_chg_rate(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Sample_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float lat_err_;
  float lat_err_chg_rate_;
  float yaw_err_;
  float yaw_err_chg_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Lat_Err_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Lat_Err_message) */ {
 public:
  Lat_Err_message();
  virtual ~Lat_Err_message();

  Lat_Err_message(const Lat_Err_message& from);
  Lat_Err_message(Lat_Err_message&& from) noexcept
    : Lat_Err_message() {
    *this = ::std::move(from);
  }

  inline Lat_Err_message& operator=(const Lat_Err_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lat_Err_message& operator=(Lat_Err_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Lat_Err_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lat_Err_message* internal_default_instance() {
    return reinterpret_cast<const Lat_Err_message*>(
               &_Lat_Err_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Lat_Err_message& a, Lat_Err_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Lat_Err_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lat_Err_message* New() const final {
    return CreateMaybeMessage<Lat_Err_message>(nullptr);
  }

  Lat_Err_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lat_Err_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Lat_Err_message& from);
  void MergeFrom(const Lat_Err_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lat_Err_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Lat_Err_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 2,
    kMovingFlagFieldNumber = 1,
  };
  // repeated .phoenix.ad_data_upload.Sample_message samples = 2;
  int samples_size() const;
  void clear_samples();
  ::phoenix::ad_data_upload::Sample_message* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Sample_message >*
      mutable_samples();
  const ::phoenix::ad_data_upload::Sample_message& samples(int index) const;
  ::phoenix::ad_data_upload::Sample_message* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Sample_message >&
      samples() const;

  // sint32 moving_flag = 1;
  void clear_moving_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 moving_flag() const;
  void set_moving_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Lat_Err_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Sample_message > samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 moving_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class EventChangingLaneRsp_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.EventChangingLaneRsp_message) */ {
 public:
  EventChangingLaneRsp_message();
  virtual ~EventChangingLaneRsp_message();

  EventChangingLaneRsp_message(const EventChangingLaneRsp_message& from);
  EventChangingLaneRsp_message(EventChangingLaneRsp_message&& from) noexcept
    : EventChangingLaneRsp_message() {
    *this = ::std::move(from);
  }

  inline EventChangingLaneRsp_message& operator=(const EventChangingLaneRsp_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventChangingLaneRsp_message& operator=(EventChangingLaneRsp_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EventChangingLaneRsp_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventChangingLaneRsp_message* internal_default_instance() {
    return reinterpret_cast<const EventChangingLaneRsp_message*>(
               &_EventChangingLaneRsp_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(EventChangingLaneRsp_message& a, EventChangingLaneRsp_message& b) {
    a.Swap(&b);
  }
  inline void Swap(EventChangingLaneRsp_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventChangingLaneRsp_message* New() const final {
    return CreateMaybeMessage<EventChangingLaneRsp_message>(nullptr);
  }

  EventChangingLaneRsp_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventChangingLaneRsp_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventChangingLaneRsp_message& from);
  void MergeFrom(const EventChangingLaneRsp_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventChangingLaneRsp_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.EventChangingLaneRsp_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResponseFieldNumber = 2,
    kRequsetSequenceFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // sint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 response_ = 2;
  void clear_response_();
  ::PROTOBUF_NAMESPACE_ID::int32 response_() const;
  void set_response_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 requset_sequence_ = 3;
  void clear_requset_sequence_();
  ::PROTOBUF_NAMESPACE_ID::int32 requset_sequence_() const;
  void set_requset_sequence_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 status_ = 4;
  void clear_status_();
  ::PROTOBUF_NAMESPACE_ID::int32 status_() const;
  void set_status_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.EventChangingLaneRsp_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 response__;
  ::PROTOBUF_NAMESPACE_ID::int32 requset_sequence__;
  ::PROTOBUF_NAMESPACE_ID::int32 status__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Trj_Change_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Trj_Change_message) */ {
 public:
  Trj_Change_message();
  virtual ~Trj_Change_message();

  Trj_Change_message(const Trj_Change_message& from);
  Trj_Change_message(Trj_Change_message&& from) noexcept
    : Trj_Change_message() {
    *this = ::std::move(from);
  }

  inline Trj_Change_message& operator=(const Trj_Change_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trj_Change_message& operator=(Trj_Change_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Trj_Change_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trj_Change_message* internal_default_instance() {
    return reinterpret_cast<const Trj_Change_message*>(
               &_Trj_Change_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Trj_Change_message& a, Trj_Change_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Trj_Change_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trj_Change_message* New() const final {
    return CreateMaybeMessage<Trj_Change_message>(nullptr);
  }

  Trj_Change_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trj_Change_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Trj_Change_message& from);
  void MergeFrom(const Trj_Change_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trj_Change_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Trj_Change_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangedTrajectoryFieldNumber = 4,
    kIsChangingFieldNumber = 1,
    kLatOffsetFieldNumber = 2,
    kChangedTrajectoryCountFieldNumber = 3,
  };
  // repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
  int changed_trajectory_size() const;
  void clear_changed_trajectory();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_changed_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
      mutable_changed_trajectory();
  const ::phoenix::ad_data_upload::PathPoint_message& changed_trajectory(int index) const;
  ::phoenix::ad_data_upload::PathPoint_message* add_changed_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
      changed_trajectory() const;

  // bool is_changing = 1;
  void clear_is_changing();
  bool is_changing() const;
  void set_is_changing(bool value);

  // float lat_offset = 2;
  void clear_lat_offset();
  float lat_offset() const;
  void set_lat_offset(float value);

  // uint32 changed_trajectory_count = 3;
  void clear_changed_trajectory_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 changed_trajectory_count() const;
  void set_changed_trajectory_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Trj_Change_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message > changed_trajectory_;
  bool is_changing_;
  float lat_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 changed_trajectory_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPlanningResult_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.TrajectoryPlanningResult_message) */ {
 public:
  TrajectoryPlanningResult_message();
  virtual ~TrajectoryPlanningResult_message();

  TrajectoryPlanningResult_message(const TrajectoryPlanningResult_message& from);
  TrajectoryPlanningResult_message(TrajectoryPlanningResult_message&& from) noexcept
    : TrajectoryPlanningResult_message() {
    *this = ::std::move(from);
  }

  inline TrajectoryPlanningResult_message& operator=(const TrajectoryPlanningResult_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPlanningResult_message& operator=(TrajectoryPlanningResult_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TrajectoryPlanningResult_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPlanningResult_message* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPlanningResult_message*>(
               &_TrajectoryPlanningResult_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TrajectoryPlanningResult_message& a, TrajectoryPlanningResult_message& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPlanningResult_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPlanningResult_message* New() const final {
    return CreateMaybeMessage<TrajectoryPlanningResult_message>(nullptr);
  }

  TrajectoryPlanningResult_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPlanningResult_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrajectoryPlanningResult_message& from);
  void MergeFrom(const TrajectoryPlanningResult_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrajectoryPlanningResult_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.TrajectoryPlanningResult_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetTrajectorySamplePointsFieldNumber = 7,
    kMsgHeadFieldNumber = 1,
    kCurrPosFieldNumber = 2,
    kLeadingPosFieldNumber = 3,
    kLatErrFieldNumber = 4,
    kTrjChangingFieldNumber = 8,
    kChangingLaneReqFieldNumber = 10,
    kChangingLaneRspFieldNumber = 11,
    kTrjDirectionFieldNumber = 5,
    kTargetTrajectorySamplePointsCountFieldNumber = 6,
    kHoldSteeringWheelFieldNumber = 9,
  };
  // repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
  int target_trajectory_sample_points_size() const;
  void clear_target_trajectory_sample_points();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_target_trajectory_sample_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
      mutable_target_trajectory_sample_points();
  const ::phoenix::ad_data_upload::PathPoint_message& target_trajectory_sample_points(int index) const;
  ::phoenix::ad_data_upload::PathPoint_message* add_target_trajectory_sample_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
      target_trajectory_sample_points() const;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.Pos_message curr_pos = 2;
  bool has_curr_pos() const;
  void clear_curr_pos();
  const ::phoenix::ad_data_upload::Pos_message& curr_pos() const;
  ::phoenix::ad_data_upload::Pos_message* release_curr_pos();
  ::phoenix::ad_data_upload::Pos_message* mutable_curr_pos();
  void set_allocated_curr_pos(::phoenix::ad_data_upload::Pos_message* curr_pos);

  // .phoenix.ad_data_upload.Pos_message leading_pos = 3;
  bool has_leading_pos() const;
  void clear_leading_pos();
  const ::phoenix::ad_data_upload::Pos_message& leading_pos() const;
  ::phoenix::ad_data_upload::Pos_message* release_leading_pos();
  ::phoenix::ad_data_upload::Pos_message* mutable_leading_pos();
  void set_allocated_leading_pos(::phoenix::ad_data_upload::Pos_message* leading_pos);

  // .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
  bool has_lat_err() const;
  void clear_lat_err();
  const ::phoenix::ad_data_upload::Lat_Err_message& lat_err() const;
  ::phoenix::ad_data_upload::Lat_Err_message* release_lat_err();
  ::phoenix::ad_data_upload::Lat_Err_message* mutable_lat_err();
  void set_allocated_lat_err(::phoenix::ad_data_upload::Lat_Err_message* lat_err);

  // .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
  bool has_trj_changing() const;
  void clear_trj_changing();
  const ::phoenix::ad_data_upload::Trj_Change_message& trj_changing() const;
  ::phoenix::ad_data_upload::Trj_Change_message* release_trj_changing();
  ::phoenix::ad_data_upload::Trj_Change_message* mutable_trj_changing();
  void set_allocated_trj_changing(::phoenix::ad_data_upload::Trj_Change_message* trj_changing);

  // .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
  bool has_changing_lane_req() const;
  void clear_changing_lane_req();
  const ::phoenix::ad_data_upload::EventChangingLaneReq_message& changing_lane_req() const;
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* release_changing_lane_req();
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* mutable_changing_lane_req();
  void set_allocated_changing_lane_req(::phoenix::ad_data_upload::EventChangingLaneReq_message* changing_lane_req);

  // .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
  bool has_changing_lane_rsp() const;
  void clear_changing_lane_rsp();
  const ::phoenix::ad_data_upload::EventChangingLaneRsp_message& changing_lane_rsp() const;
  ::phoenix::ad_data_upload::EventChangingLaneRsp_message* release_changing_lane_rsp();
  ::phoenix::ad_data_upload::EventChangingLaneRsp_message* mutable_changing_lane_rsp();
  void set_allocated_changing_lane_rsp(::phoenix::ad_data_upload::EventChangingLaneRsp_message* changing_lane_rsp);

  // sint32 trj_direction = 5;
  void clear_trj_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 trj_direction() const;
  void set_trj_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 target_trajectory_sample_points_count = 6;
  void clear_target_trajectory_sample_points_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_trajectory_sample_points_count() const;
  void set_target_trajectory_sample_points_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool hold_steering_wheel = 9;
  void clear_hold_steering_wheel();
  bool hold_steering_wheel() const;
  void set_hold_steering_wheel(bool value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.TrajectoryPlanningResult_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message > target_trajectory_sample_points_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::Pos_message* curr_pos_;
  ::phoenix::ad_data_upload::Pos_message* leading_pos_;
  ::phoenix::ad_data_upload::Lat_Err_message* lat_err_;
  ::phoenix::ad_data_upload::Trj_Change_message* trj_changing_;
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* changing_lane_req_;
  ::phoenix::ad_data_upload::EventChangingLaneRsp_message* changing_lane_rsp_;
  ::PROTOBUF_NAMESPACE_ID::int32 trj_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_trajectory_sample_points_count_;
  bool hold_steering_wheel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class BoundaryAssociation_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.BoundaryAssociation_message) */ {
 public:
  BoundaryAssociation_message();
  virtual ~BoundaryAssociation_message();

  BoundaryAssociation_message(const BoundaryAssociation_message& from);
  BoundaryAssociation_message(BoundaryAssociation_message&& from) noexcept
    : BoundaryAssociation_message() {
    *this = ::std::move(from);
  }

  inline BoundaryAssociation_message& operator=(const BoundaryAssociation_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryAssociation_message& operator=(BoundaryAssociation_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundaryAssociation_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundaryAssociation_message* internal_default_instance() {
    return reinterpret_cast<const BoundaryAssociation_message*>(
               &_BoundaryAssociation_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BoundaryAssociation_message& a, BoundaryAssociation_message& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryAssociation_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundaryAssociation_message* New() const final {
    return CreateMaybeMessage<BoundaryAssociation_message>(nullptr);
  }

  BoundaryAssociation_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundaryAssociation_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BoundaryAssociation_message& from);
  void MergeFrom(const BoundaryAssociation_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundaryAssociation_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.BoundaryAssociation_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 4,
    kSFieldNumber = 1,
    kWidthFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .phoenix.ad_data_upload.Vec2d_message point = 4;
  bool has_point() const;
  void clear_point();
  const ::phoenix::ad_data_upload::Vec2d_message& point() const;
  ::phoenix::ad_data_upload::Vec2d_message* release_point();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_point();
  void set_allocated_point(::phoenix::ad_data_upload::Vec2d_message* point);

  // float s = 1;
  void clear_s();
  float s() const;
  void set_s(float value);

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);

  // sint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.BoundaryAssociation_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::Vec2d_message* point_;
  float s_;
  float width_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Boundary_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Boundary_message) */ {
 public:
  Boundary_message();
  virtual ~Boundary_message();

  Boundary_message(const Boundary_message& from);
  Boundary_message(Boundary_message&& from) noexcept
    : Boundary_message() {
    *this = ::std::move(from);
  }

  inline Boundary_message& operator=(const Boundary_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boundary_message& operator=(Boundary_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Boundary_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boundary_message* internal_default_instance() {
    return reinterpret_cast<const Boundary_message*>(
               &_Boundary_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Boundary_message& a, Boundary_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Boundary_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boundary_message* New() const final {
    return CreateMaybeMessage<Boundary_message>(nullptr);
  }

  Boundary_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boundary_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Boundary_message& from);
  void MergeFrom(const Boundary_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Boundary_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Boundary_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveFieldNumber = 2,
    kCurveCountFieldNumber = 1,
  };
  // repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
  int curve_size() const;
  void clear_curve();
  ::phoenix::ad_data_upload::BoundaryAssociation_message* mutable_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::BoundaryAssociation_message >*
      mutable_curve();
  const ::phoenix::ad_data_upload::BoundaryAssociation_message& curve(int index) const;
  ::phoenix::ad_data_upload::BoundaryAssociation_message* add_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::BoundaryAssociation_message >&
      curve() const;

  // uint32 curve_count = 1;
  void clear_curve_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_count() const;
  void set_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Boundary_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::BoundaryAssociation_message > curve_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ID_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ID_message) */ {
 public:
  ID_message();
  virtual ~ID_message();

  ID_message(const ID_message& from);
  ID_message(ID_message&& from) noexcept
    : ID_message() {
    *this = ::std::move(from);
  }

  inline ID_message& operator=(const ID_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ID_message& operator=(ID_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ID_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ID_message* internal_default_instance() {
    return reinterpret_cast<const ID_message*>(
               &_ID_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ID_message& a, ID_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ID_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ID_message* New() const final {
    return CreateMaybeMessage<ID_message>(nullptr);
  }

  ID_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ID_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ID_message& from);
  void MergeFrom(const ID_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ID_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ID_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // sint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ID_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class LaneInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LaneInfo_message) */ {
 public:
  LaneInfo_message();
  virtual ~LaneInfo_message();

  LaneInfo_message(const LaneInfo_message& from);
  LaneInfo_message(LaneInfo_message&& from) noexcept
    : LaneInfo_message() {
    *this = ::std::move(from);
  }

  inline LaneInfo_message& operator=(const LaneInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneInfo_message& operator=(LaneInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LaneInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneInfo_message* internal_default_instance() {
    return reinterpret_cast<const LaneInfo_message*>(
               &_LaneInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(LaneInfo_message& a, LaneInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneInfo_message* New() const final {
    return CreateMaybeMessage<LaneInfo_message>(nullptr);
  }

  LaneInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LaneInfo_message& from);
  void MergeFrom(const LaneInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LaneInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentralCurveFieldNumber = 5,
    kLaneIdFieldNumber = 1,
    kLeftBoundaryFieldNumber = 6,
    kRightBoundaryFieldNumber = 7,
    kLaneIndexFieldNumber = 2,
    kQualityFieldNumber = 3,
    kCentralCurveCountFieldNumber = 4,
  };
  // repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
  int central_curve_size() const;
  void clear_central_curve();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_central_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
      mutable_central_curve();
  const ::phoenix::ad_data_upload::Vec2d_message& central_curve(int index) const;
  ::phoenix::ad_data_upload::Vec2d_message* add_central_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
      central_curve() const;

  // .phoenix.ad_data_upload.ID_message lane_id = 1;
  bool has_lane_id() const;
  void clear_lane_id();
  const ::phoenix::ad_data_upload::ID_message& lane_id() const;
  ::phoenix::ad_data_upload::ID_message* release_lane_id();
  ::phoenix::ad_data_upload::ID_message* mutable_lane_id();
  void set_allocated_lane_id(::phoenix::ad_data_upload::ID_message* lane_id);

  // .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
  bool has_left_boundary() const;
  void clear_left_boundary();
  const ::phoenix::ad_data_upload::Boundary_message& left_boundary() const;
  ::phoenix::ad_data_upload::Boundary_message* release_left_boundary();
  ::phoenix::ad_data_upload::Boundary_message* mutable_left_boundary();
  void set_allocated_left_boundary(::phoenix::ad_data_upload::Boundary_message* left_boundary);

  // .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
  bool has_right_boundary() const;
  void clear_right_boundary();
  const ::phoenix::ad_data_upload::Boundary_message& right_boundary() const;
  ::phoenix::ad_data_upload::Boundary_message* release_right_boundary();
  ::phoenix::ad_data_upload::Boundary_message* mutable_right_boundary();
  void set_allocated_right_boundary(::phoenix::ad_data_upload::Boundary_message* right_boundary);

  // sint32 lane_index = 2;
  void clear_lane_index();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_index() const;
  void set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 quality = 3;
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 central_curve_count = 4;
  void clear_central_curve_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 central_curve_count() const;
  void set_central_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LaneInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message > central_curve_;
  ::phoenix::ad_data_upload::ID_message* lane_id_;
  ::phoenix::ad_data_upload::Boundary_message* left_boundary_;
  ::phoenix::ad_data_upload::Boundary_message* right_boundary_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 central_curve_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class LineSegment2d_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.LineSegment2d_message) */ {
 public:
  LineSegment2d_message();
  virtual ~LineSegment2d_message();

  LineSegment2d_message(const LineSegment2d_message& from);
  LineSegment2d_message(LineSegment2d_message&& from) noexcept
    : LineSegment2d_message() {
    *this = ::std::move(from);
  }

  inline LineSegment2d_message& operator=(const LineSegment2d_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineSegment2d_message& operator=(LineSegment2d_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LineSegment2d_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineSegment2d_message* internal_default_instance() {
    return reinterpret_cast<const LineSegment2d_message*>(
               &_LineSegment2d_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LineSegment2d_message& a, LineSegment2d_message& b) {
    a.Swap(&b);
  }
  inline void Swap(LineSegment2d_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineSegment2d_message* New() const final {
    return CreateMaybeMessage<LineSegment2d_message>(nullptr);
  }

  LineSegment2d_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineSegment2d_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LineSegment2d_message& from);
  void MergeFrom(const LineSegment2d_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineSegment2d_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.LineSegment2d_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
  int points__size() const;
  void clear_points_();
  ::phoenix::ad_data_upload::Vec2d_message* mutable_points_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
      mutable_points_();
  const ::phoenix::ad_data_upload::Vec2d_message& points_(int index) const;
  ::phoenix::ad_data_upload::Vec2d_message* add_points_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
      points_() const;

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.LineSegment2d_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message > points__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class MapTrafficLight_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.MapTrafficLight_message) */ {
 public:
  MapTrafficLight_message();
  virtual ~MapTrafficLight_message();

  MapTrafficLight_message(const MapTrafficLight_message& from);
  MapTrafficLight_message(MapTrafficLight_message&& from) noexcept
    : MapTrafficLight_message() {
    *this = ::std::move(from);
  }

  inline MapTrafficLight_message& operator=(const MapTrafficLight_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTrafficLight_message& operator=(MapTrafficLight_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MapTrafficLight_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapTrafficLight_message* internal_default_instance() {
    return reinterpret_cast<const MapTrafficLight_message*>(
               &_MapTrafficLight_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MapTrafficLight_message& a, MapTrafficLight_message& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTrafficLight_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTrafficLight_message* New() const final {
    return CreateMaybeMessage<MapTrafficLight_message>(nullptr);
  }

  MapTrafficLight_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTrafficLight_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MapTrafficLight_message& from);
  void MergeFrom(const MapTrafficLight_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapTrafficLight_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.MapTrafficLight_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStopLineFieldNumber = 2,
  };
  // .phoenix.ad_data_upload.ID_message id = 1;
  bool has_id() const;
  void clear_id();
  const ::phoenix::ad_data_upload::ID_message& id() const;
  ::phoenix::ad_data_upload::ID_message* release_id();
  ::phoenix::ad_data_upload::ID_message* mutable_id();
  void set_allocated_id(::phoenix::ad_data_upload::ID_message* id);

  // .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
  bool has_stop_line() const;
  void clear_stop_line();
  const ::phoenix::ad_data_upload::LineSegment2d_message& stop_line() const;
  ::phoenix::ad_data_upload::LineSegment2d_message* release_stop_line();
  ::phoenix::ad_data_upload::LineSegment2d_message* mutable_stop_line();
  void set_allocated_stop_line(::phoenix::ad_data_upload::LineSegment2d_message* stop_line);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.MapTrafficLight_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::ID_message* id_;
  ::phoenix::ad_data_upload::LineSegment2d_message* stop_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class MapInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.MapInfo_message) */ {
 public:
  MapInfo_message();
  virtual ~MapInfo_message();

  MapInfo_message(const MapInfo_message& from);
  MapInfo_message(MapInfo_message&& from) noexcept
    : MapInfo_message() {
    *this = ::std::move(from);
  }

  inline MapInfo_message& operator=(const MapInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapInfo_message& operator=(MapInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MapInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapInfo_message* internal_default_instance() {
    return reinterpret_cast<const MapInfo_message*>(
               &_MapInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MapInfo_message& a, MapInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(MapInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapInfo_message* New() const final {
    return CreateMaybeMessage<MapInfo_message>(nullptr);
  }

  MapInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MapInfo_message& from);
  void MergeFrom(const MapInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.MapInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneTableFieldNumber = 2,
    kMapTrafficLightTableFieldNumber = 4,
    kLaneTableCountFieldNumber = 1,
    kMapTrafficLightTableCountFieldNumber = 3,
  };
  // repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
  int lane_table_size() const;
  void clear_lane_table();
  ::phoenix::ad_data_upload::LaneInfo_message* mutable_lane_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LaneInfo_message >*
      mutable_lane_table();
  const ::phoenix::ad_data_upload::LaneInfo_message& lane_table(int index) const;
  ::phoenix::ad_data_upload::LaneInfo_message* add_lane_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LaneInfo_message >&
      lane_table() const;

  // repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
  int map_traffic_light_table_size() const;
  void clear_map_traffic_light_table();
  ::phoenix::ad_data_upload::MapTrafficLight_message* mutable_map_traffic_light_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapTrafficLight_message >*
      mutable_map_traffic_light_table();
  const ::phoenix::ad_data_upload::MapTrafficLight_message& map_traffic_light_table(int index) const;
  ::phoenix::ad_data_upload::MapTrafficLight_message* add_map_traffic_light_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapTrafficLight_message >&
      map_traffic_light_table() const;

  // uint32 lane_table_count = 1;
  void clear_lane_table_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_table_count() const;
  void set_lane_table_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 map_traffic_light_table_count = 3;
  void clear_map_traffic_light_table_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_traffic_light_table_count() const;
  void set_map_traffic_light_table_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.MapInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LaneInfo_message > lane_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapTrafficLight_message > map_traffic_light_table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_table_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_traffic_light_table_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class RoadBoundary_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.RoadBoundary_message) */ {
 public:
  RoadBoundary_message();
  virtual ~RoadBoundary_message();

  RoadBoundary_message(const RoadBoundary_message& from);
  RoadBoundary_message(RoadBoundary_message&& from) noexcept
    : RoadBoundary_message() {
    *this = ::std::move(from);
  }

  inline RoadBoundary_message& operator=(const RoadBoundary_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadBoundary_message& operator=(RoadBoundary_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RoadBoundary_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadBoundary_message* internal_default_instance() {
    return reinterpret_cast<const RoadBoundary_message*>(
               &_RoadBoundary_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RoadBoundary_message& a, RoadBoundary_message& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadBoundary_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadBoundary_message* New() const final {
    return CreateMaybeMessage<RoadBoundary_message>(nullptr);
  }

  RoadBoundary_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadBoundary_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RoadBoundary_message& from);
  void MergeFrom(const RoadBoundary_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadBoundary_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.RoadBoundary_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefPointFieldNumber = 1,
    kLeftBoundaryPointFieldNumber = 2,
    kRightBoundaryPointFieldNumber = 3,
    kLeftWidthFieldNumber = 4,
    kRightWidthFieldNumber = 5,
  };
  // .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
  bool has_ref_point() const;
  void clear_ref_point();
  const ::phoenix::ad_data_upload::PathPoint_message& ref_point() const;
  ::phoenix::ad_data_upload::PathPoint_message* release_ref_point();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_ref_point();
  void set_allocated_ref_point(::phoenix::ad_data_upload::PathPoint_message* ref_point);

  // .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
  bool has_left_boundary_point() const;
  void clear_left_boundary_point();
  const ::phoenix::ad_data_upload::PathPoint_message& left_boundary_point() const;
  ::phoenix::ad_data_upload::PathPoint_message* release_left_boundary_point();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_left_boundary_point();
  void set_allocated_left_boundary_point(::phoenix::ad_data_upload::PathPoint_message* left_boundary_point);

  // .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
  bool has_right_boundary_point() const;
  void clear_right_boundary_point();
  const ::phoenix::ad_data_upload::PathPoint_message& right_boundary_point() const;
  ::phoenix::ad_data_upload::PathPoint_message* release_right_boundary_point();
  ::phoenix::ad_data_upload::PathPoint_message* mutable_right_boundary_point();
  void set_allocated_right_boundary_point(::phoenix::ad_data_upload::PathPoint_message* right_boundary_point);

  // float left_width = 4;
  void clear_left_width();
  float left_width() const;
  void set_left_width(float value);

  // float right_width = 5;
  void clear_right_width();
  float right_width() const;
  void set_right_width(float value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.RoadBoundary_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::PathPoint_message* ref_point_;
  ::phoenix::ad_data_upload::PathPoint_message* left_boundary_point_;
  ::phoenix::ad_data_upload::PathPoint_message* right_boundary_point_;
  float left_width_;
  float right_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class ObstacleInfo_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.ObstacleInfo_message) */ {
 public:
  ObstacleInfo_message();
  virtual ~ObstacleInfo_message();

  ObstacleInfo_message(const ObstacleInfo_message& from);
  ObstacleInfo_message(ObstacleInfo_message&& from) noexcept
    : ObstacleInfo_message() {
    *this = ::std::move(from);
  }

  inline ObstacleInfo_message& operator=(const ObstacleInfo_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleInfo_message& operator=(ObstacleInfo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObstacleInfo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleInfo_message* internal_default_instance() {
    return reinterpret_cast<const ObstacleInfo_message*>(
               &_ObstacleInfo_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ObstacleInfo_message& a, ObstacleInfo_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleInfo_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleInfo_message* New() const final {
    return CreateMaybeMessage<ObstacleInfo_message>(nullptr);
  }

  ObstacleInfo_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleInfo_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObstacleInfo_message& from);
  void MergeFrom(const ObstacleInfo_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObstacleInfo_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.ObstacleInfo_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredTrajectoryCountNumFieldNumber = 12,
    kPredTrajectoryFieldNumber = 13,
    kObbFieldNumber = 2,
    kIdFieldNumber = 1,
    kHeadingFieldNumber = 3,
    kTypeFieldNumber = 4,
    kDynamicFieldNumber = 5,
    kIgnoreFieldNumber = 6,
    kUncertainFieldNumber = 7,
    kVFieldNumber = 8,
    kSRefFieldNumber = 9,
    kLRefFieldNumber = 10,
    kPredTrajectoryCountFieldNumber = 11,
  };
  // repeated uint32 pred_trajectory_count_num = 12;
  int pred_trajectory_count_num_size() const;
  void clear_pred_trajectory_count_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 pred_trajectory_count_num(int index) const;
  void set_pred_trajectory_count_num(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pred_trajectory_count_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pred_trajectory_count_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pred_trajectory_count_num();

  // repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
  int pred_trajectory_size() const;
  void clear_pred_trajectory();
  ::phoenix::ad_data_upload::TrajectoryPoint_message* mutable_pred_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrajectoryPoint_message >*
      mutable_pred_trajectory();
  const ::phoenix::ad_data_upload::TrajectoryPoint_message& pred_trajectory(int index) const;
  ::phoenix::ad_data_upload::TrajectoryPoint_message* add_pred_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrajectoryPoint_message >&
      pred_trajectory() const;

  // .phoenix.ad_data_upload.OBBox2d_message obb = 2;
  bool has_obb() const;
  void clear_obb();
  const ::phoenix::ad_data_upload::OBBox2d_message& obb() const;
  ::phoenix::ad_data_upload::OBBox2d_message* release_obb();
  ::phoenix::ad_data_upload::OBBox2d_message* mutable_obb();
  void set_allocated_obb(::phoenix::ad_data_upload::OBBox2d_message* obb);

  // sint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float heading = 3;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // sint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 dynamic = 5;
  void clear_dynamic();
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic() const;
  void set_dynamic(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool ignore = 6;
  void clear_ignore();
  bool ignore() const;
  void set_ignore(bool value);

  // bool uncertain = 7;
  void clear_uncertain();
  bool uncertain() const;
  void set_uncertain(bool value);

  // float V = 8;
  void clear_v();
  float v() const;
  void set_v(float value);

  // float s_ref = 9;
  void clear_s_ref();
  float s_ref() const;
  void set_s_ref(float value);

  // float l_ref = 10;
  void clear_l_ref();
  float l_ref() const;
  void set_l_ref(float value);

  // uint32 pred_trajectory_count = 11;
  void clear_pred_trajectory_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pred_trajectory_count() const;
  void set_pred_trajectory_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.ObstacleInfo_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pred_trajectory_count_num_;
  mutable std::atomic<int> _pred_trajectory_count_num_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrajectoryPoint_message > pred_trajectory_;
  ::phoenix::ad_data_upload::OBBox2d_message* obb_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic_;
  bool ignore_;
  bool uncertain_;
  float v_;
  float s_ref_;
  float l_ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pred_trajectory_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class DrivingMapInfo_1_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.DrivingMapInfo_1_message) */ {
 public:
  DrivingMapInfo_1_message();
  virtual ~DrivingMapInfo_1_message();

  DrivingMapInfo_1_message(const DrivingMapInfo_1_message& from);
  DrivingMapInfo_1_message(DrivingMapInfo_1_message&& from) noexcept
    : DrivingMapInfo_1_message() {
    *this = ::std::move(from);
  }

  inline DrivingMapInfo_1_message& operator=(const DrivingMapInfo_1_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingMapInfo_1_message& operator=(DrivingMapInfo_1_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DrivingMapInfo_1_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingMapInfo_1_message* internal_default_instance() {
    return reinterpret_cast<const DrivingMapInfo_1_message*>(
               &_DrivingMapInfo_1_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DrivingMapInfo_1_message& a, DrivingMapInfo_1_message& b) {
    a.Swap(&b);
  }
  inline void Swap(DrivingMapInfo_1_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrivingMapInfo_1_message* New() const final {
    return CreateMaybeMessage<DrivingMapInfo_1_message>(nullptr);
  }

  DrivingMapInfo_1_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivingMapInfo_1_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrivingMapInfo_1_message& from);
  void MergeFrom(const DrivingMapInfo_1_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrivingMapInfo_1_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.DrivingMapInfo_1_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadBoundaryFieldNumber = 4,
    kObstacleListFieldNumber = 6,
    kMsgHeadFieldNumber = 1,
    kMapFieldNumber = 2,
    kRoadBoundaryCountFieldNumber = 3,
    kObstacleListCountFieldNumber = 5,
  };
  // repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
  int road_boundary_size() const;
  void clear_road_boundary();
  ::phoenix::ad_data_upload::RoadBoundary_message* mutable_road_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::RoadBoundary_message >*
      mutable_road_boundary();
  const ::phoenix::ad_data_upload::RoadBoundary_message& road_boundary(int index) const;
  ::phoenix::ad_data_upload::RoadBoundary_message* add_road_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::RoadBoundary_message >&
      road_boundary() const;

  // repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
  int obstacle_list_size() const;
  void clear_obstacle_list();
  ::phoenix::ad_data_upload::ObstacleInfo_message* mutable_obstacle_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObstacleInfo_message >*
      mutable_obstacle_list();
  const ::phoenix::ad_data_upload::ObstacleInfo_message& obstacle_list(int index) const;
  ::phoenix::ad_data_upload::ObstacleInfo_message* add_obstacle_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObstacleInfo_message >&
      obstacle_list() const;

  // .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
  bool has_msg_head() const;
  void clear_msg_head();
  const ::phoenix::ad_data_upload::MsgHead_message& msg_head() const;
  ::phoenix::ad_data_upload::MsgHead_message* release_msg_head();
  ::phoenix::ad_data_upload::MsgHead_message* mutable_msg_head();
  void set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head);

  // .phoenix.ad_data_upload.MapInfo_message map = 2;
  bool has_map() const;
  void clear_map();
  const ::phoenix::ad_data_upload::MapInfo_message& map() const;
  ::phoenix::ad_data_upload::MapInfo_message* release_map();
  ::phoenix::ad_data_upload::MapInfo_message* mutable_map();
  void set_allocated_map(::phoenix::ad_data_upload::MapInfo_message* map);

  // uint32 road_boundary_count = 3;
  void clear_road_boundary_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_boundary_count() const;
  void set_road_boundary_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 obstacle_list_count = 5;
  void clear_obstacle_list_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_list_count() const;
  void set_obstacle_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.DrivingMapInfo_1_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::RoadBoundary_message > road_boundary_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObstacleInfo_message > obstacle_list_;
  ::phoenix::ad_data_upload::MsgHead_message* msg_head_;
  ::phoenix::ad_data_upload::MapInfo_message* map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_boundary_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_list_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class Trajectory_Planning_Result_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.Trajectory_Planning_Result_message) */ {
 public:
  Trajectory_Planning_Result_message();
  virtual ~Trajectory_Planning_Result_message();

  Trajectory_Planning_Result_message(const Trajectory_Planning_Result_message& from);
  Trajectory_Planning_Result_message(Trajectory_Planning_Result_message&& from) noexcept
    : Trajectory_Planning_Result_message() {
    *this = ::std::move(from);
  }

  inline Trajectory_Planning_Result_message& operator=(const Trajectory_Planning_Result_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory_Planning_Result_message& operator=(Trajectory_Planning_Result_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Trajectory_Planning_Result_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory_Planning_Result_message* internal_default_instance() {
    return reinterpret_cast<const Trajectory_Planning_Result_message*>(
               &_Trajectory_Planning_Result_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Trajectory_Planning_Result_message& a, Trajectory_Planning_Result_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory_Planning_Result_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory_Planning_Result_message* New() const final {
    return CreateMaybeMessage<Trajectory_Planning_Result_message>(nullptr);
  }

  Trajectory_Planning_Result_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory_Planning_Result_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Trajectory_Planning_Result_message& from);
  void MergeFrom(const Trajectory_Planning_Result_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory_Planning_Result_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.Trajectory_Planning_Result_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPlanningResultFieldNumber = 1,
  };
  // .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
  bool has_trajectory_planning_result() const;
  void clear_trajectory_planning_result();
  const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message& trajectory_planning_result() const;
  ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* release_trajectory_planning_result();
  ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* mutable_trajectory_planning_result();
  void set_allocated_trajectory_planning_result(::phoenix::ad_data_upload::TrajectoryPlanningResult_message* trajectory_planning_result);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.Trajectory_Planning_Result_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* trajectory_planning_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class DrivingMap_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.DrivingMap_message) */ {
 public:
  DrivingMap_message();
  virtual ~DrivingMap_message();

  DrivingMap_message(const DrivingMap_message& from);
  DrivingMap_message(DrivingMap_message&& from) noexcept
    : DrivingMap_message() {
    *this = ::std::move(from);
  }

  inline DrivingMap_message& operator=(const DrivingMap_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrivingMap_message& operator=(DrivingMap_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DrivingMap_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingMap_message* internal_default_instance() {
    return reinterpret_cast<const DrivingMap_message*>(
               &_DrivingMap_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DrivingMap_message& a, DrivingMap_message& b) {
    a.Swap(&b);
  }
  inline void Swap(DrivingMap_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrivingMap_message* New() const final {
    return CreateMaybeMessage<DrivingMap_message>(nullptr);
  }

  DrivingMap_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrivingMap_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrivingMap_message& from);
  void MergeFrom(const DrivingMap_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrivingMap_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.DrivingMap_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivingMapInfo1FieldNumber = 1,
  };
  // .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
  bool has_driving_map_info_1() const;
  void clear_driving_map_info_1();
  const ::phoenix::ad_data_upload::DrivingMapInfo_1_message& driving_map_info_1() const;
  ::phoenix::ad_data_upload::DrivingMapInfo_1_message* release_driving_map_info_1();
  ::phoenix::ad_data_upload::DrivingMapInfo_1_message* mutable_driving_map_info_1();
  void set_allocated_driving_map_info_1(::phoenix::ad_data_upload::DrivingMapInfo_1_message* driving_map_info_1);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.DrivingMap_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::DrivingMapInfo_1_message* driving_map_info_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// -------------------------------------------------------------------

class PathPln_Display_Data_message :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:phoenix.ad_data_upload.PathPln_Display_Data_message) */ {
 public:
  PathPln_Display_Data_message();
  virtual ~PathPln_Display_Data_message();

  PathPln_Display_Data_message(const PathPln_Display_Data_message& from);
  PathPln_Display_Data_message(PathPln_Display_Data_message&& from) noexcept
    : PathPln_Display_Data_message() {
    *this = ::std::move(from);
  }

  inline PathPln_Display_Data_message& operator=(const PathPln_Display_Data_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPln_Display_Data_message& operator=(PathPln_Display_Data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PathPln_Display_Data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPln_Display_Data_message* internal_default_instance() {
    return reinterpret_cast<const PathPln_Display_Data_message*>(
               &_PathPln_Display_Data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PathPln_Display_Data_message& a, PathPln_Display_Data_message& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPln_Display_Data_message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPln_Display_Data_message* New() const final {
    return CreateMaybeMessage<PathPln_Display_Data_message>(nullptr);
  }

  PathPln_Display_Data_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPln_Display_Data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PathPln_Display_Data_message& from);
  void MergeFrom(const PathPln_Display_Data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathPln_Display_Data_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.ad_data_upload.PathPln_Display_Data_message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajPlanningResultFieldNumber = 1,
    kDrivingMapFieldNumber = 2,
  };
  // .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
  bool has_traj_planning_result() const;
  void clear_traj_planning_result();
  const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message& traj_planning_result() const;
  ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* release_traj_planning_result();
  ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* mutable_traj_planning_result();
  void set_allocated_traj_planning_result(::phoenix::ad_data_upload::Trajectory_Planning_Result_message* traj_planning_result);

  // .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
  bool has_driving_map() const;
  void clear_driving_map();
  const ::phoenix::ad_data_upload::DrivingMap_message& driving_map() const;
  ::phoenix::ad_data_upload::DrivingMap_message* release_driving_map();
  ::phoenix::ad_data_upload::DrivingMap_message* mutable_driving_map();
  void set_allocated_driving_map(::phoenix::ad_data_upload::DrivingMap_message* driving_map);

  // @@protoc_insertion_point(class_scope:phoenix.ad_data_upload.PathPln_Display_Data_message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* traj_planning_result_;
  ::phoenix::ad_data_upload::DrivingMap_message* driving_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sys_5fDataUploadProto_5fplanning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHead_message

// bool vaild = 1;
inline void MsgHead_message::clear_vaild() {
  vaild_ = false;
}
inline bool MsgHead_message::vaild() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.vaild)
  return vaild_;
}
inline void MsgHead_message::set_vaild(bool value) {
  
  vaild_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.vaild)
}

// uint32 sequence = 2;
inline void MsgHead_message::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgHead_message::sequence() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.sequence)
  return sequence_;
}
inline void MsgHead_message::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.sequence)
}

// sint64 timestamp = 3;
inline void MsgHead_message::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgHead_message::timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.timestamp)
  return timestamp_;
}
inline void MsgHead_message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.timestamp)
}

// sint32 time_offset = 4;
inline void MsgHead_message::clear_time_offset() {
  time_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgHead_message::time_offset() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.time_offset)
  return time_offset_;
}
inline void MsgHead_message::set_time_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.time_offset)
}

// uint32 src_module_id = 5;
inline void MsgHead_message::clear_src_module_id() {
  src_module_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgHead_message::src_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.src_module_id)
  return src_module_id_;
}
inline void MsgHead_message::set_src_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.src_module_id)
}

// uint32 dst_module_id = 6;
inline void MsgHead_message::clear_dst_module_id() {
  dst_module_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgHead_message::dst_module_id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MsgHead_message.dst_module_id)
  return dst_module_id_;
}
inline void MsgHead_message::set_dst_module_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_module_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MsgHead_message.dst_module_id)
}

// -------------------------------------------------------------------

// Vec2d_message

// repeated float vec_ = 1;
inline int Vec2d_message::vec__size() const {
  return vec__.size();
}
inline void Vec2d_message::clear_vec_() {
  vec__.Clear();
}
inline float Vec2d_message::vec_(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Vec2d_message.vec_)
  return vec__.Get(index);
}
inline void Vec2d_message::set_vec_(int index, float value) {
  vec__.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Vec2d_message.vec_)
}
inline void Vec2d_message::add_vec_(float value) {
  vec__.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Vec2d_message.vec_)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vec2d_message::vec_() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Vec2d_message.vec_)
  return vec__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vec2d_message::mutable_vec_() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Vec2d_message.vec_)
  return &vec__;
}

// -------------------------------------------------------------------

// PathPoint_message

// .phoenix.ad_data_upload.Vec2d_message point = 1;
inline bool PathPoint_message::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline void PathPoint_message::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& PathPoint_message::point() const {
  const ::phoenix::ad_data_upload::Vec2d_message* p = point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPoint_message.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Vec2d_message*>(
      &::phoenix::ad_data_upload::_Vec2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Vec2d_message* PathPoint_message::release_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PathPoint_message.point)
  
  ::phoenix::ad_data_upload::Vec2d_message* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Vec2d_message* PathPoint_message::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Vec2d_message>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PathPoint_message.point)
  return point_;
}
inline void PathPoint_message::set_allocated_point(::phoenix::ad_data_upload::Vec2d_message* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PathPoint_message.point)
}

// float heading = 2;
inline void PathPoint_message::clear_heading() {
  heading_ = 0;
}
inline float PathPoint_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPoint_message.heading)
  return heading_;
}
inline void PathPoint_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PathPoint_message.heading)
}

// float curvature = 3;
inline void PathPoint_message::clear_curvature() {
  curvature_ = 0;
}
inline float PathPoint_message::curvature() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPoint_message.curvature)
  return curvature_;
}
inline void PathPoint_message::set_curvature(float value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PathPoint_message.curvature)
}

// float s = 4;
inline void PathPoint_message::clear_s() {
  s_ = 0;
}
inline float PathPoint_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPoint_message.s)
  return s_;
}
inline void PathPoint_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PathPoint_message.s)
}

// float l = 5;
inline void PathPoint_message::clear_l() {
  l_ = 0;
}
inline float PathPoint_message::l() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPoint_message.l)
  return l_;
}
inline void PathPoint_message::set_l(float value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PathPoint_message.l)
}

// -------------------------------------------------------------------

// OBBox2d_message

// .phoenix.ad_data_upload.Vec2d_message center_ = 1;
inline bool OBBox2d_message::has_center_() const {
  return this != internal_default_instance() && center__ != nullptr;
}
inline void OBBox2d_message::clear_center_() {
  if (GetArenaNoVirtual() == nullptr && center__ != nullptr) {
    delete center__;
  }
  center__ = nullptr;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& OBBox2d_message::center_() const {
  const ::phoenix::ad_data_upload::Vec2d_message* p = center__;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox2d_message.center_)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Vec2d_message*>(
      &::phoenix::ad_data_upload::_Vec2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::release_center_() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.OBBox2d_message.center_)
  
  ::phoenix::ad_data_upload::Vec2d_message* temp = center__;
  center__ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::mutable_center_() {
  
  if (center__ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Vec2d_message>(GetArenaNoVirtual());
    center__ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.OBBox2d_message.center_)
  return center__;
}
inline void OBBox2d_message::set_allocated_center_(::phoenix::ad_data_upload::Vec2d_message* center_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center__;
  }
  if (center_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_, submessage_arena);
    }
    
  } else {
    
  }
  center__ = center_;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.OBBox2d_message.center_)
}

// repeated .phoenix.ad_data_upload.Vec2d_message unit_direction_ = 2;
inline int OBBox2d_message::unit_direction__size() const {
  return unit_direction__.size();
}
inline void OBBox2d_message::clear_unit_direction_() {
  unit_direction__.Clear();
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::mutable_unit_direction_(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.OBBox2d_message.unit_direction_)
  return unit_direction__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
OBBox2d_message::mutable_unit_direction_() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.OBBox2d_message.unit_direction_)
  return &unit_direction__;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& OBBox2d_message::unit_direction_(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox2d_message.unit_direction_)
  return unit_direction__.Get(index);
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::add_unit_direction_() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.OBBox2d_message.unit_direction_)
  return unit_direction__.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
OBBox2d_message::unit_direction_() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.OBBox2d_message.unit_direction_)
  return unit_direction__;
}

// .phoenix.ad_data_upload.Vec2d_message extents_ = 3;
inline bool OBBox2d_message::has_extents_() const {
  return this != internal_default_instance() && extents__ != nullptr;
}
inline void OBBox2d_message::clear_extents_() {
  if (GetArenaNoVirtual() == nullptr && extents__ != nullptr) {
    delete extents__;
  }
  extents__ = nullptr;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& OBBox2d_message::extents_() const {
  const ::phoenix::ad_data_upload::Vec2d_message* p = extents__;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.OBBox2d_message.extents_)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Vec2d_message*>(
      &::phoenix::ad_data_upload::_Vec2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::release_extents_() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.OBBox2d_message.extents_)
  
  ::phoenix::ad_data_upload::Vec2d_message* temp = extents__;
  extents__ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Vec2d_message* OBBox2d_message::mutable_extents_() {
  
  if (extents__ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Vec2d_message>(GetArenaNoVirtual());
    extents__ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.OBBox2d_message.extents_)
  return extents__;
}
inline void OBBox2d_message::set_allocated_extents_(::phoenix::ad_data_upload::Vec2d_message* extents_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extents__;
  }
  if (extents_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extents_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extents_, submessage_arena);
    }
    
  } else {
    
  }
  extents__ = extents_;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.OBBox2d_message.extents_)
}

// -------------------------------------------------------------------

// ByPassingReq_message

// bool allow_turning_left = 1;
inline void ByPassingReq_message::clear_allow_turning_left() {
  allow_turning_left_ = false;
}
inline bool ByPassingReq_message::allow_turning_left() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ByPassingReq_message.allow_turning_left)
  return allow_turning_left_;
}
inline void ByPassingReq_message::set_allow_turning_left(bool value) {
  
  allow_turning_left_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ByPassingReq_message.allow_turning_left)
}

// bool allow_turning_right = 2;
inline void ByPassingReq_message::clear_allow_turning_right() {
  allow_turning_right_ = false;
}
inline bool ByPassingReq_message::allow_turning_right() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ByPassingReq_message.allow_turning_right)
  return allow_turning_right_;
}
inline void ByPassingReq_message::set_allow_turning_right(bool value) {
  
  allow_turning_right_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ByPassingReq_message.allow_turning_right)
}

// -------------------------------------------------------------------

// EventChangingLaneReq_message

// sint32 id = 1;
inline void EventChangingLaneReq_message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneReq_message::id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneReq_message.id)
  return id_;
}
inline void EventChangingLaneReq_message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneReq_message.id)
}

// sint32 request_ = 2;
inline void EventChangingLaneReq_message::clear_request_() {
  request__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneReq_message::request_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneReq_message.request_)
  return request__;
}
inline void EventChangingLaneReq_message::set_request_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneReq_message.request_)
}

// sint32 sequence_ = 3;
inline void EventChangingLaneReq_message::clear_sequence_() {
  sequence__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneReq_message::sequence_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneReq_message.sequence_)
  return sequence__;
}
inline void EventChangingLaneReq_message::set_sequence_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneReq_message.sequence_)
}

// bool allow_auto_changing_to_left_ = 4;
inline void EventChangingLaneReq_message::clear_allow_auto_changing_to_left_() {
  allow_auto_changing_to_left__ = false;
}
inline bool EventChangingLaneReq_message::allow_auto_changing_to_left_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneReq_message.allow_auto_changing_to_left_)
  return allow_auto_changing_to_left__;
}
inline void EventChangingLaneReq_message::set_allow_auto_changing_to_left_(bool value) {
  
  allow_auto_changing_to_left__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneReq_message.allow_auto_changing_to_left_)
}

// bool allow_auto_changing_to_right_ = 5;
inline void EventChangingLaneReq_message::clear_allow_auto_changing_to_right_() {
  allow_auto_changing_to_right__ = false;
}
inline bool EventChangingLaneReq_message::allow_auto_changing_to_right_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneReq_message.allow_auto_changing_to_right_)
  return allow_auto_changing_to_right__;
}
inline void EventChangingLaneReq_message::set_allow_auto_changing_to_right_(bool value) {
  
  allow_auto_changing_to_right__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneReq_message.allow_auto_changing_to_right_)
}

// -------------------------------------------------------------------

// ActionPlanningResult_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool ActionPlanningResult_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void ActionPlanningResult_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& ActionPlanningResult_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* ActionPlanningResult_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ActionPlanningResult_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* ActionPlanningResult_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ActionPlanningResult_message.msg_head)
  return msg_head_;
}
inline void ActionPlanningResult_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ActionPlanningResult_message.msg_head)
}

// bool enable_adas = 2;
inline void ActionPlanningResult_message::clear_enable_adas() {
  enable_adas_ = false;
}
inline bool ActionPlanningResult_message::enable_adas() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_adas)
  return enable_adas_;
}
inline void ActionPlanningResult_message::set_enable_adas(bool value) {
  
  enable_adas_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_adas)
}

// bool enable_aeb = 3;
inline void ActionPlanningResult_message::clear_enable_aeb() {
  enable_aeb_ = false;
}
inline bool ActionPlanningResult_message::enable_aeb() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_aeb)
  return enable_aeb_;
}
inline void ActionPlanningResult_message::set_enable_aeb(bool value) {
  
  enable_aeb_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_aeb)
}

// bool enable_acc = 4;
inline void ActionPlanningResult_message::clear_enable_acc() {
  enable_acc_ = false;
}
inline bool ActionPlanningResult_message::enable_acc() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_acc)
  return enable_acc_;
}
inline void ActionPlanningResult_message::set_enable_acc(bool value) {
  
  enable_acc_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_acc)
}

// bool enable_lka = 5;
inline void ActionPlanningResult_message::clear_enable_lka() {
  enable_lka_ = false;
}
inline bool ActionPlanningResult_message::enable_lka() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_lka)
  return enable_lka_;
}
inline void ActionPlanningResult_message::set_enable_lka(bool value) {
  
  enable_lka_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_lka)
}

// bool enable_alc = 6;
inline void ActionPlanningResult_message::clear_enable_alc() {
  enable_alc_ = false;
}
inline bool ActionPlanningResult_message::enable_alc() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_alc)
  return enable_alc_;
}
inline void ActionPlanningResult_message::set_enable_alc(bool value) {
  
  enable_alc_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_alc)
}

// bool enable_isl = 7;
inline void ActionPlanningResult_message::clear_enable_isl() {
  enable_isl_ = false;
}
inline bool ActionPlanningResult_message::enable_isl() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_isl)
  return enable_isl_;
}
inline void ActionPlanningResult_message::set_enable_isl(bool value) {
  
  enable_isl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_isl)
}

// bool enable_ngp = 8;
inline void ActionPlanningResult_message::clear_enable_ngp() {
  enable_ngp_ = false;
}
inline bool ActionPlanningResult_message::enable_ngp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.enable_ngp)
  return enable_ngp_;
}
inline void ActionPlanningResult_message::set_enable_ngp(bool value) {
  
  enable_ngp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.enable_ngp)
}

// float v_setting = 9;
inline void ActionPlanningResult_message::clear_v_setting() {
  v_setting_ = 0;
}
inline float ActionPlanningResult_message::v_setting() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.v_setting)
  return v_setting_;
}
inline void ActionPlanningResult_message::set_v_setting(float value) {
  
  v_setting_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.v_setting)
}

// float a_setting = 10;
inline void ActionPlanningResult_message::clear_a_setting() {
  a_setting_ = 0;
}
inline float ActionPlanningResult_message::a_setting() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.a_setting)
  return a_setting_;
}
inline void ActionPlanningResult_message::set_a_setting(float value) {
  
  a_setting_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.a_setting)
}

// float time_gap_setting = 11;
inline void ActionPlanningResult_message::clear_time_gap_setting() {
  time_gap_setting_ = 0;
}
inline float ActionPlanningResult_message::time_gap_setting() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.time_gap_setting)
  return time_gap_setting_;
}
inline void ActionPlanningResult_message::set_time_gap_setting(float value) {
  
  time_gap_setting_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.time_gap_setting)
}

// sint32 driving_mode = 12;
inline void ActionPlanningResult_message::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionPlanningResult_message::driving_mode() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.driving_mode)
  return driving_mode_;
}
inline void ActionPlanningResult_message::set_driving_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.driving_mode)
}

// sint32 gear = 13;
inline void ActionPlanningResult_message::clear_gear() {
  gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionPlanningResult_message::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.gear)
  return gear_;
}
inline void ActionPlanningResult_message::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.gear)
}

// sint32 turn_lamp = 14;
inline void ActionPlanningResult_message::clear_turn_lamp() {
  turn_lamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionPlanningResult_message::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.turn_lamp)
  return turn_lamp_;
}
inline void ActionPlanningResult_message::set_turn_lamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ActionPlanningResult_message.turn_lamp)
}

// .phoenix.ad_data_upload.ByPassingReq_message bypassing_req = 15;
inline bool ActionPlanningResult_message::has_bypassing_req() const {
  return this != internal_default_instance() && bypassing_req_ != nullptr;
}
inline void ActionPlanningResult_message::clear_bypassing_req() {
  if (GetArenaNoVirtual() == nullptr && bypassing_req_ != nullptr) {
    delete bypassing_req_;
  }
  bypassing_req_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ByPassingReq_message& ActionPlanningResult_message::bypassing_req() const {
  const ::phoenix::ad_data_upload::ByPassingReq_message* p = bypassing_req_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.bypassing_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ByPassingReq_message*>(
      &::phoenix::ad_data_upload::_ByPassingReq_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ByPassingReq_message* ActionPlanningResult_message::release_bypassing_req() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ActionPlanningResult_message.bypassing_req)
  
  ::phoenix::ad_data_upload::ByPassingReq_message* temp = bypassing_req_;
  bypassing_req_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ByPassingReq_message* ActionPlanningResult_message::mutable_bypassing_req() {
  
  if (bypassing_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ByPassingReq_message>(GetArenaNoVirtual());
    bypassing_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ActionPlanningResult_message.bypassing_req)
  return bypassing_req_;
}
inline void ActionPlanningResult_message::set_allocated_bypassing_req(::phoenix::ad_data_upload::ByPassingReq_message* bypassing_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bypassing_req_;
  }
  if (bypassing_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bypassing_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bypassing_req, submessage_arena);
    }
    
  } else {
    
  }
  bypassing_req_ = bypassing_req;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ActionPlanningResult_message.bypassing_req)
}

// .phoenix.ad_data_upload.EventChangingLaneReq_message event_changing_lane_req = 16;
inline bool ActionPlanningResult_message::has_event_changing_lane_req() const {
  return this != internal_default_instance() && event_changing_lane_req_ != nullptr;
}
inline void ActionPlanningResult_message::clear_event_changing_lane_req() {
  if (GetArenaNoVirtual() == nullptr && event_changing_lane_req_ != nullptr) {
    delete event_changing_lane_req_;
  }
  event_changing_lane_req_ = nullptr;
}
inline const ::phoenix::ad_data_upload::EventChangingLaneReq_message& ActionPlanningResult_message::event_changing_lane_req() const {
  const ::phoenix::ad_data_upload::EventChangingLaneReq_message* p = event_changing_lane_req_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ActionPlanningResult_message.event_changing_lane_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::EventChangingLaneReq_message*>(
      &::phoenix::ad_data_upload::_EventChangingLaneReq_message_default_instance_);
}
inline ::phoenix::ad_data_upload::EventChangingLaneReq_message* ActionPlanningResult_message::release_event_changing_lane_req() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ActionPlanningResult_message.event_changing_lane_req)
  
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* temp = event_changing_lane_req_;
  event_changing_lane_req_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::EventChangingLaneReq_message* ActionPlanningResult_message::mutable_event_changing_lane_req() {
  
  if (event_changing_lane_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::EventChangingLaneReq_message>(GetArenaNoVirtual());
    event_changing_lane_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ActionPlanningResult_message.event_changing_lane_req)
  return event_changing_lane_req_;
}
inline void ActionPlanningResult_message::set_allocated_event_changing_lane_req(::phoenix::ad_data_upload::EventChangingLaneReq_message* event_changing_lane_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_changing_lane_req_;
  }
  if (event_changing_lane_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_changing_lane_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_changing_lane_req, submessage_arena);
    }
    
  } else {
    
  }
  event_changing_lane_req_ = event_changing_lane_req;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ActionPlanningResult_message.event_changing_lane_req)
}

// -------------------------------------------------------------------

// point_message

// float x = 1;
inline void point_message::clear_x() {
  x_ = 0;
}
inline float point_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.point_message.x)
  return x_;
}
inline void point_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.point_message.x)
}

// float y = 2;
inline void point_message::clear_y() {
  y_ = 0;
}
inline float point_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.point_message.y)
  return y_;
}
inline void point_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.point_message.y)
}

// float heading = 3;
inline void point_message::clear_heading() {
  heading_ = 0;
}
inline float point_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.point_message.heading)
  return heading_;
}
inline void point_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.point_message.heading)
}

// float curvature = 4;
inline void point_message::clear_curvature() {
  curvature_ = 0;
}
inline float point_message::curvature() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.point_message.curvature)
  return curvature_;
}
inline void point_message::set_curvature(float value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.point_message.curvature)
}

// float s = 5;
inline void point_message::clear_s() {
  s_ = 0;
}
inline float point_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.point_message.s)
  return s_;
}
inline void point_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.point_message.s)
}

// -------------------------------------------------------------------

// TarTrj_message

// sint64 timestamp = 1;
inline void TarTrj_message::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TarTrj_message::timestamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.timestamp)
  return timestamp_;
}
inline void TarTrj_message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarTrj_message.timestamp)
}

// .phoenix.ad_data_upload.Pos_message curr_pos = 2;
inline bool TarTrj_message::has_curr_pos() const {
  return this != internal_default_instance() && curr_pos_ != nullptr;
}
inline void TarTrj_message::clear_curr_pos() {
  if (GetArenaNoVirtual() == nullptr && curr_pos_ != nullptr) {
    delete curr_pos_;
  }
  curr_pos_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Pos_message& TarTrj_message::curr_pos() const {
  const ::phoenix::ad_data_upload::Pos_message* p = curr_pos_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.curr_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Pos_message*>(
      &::phoenix::ad_data_upload::_Pos_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Pos_message* TarTrj_message::release_curr_pos() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TarTrj_message.curr_pos)
  
  ::phoenix::ad_data_upload::Pos_message* temp = curr_pos_;
  curr_pos_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Pos_message* TarTrj_message::mutable_curr_pos() {
  
  if (curr_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Pos_message>(GetArenaNoVirtual());
    curr_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TarTrj_message.curr_pos)
  return curr_pos_;
}
inline void TarTrj_message::set_allocated_curr_pos(::phoenix::ad_data_upload::Pos_message* curr_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curr_pos_;
  }
  if (curr_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curr_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_pos, submessage_arena);
    }
    
  } else {
    
  }
  curr_pos_ = curr_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TarTrj_message.curr_pos)
}

// .phoenix.ad_data_upload.Pos_message leading_pos = 3;
inline bool TarTrj_message::has_leading_pos() const {
  return this != internal_default_instance() && leading_pos_ != nullptr;
}
inline void TarTrj_message::clear_leading_pos() {
  if (GetArenaNoVirtual() == nullptr && leading_pos_ != nullptr) {
    delete leading_pos_;
  }
  leading_pos_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Pos_message& TarTrj_message::leading_pos() const {
  const ::phoenix::ad_data_upload::Pos_message* p = leading_pos_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.leading_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Pos_message*>(
      &::phoenix::ad_data_upload::_Pos_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Pos_message* TarTrj_message::release_leading_pos() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TarTrj_message.leading_pos)
  
  ::phoenix::ad_data_upload::Pos_message* temp = leading_pos_;
  leading_pos_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Pos_message* TarTrj_message::mutable_leading_pos() {
  
  if (leading_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Pos_message>(GetArenaNoVirtual());
    leading_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TarTrj_message.leading_pos)
  return leading_pos_;
}
inline void TarTrj_message::set_allocated_leading_pos(::phoenix::ad_data_upload::Pos_message* leading_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete leading_pos_;
  }
  if (leading_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leading_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leading_pos, submessage_arena);
    }
    
  } else {
    
  }
  leading_pos_ = leading_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TarTrj_message.leading_pos)
}

// .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
inline bool TarTrj_message::has_lat_err() const {
  return this != internal_default_instance() && lat_err_ != nullptr;
}
inline void TarTrj_message::clear_lat_err() {
  if (GetArenaNoVirtual() == nullptr && lat_err_ != nullptr) {
    delete lat_err_;
  }
  lat_err_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Lat_Err_message& TarTrj_message::lat_err() const {
  const ::phoenix::ad_data_upload::Lat_Err_message* p = lat_err_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.lat_err)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Lat_Err_message*>(
      &::phoenix::ad_data_upload::_Lat_Err_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Lat_Err_message* TarTrj_message::release_lat_err() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TarTrj_message.lat_err)
  
  ::phoenix::ad_data_upload::Lat_Err_message* temp = lat_err_;
  lat_err_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Lat_Err_message* TarTrj_message::mutable_lat_err() {
  
  if (lat_err_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Lat_Err_message>(GetArenaNoVirtual());
    lat_err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TarTrj_message.lat_err)
  return lat_err_;
}
inline void TarTrj_message::set_allocated_lat_err(::phoenix::ad_data_upload::Lat_Err_message* lat_err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lat_err_;
  }
  if (lat_err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err, submessage_arena);
    }
    
  } else {
    
  }
  lat_err_ = lat_err;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TarTrj_message.lat_err)
}

// uint32 trj_direction = 5;
inline void TarTrj_message::clear_trj_direction() {
  trj_direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TarTrj_message::trj_direction() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.trj_direction)
  return trj_direction_;
}
inline void TarTrj_message::set_trj_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trj_direction_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarTrj_message.trj_direction)
}

// sint32 points_num = 6;
inline void TarTrj_message::clear_points_num() {
  points_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TarTrj_message::points_num() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.points_num)
  return points_num_;
}
inline void TarTrj_message::set_points_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarTrj_message.points_num)
}

// repeated .phoenix.ad_data_upload.point_message points = 7;
inline int TarTrj_message::points_size() const {
  return points_.size();
}
inline void TarTrj_message::clear_points() {
  points_.Clear();
}
inline ::phoenix::ad_data_upload::point_message* TarTrj_message::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TarTrj_message.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::point_message >*
TarTrj_message::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.TarTrj_message.points)
  return &points_;
}
inline const ::phoenix::ad_data_upload::point_message& TarTrj_message::points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarTrj_message.points)
  return points_.Get(index);
}
inline ::phoenix::ad_data_upload::point_message* TarTrj_message::add_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.TarTrj_message.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::point_message >&
TarTrj_message::points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.TarTrj_message.points)
  return points_;
}

// -------------------------------------------------------------------

// PlanningResult_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool PlanningResult_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void PlanningResult_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& PlanningResult_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* PlanningResult_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PlanningResult_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* PlanningResult_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PlanningResult_message.msg_head)
  return msg_head_;
}
inline void PlanningResult_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PlanningResult_message.msg_head)
}

// sint32 cur_status = 2;
inline void PlanningResult_message::clear_cur_status() {
  cur_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::cur_status() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.cur_status)
  return cur_status_;
}
inline void PlanningResult_message::set_cur_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.cur_status)
}

// sint32 tar_driving_mode = 3;
inline void PlanningResult_message::clear_tar_driving_mode() {
  tar_driving_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::tar_driving_mode() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_driving_mode)
  return tar_driving_mode_;
}
inline void PlanningResult_message::set_tar_driving_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_driving_mode_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_driving_mode)
}

// sint32 enable_eps = 4;
inline void PlanningResult_message::clear_enable_eps() {
  enable_eps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::enable_eps() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.enable_eps)
  return enable_eps_;
}
inline void PlanningResult_message::set_enable_eps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_eps_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.enable_eps)
}

// sint32 enable_throttle_sys = 5;
inline void PlanningResult_message::clear_enable_throttle_sys() {
  enable_throttle_sys_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::enable_throttle_sys() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.enable_throttle_sys)
  return enable_throttle_sys_;
}
inline void PlanningResult_message::set_enable_throttle_sys(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_throttle_sys_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.enable_throttle_sys)
}

// sint32 enable_ebs = 6;
inline void PlanningResult_message::clear_enable_ebs() {
  enable_ebs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::enable_ebs() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.enable_ebs)
  return enable_ebs_;
}
inline void PlanningResult_message::set_enable_ebs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ebs_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.enable_ebs)
}

// sint32 hold_steering_wheel = 7;
inline void PlanningResult_message::clear_hold_steering_wheel() {
  hold_steering_wheel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::hold_steering_wheel() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.hold_steering_wheel)
  return hold_steering_wheel_;
}
inline void PlanningResult_message::set_hold_steering_wheel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hold_steering_wheel_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.hold_steering_wheel)
}

// sint32 release_throttle = 8;
inline void PlanningResult_message::clear_release_throttle() {
  release_throttle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::release_throttle() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.release_throttle)
  return release_throttle_;
}
inline void PlanningResult_message::set_release_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  release_throttle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.release_throttle)
}

// sint32 tar_gear = 9;
inline void PlanningResult_message::clear_tar_gear() {
  tar_gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::tar_gear() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_gear)
  return tar_gear_;
}
inline void PlanningResult_message::set_tar_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_gear)
}

// sint32 tar_turn_lamp = 10;
inline void PlanningResult_message::clear_tar_turn_lamp() {
  tar_turn_lamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::tar_turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_turn_lamp)
  return tar_turn_lamp_;
}
inline void PlanningResult_message::set_tar_turn_lamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_turn_lamp)
}

// sint32 tar_brake_lamp = 11;
inline void PlanningResult_message::clear_tar_brake_lamp() {
  tar_brake_lamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningResult_message::tar_brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_brake_lamp)
  return tar_brake_lamp_;
}
inline void PlanningResult_message::set_tar_brake_lamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_brake_lamp)
}

// float tar_v = 12;
inline void PlanningResult_message::clear_tar_v() {
  tar_v_ = 0;
}
inline float PlanningResult_message::tar_v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_v)
  return tar_v_;
}
inline void PlanningResult_message::set_tar_v(float value) {
  
  tar_v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_v)
}

// float tar_a = 13;
inline void PlanningResult_message::clear_tar_a() {
  tar_a_ = 0;
}
inline float PlanningResult_message::tar_a() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_a)
  return tar_a_;
}
inline void PlanningResult_message::set_tar_a(float value) {
  
  tar_a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.PlanningResult_message.tar_a)
}

// .phoenix.ad_data_upload.TarTrj_message tar_trj = 14;
inline bool PlanningResult_message::has_tar_trj() const {
  return this != internal_default_instance() && tar_trj_ != nullptr;
}
inline void PlanningResult_message::clear_tar_trj() {
  if (GetArenaNoVirtual() == nullptr && tar_trj_ != nullptr) {
    delete tar_trj_;
  }
  tar_trj_ = nullptr;
}
inline const ::phoenix::ad_data_upload::TarTrj_message& PlanningResult_message::tar_trj() const {
  const ::phoenix::ad_data_upload::TarTrj_message* p = tar_trj_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PlanningResult_message.tar_trj)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::TarTrj_message*>(
      &::phoenix::ad_data_upload::_TarTrj_message_default_instance_);
}
inline ::phoenix::ad_data_upload::TarTrj_message* PlanningResult_message::release_tar_trj() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PlanningResult_message.tar_trj)
  
  ::phoenix::ad_data_upload::TarTrj_message* temp = tar_trj_;
  tar_trj_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::TarTrj_message* PlanningResult_message::mutable_tar_trj() {
  
  if (tar_trj_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::TarTrj_message>(GetArenaNoVirtual());
    tar_trj_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PlanningResult_message.tar_trj)
  return tar_trj_;
}
inline void PlanningResult_message::set_allocated_tar_trj(::phoenix::ad_data_upload::TarTrj_message* tar_trj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tar_trj_;
  }
  if (tar_trj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tar_trj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tar_trj, submessage_arena);
    }
    
  } else {
    
  }
  tar_trj_ = tar_trj;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PlanningResult_message.tar_trj)
}

// -------------------------------------------------------------------

// TarPos_message

// float x = 1;
inline void TarPos_message::clear_x() {
  x_ = 0;
}
inline float TarPos_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarPos_message.x)
  return x_;
}
inline void TarPos_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarPos_message.x)
}

// float y = 2;
inline void TarPos_message::clear_y() {
  y_ = 0;
}
inline float TarPos_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarPos_message.y)
  return y_;
}
inline void TarPos_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarPos_message.y)
}

// float heading = 3;
inline void TarPos_message::clear_heading() {
  heading_ = 0;
}
inline float TarPos_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarPos_message.heading)
  return heading_;
}
inline void TarPos_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarPos_message.heading)
}

// float s = 4;
inline void TarPos_message::clear_s() {
  s_ = 0;
}
inline float TarPos_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarPos_message.s)
  return s_;
}
inline void TarPos_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarPos_message.s)
}

// -------------------------------------------------------------------

// TarObj_message

// bool valid = 1;
inline void TarObj_message::clear_valid() {
  valid_ = false;
}
inline bool TarObj_message::valid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.valid)
  return valid_;
}
inline void TarObj_message::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.valid)
}

// sint32 obj_dec_status = 2;
inline void TarObj_message::clear_obj_dec_status() {
  obj_dec_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TarObj_message::obj_dec_status() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.obj_dec_status)
  return obj_dec_status_;
}
inline void TarObj_message::set_obj_dec_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_dec_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.obj_dec_status)
}

// float dist_to_obj = 3;
inline void TarObj_message::clear_dist_to_obj() {
  dist_to_obj_ = 0;
}
inline float TarObj_message::dist_to_obj() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.dist_to_obj)
  return dist_to_obj_;
}
inline void TarObj_message::set_dist_to_obj(float value) {
  
  dist_to_obj_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.dist_to_obj)
}

// float time_gap = 4;
inline void TarObj_message::clear_time_gap() {
  time_gap_ = 0;
}
inline float TarObj_message::time_gap() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.time_gap)
  return time_gap_;
}
inline void TarObj_message::set_time_gap(float value) {
  
  time_gap_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.time_gap)
}

// float relative_v = 5;
inline void TarObj_message::clear_relative_v() {
  relative_v_ = 0;
}
inline float TarObj_message::relative_v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.relative_v)
  return relative_v_;
}
inline void TarObj_message::set_relative_v(float value) {
  
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.relative_v)
}

// float ttc = 6;
inline void TarObj_message::clear_ttc() {
  ttc_ = 0;
}
inline float TarObj_message::ttc() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.ttc)
  return ttc_;
}
inline void TarObj_message::set_ttc(float value) {
  
  ttc_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.ttc)
}

// float obj_v = 7;
inline void TarObj_message::clear_obj_v() {
  obj_v_ = 0;
}
inline float TarObj_message::obj_v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.obj_v)
  return obj_v_;
}
inline void TarObj_message::set_obj_v(float value) {
  
  obj_v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.obj_v)
}

// sint32 dist_gap_level = 8;
inline void TarObj_message::clear_dist_gap_level() {
  dist_gap_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TarObj_message::dist_gap_level() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.dist_gap_level)
  return dist_gap_level_;
}
inline void TarObj_message::set_dist_gap_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dist_gap_level_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.dist_gap_level)
}

// sint32 rel_spd_level = 9;
inline void TarObj_message::clear_rel_spd_level() {
  rel_spd_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TarObj_message::rel_spd_level() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TarObj_message.rel_spd_level)
  return rel_spd_level_;
}
inline void TarObj_message::set_rel_spd_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rel_spd_level_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TarObj_message.rel_spd_level)
}

// -------------------------------------------------------------------

// VelocityPlanningResult_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool VelocityPlanningResult_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void VelocityPlanningResult_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& VelocityPlanningResult_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* VelocityPlanningResult_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.VelocityPlanningResult_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* VelocityPlanningResult_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.VelocityPlanningResult_message.msg_head)
  return msg_head_;
}
inline void VelocityPlanningResult_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.VelocityPlanningResult_message.msg_head)
}

// sint32 tar_type = 2;
inline void VelocityPlanningResult_message::clear_tar_type() {
  tar_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VelocityPlanningResult_message::tar_type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_type)
  return tar_type_;
}
inline void VelocityPlanningResult_message::set_tar_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_type)
}

// float tar_v = 3;
inline void VelocityPlanningResult_message::clear_tar_v() {
  tar_v_ = 0;
}
inline float VelocityPlanningResult_message::tar_v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_v)
  return tar_v_;
}
inline void VelocityPlanningResult_message::set_tar_v(float value) {
  
  tar_v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_v)
}

// float tar_a = 4;
inline void VelocityPlanningResult_message::clear_tar_a() {
  tar_a_ = 0;
}
inline float VelocityPlanningResult_message::tar_a() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_a)
  return tar_a_;
}
inline void VelocityPlanningResult_message::set_tar_a(float value) {
  
  tar_a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_a)
}

// .phoenix.ad_data_upload.TarPos_message tar_pos = 5;
inline bool VelocityPlanningResult_message::has_tar_pos() const {
  return this != internal_default_instance() && tar_pos_ != nullptr;
}
inline void VelocityPlanningResult_message::clear_tar_pos() {
  if (GetArenaNoVirtual() == nullptr && tar_pos_ != nullptr) {
    delete tar_pos_;
  }
  tar_pos_ = nullptr;
}
inline const ::phoenix::ad_data_upload::TarPos_message& VelocityPlanningResult_message::tar_pos() const {
  const ::phoenix::ad_data_upload::TarPos_message* p = tar_pos_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::TarPos_message*>(
      &::phoenix::ad_data_upload::_TarPos_message_default_instance_);
}
inline ::phoenix::ad_data_upload::TarPos_message* VelocityPlanningResult_message::release_tar_pos() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_pos)
  
  ::phoenix::ad_data_upload::TarPos_message* temp = tar_pos_;
  tar_pos_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::TarPos_message* VelocityPlanningResult_message::mutable_tar_pos() {
  
  if (tar_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::TarPos_message>(GetArenaNoVirtual());
    tar_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_pos)
  return tar_pos_;
}
inline void VelocityPlanningResult_message::set_allocated_tar_pos(::phoenix::ad_data_upload::TarPos_message* tar_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tar_pos_;
  }
  if (tar_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tar_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tar_pos, submessage_arena);
    }
    
  } else {
    
  }
  tar_pos_ = tar_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_pos)
}

// bool release_throttle = 6;
inline void VelocityPlanningResult_message::clear_release_throttle() {
  release_throttle_ = false;
}
inline bool VelocityPlanningResult_message::release_throttle() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.release_throttle)
  return release_throttle_;
}
inline void VelocityPlanningResult_message::set_release_throttle(bool value) {
  
  release_throttle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.release_throttle)
}

// bool aeb_warning = 7;
inline void VelocityPlanningResult_message::clear_aeb_warning() {
  aeb_warning_ = false;
}
inline bool VelocityPlanningResult_message::aeb_warning() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.aeb_warning)
  return aeb_warning_;
}
inline void VelocityPlanningResult_message::set_aeb_warning(bool value) {
  
  aeb_warning_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.aeb_warning)
}

// bool aeb_action = 8;
inline void VelocityPlanningResult_message::clear_aeb_action() {
  aeb_action_ = false;
}
inline bool VelocityPlanningResult_message::aeb_action() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.aeb_action)
  return aeb_action_;
}
inline void VelocityPlanningResult_message::set_aeb_action(bool value) {
  
  aeb_action_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.VelocityPlanningResult_message.aeb_action)
}

// .phoenix.ad_data_upload.TarObj_message tar_obj = 9;
inline bool VelocityPlanningResult_message::has_tar_obj() const {
  return this != internal_default_instance() && tar_obj_ != nullptr;
}
inline void VelocityPlanningResult_message::clear_tar_obj() {
  if (GetArenaNoVirtual() == nullptr && tar_obj_ != nullptr) {
    delete tar_obj_;
  }
  tar_obj_ = nullptr;
}
inline const ::phoenix::ad_data_upload::TarObj_message& VelocityPlanningResult_message::tar_obj() const {
  const ::phoenix::ad_data_upload::TarObj_message* p = tar_obj_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_obj)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::TarObj_message*>(
      &::phoenix::ad_data_upload::_TarObj_message_default_instance_);
}
inline ::phoenix::ad_data_upload::TarObj_message* VelocityPlanningResult_message::release_tar_obj() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_obj)
  
  ::phoenix::ad_data_upload::TarObj_message* temp = tar_obj_;
  tar_obj_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::TarObj_message* VelocityPlanningResult_message::mutable_tar_obj() {
  
  if (tar_obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::TarObj_message>(GetArenaNoVirtual());
    tar_obj_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_obj)
  return tar_obj_;
}
inline void VelocityPlanningResult_message::set_allocated_tar_obj(::phoenix::ad_data_upload::TarObj_message* tar_obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tar_obj_;
  }
  if (tar_obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tar_obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tar_obj, submessage_arena);
    }
    
  } else {
    
  }
  tar_obj_ = tar_obj;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.VelocityPlanningResult_message.tar_obj)
}

// -------------------------------------------------------------------

// ReferenceLineInfo_message

// uint32 curve_count = 1;
inline void ReferenceLineInfo_message::clear_curve_count() {
  curve_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReferenceLineInfo_message::curve_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ReferenceLineInfo_message.curve_count)
  return curve_count_;
}
inline void ReferenceLineInfo_message::set_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  curve_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ReferenceLineInfo_message.curve_count)
}

// repeated .phoenix.ad_data_upload.PathPoint_message curve = 2;
inline int ReferenceLineInfo_message::curve_size() const {
  return curve_.size();
}
inline void ReferenceLineInfo_message::clear_curve() {
  curve_.Clear();
}
inline ::phoenix::ad_data_upload::PathPoint_message* ReferenceLineInfo_message::mutable_curve(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ReferenceLineInfo_message.curve)
  return curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
ReferenceLineInfo_message::mutable_curve() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.ReferenceLineInfo_message.curve)
  return &curve_;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& ReferenceLineInfo_message::curve(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ReferenceLineInfo_message.curve)
  return curve_.Get(index);
}
inline ::phoenix::ad_data_upload::PathPoint_message* ReferenceLineInfo_message::add_curve() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.ReferenceLineInfo_message.curve)
  return curve_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
ReferenceLineInfo_message::curve() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.ReferenceLineInfo_message.curve)
  return curve_;
}

// uint32 smooth_curve_count = 3;
inline void ReferenceLineInfo_message::clear_smooth_curve_count() {
  smooth_curve_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReferenceLineInfo_message::smooth_curve_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve_count)
  return smooth_curve_count_;
}
inline void ReferenceLineInfo_message::set_smooth_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  smooth_curve_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve_count)
}

// repeated .phoenix.ad_data_upload.PathPoint_message smooth_curve = 4;
inline int ReferenceLineInfo_message::smooth_curve_size() const {
  return smooth_curve_.size();
}
inline void ReferenceLineInfo_message::clear_smooth_curve() {
  smooth_curve_.Clear();
}
inline ::phoenix::ad_data_upload::PathPoint_message* ReferenceLineInfo_message::mutable_smooth_curve(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve)
  return smooth_curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
ReferenceLineInfo_message::mutable_smooth_curve() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve)
  return &smooth_curve_;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& ReferenceLineInfo_message::smooth_curve(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve)
  return smooth_curve_.Get(index);
}
inline ::phoenix::ad_data_upload::PathPoint_message* ReferenceLineInfo_message::add_smooth_curve() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve)
  return smooth_curve_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
ReferenceLineInfo_message::smooth_curve() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.ReferenceLineInfo_message.smooth_curve)
  return smooth_curve_;
}

// -------------------------------------------------------------------

// TrajectoryPoint_message

// .phoenix.ad_data_upload.PathPoint_message path_point_info = 1;
inline bool TrajectoryPoint_message::has_path_point_info() const {
  return this != internal_default_instance() && path_point_info_ != nullptr;
}
inline void TrajectoryPoint_message::clear_path_point_info() {
  if (GetArenaNoVirtual() == nullptr && path_point_info_ != nullptr) {
    delete path_point_info_;
  }
  path_point_info_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& TrajectoryPoint_message::path_point_info() const {
  const ::phoenix::ad_data_upload::PathPoint_message* p = path_point_info_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPoint_message.path_point_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PathPoint_message*>(
      &::phoenix::ad_data_upload::_PathPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PathPoint_message* TrajectoryPoint_message::release_path_point_info() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPoint_message.path_point_info)
  
  ::phoenix::ad_data_upload::PathPoint_message* temp = path_point_info_;
  path_point_info_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PathPoint_message* TrajectoryPoint_message::mutable_path_point_info() {
  
  if (path_point_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(GetArenaNoVirtual());
    path_point_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPoint_message.path_point_info)
  return path_point_info_;
}
inline void TrajectoryPoint_message::set_allocated_path_point_info(::phoenix::ad_data_upload::PathPoint_message* path_point_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_point_info_;
  }
  if (path_point_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_point_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_point_info, submessage_arena);
    }
    
  } else {
    
  }
  path_point_info_ = path_point_info;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPoint_message.path_point_info)
}

// float v = 2;
inline void TrajectoryPoint_message::clear_v() {
  v_ = 0;
}
inline float TrajectoryPoint_message::v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPoint_message.v)
  return v_;
}
inline void TrajectoryPoint_message::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPoint_message.v)
}

// float a = 3;
inline void TrajectoryPoint_message::clear_a() {
  a_ = 0;
}
inline float TrajectoryPoint_message::a() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPoint_message.a)
  return a_;
}
inline void TrajectoryPoint_message::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPoint_message.a)
}

// float yaw_rate = 4;
inline void TrajectoryPoint_message::clear_yaw_rate() {
  yaw_rate_ = 0;
}
inline float TrajectoryPoint_message::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPoint_message.yaw_rate)
  return yaw_rate_;
}
inline void TrajectoryPoint_message::set_yaw_rate(float value) {
  
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPoint_message.yaw_rate)
}

// float relative_time = 5;
inline void TrajectoryPoint_message::clear_relative_time() {
  relative_time_ = 0;
}
inline float TrajectoryPoint_message::relative_time() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPoint_message.relative_time)
  return relative_time_;
}
inline void TrajectoryPoint_message::set_relative_time(float value) {
  
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPoint_message.relative_time)
}

// -------------------------------------------------------------------

// ObjInfo_message

// sint32 obj_list_index = 1;
inline void ObjInfo_message::clear_obj_list_index() {
  obj_list_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjInfo_message::obj_list_index() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.obj_list_index)
  return obj_list_index_;
}
inline void ObjInfo_message::set_obj_list_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_list_index_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.obj_list_index)
}

// sint32 risk_value = 2;
inline void ObjInfo_message::clear_risk_value() {
  risk_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjInfo_message::risk_value() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.risk_value)
  return risk_value_;
}
inline void ObjInfo_message::set_risk_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  risk_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.risk_value)
}

// float dynamic_distance = 3;
inline void ObjInfo_message::clear_dynamic_distance() {
  dynamic_distance_ = 0;
}
inline float ObjInfo_message::dynamic_distance() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.dynamic_distance)
  return dynamic_distance_;
}
inline void ObjInfo_message::set_dynamic_distance(float value) {
  
  dynamic_distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.dynamic_distance)
}

// float static_distance = 4;
inline void ObjInfo_message::clear_static_distance() {
  static_distance_ = 0;
}
inline float ObjInfo_message::static_distance() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.static_distance)
  return static_distance_;
}
inline void ObjInfo_message::set_static_distance(float value) {
  
  static_distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.static_distance)
}

// float obj_s_ref = 5;
inline void ObjInfo_message::clear_obj_s_ref() {
  obj_s_ref_ = 0;
}
inline float ObjInfo_message::obj_s_ref() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.obj_s_ref)
  return obj_s_ref_;
}
inline void ObjInfo_message::set_obj_s_ref(float value) {
  
  obj_s_ref_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.obj_s_ref)
}

// float obj_l_ref = 6;
inline void ObjInfo_message::clear_obj_l_ref() {
  obj_l_ref_ = 0;
}
inline float ObjInfo_message::obj_l_ref() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.obj_l_ref)
  return obj_l_ref_;
}
inline void ObjInfo_message::set_obj_l_ref(float value) {
  
  obj_l_ref_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.obj_l_ref)
}

// float collision_s = 7;
inline void ObjInfo_message::clear_collision_s() {
  collision_s_ = 0;
}
inline float ObjInfo_message::collision_s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.collision_s)
  return collision_s_;
}
inline void ObjInfo_message::set_collision_s(float value) {
  
  collision_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObjInfo_message.collision_s)
}

// .phoenix.ad_data_upload.TrajectoryPoint_message obj_traj_point = 8;
inline bool ObjInfo_message::has_obj_traj_point() const {
  return this != internal_default_instance() && obj_traj_point_ != nullptr;
}
inline void ObjInfo_message::clear_obj_traj_point() {
  if (GetArenaNoVirtual() == nullptr && obj_traj_point_ != nullptr) {
    delete obj_traj_point_;
  }
  obj_traj_point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::TrajectoryPoint_message& ObjInfo_message::obj_traj_point() const {
  const ::phoenix::ad_data_upload::TrajectoryPoint_message* p = obj_traj_point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObjInfo_message.obj_traj_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::TrajectoryPoint_message*>(
      &::phoenix::ad_data_upload::_TrajectoryPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::TrajectoryPoint_message* ObjInfo_message::release_obj_traj_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ObjInfo_message.obj_traj_point)
  
  ::phoenix::ad_data_upload::TrajectoryPoint_message* temp = obj_traj_point_;
  obj_traj_point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::TrajectoryPoint_message* ObjInfo_message::mutable_obj_traj_point() {
  
  if (obj_traj_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::TrajectoryPoint_message>(GetArenaNoVirtual());
    obj_traj_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ObjInfo_message.obj_traj_point)
  return obj_traj_point_;
}
inline void ObjInfo_message::set_allocated_obj_traj_point(::phoenix::ad_data_upload::TrajectoryPoint_message* obj_traj_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obj_traj_point_;
  }
  if (obj_traj_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obj_traj_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj_traj_point, submessage_arena);
    }
    
  } else {
    
  }
  obj_traj_point_ = obj_traj_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ObjInfo_message.obj_traj_point)
}

// -------------------------------------------------------------------

// FollowingTarget_message

// bool valid = 1;
inline void FollowingTarget_message::clear_valid() {
  valid_ = false;
}
inline bool FollowingTarget_message::valid() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.FollowingTarget_message.valid)
  return valid_;
}
inline void FollowingTarget_message::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.FollowingTarget_message.valid)
}

// float obj_x = 2;
inline void FollowingTarget_message::clear_obj_x() {
  obj_x_ = 0;
}
inline float FollowingTarget_message::obj_x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.FollowingTarget_message.obj_x)
  return obj_x_;
}
inline void FollowingTarget_message::set_obj_x(float value) {
  
  obj_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.FollowingTarget_message.obj_x)
}

// float obj_y = 3;
inline void FollowingTarget_message::clear_obj_y() {
  obj_y_ = 0;
}
inline float FollowingTarget_message::obj_y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.FollowingTarget_message.obj_y)
  return obj_y_;
}
inline void FollowingTarget_message::set_obj_y(float value) {
  
  obj_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.FollowingTarget_message.obj_y)
}

// -------------------------------------------------------------------

// DrivingMapInfo_2_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool DrivingMapInfo_2_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void DrivingMapInfo_2_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& DrivingMapInfo_2_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* DrivingMapInfo_2_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo_2_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* DrivingMapInfo_2_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.msg_head)
  return msg_head_;
}
inline void DrivingMapInfo_2_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo_2_message.msg_head)
}

// .phoenix.ad_data_upload.PathPoint_message nearest_point_to_veh_on_lane = 2;
inline bool DrivingMapInfo_2_message::has_nearest_point_to_veh_on_lane() const {
  return this != internal_default_instance() && nearest_point_to_veh_on_lane_ != nullptr;
}
inline void DrivingMapInfo_2_message::clear_nearest_point_to_veh_on_lane() {
  if (GetArenaNoVirtual() == nullptr && nearest_point_to_veh_on_lane_ != nullptr) {
    delete nearest_point_to_veh_on_lane_;
  }
  nearest_point_to_veh_on_lane_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& DrivingMapInfo_2_message::nearest_point_to_veh_on_lane() const {
  const ::phoenix::ad_data_upload::PathPoint_message* p = nearest_point_to_veh_on_lane_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.nearest_point_to_veh_on_lane)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PathPoint_message*>(
      &::phoenix::ad_data_upload::_PathPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PathPoint_message* DrivingMapInfo_2_message::release_nearest_point_to_veh_on_lane() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo_2_message.nearest_point_to_veh_on_lane)
  
  ::phoenix::ad_data_upload::PathPoint_message* temp = nearest_point_to_veh_on_lane_;
  nearest_point_to_veh_on_lane_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PathPoint_message* DrivingMapInfo_2_message::mutable_nearest_point_to_veh_on_lane() {
  
  if (nearest_point_to_veh_on_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(GetArenaNoVirtual());
    nearest_point_to_veh_on_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.nearest_point_to_veh_on_lane)
  return nearest_point_to_veh_on_lane_;
}
inline void DrivingMapInfo_2_message::set_allocated_nearest_point_to_veh_on_lane(::phoenix::ad_data_upload::PathPoint_message* nearest_point_to_veh_on_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nearest_point_to_veh_on_lane_;
  }
  if (nearest_point_to_veh_on_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nearest_point_to_veh_on_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nearest_point_to_veh_on_lane, submessage_arena);
    }
    
  } else {
    
  }
  nearest_point_to_veh_on_lane_ = nearest_point_to_veh_on_lane;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo_2_message.nearest_point_to_veh_on_lane)
}

// sint32 current_reference_line_index = 3;
inline void DrivingMapInfo_2_message::clear_current_reference_line_index() {
  current_reference_line_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrivingMapInfo_2_message::current_reference_line_index() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.current_reference_line_index)
  return current_reference_line_index_;
}
inline void DrivingMapInfo_2_message::set_current_reference_line_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_reference_line_index_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_2_message.current_reference_line_index)
}

// uint32 reference_lines_count = 4;
inline void DrivingMapInfo_2_message::clear_reference_lines_count() {
  reference_lines_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrivingMapInfo_2_message::reference_lines_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines_count)
  return reference_lines_count_;
}
inline void DrivingMapInfo_2_message::set_reference_lines_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reference_lines_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines_count)
}

// repeated .phoenix.ad_data_upload.ReferenceLineInfo_message reference_lines = 5;
inline int DrivingMapInfo_2_message::reference_lines_size() const {
  return reference_lines_.size();
}
inline void DrivingMapInfo_2_message::clear_reference_lines() {
  reference_lines_.Clear();
}
inline ::phoenix::ad_data_upload::ReferenceLineInfo_message* DrivingMapInfo_2_message::mutable_reference_lines(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines)
  return reference_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ReferenceLineInfo_message >*
DrivingMapInfo_2_message::mutable_reference_lines() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines)
  return &reference_lines_;
}
inline const ::phoenix::ad_data_upload::ReferenceLineInfo_message& DrivingMapInfo_2_message::reference_lines(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines)
  return reference_lines_.Get(index);
}
inline ::phoenix::ad_data_upload::ReferenceLineInfo_message* DrivingMapInfo_2_message::add_reference_lines() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines)
  return reference_lines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ReferenceLineInfo_message >&
DrivingMapInfo_2_message::reference_lines() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.reference_lines)
  return reference_lines_;
}

// uint32 risky_obj_list_count = 6;
inline void DrivingMapInfo_2_message::clear_risky_obj_list_count() {
  risky_obj_list_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrivingMapInfo_2_message::risky_obj_list_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list_count)
  return risky_obj_list_count_;
}
inline void DrivingMapInfo_2_message::set_risky_obj_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  risky_obj_list_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list_count)
}

// repeated .phoenix.ad_data_upload.ObjInfo_message risky_obj_list = 7;
inline int DrivingMapInfo_2_message::risky_obj_list_size() const {
  return risky_obj_list_.size();
}
inline void DrivingMapInfo_2_message::clear_risky_obj_list() {
  risky_obj_list_.Clear();
}
inline ::phoenix::ad_data_upload::ObjInfo_message* DrivingMapInfo_2_message::mutable_risky_obj_list(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list)
  return risky_obj_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >*
DrivingMapInfo_2_message::mutable_risky_obj_list() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list)
  return &risky_obj_list_;
}
inline const ::phoenix::ad_data_upload::ObjInfo_message& DrivingMapInfo_2_message::risky_obj_list(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list)
  return risky_obj_list_.Get(index);
}
inline ::phoenix::ad_data_upload::ObjInfo_message* DrivingMapInfo_2_message::add_risky_obj_list() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list)
  return risky_obj_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >&
DrivingMapInfo_2_message::risky_obj_list() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.risky_obj_list)
  return risky_obj_list_;
}

// uint32 uncertain_list_count = 8;
inline void DrivingMapInfo_2_message::clear_uncertain_list_count() {
  uncertain_list_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrivingMapInfo_2_message::uncertain_list_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list_count)
  return uncertain_list_count_;
}
inline void DrivingMapInfo_2_message::set_uncertain_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uncertain_list_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list_count)
}

// repeated .phoenix.ad_data_upload.ObjInfo_message uncertain_list = 9;
inline int DrivingMapInfo_2_message::uncertain_list_size() const {
  return uncertain_list_.size();
}
inline void DrivingMapInfo_2_message::clear_uncertain_list() {
  uncertain_list_.Clear();
}
inline ::phoenix::ad_data_upload::ObjInfo_message* DrivingMapInfo_2_message::mutable_uncertain_list(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list)
  return uncertain_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >*
DrivingMapInfo_2_message::mutable_uncertain_list() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list)
  return &uncertain_list_;
}
inline const ::phoenix::ad_data_upload::ObjInfo_message& DrivingMapInfo_2_message::uncertain_list(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list)
  return uncertain_list_.Get(index);
}
inline ::phoenix::ad_data_upload::ObjInfo_message* DrivingMapInfo_2_message::add_uncertain_list() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list)
  return uncertain_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObjInfo_message >&
DrivingMapInfo_2_message::uncertain_list() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.DrivingMapInfo_2_message.uncertain_list)
  return uncertain_list_;
}

// .phoenix.ad_data_upload.FollowingTarget_message following_target = 10;
inline bool DrivingMapInfo_2_message::has_following_target() const {
  return this != internal_default_instance() && following_target_ != nullptr;
}
inline void DrivingMapInfo_2_message::clear_following_target() {
  if (GetArenaNoVirtual() == nullptr && following_target_ != nullptr) {
    delete following_target_;
  }
  following_target_ = nullptr;
}
inline const ::phoenix::ad_data_upload::FollowingTarget_message& DrivingMapInfo_2_message::following_target() const {
  const ::phoenix::ad_data_upload::FollowingTarget_message* p = following_target_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_2_message.following_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::FollowingTarget_message*>(
      &::phoenix::ad_data_upload::_FollowingTarget_message_default_instance_);
}
inline ::phoenix::ad_data_upload::FollowingTarget_message* DrivingMapInfo_2_message::release_following_target() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo_2_message.following_target)
  
  ::phoenix::ad_data_upload::FollowingTarget_message* temp = following_target_;
  following_target_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::FollowingTarget_message* DrivingMapInfo_2_message::mutable_following_target() {
  
  if (following_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::FollowingTarget_message>(GetArenaNoVirtual());
    following_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_2_message.following_target)
  return following_target_;
}
inline void DrivingMapInfo_2_message::set_allocated_following_target(::phoenix::ad_data_upload::FollowingTarget_message* following_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete following_target_;
  }
  if (following_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      following_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, following_target, submessage_arena);
    }
    
  } else {
    
  }
  following_target_ = following_target;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo_2_message.following_target)
}

// -------------------------------------------------------------------

// Behavior_Planning_Result_message

// .phoenix.ad_data_upload.ActionPlanningResult_message action_planning_result = 1;
inline bool Behavior_Planning_Result_message::has_action_planning_result() const {
  return this != internal_default_instance() && action_planning_result_ != nullptr;
}
inline void Behavior_Planning_Result_message::clear_action_planning_result() {
  if (GetArenaNoVirtual() == nullptr && action_planning_result_ != nullptr) {
    delete action_planning_result_;
  }
  action_planning_result_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ActionPlanningResult_message& Behavior_Planning_Result_message::action_planning_result() const {
  const ::phoenix::ad_data_upload::ActionPlanningResult_message* p = action_planning_result_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Behavior_Planning_Result_message.action_planning_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ActionPlanningResult_message*>(
      &::phoenix::ad_data_upload::_ActionPlanningResult_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ActionPlanningResult_message* Behavior_Planning_Result_message::release_action_planning_result() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Behavior_Planning_Result_message.action_planning_result)
  
  ::phoenix::ad_data_upload::ActionPlanningResult_message* temp = action_planning_result_;
  action_planning_result_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ActionPlanningResult_message* Behavior_Planning_Result_message::mutable_action_planning_result() {
  
  if (action_planning_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ActionPlanningResult_message>(GetArenaNoVirtual());
    action_planning_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Behavior_Planning_Result_message.action_planning_result)
  return action_planning_result_;
}
inline void Behavior_Planning_Result_message::set_allocated_action_planning_result(::phoenix::ad_data_upload::ActionPlanningResult_message* action_planning_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_planning_result_;
  }
  if (action_planning_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_planning_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_planning_result, submessage_arena);
    }
    
  } else {
    
  }
  action_planning_result_ = action_planning_result;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Behavior_Planning_Result_message.action_planning_result)
}

// -------------------------------------------------------------------

// Decision_Planning_Result_message

// .phoenix.ad_data_upload.PlanningResult_message planning_result = 1;
inline bool Decision_Planning_Result_message::has_planning_result() const {
  return this != internal_default_instance() && planning_result_ != nullptr;
}
inline void Decision_Planning_Result_message::clear_planning_result() {
  if (GetArenaNoVirtual() == nullptr && planning_result_ != nullptr) {
    delete planning_result_;
  }
  planning_result_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PlanningResult_message& Decision_Planning_Result_message::planning_result() const {
  const ::phoenix::ad_data_upload::PlanningResult_message* p = planning_result_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Decision_Planning_Result_message.planning_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PlanningResult_message*>(
      &::phoenix::ad_data_upload::_PlanningResult_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PlanningResult_message* Decision_Planning_Result_message::release_planning_result() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Decision_Planning_Result_message.planning_result)
  
  ::phoenix::ad_data_upload::PlanningResult_message* temp = planning_result_;
  planning_result_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PlanningResult_message* Decision_Planning_Result_message::mutable_planning_result() {
  
  if (planning_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PlanningResult_message>(GetArenaNoVirtual());
    planning_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Decision_Planning_Result_message.planning_result)
  return planning_result_;
}
inline void Decision_Planning_Result_message::set_allocated_planning_result(::phoenix::ad_data_upload::PlanningResult_message* planning_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete planning_result_;
  }
  if (planning_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planning_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_result, submessage_arena);
    }
    
  } else {
    
  }
  planning_result_ = planning_result;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Decision_Planning_Result_message.planning_result)
}

// -------------------------------------------------------------------

// Speed_Planning_Result_message

// .phoenix.ad_data_upload.VelocityPlanningResult_message velocity_planning_result = 1;
inline bool Speed_Planning_Result_message::has_velocity_planning_result() const {
  return this != internal_default_instance() && velocity_planning_result_ != nullptr;
}
inline void Speed_Planning_Result_message::clear_velocity_planning_result() {
  if (GetArenaNoVirtual() == nullptr && velocity_planning_result_ != nullptr) {
    delete velocity_planning_result_;
  }
  velocity_planning_result_ = nullptr;
}
inline const ::phoenix::ad_data_upload::VelocityPlanningResult_message& Speed_Planning_Result_message::velocity_planning_result() const {
  const ::phoenix::ad_data_upload::VelocityPlanningResult_message* p = velocity_planning_result_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Speed_Planning_Result_message.velocity_planning_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::VelocityPlanningResult_message*>(
      &::phoenix::ad_data_upload::_VelocityPlanningResult_message_default_instance_);
}
inline ::phoenix::ad_data_upload::VelocityPlanningResult_message* Speed_Planning_Result_message::release_velocity_planning_result() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Speed_Planning_Result_message.velocity_planning_result)
  
  ::phoenix::ad_data_upload::VelocityPlanningResult_message* temp = velocity_planning_result_;
  velocity_planning_result_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::VelocityPlanningResult_message* Speed_Planning_Result_message::mutable_velocity_planning_result() {
  
  if (velocity_planning_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::VelocityPlanningResult_message>(GetArenaNoVirtual());
    velocity_planning_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Speed_Planning_Result_message.velocity_planning_result)
  return velocity_planning_result_;
}
inline void Speed_Planning_Result_message::set_allocated_velocity_planning_result(::phoenix::ad_data_upload::VelocityPlanningResult_message* velocity_planning_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_planning_result_;
  }
  if (velocity_planning_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_planning_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_planning_result, submessage_arena);
    }
    
  } else {
    
  }
  velocity_planning_result_ = velocity_planning_result;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Speed_Planning_Result_message.velocity_planning_result)
}

// -------------------------------------------------------------------

// DrivingMapInfo2_message

// .phoenix.ad_data_upload.DrivingMapInfo_2_message driving_map_info_2 = 1;
inline bool DrivingMapInfo2_message::has_driving_map_info_2() const {
  return this != internal_default_instance() && driving_map_info_2_ != nullptr;
}
inline void DrivingMapInfo2_message::clear_driving_map_info_2() {
  if (GetArenaNoVirtual() == nullptr && driving_map_info_2_ != nullptr) {
    delete driving_map_info_2_;
  }
  driving_map_info_2_ = nullptr;
}
inline const ::phoenix::ad_data_upload::DrivingMapInfo_2_message& DrivingMapInfo2_message::driving_map_info_2() const {
  const ::phoenix::ad_data_upload::DrivingMapInfo_2_message* p = driving_map_info_2_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo2_message.driving_map_info_2)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::DrivingMapInfo_2_message*>(
      &::phoenix::ad_data_upload::_DrivingMapInfo_2_message_default_instance_);
}
inline ::phoenix::ad_data_upload::DrivingMapInfo_2_message* DrivingMapInfo2_message::release_driving_map_info_2() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo2_message.driving_map_info_2)
  
  ::phoenix::ad_data_upload::DrivingMapInfo_2_message* temp = driving_map_info_2_;
  driving_map_info_2_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::DrivingMapInfo_2_message* DrivingMapInfo2_message::mutable_driving_map_info_2() {
  
  if (driving_map_info_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo_2_message>(GetArenaNoVirtual());
    driving_map_info_2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo2_message.driving_map_info_2)
  return driving_map_info_2_;
}
inline void DrivingMapInfo2_message::set_allocated_driving_map_info_2(::phoenix::ad_data_upload::DrivingMapInfo_2_message* driving_map_info_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete driving_map_info_2_;
  }
  if (driving_map_info_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      driving_map_info_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driving_map_info_2, submessage_arena);
    }
    
  } else {
    
  }
  driving_map_info_2_ = driving_map_info_2;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo2_message.driving_map_info_2)
}

// -------------------------------------------------------------------

// Spd_Pln_Display_Data_message

// .phoenix.ad_data_upload.Behavior_Planning_Result_message behavior_planning_result_info = 1;
inline bool Spd_Pln_Display_Data_message::has_behavior_planning_result_info() const {
  return this != internal_default_instance() && behavior_planning_result_info_ != nullptr;
}
inline void Spd_Pln_Display_Data_message::clear_behavior_planning_result_info() {
  if (GetArenaNoVirtual() == nullptr && behavior_planning_result_info_ != nullptr) {
    delete behavior_planning_result_info_;
  }
  behavior_planning_result_info_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Behavior_Planning_Result_message& Spd_Pln_Display_Data_message::behavior_planning_result_info() const {
  const ::phoenix::ad_data_upload::Behavior_Planning_Result_message* p = behavior_planning_result_info_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.behavior_planning_result_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Behavior_Planning_Result_message*>(
      &::phoenix::ad_data_upload::_Behavior_Planning_Result_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Behavior_Planning_Result_message* Spd_Pln_Display_Data_message::release_behavior_planning_result_info() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.behavior_planning_result_info)
  
  ::phoenix::ad_data_upload::Behavior_Planning_Result_message* temp = behavior_planning_result_info_;
  behavior_planning_result_info_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Behavior_Planning_Result_message* Spd_Pln_Display_Data_message::mutable_behavior_planning_result_info() {
  
  if (behavior_planning_result_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Behavior_Planning_Result_message>(GetArenaNoVirtual());
    behavior_planning_result_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.behavior_planning_result_info)
  return behavior_planning_result_info_;
}
inline void Spd_Pln_Display_Data_message::set_allocated_behavior_planning_result_info(::phoenix::ad_data_upload::Behavior_Planning_Result_message* behavior_planning_result_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete behavior_planning_result_info_;
  }
  if (behavior_planning_result_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      behavior_planning_result_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behavior_planning_result_info, submessage_arena);
    }
    
  } else {
    
  }
  behavior_planning_result_info_ = behavior_planning_result_info;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.behavior_planning_result_info)
}

// .phoenix.ad_data_upload.Decision_Planning_Result_message decision_planning_result_info = 2;
inline bool Spd_Pln_Display_Data_message::has_decision_planning_result_info() const {
  return this != internal_default_instance() && decision_planning_result_info_ != nullptr;
}
inline void Spd_Pln_Display_Data_message::clear_decision_planning_result_info() {
  if (GetArenaNoVirtual() == nullptr && decision_planning_result_info_ != nullptr) {
    delete decision_planning_result_info_;
  }
  decision_planning_result_info_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Decision_Planning_Result_message& Spd_Pln_Display_Data_message::decision_planning_result_info() const {
  const ::phoenix::ad_data_upload::Decision_Planning_Result_message* p = decision_planning_result_info_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.decision_planning_result_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Decision_Planning_Result_message*>(
      &::phoenix::ad_data_upload::_Decision_Planning_Result_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Decision_Planning_Result_message* Spd_Pln_Display_Data_message::release_decision_planning_result_info() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.decision_planning_result_info)
  
  ::phoenix::ad_data_upload::Decision_Planning_Result_message* temp = decision_planning_result_info_;
  decision_planning_result_info_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Decision_Planning_Result_message* Spd_Pln_Display_Data_message::mutable_decision_planning_result_info() {
  
  if (decision_planning_result_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Decision_Planning_Result_message>(GetArenaNoVirtual());
    decision_planning_result_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.decision_planning_result_info)
  return decision_planning_result_info_;
}
inline void Spd_Pln_Display_Data_message::set_allocated_decision_planning_result_info(::phoenix::ad_data_upload::Decision_Planning_Result_message* decision_planning_result_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete decision_planning_result_info_;
  }
  if (decision_planning_result_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decision_planning_result_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_planning_result_info, submessage_arena);
    }
    
  } else {
    
  }
  decision_planning_result_info_ = decision_planning_result_info;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.decision_planning_result_info)
}

// .phoenix.ad_data_upload.Speed_Planning_Result_message speed_planning_result_info = 3;
inline bool Spd_Pln_Display_Data_message::has_speed_planning_result_info() const {
  return this != internal_default_instance() && speed_planning_result_info_ != nullptr;
}
inline void Spd_Pln_Display_Data_message::clear_speed_planning_result_info() {
  if (GetArenaNoVirtual() == nullptr && speed_planning_result_info_ != nullptr) {
    delete speed_planning_result_info_;
  }
  speed_planning_result_info_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Speed_Planning_Result_message& Spd_Pln_Display_Data_message::speed_planning_result_info() const {
  const ::phoenix::ad_data_upload::Speed_Planning_Result_message* p = speed_planning_result_info_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.speed_planning_result_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Speed_Planning_Result_message*>(
      &::phoenix::ad_data_upload::_Speed_Planning_Result_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Speed_Planning_Result_message* Spd_Pln_Display_Data_message::release_speed_planning_result_info() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.speed_planning_result_info)
  
  ::phoenix::ad_data_upload::Speed_Planning_Result_message* temp = speed_planning_result_info_;
  speed_planning_result_info_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Speed_Planning_Result_message* Spd_Pln_Display_Data_message::mutable_speed_planning_result_info() {
  
  if (speed_planning_result_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Speed_Planning_Result_message>(GetArenaNoVirtual());
    speed_planning_result_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.speed_planning_result_info)
  return speed_planning_result_info_;
}
inline void Spd_Pln_Display_Data_message::set_allocated_speed_planning_result_info(::phoenix::ad_data_upload::Speed_Planning_Result_message* speed_planning_result_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speed_planning_result_info_;
  }
  if (speed_planning_result_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_planning_result_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_planning_result_info, submessage_arena);
    }
    
  } else {
    
  }
  speed_planning_result_info_ = speed_planning_result_info;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.speed_planning_result_info)
}

// .phoenix.ad_data_upload.DrivingMapInfo2_message driving_map_info_2 = 4;
inline bool Spd_Pln_Display_Data_message::has_driving_map_info_2() const {
  return this != internal_default_instance() && driving_map_info_2_ != nullptr;
}
inline void Spd_Pln_Display_Data_message::clear_driving_map_info_2() {
  if (GetArenaNoVirtual() == nullptr && driving_map_info_2_ != nullptr) {
    delete driving_map_info_2_;
  }
  driving_map_info_2_ = nullptr;
}
inline const ::phoenix::ad_data_upload::DrivingMapInfo2_message& Spd_Pln_Display_Data_message::driving_map_info_2() const {
  const ::phoenix::ad_data_upload::DrivingMapInfo2_message* p = driving_map_info_2_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.driving_map_info_2)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::DrivingMapInfo2_message*>(
      &::phoenix::ad_data_upload::_DrivingMapInfo2_message_default_instance_);
}
inline ::phoenix::ad_data_upload::DrivingMapInfo2_message* Spd_Pln_Display_Data_message::release_driving_map_info_2() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.driving_map_info_2)
  
  ::phoenix::ad_data_upload::DrivingMapInfo2_message* temp = driving_map_info_2_;
  driving_map_info_2_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::DrivingMapInfo2_message* Spd_Pln_Display_Data_message::mutable_driving_map_info_2() {
  
  if (driving_map_info_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo2_message>(GetArenaNoVirtual());
    driving_map_info_2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.driving_map_info_2)
  return driving_map_info_2_;
}
inline void Spd_Pln_Display_Data_message::set_allocated_driving_map_info_2(::phoenix::ad_data_upload::DrivingMapInfo2_message* driving_map_info_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete driving_map_info_2_;
  }
  if (driving_map_info_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      driving_map_info_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driving_map_info_2, submessage_arena);
    }
    
  } else {
    
  }
  driving_map_info_2_ = driving_map_info_2;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Spd_Pln_Display_Data_message.driving_map_info_2)
}

// -------------------------------------------------------------------

// Pos_message

// float x = 1;
inline void Pos_message::clear_x() {
  x_ = 0;
}
inline float Pos_message::x() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.x)
  return x_;
}
inline void Pos_message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.x)
}

// float y = 2;
inline void Pos_message::clear_y() {
  y_ = 0;
}
inline float Pos_message::y() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.y)
  return y_;
}
inline void Pos_message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.y)
}

// float heading = 3;
inline void Pos_message::clear_heading() {
  heading_ = 0;
}
inline float Pos_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.heading)
  return heading_;
}
inline void Pos_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.heading)
}

// float curvature = 4;
inline void Pos_message::clear_curvature() {
  curvature_ = 0;
}
inline float Pos_message::curvature() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.curvature)
  return curvature_;
}
inline void Pos_message::set_curvature(float value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.curvature)
}

// float s = 5;
inline void Pos_message::clear_s() {
  s_ = 0;
}
inline float Pos_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.s)
  return s_;
}
inline void Pos_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.s)
}

// float l = 6;
inline void Pos_message::clear_l() {
  l_ = 0;
}
inline float Pos_message::l() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Pos_message.l)
  return l_;
}
inline void Pos_message::set_l(float value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Pos_message.l)
}

// -------------------------------------------------------------------

// Sample_message

// float lat_err = 1;
inline void Sample_message::clear_lat_err() {
  lat_err_ = 0;
}
inline float Sample_message::lat_err() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Sample_message.lat_err)
  return lat_err_;
}
inline void Sample_message::set_lat_err(float value) {
  
  lat_err_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Sample_message.lat_err)
}

// float lat_err_chg_rate = 2;
inline void Sample_message::clear_lat_err_chg_rate() {
  lat_err_chg_rate_ = 0;
}
inline float Sample_message::lat_err_chg_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Sample_message.lat_err_chg_rate)
  return lat_err_chg_rate_;
}
inline void Sample_message::set_lat_err_chg_rate(float value) {
  
  lat_err_chg_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Sample_message.lat_err_chg_rate)
}

// float yaw_err = 3;
inline void Sample_message::clear_yaw_err() {
  yaw_err_ = 0;
}
inline float Sample_message::yaw_err() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Sample_message.yaw_err)
  return yaw_err_;
}
inline void Sample_message::set_yaw_err(float value) {
  
  yaw_err_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Sample_message.yaw_err)
}

// float yaw_err_chg_rate = 4;
inline void Sample_message::clear_yaw_err_chg_rate() {
  yaw_err_chg_rate_ = 0;
}
inline float Sample_message::yaw_err_chg_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Sample_message.yaw_err_chg_rate)
  return yaw_err_chg_rate_;
}
inline void Sample_message::set_yaw_err_chg_rate(float value) {
  
  yaw_err_chg_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Sample_message.yaw_err_chg_rate)
}

// -------------------------------------------------------------------

// Lat_Err_message

// sint32 moving_flag = 1;
inline void Lat_Err_message::clear_moving_flag() {
  moving_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_Err_message::moving_flag() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Lat_Err_message.moving_flag)
  return moving_flag_;
}
inline void Lat_Err_message::set_moving_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moving_flag_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Lat_Err_message.moving_flag)
}

// repeated .phoenix.ad_data_upload.Sample_message samples = 2;
inline int Lat_Err_message::samples_size() const {
  return samples_.size();
}
inline void Lat_Err_message::clear_samples() {
  samples_.Clear();
}
inline ::phoenix::ad_data_upload::Sample_message* Lat_Err_message::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Lat_Err_message.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Sample_message >*
Lat_Err_message::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Lat_Err_message.samples)
  return &samples_;
}
inline const ::phoenix::ad_data_upload::Sample_message& Lat_Err_message::samples(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Lat_Err_message.samples)
  return samples_.Get(index);
}
inline ::phoenix::ad_data_upload::Sample_message* Lat_Err_message::add_samples() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Lat_Err_message.samples)
  return samples_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Sample_message >&
Lat_Err_message::samples() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Lat_Err_message.samples)
  return samples_;
}

// -------------------------------------------------------------------

// EventChangingLaneRsp_message

// sint32 id = 1;
inline void EventChangingLaneRsp_message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneRsp_message::id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneRsp_message.id)
  return id_;
}
inline void EventChangingLaneRsp_message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneRsp_message.id)
}

// sint32 response_ = 2;
inline void EventChangingLaneRsp_message::clear_response_() {
  response__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneRsp_message::response_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneRsp_message.response_)
  return response__;
}
inline void EventChangingLaneRsp_message::set_response_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneRsp_message.response_)
}

// sint32 requset_sequence_ = 3;
inline void EventChangingLaneRsp_message::clear_requset_sequence_() {
  requset_sequence__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneRsp_message::requset_sequence_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneRsp_message.requset_sequence_)
  return requset_sequence__;
}
inline void EventChangingLaneRsp_message::set_requset_sequence_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requset_sequence__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneRsp_message.requset_sequence_)
}

// sint32 status_ = 4;
inline void EventChangingLaneRsp_message::clear_status_() {
  status__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventChangingLaneRsp_message::status_() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.EventChangingLaneRsp_message.status_)
  return status__;
}
inline void EventChangingLaneRsp_message::set_status_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status__ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.EventChangingLaneRsp_message.status_)
}

// -------------------------------------------------------------------

// Trj_Change_message

// bool is_changing = 1;
inline void Trj_Change_message::clear_is_changing() {
  is_changing_ = false;
}
inline bool Trj_Change_message::is_changing() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Trj_Change_message.is_changing)
  return is_changing_;
}
inline void Trj_Change_message::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Trj_Change_message.is_changing)
}

// float lat_offset = 2;
inline void Trj_Change_message::clear_lat_offset() {
  lat_offset_ = 0;
}
inline float Trj_Change_message::lat_offset() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Trj_Change_message.lat_offset)
  return lat_offset_;
}
inline void Trj_Change_message::set_lat_offset(float value) {
  
  lat_offset_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Trj_Change_message.lat_offset)
}

// uint32 changed_trajectory_count = 3;
inline void Trj_Change_message::clear_changed_trajectory_count() {
  changed_trajectory_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trj_Change_message::changed_trajectory_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory_count)
  return changed_trajectory_count_;
}
inline void Trj_Change_message::set_changed_trajectory_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  changed_trajectory_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory_count)
}

// repeated .phoenix.ad_data_upload.PathPoint_message changed_trajectory = 4;
inline int Trj_Change_message::changed_trajectory_size() const {
  return changed_trajectory_.size();
}
inline void Trj_Change_message::clear_changed_trajectory() {
  changed_trajectory_.Clear();
}
inline ::phoenix::ad_data_upload::PathPoint_message* Trj_Change_message::mutable_changed_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory)
  return changed_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
Trj_Change_message::mutable_changed_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory)
  return &changed_trajectory_;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& Trj_Change_message::changed_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory)
  return changed_trajectory_.Get(index);
}
inline ::phoenix::ad_data_upload::PathPoint_message* Trj_Change_message::add_changed_trajectory() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory)
  return changed_trajectory_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
Trj_Change_message::changed_trajectory() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Trj_Change_message.changed_trajectory)
  return changed_trajectory_;
}

// -------------------------------------------------------------------

// TrajectoryPlanningResult_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool TrajectoryPlanningResult_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& TrajectoryPlanningResult_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* TrajectoryPlanningResult_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* TrajectoryPlanningResult_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.msg_head)
  return msg_head_;
}
inline void TrajectoryPlanningResult_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.msg_head)
}

// .phoenix.ad_data_upload.Pos_message curr_pos = 2;
inline bool TrajectoryPlanningResult_message::has_curr_pos() const {
  return this != internal_default_instance() && curr_pos_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_curr_pos() {
  if (GetArenaNoVirtual() == nullptr && curr_pos_ != nullptr) {
    delete curr_pos_;
  }
  curr_pos_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Pos_message& TrajectoryPlanningResult_message::curr_pos() const {
  const ::phoenix::ad_data_upload::Pos_message* p = curr_pos_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.curr_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Pos_message*>(
      &::phoenix::ad_data_upload::_Pos_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Pos_message* TrajectoryPlanningResult_message::release_curr_pos() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.curr_pos)
  
  ::phoenix::ad_data_upload::Pos_message* temp = curr_pos_;
  curr_pos_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Pos_message* TrajectoryPlanningResult_message::mutable_curr_pos() {
  
  if (curr_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Pos_message>(GetArenaNoVirtual());
    curr_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.curr_pos)
  return curr_pos_;
}
inline void TrajectoryPlanningResult_message::set_allocated_curr_pos(::phoenix::ad_data_upload::Pos_message* curr_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curr_pos_;
  }
  if (curr_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curr_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_pos, submessage_arena);
    }
    
  } else {
    
  }
  curr_pos_ = curr_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.curr_pos)
}

// .phoenix.ad_data_upload.Pos_message leading_pos = 3;
inline bool TrajectoryPlanningResult_message::has_leading_pos() const {
  return this != internal_default_instance() && leading_pos_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_leading_pos() {
  if (GetArenaNoVirtual() == nullptr && leading_pos_ != nullptr) {
    delete leading_pos_;
  }
  leading_pos_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Pos_message& TrajectoryPlanningResult_message::leading_pos() const {
  const ::phoenix::ad_data_upload::Pos_message* p = leading_pos_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.leading_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Pos_message*>(
      &::phoenix::ad_data_upload::_Pos_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Pos_message* TrajectoryPlanningResult_message::release_leading_pos() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.leading_pos)
  
  ::phoenix::ad_data_upload::Pos_message* temp = leading_pos_;
  leading_pos_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Pos_message* TrajectoryPlanningResult_message::mutable_leading_pos() {
  
  if (leading_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Pos_message>(GetArenaNoVirtual());
    leading_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.leading_pos)
  return leading_pos_;
}
inline void TrajectoryPlanningResult_message::set_allocated_leading_pos(::phoenix::ad_data_upload::Pos_message* leading_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete leading_pos_;
  }
  if (leading_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leading_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leading_pos, submessage_arena);
    }
    
  } else {
    
  }
  leading_pos_ = leading_pos;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.leading_pos)
}

// .phoenix.ad_data_upload.Lat_Err_message lat_err = 4;
inline bool TrajectoryPlanningResult_message::has_lat_err() const {
  return this != internal_default_instance() && lat_err_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_lat_err() {
  if (GetArenaNoVirtual() == nullptr && lat_err_ != nullptr) {
    delete lat_err_;
  }
  lat_err_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Lat_Err_message& TrajectoryPlanningResult_message::lat_err() const {
  const ::phoenix::ad_data_upload::Lat_Err_message* p = lat_err_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.lat_err)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Lat_Err_message*>(
      &::phoenix::ad_data_upload::_Lat_Err_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Lat_Err_message* TrajectoryPlanningResult_message::release_lat_err() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.lat_err)
  
  ::phoenix::ad_data_upload::Lat_Err_message* temp = lat_err_;
  lat_err_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Lat_Err_message* TrajectoryPlanningResult_message::mutable_lat_err() {
  
  if (lat_err_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Lat_Err_message>(GetArenaNoVirtual());
    lat_err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.lat_err)
  return lat_err_;
}
inline void TrajectoryPlanningResult_message::set_allocated_lat_err(::phoenix::ad_data_upload::Lat_Err_message* lat_err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lat_err_;
  }
  if (lat_err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err, submessage_arena);
    }
    
  } else {
    
  }
  lat_err_ = lat_err;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.lat_err)
}

// sint32 trj_direction = 5;
inline void TrajectoryPlanningResult_message::clear_trj_direction() {
  trj_direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajectoryPlanningResult_message::trj_direction() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_direction)
  return trj_direction_;
}
inline void TrajectoryPlanningResult_message::set_trj_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trj_direction_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_direction)
}

// uint32 target_trajectory_sample_points_count = 6;
inline void TrajectoryPlanningResult_message::clear_target_trajectory_sample_points_count() {
  target_trajectory_sample_points_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryPlanningResult_message::target_trajectory_sample_points_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points_count)
  return target_trajectory_sample_points_count_;
}
inline void TrajectoryPlanningResult_message::set_target_trajectory_sample_points_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_trajectory_sample_points_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points_count)
}

// repeated .phoenix.ad_data_upload.PathPoint_message target_trajectory_sample_points = 7;
inline int TrajectoryPlanningResult_message::target_trajectory_sample_points_size() const {
  return target_trajectory_sample_points_.size();
}
inline void TrajectoryPlanningResult_message::clear_target_trajectory_sample_points() {
  target_trajectory_sample_points_.Clear();
}
inline ::phoenix::ad_data_upload::PathPoint_message* TrajectoryPlanningResult_message::mutable_target_trajectory_sample_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points)
  return target_trajectory_sample_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >*
TrajectoryPlanningResult_message::mutable_target_trajectory_sample_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points)
  return &target_trajectory_sample_points_;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& TrajectoryPlanningResult_message::target_trajectory_sample_points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points)
  return target_trajectory_sample_points_.Get(index);
}
inline ::phoenix::ad_data_upload::PathPoint_message* TrajectoryPlanningResult_message::add_target_trajectory_sample_points() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points)
  return target_trajectory_sample_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::PathPoint_message >&
TrajectoryPlanningResult_message::target_trajectory_sample_points() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.TrajectoryPlanningResult_message.target_trajectory_sample_points)
  return target_trajectory_sample_points_;
}

// .phoenix.ad_data_upload.Trj_Change_message trj_changing = 8;
inline bool TrajectoryPlanningResult_message::has_trj_changing() const {
  return this != internal_default_instance() && trj_changing_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_trj_changing() {
  if (GetArenaNoVirtual() == nullptr && trj_changing_ != nullptr) {
    delete trj_changing_;
  }
  trj_changing_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Trj_Change_message& TrajectoryPlanningResult_message::trj_changing() const {
  const ::phoenix::ad_data_upload::Trj_Change_message* p = trj_changing_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_changing)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Trj_Change_message*>(
      &::phoenix::ad_data_upload::_Trj_Change_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Trj_Change_message* TrajectoryPlanningResult_message::release_trj_changing() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_changing)
  
  ::phoenix::ad_data_upload::Trj_Change_message* temp = trj_changing_;
  trj_changing_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Trj_Change_message* TrajectoryPlanningResult_message::mutable_trj_changing() {
  
  if (trj_changing_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Trj_Change_message>(GetArenaNoVirtual());
    trj_changing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_changing)
  return trj_changing_;
}
inline void TrajectoryPlanningResult_message::set_allocated_trj_changing(::phoenix::ad_data_upload::Trj_Change_message* trj_changing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trj_changing_;
  }
  if (trj_changing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trj_changing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trj_changing, submessage_arena);
    }
    
  } else {
    
  }
  trj_changing_ = trj_changing;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.trj_changing)
}

// bool hold_steering_wheel = 9;
inline void TrajectoryPlanningResult_message::clear_hold_steering_wheel() {
  hold_steering_wheel_ = false;
}
inline bool TrajectoryPlanningResult_message::hold_steering_wheel() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.hold_steering_wheel)
  return hold_steering_wheel_;
}
inline void TrajectoryPlanningResult_message::set_hold_steering_wheel(bool value) {
  
  hold_steering_wheel_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.TrajectoryPlanningResult_message.hold_steering_wheel)
}

// .phoenix.ad_data_upload.EventChangingLaneReq_message changing_lane_req = 10;
inline bool TrajectoryPlanningResult_message::has_changing_lane_req() const {
  return this != internal_default_instance() && changing_lane_req_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_changing_lane_req() {
  if (GetArenaNoVirtual() == nullptr && changing_lane_req_ != nullptr) {
    delete changing_lane_req_;
  }
  changing_lane_req_ = nullptr;
}
inline const ::phoenix::ad_data_upload::EventChangingLaneReq_message& TrajectoryPlanningResult_message::changing_lane_req() const {
  const ::phoenix::ad_data_upload::EventChangingLaneReq_message* p = changing_lane_req_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::EventChangingLaneReq_message*>(
      &::phoenix::ad_data_upload::_EventChangingLaneReq_message_default_instance_);
}
inline ::phoenix::ad_data_upload::EventChangingLaneReq_message* TrajectoryPlanningResult_message::release_changing_lane_req() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_req)
  
  ::phoenix::ad_data_upload::EventChangingLaneReq_message* temp = changing_lane_req_;
  changing_lane_req_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::EventChangingLaneReq_message* TrajectoryPlanningResult_message::mutable_changing_lane_req() {
  
  if (changing_lane_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::EventChangingLaneReq_message>(GetArenaNoVirtual());
    changing_lane_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_req)
  return changing_lane_req_;
}
inline void TrajectoryPlanningResult_message::set_allocated_changing_lane_req(::phoenix::ad_data_upload::EventChangingLaneReq_message* changing_lane_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete changing_lane_req_;
  }
  if (changing_lane_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changing_lane_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changing_lane_req, submessage_arena);
    }
    
  } else {
    
  }
  changing_lane_req_ = changing_lane_req;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_req)
}

// .phoenix.ad_data_upload.EventChangingLaneRsp_message changing_lane_rsp = 11;
inline bool TrajectoryPlanningResult_message::has_changing_lane_rsp() const {
  return this != internal_default_instance() && changing_lane_rsp_ != nullptr;
}
inline void TrajectoryPlanningResult_message::clear_changing_lane_rsp() {
  if (GetArenaNoVirtual() == nullptr && changing_lane_rsp_ != nullptr) {
    delete changing_lane_rsp_;
  }
  changing_lane_rsp_ = nullptr;
}
inline const ::phoenix::ad_data_upload::EventChangingLaneRsp_message& TrajectoryPlanningResult_message::changing_lane_rsp() const {
  const ::phoenix::ad_data_upload::EventChangingLaneRsp_message* p = changing_lane_rsp_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_rsp)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::EventChangingLaneRsp_message*>(
      &::phoenix::ad_data_upload::_EventChangingLaneRsp_message_default_instance_);
}
inline ::phoenix::ad_data_upload::EventChangingLaneRsp_message* TrajectoryPlanningResult_message::release_changing_lane_rsp() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_rsp)
  
  ::phoenix::ad_data_upload::EventChangingLaneRsp_message* temp = changing_lane_rsp_;
  changing_lane_rsp_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::EventChangingLaneRsp_message* TrajectoryPlanningResult_message::mutable_changing_lane_rsp() {
  
  if (changing_lane_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::EventChangingLaneRsp_message>(GetArenaNoVirtual());
    changing_lane_rsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_rsp)
  return changing_lane_rsp_;
}
inline void TrajectoryPlanningResult_message::set_allocated_changing_lane_rsp(::phoenix::ad_data_upload::EventChangingLaneRsp_message* changing_lane_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete changing_lane_rsp_;
  }
  if (changing_lane_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changing_lane_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changing_lane_rsp, submessage_arena);
    }
    
  } else {
    
  }
  changing_lane_rsp_ = changing_lane_rsp;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.TrajectoryPlanningResult_message.changing_lane_rsp)
}

// -------------------------------------------------------------------

// BoundaryAssociation_message

// float s = 1;
inline void BoundaryAssociation_message::clear_s() {
  s_ = 0;
}
inline float BoundaryAssociation_message::s() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.BoundaryAssociation_message.s)
  return s_;
}
inline void BoundaryAssociation_message::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.BoundaryAssociation_message.s)
}

// float width = 2;
inline void BoundaryAssociation_message::clear_width() {
  width_ = 0;
}
inline float BoundaryAssociation_message::width() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.BoundaryAssociation_message.width)
  return width_;
}
inline void BoundaryAssociation_message::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.BoundaryAssociation_message.width)
}

// sint32 type = 3;
inline void BoundaryAssociation_message::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundaryAssociation_message::type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.BoundaryAssociation_message.type)
  return type_;
}
inline void BoundaryAssociation_message::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.BoundaryAssociation_message.type)
}

// .phoenix.ad_data_upload.Vec2d_message point = 4;
inline bool BoundaryAssociation_message::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline void BoundaryAssociation_message::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& BoundaryAssociation_message::point() const {
  const ::phoenix::ad_data_upload::Vec2d_message* p = point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.BoundaryAssociation_message.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Vec2d_message*>(
      &::phoenix::ad_data_upload::_Vec2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Vec2d_message* BoundaryAssociation_message::release_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.BoundaryAssociation_message.point)
  
  ::phoenix::ad_data_upload::Vec2d_message* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Vec2d_message* BoundaryAssociation_message::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Vec2d_message>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.BoundaryAssociation_message.point)
  return point_;
}
inline void BoundaryAssociation_message::set_allocated_point(::phoenix::ad_data_upload::Vec2d_message* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.BoundaryAssociation_message.point)
}

// -------------------------------------------------------------------

// Boundary_message

// uint32 curve_count = 1;
inline void Boundary_message::clear_curve_count() {
  curve_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Boundary_message::curve_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Boundary_message.curve_count)
  return curve_count_;
}
inline void Boundary_message::set_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  curve_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.Boundary_message.curve_count)
}

// repeated .phoenix.ad_data_upload.BoundaryAssociation_message curve = 2;
inline int Boundary_message::curve_size() const {
  return curve_.size();
}
inline void Boundary_message::clear_curve() {
  curve_.Clear();
}
inline ::phoenix::ad_data_upload::BoundaryAssociation_message* Boundary_message::mutable_curve(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Boundary_message.curve)
  return curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::BoundaryAssociation_message >*
Boundary_message::mutable_curve() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.Boundary_message.curve)
  return &curve_;
}
inline const ::phoenix::ad_data_upload::BoundaryAssociation_message& Boundary_message::curve(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Boundary_message.curve)
  return curve_.Get(index);
}
inline ::phoenix::ad_data_upload::BoundaryAssociation_message* Boundary_message::add_curve() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.Boundary_message.curve)
  return curve_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::BoundaryAssociation_message >&
Boundary_message::curve() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.Boundary_message.curve)
  return curve_;
}

// -------------------------------------------------------------------

// ID_message

// sint32 id = 1;
inline void ID_message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ID_message::id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ID_message.id)
  return id_;
}
inline void ID_message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ID_message.id)
}

// -------------------------------------------------------------------

// LaneInfo_message

// .phoenix.ad_data_upload.ID_message lane_id = 1;
inline bool LaneInfo_message::has_lane_id() const {
  return this != internal_default_instance() && lane_id_ != nullptr;
}
inline void LaneInfo_message::clear_lane_id() {
  if (GetArenaNoVirtual() == nullptr && lane_id_ != nullptr) {
    delete lane_id_;
  }
  lane_id_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ID_message& LaneInfo_message::lane_id() const {
  const ::phoenix::ad_data_upload::ID_message* p = lane_id_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.lane_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ID_message*>(
      &::phoenix::ad_data_upload::_ID_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ID_message* LaneInfo_message::release_lane_id() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneInfo_message.lane_id)
  
  ::phoenix::ad_data_upload::ID_message* temp = lane_id_;
  lane_id_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ID_message* LaneInfo_message::mutable_lane_id() {
  
  if (lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ID_message>(GetArenaNoVirtual());
    lane_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneInfo_message.lane_id)
  return lane_id_;
}
inline void LaneInfo_message::set_allocated_lane_id(::phoenix::ad_data_upload::ID_message* lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_id_;
  }
  if (lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_id, submessage_arena);
    }
    
  } else {
    
  }
  lane_id_ = lane_id;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneInfo_message.lane_id)
}

// sint32 lane_index = 2;
inline void LaneInfo_message::clear_lane_index() {
  lane_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneInfo_message::lane_index() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.lane_index)
  return lane_index_;
}
inline void LaneInfo_message::set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_index_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneInfo_message.lane_index)
}

// sint32 quality = 3;
inline void LaneInfo_message::clear_quality() {
  quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneInfo_message::quality() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.quality)
  return quality_;
}
inline void LaneInfo_message::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneInfo_message.quality)
}

// uint32 central_curve_count = 4;
inline void LaneInfo_message::clear_central_curve_count() {
  central_curve_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneInfo_message::central_curve_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.central_curve_count)
  return central_curve_count_;
}
inline void LaneInfo_message::set_central_curve_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  central_curve_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.LaneInfo_message.central_curve_count)
}

// repeated .phoenix.ad_data_upload.Vec2d_message central_curve = 5;
inline int LaneInfo_message::central_curve_size() const {
  return central_curve_.size();
}
inline void LaneInfo_message::clear_central_curve() {
  central_curve_.Clear();
}
inline ::phoenix::ad_data_upload::Vec2d_message* LaneInfo_message::mutable_central_curve(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneInfo_message.central_curve)
  return central_curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
LaneInfo_message::mutable_central_curve() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.LaneInfo_message.central_curve)
  return &central_curve_;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& LaneInfo_message::central_curve(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.central_curve)
  return central_curve_.Get(index);
}
inline ::phoenix::ad_data_upload::Vec2d_message* LaneInfo_message::add_central_curve() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.LaneInfo_message.central_curve)
  return central_curve_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
LaneInfo_message::central_curve() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.LaneInfo_message.central_curve)
  return central_curve_;
}

// .phoenix.ad_data_upload.Boundary_message left_boundary = 6;
inline bool LaneInfo_message::has_left_boundary() const {
  return this != internal_default_instance() && left_boundary_ != nullptr;
}
inline void LaneInfo_message::clear_left_boundary() {
  if (GetArenaNoVirtual() == nullptr && left_boundary_ != nullptr) {
    delete left_boundary_;
  }
  left_boundary_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Boundary_message& LaneInfo_message::left_boundary() const {
  const ::phoenix::ad_data_upload::Boundary_message* p = left_boundary_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.left_boundary)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Boundary_message*>(
      &::phoenix::ad_data_upload::_Boundary_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Boundary_message* LaneInfo_message::release_left_boundary() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneInfo_message.left_boundary)
  
  ::phoenix::ad_data_upload::Boundary_message* temp = left_boundary_;
  left_boundary_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Boundary_message* LaneInfo_message::mutable_left_boundary() {
  
  if (left_boundary_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Boundary_message>(GetArenaNoVirtual());
    left_boundary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneInfo_message.left_boundary)
  return left_boundary_;
}
inline void LaneInfo_message::set_allocated_left_boundary(::phoenix::ad_data_upload::Boundary_message* left_boundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_boundary_;
  }
  if (left_boundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_boundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_boundary, submessage_arena);
    }
    
  } else {
    
  }
  left_boundary_ = left_boundary;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneInfo_message.left_boundary)
}

// .phoenix.ad_data_upload.Boundary_message right_boundary = 7;
inline bool LaneInfo_message::has_right_boundary() const {
  return this != internal_default_instance() && right_boundary_ != nullptr;
}
inline void LaneInfo_message::clear_right_boundary() {
  if (GetArenaNoVirtual() == nullptr && right_boundary_ != nullptr) {
    delete right_boundary_;
  }
  right_boundary_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Boundary_message& LaneInfo_message::right_boundary() const {
  const ::phoenix::ad_data_upload::Boundary_message* p = right_boundary_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LaneInfo_message.right_boundary)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Boundary_message*>(
      &::phoenix::ad_data_upload::_Boundary_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Boundary_message* LaneInfo_message::release_right_boundary() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.LaneInfo_message.right_boundary)
  
  ::phoenix::ad_data_upload::Boundary_message* temp = right_boundary_;
  right_boundary_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Boundary_message* LaneInfo_message::mutable_right_boundary() {
  
  if (right_boundary_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Boundary_message>(GetArenaNoVirtual());
    right_boundary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LaneInfo_message.right_boundary)
  return right_boundary_;
}
inline void LaneInfo_message::set_allocated_right_boundary(::phoenix::ad_data_upload::Boundary_message* right_boundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_boundary_;
  }
  if (right_boundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_boundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_boundary, submessage_arena);
    }
    
  } else {
    
  }
  right_boundary_ = right_boundary;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.LaneInfo_message.right_boundary)
}

// -------------------------------------------------------------------

// LineSegment2d_message

// repeated .phoenix.ad_data_upload.Vec2d_message points_ = 1;
inline int LineSegment2d_message::points__size() const {
  return points__.size();
}
inline void LineSegment2d_message::clear_points_() {
  points__.Clear();
}
inline ::phoenix::ad_data_upload::Vec2d_message* LineSegment2d_message::mutable_points_(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.LineSegment2d_message.points_)
  return points__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >*
LineSegment2d_message::mutable_points_() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.LineSegment2d_message.points_)
  return &points__;
}
inline const ::phoenix::ad_data_upload::Vec2d_message& LineSegment2d_message::points_(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.LineSegment2d_message.points_)
  return points__.Get(index);
}
inline ::phoenix::ad_data_upload::Vec2d_message* LineSegment2d_message::add_points_() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.LineSegment2d_message.points_)
  return points__.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::Vec2d_message >&
LineSegment2d_message::points_() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.LineSegment2d_message.points_)
  return points__;
}

// -------------------------------------------------------------------

// MapTrafficLight_message

// .phoenix.ad_data_upload.ID_message id = 1;
inline bool MapTrafficLight_message::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void MapTrafficLight_message::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::phoenix::ad_data_upload::ID_message& MapTrafficLight_message::id() const {
  const ::phoenix::ad_data_upload::ID_message* p = id_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapTrafficLight_message.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::ID_message*>(
      &::phoenix::ad_data_upload::_ID_message_default_instance_);
}
inline ::phoenix::ad_data_upload::ID_message* MapTrafficLight_message::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.MapTrafficLight_message.id)
  
  ::phoenix::ad_data_upload::ID_message* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::ID_message* MapTrafficLight_message::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::ID_message>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapTrafficLight_message.id)
  return id_;
}
inline void MapTrafficLight_message::set_allocated_id(::phoenix::ad_data_upload::ID_message* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.MapTrafficLight_message.id)
}

// .phoenix.ad_data_upload.LineSegment2d_message stop_line = 2;
inline bool MapTrafficLight_message::has_stop_line() const {
  return this != internal_default_instance() && stop_line_ != nullptr;
}
inline void MapTrafficLight_message::clear_stop_line() {
  if (GetArenaNoVirtual() == nullptr && stop_line_ != nullptr) {
    delete stop_line_;
  }
  stop_line_ = nullptr;
}
inline const ::phoenix::ad_data_upload::LineSegment2d_message& MapTrafficLight_message::stop_line() const {
  const ::phoenix::ad_data_upload::LineSegment2d_message* p = stop_line_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapTrafficLight_message.stop_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::LineSegment2d_message*>(
      &::phoenix::ad_data_upload::_LineSegment2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::LineSegment2d_message* MapTrafficLight_message::release_stop_line() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.MapTrafficLight_message.stop_line)
  
  ::phoenix::ad_data_upload::LineSegment2d_message* temp = stop_line_;
  stop_line_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::LineSegment2d_message* MapTrafficLight_message::mutable_stop_line() {
  
  if (stop_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::LineSegment2d_message>(GetArenaNoVirtual());
    stop_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapTrafficLight_message.stop_line)
  return stop_line_;
}
inline void MapTrafficLight_message::set_allocated_stop_line(::phoenix::ad_data_upload::LineSegment2d_message* stop_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stop_line_;
  }
  if (stop_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_line, submessage_arena);
    }
    
  } else {
    
  }
  stop_line_ = stop_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.MapTrafficLight_message.stop_line)
}

// -------------------------------------------------------------------

// MapInfo_message

// uint32 lane_table_count = 1;
inline void MapInfo_message::clear_lane_table_count() {
  lane_table_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapInfo_message::lane_table_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapInfo_message.lane_table_count)
  return lane_table_count_;
}
inline void MapInfo_message::set_lane_table_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_table_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapInfo_message.lane_table_count)
}

// repeated .phoenix.ad_data_upload.LaneInfo_message lane_table = 2;
inline int MapInfo_message::lane_table_size() const {
  return lane_table_.size();
}
inline void MapInfo_message::clear_lane_table() {
  lane_table_.Clear();
}
inline ::phoenix::ad_data_upload::LaneInfo_message* MapInfo_message::mutable_lane_table(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapInfo_message.lane_table)
  return lane_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LaneInfo_message >*
MapInfo_message::mutable_lane_table() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapInfo_message.lane_table)
  return &lane_table_;
}
inline const ::phoenix::ad_data_upload::LaneInfo_message& MapInfo_message::lane_table(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapInfo_message.lane_table)
  return lane_table_.Get(index);
}
inline ::phoenix::ad_data_upload::LaneInfo_message* MapInfo_message::add_lane_table() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapInfo_message.lane_table)
  return lane_table_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::LaneInfo_message >&
MapInfo_message::lane_table() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapInfo_message.lane_table)
  return lane_table_;
}

// uint32 map_traffic_light_table_count = 3;
inline void MapInfo_message::clear_map_traffic_light_table_count() {
  map_traffic_light_table_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapInfo_message::map_traffic_light_table_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table_count)
  return map_traffic_light_table_count_;
}
inline void MapInfo_message::set_map_traffic_light_table_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  map_traffic_light_table_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table_count)
}

// repeated .phoenix.ad_data_upload.MapTrafficLight_message map_traffic_light_table = 4;
inline int MapInfo_message::map_traffic_light_table_size() const {
  return map_traffic_light_table_.size();
}
inline void MapInfo_message::clear_map_traffic_light_table() {
  map_traffic_light_table_.Clear();
}
inline ::phoenix::ad_data_upload::MapTrafficLight_message* MapInfo_message::mutable_map_traffic_light_table(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table)
  return map_traffic_light_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapTrafficLight_message >*
MapInfo_message::mutable_map_traffic_light_table() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table)
  return &map_traffic_light_table_;
}
inline const ::phoenix::ad_data_upload::MapTrafficLight_message& MapInfo_message::map_traffic_light_table(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table)
  return map_traffic_light_table_.Get(index);
}
inline ::phoenix::ad_data_upload::MapTrafficLight_message* MapInfo_message::add_map_traffic_light_table() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table)
  return map_traffic_light_table_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::MapTrafficLight_message >&
MapInfo_message::map_traffic_light_table() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.MapInfo_message.map_traffic_light_table)
  return map_traffic_light_table_;
}

// -------------------------------------------------------------------

// RoadBoundary_message

// .phoenix.ad_data_upload.PathPoint_message ref_point = 1;
inline bool RoadBoundary_message::has_ref_point() const {
  return this != internal_default_instance() && ref_point_ != nullptr;
}
inline void RoadBoundary_message::clear_ref_point() {
  if (GetArenaNoVirtual() == nullptr && ref_point_ != nullptr) {
    delete ref_point_;
  }
  ref_point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& RoadBoundary_message::ref_point() const {
  const ::phoenix::ad_data_upload::PathPoint_message* p = ref_point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.RoadBoundary_message.ref_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PathPoint_message*>(
      &::phoenix::ad_data_upload::_PathPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::release_ref_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.RoadBoundary_message.ref_point)
  
  ::phoenix::ad_data_upload::PathPoint_message* temp = ref_point_;
  ref_point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::mutable_ref_point() {
  
  if (ref_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(GetArenaNoVirtual());
    ref_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.RoadBoundary_message.ref_point)
  return ref_point_;
}
inline void RoadBoundary_message::set_allocated_ref_point(::phoenix::ad_data_upload::PathPoint_message* ref_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ref_point_;
  }
  if (ref_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_point, submessage_arena);
    }
    
  } else {
    
  }
  ref_point_ = ref_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.RoadBoundary_message.ref_point)
}

// .phoenix.ad_data_upload.PathPoint_message left_boundary_point = 2;
inline bool RoadBoundary_message::has_left_boundary_point() const {
  return this != internal_default_instance() && left_boundary_point_ != nullptr;
}
inline void RoadBoundary_message::clear_left_boundary_point() {
  if (GetArenaNoVirtual() == nullptr && left_boundary_point_ != nullptr) {
    delete left_boundary_point_;
  }
  left_boundary_point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& RoadBoundary_message::left_boundary_point() const {
  const ::phoenix::ad_data_upload::PathPoint_message* p = left_boundary_point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.RoadBoundary_message.left_boundary_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PathPoint_message*>(
      &::phoenix::ad_data_upload::_PathPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::release_left_boundary_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.RoadBoundary_message.left_boundary_point)
  
  ::phoenix::ad_data_upload::PathPoint_message* temp = left_boundary_point_;
  left_boundary_point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::mutable_left_boundary_point() {
  
  if (left_boundary_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(GetArenaNoVirtual());
    left_boundary_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.RoadBoundary_message.left_boundary_point)
  return left_boundary_point_;
}
inline void RoadBoundary_message::set_allocated_left_boundary_point(::phoenix::ad_data_upload::PathPoint_message* left_boundary_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_boundary_point_;
  }
  if (left_boundary_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_boundary_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_boundary_point, submessage_arena);
    }
    
  } else {
    
  }
  left_boundary_point_ = left_boundary_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.RoadBoundary_message.left_boundary_point)
}

// .phoenix.ad_data_upload.PathPoint_message right_boundary_point = 3;
inline bool RoadBoundary_message::has_right_boundary_point() const {
  return this != internal_default_instance() && right_boundary_point_ != nullptr;
}
inline void RoadBoundary_message::clear_right_boundary_point() {
  if (GetArenaNoVirtual() == nullptr && right_boundary_point_ != nullptr) {
    delete right_boundary_point_;
  }
  right_boundary_point_ = nullptr;
}
inline const ::phoenix::ad_data_upload::PathPoint_message& RoadBoundary_message::right_boundary_point() const {
  const ::phoenix::ad_data_upload::PathPoint_message* p = right_boundary_point_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.RoadBoundary_message.right_boundary_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::PathPoint_message*>(
      &::phoenix::ad_data_upload::_PathPoint_message_default_instance_);
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::release_right_boundary_point() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.RoadBoundary_message.right_boundary_point)
  
  ::phoenix::ad_data_upload::PathPoint_message* temp = right_boundary_point_;
  right_boundary_point_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::PathPoint_message* RoadBoundary_message::mutable_right_boundary_point() {
  
  if (right_boundary_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::PathPoint_message>(GetArenaNoVirtual());
    right_boundary_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.RoadBoundary_message.right_boundary_point)
  return right_boundary_point_;
}
inline void RoadBoundary_message::set_allocated_right_boundary_point(::phoenix::ad_data_upload::PathPoint_message* right_boundary_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_boundary_point_;
  }
  if (right_boundary_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_boundary_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_boundary_point, submessage_arena);
    }
    
  } else {
    
  }
  right_boundary_point_ = right_boundary_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.RoadBoundary_message.right_boundary_point)
}

// float left_width = 4;
inline void RoadBoundary_message::clear_left_width() {
  left_width_ = 0;
}
inline float RoadBoundary_message::left_width() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.RoadBoundary_message.left_width)
  return left_width_;
}
inline void RoadBoundary_message::set_left_width(float value) {
  
  left_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.RoadBoundary_message.left_width)
}

// float right_width = 5;
inline void RoadBoundary_message::clear_right_width() {
  right_width_ = 0;
}
inline float RoadBoundary_message::right_width() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.RoadBoundary_message.right_width)
  return right_width_;
}
inline void RoadBoundary_message::set_right_width(float value) {
  
  right_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.RoadBoundary_message.right_width)
}

// -------------------------------------------------------------------

// ObstacleInfo_message

// sint32 id = 1;
inline void ObstacleInfo_message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo_message::id() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.id)
  return id_;
}
inline void ObstacleInfo_message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.id)
}

// .phoenix.ad_data_upload.OBBox2d_message obb = 2;
inline bool ObstacleInfo_message::has_obb() const {
  return this != internal_default_instance() && obb_ != nullptr;
}
inline void ObstacleInfo_message::clear_obb() {
  if (GetArenaNoVirtual() == nullptr && obb_ != nullptr) {
    delete obb_;
  }
  obb_ = nullptr;
}
inline const ::phoenix::ad_data_upload::OBBox2d_message& ObstacleInfo_message::obb() const {
  const ::phoenix::ad_data_upload::OBBox2d_message* p = obb_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.obb)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::OBBox2d_message*>(
      &::phoenix::ad_data_upload::_OBBox2d_message_default_instance_);
}
inline ::phoenix::ad_data_upload::OBBox2d_message* ObstacleInfo_message::release_obb() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.ObstacleInfo_message.obb)
  
  ::phoenix::ad_data_upload::OBBox2d_message* temp = obb_;
  obb_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::OBBox2d_message* ObstacleInfo_message::mutable_obb() {
  
  if (obb_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::OBBox2d_message>(GetArenaNoVirtual());
    obb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ObstacleInfo_message.obb)
  return obb_;
}
inline void ObstacleInfo_message::set_allocated_obb(::phoenix::ad_data_upload::OBBox2d_message* obb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obb_;
  }
  if (obb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obb, submessage_arena);
    }
    
  } else {
    
  }
  obb_ = obb;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.ObstacleInfo_message.obb)
}

// float heading = 3;
inline void ObstacleInfo_message::clear_heading() {
  heading_ = 0;
}
inline float ObstacleInfo_message::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.heading)
  return heading_;
}
inline void ObstacleInfo_message::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.heading)
}

// sint32 type = 4;
inline void ObstacleInfo_message::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo_message::type() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.type)
  return type_;
}
inline void ObstacleInfo_message::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.type)
}

// sint32 dynamic = 5;
inline void ObstacleInfo_message::clear_dynamic() {
  dynamic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo_message::dynamic() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.dynamic)
  return dynamic_;
}
inline void ObstacleInfo_message::set_dynamic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynamic_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.dynamic)
}

// bool ignore = 6;
inline void ObstacleInfo_message::clear_ignore() {
  ignore_ = false;
}
inline bool ObstacleInfo_message::ignore() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.ignore)
  return ignore_;
}
inline void ObstacleInfo_message::set_ignore(bool value) {
  
  ignore_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.ignore)
}

// bool uncertain = 7;
inline void ObstacleInfo_message::clear_uncertain() {
  uncertain_ = false;
}
inline bool ObstacleInfo_message::uncertain() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.uncertain)
  return uncertain_;
}
inline void ObstacleInfo_message::set_uncertain(bool value) {
  
  uncertain_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.uncertain)
}

// float V = 8;
inline void ObstacleInfo_message::clear_v() {
  v_ = 0;
}
inline float ObstacleInfo_message::v() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.V)
  return v_;
}
inline void ObstacleInfo_message::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.V)
}

// float s_ref = 9;
inline void ObstacleInfo_message::clear_s_ref() {
  s_ref_ = 0;
}
inline float ObstacleInfo_message::s_ref() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.s_ref)
  return s_ref_;
}
inline void ObstacleInfo_message::set_s_ref(float value) {
  
  s_ref_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.s_ref)
}

// float l_ref = 10;
inline void ObstacleInfo_message::clear_l_ref() {
  l_ref_ = 0;
}
inline float ObstacleInfo_message::l_ref() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.l_ref)
  return l_ref_;
}
inline void ObstacleInfo_message::set_l_ref(float value) {
  
  l_ref_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.l_ref)
}

// uint32 pred_trajectory_count = 11;
inline void ObstacleInfo_message::clear_pred_trajectory_count() {
  pred_trajectory_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstacleInfo_message::pred_trajectory_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count)
  return pred_trajectory_count_;
}
inline void ObstacleInfo_message::set_pred_trajectory_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pred_trajectory_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count)
}

// repeated uint32 pred_trajectory_count_num = 12;
inline int ObstacleInfo_message::pred_trajectory_count_num_size() const {
  return pred_trajectory_count_num_.size();
}
inline void ObstacleInfo_message::clear_pred_trajectory_count_num() {
  pred_trajectory_count_num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstacleInfo_message::pred_trajectory_count_num(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count_num)
  return pred_trajectory_count_num_.Get(index);
}
inline void ObstacleInfo_message::set_pred_trajectory_count_num(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pred_trajectory_count_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count_num)
}
inline void ObstacleInfo_message::add_pred_trajectory_count_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pred_trajectory_count_num_.Add(value);
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ObstacleInfo_message::pred_trajectory_count_num() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count_num)
  return pred_trajectory_count_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ObstacleInfo_message::mutable_pred_trajectory_count_num() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory_count_num)
  return &pred_trajectory_count_num_;
}

// repeated .phoenix.ad_data_upload.TrajectoryPoint_message pred_trajectory = 13;
inline int ObstacleInfo_message::pred_trajectory_size() const {
  return pred_trajectory_.size();
}
inline void ObstacleInfo_message::clear_pred_trajectory() {
  pred_trajectory_.Clear();
}
inline ::phoenix::ad_data_upload::TrajectoryPoint_message* ObstacleInfo_message::mutable_pred_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory)
  return pred_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrajectoryPoint_message >*
ObstacleInfo_message::mutable_pred_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory)
  return &pred_trajectory_;
}
inline const ::phoenix::ad_data_upload::TrajectoryPoint_message& ObstacleInfo_message::pred_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory)
  return pred_trajectory_.Get(index);
}
inline ::phoenix::ad_data_upload::TrajectoryPoint_message* ObstacleInfo_message::add_pred_trajectory() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory)
  return pred_trajectory_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::TrajectoryPoint_message >&
ObstacleInfo_message::pred_trajectory() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.ObstacleInfo_message.pred_trajectory)
  return pred_trajectory_;
}

// -------------------------------------------------------------------

// DrivingMapInfo_1_message

// .phoenix.ad_data_upload.MsgHead_message msg_head = 1;
inline bool DrivingMapInfo_1_message::has_msg_head() const {
  return this != internal_default_instance() && msg_head_ != nullptr;
}
inline void DrivingMapInfo_1_message::clear_msg_head() {
  if (GetArenaNoVirtual() == nullptr && msg_head_ != nullptr) {
    delete msg_head_;
  }
  msg_head_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MsgHead_message& DrivingMapInfo_1_message::msg_head() const {
  const ::phoenix::ad_data_upload::MsgHead_message* p = msg_head_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.msg_head)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MsgHead_message*>(
      &::phoenix::ad_data_upload::_MsgHead_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MsgHead_message* DrivingMapInfo_1_message::release_msg_head() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo_1_message.msg_head)
  
  ::phoenix::ad_data_upload::MsgHead_message* temp = msg_head_;
  msg_head_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MsgHead_message* DrivingMapInfo_1_message::mutable_msg_head() {
  
  if (msg_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MsgHead_message>(GetArenaNoVirtual());
    msg_head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_1_message.msg_head)
  return msg_head_;
}
inline void DrivingMapInfo_1_message::set_allocated_msg_head(::phoenix::ad_data_upload::MsgHead_message* msg_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_head_;
  }
  if (msg_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_head, submessage_arena);
    }
    
  } else {
    
  }
  msg_head_ = msg_head;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo_1_message.msg_head)
}

// .phoenix.ad_data_upload.MapInfo_message map = 2;
inline bool DrivingMapInfo_1_message::has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline void DrivingMapInfo_1_message::clear_map() {
  if (GetArenaNoVirtual() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::phoenix::ad_data_upload::MapInfo_message& DrivingMapInfo_1_message::map() const {
  const ::phoenix::ad_data_upload::MapInfo_message* p = map_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.map)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::MapInfo_message*>(
      &::phoenix::ad_data_upload::_MapInfo_message_default_instance_);
}
inline ::phoenix::ad_data_upload::MapInfo_message* DrivingMapInfo_1_message::release_map() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMapInfo_1_message.map)
  
  ::phoenix::ad_data_upload::MapInfo_message* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::MapInfo_message* DrivingMapInfo_1_message::mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::MapInfo_message>(GetArenaNoVirtual());
    map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_1_message.map)
  return map_;
}
inline void DrivingMapInfo_1_message::set_allocated_map(::phoenix::ad_data_upload::MapInfo_message* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMapInfo_1_message.map)
}

// uint32 road_boundary_count = 3;
inline void DrivingMapInfo_1_message::clear_road_boundary_count() {
  road_boundary_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrivingMapInfo_1_message::road_boundary_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary_count)
  return road_boundary_count_;
}
inline void DrivingMapInfo_1_message::set_road_boundary_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_boundary_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary_count)
}

// repeated .phoenix.ad_data_upload.RoadBoundary_message road_boundary = 4;
inline int DrivingMapInfo_1_message::road_boundary_size() const {
  return road_boundary_.size();
}
inline void DrivingMapInfo_1_message::clear_road_boundary() {
  road_boundary_.Clear();
}
inline ::phoenix::ad_data_upload::RoadBoundary_message* DrivingMapInfo_1_message::mutable_road_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary)
  return road_boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::RoadBoundary_message >*
DrivingMapInfo_1_message::mutable_road_boundary() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary)
  return &road_boundary_;
}
inline const ::phoenix::ad_data_upload::RoadBoundary_message& DrivingMapInfo_1_message::road_boundary(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary)
  return road_boundary_.Get(index);
}
inline ::phoenix::ad_data_upload::RoadBoundary_message* DrivingMapInfo_1_message::add_road_boundary() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary)
  return road_boundary_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::RoadBoundary_message >&
DrivingMapInfo_1_message::road_boundary() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.DrivingMapInfo_1_message.road_boundary)
  return road_boundary_;
}

// uint32 obstacle_list_count = 5;
inline void DrivingMapInfo_1_message::clear_obstacle_list_count() {
  obstacle_list_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrivingMapInfo_1_message::obstacle_list_count() const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list_count)
  return obstacle_list_count_;
}
inline void DrivingMapInfo_1_message::set_obstacle_list_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  obstacle_list_count_ = value;
  // @@protoc_insertion_point(field_set:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list_count)
}

// repeated .phoenix.ad_data_upload.ObstacleInfo_message obstacle_list = 6;
inline int DrivingMapInfo_1_message::obstacle_list_size() const {
  return obstacle_list_.size();
}
inline void DrivingMapInfo_1_message::clear_obstacle_list() {
  obstacle_list_.Clear();
}
inline ::phoenix::ad_data_upload::ObstacleInfo_message* DrivingMapInfo_1_message::mutable_obstacle_list(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list)
  return obstacle_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObstacleInfo_message >*
DrivingMapInfo_1_message::mutable_obstacle_list() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list)
  return &obstacle_list_;
}
inline const ::phoenix::ad_data_upload::ObstacleInfo_message& DrivingMapInfo_1_message::obstacle_list(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list)
  return obstacle_list_.Get(index);
}
inline ::phoenix::ad_data_upload::ObstacleInfo_message* DrivingMapInfo_1_message::add_obstacle_list() {
  // @@protoc_insertion_point(field_add:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list)
  return obstacle_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::ad_data_upload::ObstacleInfo_message >&
DrivingMapInfo_1_message::obstacle_list() const {
  // @@protoc_insertion_point(field_list:phoenix.ad_data_upload.DrivingMapInfo_1_message.obstacle_list)
  return obstacle_list_;
}

// -------------------------------------------------------------------

// Trajectory_Planning_Result_message

// .phoenix.ad_data_upload.TrajectoryPlanningResult_message Trajectory_planning_result = 1;
inline bool Trajectory_Planning_Result_message::has_trajectory_planning_result() const {
  return this != internal_default_instance() && trajectory_planning_result_ != nullptr;
}
inline void Trajectory_Planning_Result_message::clear_trajectory_planning_result() {
  if (GetArenaNoVirtual() == nullptr && trajectory_planning_result_ != nullptr) {
    delete trajectory_planning_result_;
  }
  trajectory_planning_result_ = nullptr;
}
inline const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message& Trajectory_Planning_Result_message::trajectory_planning_result() const {
  const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* p = trajectory_planning_result_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.Trajectory_Planning_Result_message.Trajectory_planning_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::TrajectoryPlanningResult_message*>(
      &::phoenix::ad_data_upload::_TrajectoryPlanningResult_message_default_instance_);
}
inline ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* Trajectory_Planning_Result_message::release_trajectory_planning_result() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.Trajectory_Planning_Result_message.Trajectory_planning_result)
  
  ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* temp = trajectory_planning_result_;
  trajectory_planning_result_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::TrajectoryPlanningResult_message* Trajectory_Planning_Result_message::mutable_trajectory_planning_result() {
  
  if (trajectory_planning_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::TrajectoryPlanningResult_message>(GetArenaNoVirtual());
    trajectory_planning_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.Trajectory_Planning_Result_message.Trajectory_planning_result)
  return trajectory_planning_result_;
}
inline void Trajectory_Planning_Result_message::set_allocated_trajectory_planning_result(::phoenix::ad_data_upload::TrajectoryPlanningResult_message* trajectory_planning_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trajectory_planning_result_;
  }
  if (trajectory_planning_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_planning_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_planning_result, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_planning_result_ = trajectory_planning_result;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.Trajectory_Planning_Result_message.Trajectory_planning_result)
}

// -------------------------------------------------------------------

// DrivingMap_message

// .phoenix.ad_data_upload.DrivingMapInfo_1_message driving_map_info_1 = 1;
inline bool DrivingMap_message::has_driving_map_info_1() const {
  return this != internal_default_instance() && driving_map_info_1_ != nullptr;
}
inline void DrivingMap_message::clear_driving_map_info_1() {
  if (GetArenaNoVirtual() == nullptr && driving_map_info_1_ != nullptr) {
    delete driving_map_info_1_;
  }
  driving_map_info_1_ = nullptr;
}
inline const ::phoenix::ad_data_upload::DrivingMapInfo_1_message& DrivingMap_message::driving_map_info_1() const {
  const ::phoenix::ad_data_upload::DrivingMapInfo_1_message* p = driving_map_info_1_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.DrivingMap_message.driving_map_info_1)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::DrivingMapInfo_1_message*>(
      &::phoenix::ad_data_upload::_DrivingMapInfo_1_message_default_instance_);
}
inline ::phoenix::ad_data_upload::DrivingMapInfo_1_message* DrivingMap_message::release_driving_map_info_1() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.DrivingMap_message.driving_map_info_1)
  
  ::phoenix::ad_data_upload::DrivingMapInfo_1_message* temp = driving_map_info_1_;
  driving_map_info_1_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::DrivingMapInfo_1_message* DrivingMap_message::mutable_driving_map_info_1() {
  
  if (driving_map_info_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMapInfo_1_message>(GetArenaNoVirtual());
    driving_map_info_1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.DrivingMap_message.driving_map_info_1)
  return driving_map_info_1_;
}
inline void DrivingMap_message::set_allocated_driving_map_info_1(::phoenix::ad_data_upload::DrivingMapInfo_1_message* driving_map_info_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete driving_map_info_1_;
  }
  if (driving_map_info_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      driving_map_info_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driving_map_info_1, submessage_arena);
    }
    
  } else {
    
  }
  driving_map_info_1_ = driving_map_info_1;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.DrivingMap_message.driving_map_info_1)
}

// -------------------------------------------------------------------

// PathPln_Display_Data_message

// .phoenix.ad_data_upload.Trajectory_Planning_Result_message traj_planning_result = 1;
inline bool PathPln_Display_Data_message::has_traj_planning_result() const {
  return this != internal_default_instance() && traj_planning_result_ != nullptr;
}
inline void PathPln_Display_Data_message::clear_traj_planning_result() {
  if (GetArenaNoVirtual() == nullptr && traj_planning_result_ != nullptr) {
    delete traj_planning_result_;
  }
  traj_planning_result_ = nullptr;
}
inline const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message& PathPln_Display_Data_message::traj_planning_result() const {
  const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* p = traj_planning_result_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPln_Display_Data_message.traj_planning_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::Trajectory_Planning_Result_message*>(
      &::phoenix::ad_data_upload::_Trajectory_Planning_Result_message_default_instance_);
}
inline ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* PathPln_Display_Data_message::release_traj_planning_result() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PathPln_Display_Data_message.traj_planning_result)
  
  ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* temp = traj_planning_result_;
  traj_planning_result_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::Trajectory_Planning_Result_message* PathPln_Display_Data_message::mutable_traj_planning_result() {
  
  if (traj_planning_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::Trajectory_Planning_Result_message>(GetArenaNoVirtual());
    traj_planning_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PathPln_Display_Data_message.traj_planning_result)
  return traj_planning_result_;
}
inline void PathPln_Display_Data_message::set_allocated_traj_planning_result(::phoenix::ad_data_upload::Trajectory_Planning_Result_message* traj_planning_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete traj_planning_result_;
  }
  if (traj_planning_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traj_planning_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traj_planning_result, submessage_arena);
    }
    
  } else {
    
  }
  traj_planning_result_ = traj_planning_result;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PathPln_Display_Data_message.traj_planning_result)
}

// .phoenix.ad_data_upload.DrivingMap_message driving_map = 2;
inline bool PathPln_Display_Data_message::has_driving_map() const {
  return this != internal_default_instance() && driving_map_ != nullptr;
}
inline void PathPln_Display_Data_message::clear_driving_map() {
  if (GetArenaNoVirtual() == nullptr && driving_map_ != nullptr) {
    delete driving_map_;
  }
  driving_map_ = nullptr;
}
inline const ::phoenix::ad_data_upload::DrivingMap_message& PathPln_Display_Data_message::driving_map() const {
  const ::phoenix::ad_data_upload::DrivingMap_message* p = driving_map_;
  // @@protoc_insertion_point(field_get:phoenix.ad_data_upload.PathPln_Display_Data_message.driving_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::ad_data_upload::DrivingMap_message*>(
      &::phoenix::ad_data_upload::_DrivingMap_message_default_instance_);
}
inline ::phoenix::ad_data_upload::DrivingMap_message* PathPln_Display_Data_message::release_driving_map() {
  // @@protoc_insertion_point(field_release:phoenix.ad_data_upload.PathPln_Display_Data_message.driving_map)
  
  ::phoenix::ad_data_upload::DrivingMap_message* temp = driving_map_;
  driving_map_ = nullptr;
  return temp;
}
inline ::phoenix::ad_data_upload::DrivingMap_message* PathPln_Display_Data_message::mutable_driving_map() {
  
  if (driving_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::ad_data_upload::DrivingMap_message>(GetArenaNoVirtual());
    driving_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.ad_data_upload.PathPln_Display_Data_message.driving_map)
  return driving_map_;
}
inline void PathPln_Display_Data_message::set_allocated_driving_map(::phoenix::ad_data_upload::DrivingMap_message* driving_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete driving_map_;
  }
  if (driving_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      driving_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driving_map, submessage_arena);
    }
    
  } else {
    
  }
  driving_map_ = driving_map;
  // @@protoc_insertion_point(field_set_allocated:phoenix.ad_data_upload.PathPln_Display_Data_message.driving_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_data_upload
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sys_5fDataUploadProto_5fplanning_2eproto
