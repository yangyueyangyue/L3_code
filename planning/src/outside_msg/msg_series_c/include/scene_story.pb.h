// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_story.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_5fstory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_5fstory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fstory_2eproto;
namespace phoenix {
namespace msg {
namespace routing {
class CloseToClearArea;
class CloseToClearAreaDefaultTypeInternal;
extern CloseToClearAreaDefaultTypeInternal _CloseToClearArea_default_instance_;
class CloseToCrosswalk;
class CloseToCrosswalkDefaultTypeInternal;
extern CloseToCrosswalkDefaultTypeInternal _CloseToCrosswalk_default_instance_;
class CloseToCurveRoad;
class CloseToCurveRoadDefaultTypeInternal;
extern CloseToCurveRoadDefaultTypeInternal _CloseToCurveRoad_default_instance_;
class CloseToDestination;
class CloseToDestinationDefaultTypeInternal;
extern CloseToDestinationDefaultTypeInternal _CloseToDestination_default_instance_;
class CloseToJunction;
class CloseToJunctionDefaultTypeInternal;
extern CloseToJunctionDefaultTypeInternal _CloseToJunction_default_instance_;
class CloseToParkingSpaces;
class CloseToParkingSpacesDefaultTypeInternal;
extern CloseToParkingSpacesDefaultTypeInternal _CloseToParkingSpaces_default_instance_;
class CloseToSignal;
class CloseToSignalDefaultTypeInternal;
extern CloseToSignalDefaultTypeInternal _CloseToSignal_default_instance_;
class CloseToSpeedBumps;
class CloseToSpeedBumpsDefaultTypeInternal;
extern CloseToSpeedBumpsDefaultTypeInternal _CloseToSpeedBumps_default_instance_;
class CloseToStopSign;
class CloseToStopSignDefaultTypeInternal;
extern CloseToStopSignDefaultTypeInternal _CloseToStopSign_default_instance_;
class CloseToYieldSign;
class CloseToYieldSignDefaultTypeInternal;
extern CloseToYieldSignDefaultTypeInternal _CloseToYieldSign_default_instance_;
class SceneStories;
class SceneStoriesDefaultTypeInternal;
extern SceneStoriesDefaultTypeInternal _SceneStories_default_instance_;
class SceneStoryAction;
class SceneStoryActionDefaultTypeInternal;
extern SceneStoryActionDefaultTypeInternal _SceneStoryAction_default_instance_;
class SceneStoryArea;
class SceneStoryAreaDefaultTypeInternal;
extern SceneStoryAreaDefaultTypeInternal _SceneStoryArea_default_instance_;
class SceneStoryArea_AreaType_01;
class SceneStoryArea_AreaType_01DefaultTypeInternal;
extern SceneStoryArea_AreaType_01DefaultTypeInternal _SceneStoryArea_AreaType_01_default_instance_;
class SceneStoryArea_AreaType_02;
class SceneStoryArea_AreaType_02DefaultTypeInternal;
extern SceneStoryArea_AreaType_02DefaultTypeInternal _SceneStoryArea_AreaType_02_default_instance_;
class SceneStoryCondition;
class SceneStoryConditionDefaultTypeInternal;
extern SceneStoryConditionDefaultTypeInternal _SceneStoryCondition_default_instance_;
class SceneStoryControlLine;
class SceneStoryControlLineDefaultTypeInternal;
extern SceneStoryControlLineDefaultTypeInternal _SceneStoryControlLine_default_instance_;
class SceneStoryControlLine_Point;
class SceneStoryControlLine_PointDefaultTypeInternal;
extern SceneStoryControlLine_PointDefaultTypeInternal _SceneStoryControlLine_Point_default_instance_;
}  // namespace routing
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::routing::CloseToClearArea* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToClearArea>(Arena*);
template<> ::phoenix::msg::routing::CloseToCrosswalk* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToCrosswalk>(Arena*);
template<> ::phoenix::msg::routing::CloseToCurveRoad* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToCurveRoad>(Arena*);
template<> ::phoenix::msg::routing::CloseToDestination* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToDestination>(Arena*);
template<> ::phoenix::msg::routing::CloseToJunction* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToJunction>(Arena*);
template<> ::phoenix::msg::routing::CloseToParkingSpaces* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToParkingSpaces>(Arena*);
template<> ::phoenix::msg::routing::CloseToSignal* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToSignal>(Arena*);
template<> ::phoenix::msg::routing::CloseToSpeedBumps* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToSpeedBumps>(Arena*);
template<> ::phoenix::msg::routing::CloseToStopSign* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToStopSign>(Arena*);
template<> ::phoenix::msg::routing::CloseToYieldSign* Arena::CreateMaybeMessage<::phoenix::msg::routing::CloseToYieldSign>(Arena*);
template<> ::phoenix::msg::routing::SceneStories* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStories>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryAction* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryArea* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryArea_AreaType_01* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea_AreaType_01>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryArea_AreaType_02* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea_AreaType_02>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryCondition* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryControlLine* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryControlLine>(Arena*);
template<> ::phoenix::msg::routing::SceneStoryControlLine_Point* Arena::CreateMaybeMessage<::phoenix::msg::routing::SceneStoryControlLine_Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace routing {

// ===================================================================

class SceneStoryControlLine_Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryControlLine.Point) */ {
 public:
  SceneStoryControlLine_Point();
  virtual ~SceneStoryControlLine_Point();

  SceneStoryControlLine_Point(const SceneStoryControlLine_Point& from);
  SceneStoryControlLine_Point(SceneStoryControlLine_Point&& from) noexcept
    : SceneStoryControlLine_Point() {
    *this = ::std::move(from);
  }

  inline SceneStoryControlLine_Point& operator=(const SceneStoryControlLine_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryControlLine_Point& operator=(SceneStoryControlLine_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryControlLine_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryControlLine_Point* internal_default_instance() {
    return reinterpret_cast<const SceneStoryControlLine_Point*>(
               &_SceneStoryControlLine_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneStoryControlLine_Point& a, SceneStoryControlLine_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryControlLine_Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryControlLine_Point* New() const final {
    return CreateMaybeMessage<SceneStoryControlLine_Point>(nullptr);
  }

  SceneStoryControlLine_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryControlLine_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryControlLine_Point& from);
  void MergeFrom(const SceneStoryControlLine_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryControlLine_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryControlLine.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryControlLine.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryControlLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryControlLine) */ {
 public:
  SceneStoryControlLine();
  virtual ~SceneStoryControlLine();

  SceneStoryControlLine(const SceneStoryControlLine& from);
  SceneStoryControlLine(SceneStoryControlLine&& from) noexcept
    : SceneStoryControlLine() {
    *this = ::std::move(from);
  }

  inline SceneStoryControlLine& operator=(const SceneStoryControlLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryControlLine& operator=(SceneStoryControlLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryControlLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryControlLine* internal_default_instance() {
    return reinterpret_cast<const SceneStoryControlLine*>(
               &_SceneStoryControlLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SceneStoryControlLine& a, SceneStoryControlLine& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryControlLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryControlLine* New() const final {
    return CreateMaybeMessage<SceneStoryControlLine>(nullptr);
  }

  SceneStoryControlLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryControlLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryControlLine& from);
  void MergeFrom(const SceneStoryControlLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryControlLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryControlLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SceneStoryControlLine_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kStartPointFieldNumber = 1,
    kEndPointFieldNumber = 2,
  };
  // optional .phoenix.msg.routing.SceneStoryControlLine.Point start_point = 1;
  bool has_start_point() const;
  void clear_start_point();
  const ::phoenix::msg::routing::SceneStoryControlLine_Point& start_point() const;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* release_start_point();
  ::phoenix::msg::routing::SceneStoryControlLine_Point* mutable_start_point();
  void set_allocated_start_point(::phoenix::msg::routing::SceneStoryControlLine_Point* start_point);

  // optional .phoenix.msg.routing.SceneStoryControlLine.Point end_point = 2;
  bool has_end_point() const;
  void clear_end_point();
  const ::phoenix::msg::routing::SceneStoryControlLine_Point& end_point() const;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* release_end_point();
  ::phoenix::msg::routing::SceneStoryControlLine_Point* mutable_end_point();
  void set_allocated_end_point(::phoenix::msg::routing::SceneStoryControlLine_Point* end_point);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryControlLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* start_point_;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* end_point_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryArea_AreaType_01 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryArea.AreaType_01) */ {
 public:
  SceneStoryArea_AreaType_01();
  virtual ~SceneStoryArea_AreaType_01();

  SceneStoryArea_AreaType_01(const SceneStoryArea_AreaType_01& from);
  SceneStoryArea_AreaType_01(SceneStoryArea_AreaType_01&& from) noexcept
    : SceneStoryArea_AreaType_01() {
    *this = ::std::move(from);
  }

  inline SceneStoryArea_AreaType_01& operator=(const SceneStoryArea_AreaType_01& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryArea_AreaType_01& operator=(SceneStoryArea_AreaType_01&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryArea_AreaType_01& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryArea_AreaType_01* internal_default_instance() {
    return reinterpret_cast<const SceneStoryArea_AreaType_01*>(
               &_SceneStoryArea_AreaType_01_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SceneStoryArea_AreaType_01& a, SceneStoryArea_AreaType_01& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryArea_AreaType_01* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryArea_AreaType_01* New() const final {
    return CreateMaybeMessage<SceneStoryArea_AreaType_01>(nullptr);
  }

  SceneStoryArea_AreaType_01* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryArea_AreaType_01>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryArea_AreaType_01& from);
  void MergeFrom(const SceneStoryArea_AreaType_01& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryArea_AreaType_01* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryArea.AreaType_01";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
  };
  // optional double distance = 1 [default = 0];
  bool has_distance() const;
  void clear_distance();
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryArea.AreaType_01)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double distance_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryArea_AreaType_02 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryArea.AreaType_02) */ {
 public:
  SceneStoryArea_AreaType_02();
  virtual ~SceneStoryArea_AreaType_02();

  SceneStoryArea_AreaType_02(const SceneStoryArea_AreaType_02& from);
  SceneStoryArea_AreaType_02(SceneStoryArea_AreaType_02&& from) noexcept
    : SceneStoryArea_AreaType_02() {
    *this = ::std::move(from);
  }

  inline SceneStoryArea_AreaType_02& operator=(const SceneStoryArea_AreaType_02& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryArea_AreaType_02& operator=(SceneStoryArea_AreaType_02&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryArea_AreaType_02& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryArea_AreaType_02* internal_default_instance() {
    return reinterpret_cast<const SceneStoryArea_AreaType_02*>(
               &_SceneStoryArea_AreaType_02_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SceneStoryArea_AreaType_02& a, SceneStoryArea_AreaType_02& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryArea_AreaType_02* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryArea_AreaType_02* New() const final {
    return CreateMaybeMessage<SceneStoryArea_AreaType_02>(nullptr);
  }

  SceneStoryArea_AreaType_02* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryArea_AreaType_02>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryArea_AreaType_02& from);
  void MergeFrom(const SceneStoryArea_AreaType_02& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryArea_AreaType_02* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryArea.AreaType_02";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLineFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
  };
  // optional .phoenix.msg.routing.SceneStoryControlLine control_line = 1;
  bool has_control_line() const;
  void clear_control_line();
  const ::phoenix::msg::routing::SceneStoryControlLine& control_line() const;
  ::phoenix::msg::routing::SceneStoryControlLine* release_control_line();
  ::phoenix::msg::routing::SceneStoryControlLine* mutable_control_line();
  void set_allocated_control_line(::phoenix::msg::routing::SceneStoryControlLine* control_line);

  // optional double start_s = 2 [default = 0];
  bool has_start_s() const;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3 [default = 0];
  bool has_end_s() const;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryArea.AreaType_02)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::SceneStoryControlLine* control_line_;
  double start_s_;
  double end_s_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryArea) */ {
 public:
  SceneStoryArea();
  virtual ~SceneStoryArea();

  SceneStoryArea(const SceneStoryArea& from);
  SceneStoryArea(SceneStoryArea&& from) noexcept
    : SceneStoryArea() {
    *this = ::std::move(from);
  }

  inline SceneStoryArea& operator=(const SceneStoryArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryArea& operator=(SceneStoryArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryArea* internal_default_instance() {
    return reinterpret_cast<const SceneStoryArea*>(
               &_SceneStoryArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SceneStoryArea& a, SceneStoryArea& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryArea* New() const final {
    return CreateMaybeMessage<SceneStoryArea>(nullptr);
  }

  SceneStoryArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryArea& from);
  void MergeFrom(const SceneStoryArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SceneStoryArea_AreaType_01 AreaType_01;
  typedef SceneStoryArea_AreaType_02 AreaType_02;

  // accessors -------------------------------------------------------

  enum : int {
    kAreaType01FieldNumber = 2,
    kAreaType02FieldNumber = 3,
  };
  // optional .phoenix.msg.routing.SceneStoryArea.AreaType_01 area_type_01 = 2;
  bool has_area_type_01() const;
  void clear_area_type_01();
  const ::phoenix::msg::routing::SceneStoryArea_AreaType_01& area_type_01() const;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_01* release_area_type_01();
  ::phoenix::msg::routing::SceneStoryArea_AreaType_01* mutable_area_type_01();
  void set_allocated_area_type_01(::phoenix::msg::routing::SceneStoryArea_AreaType_01* area_type_01);

  // optional .phoenix.msg.routing.SceneStoryArea.AreaType_02 area_type_02 = 3;
  bool has_area_type_02() const;
  void clear_area_type_02();
  const ::phoenix::msg::routing::SceneStoryArea_AreaType_02& area_type_02() const;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_02* release_area_type_02();
  ::phoenix::msg::routing::SceneStoryArea_AreaType_02* mutable_area_type_02();
  void set_allocated_area_type_02(::phoenix::msg::routing::SceneStoryArea_AreaType_02* area_type_02);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_01* area_type_01_;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_02* area_type_02_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryCondition) */ {
 public:
  SceneStoryCondition();
  virtual ~SceneStoryCondition();

  SceneStoryCondition(const SceneStoryCondition& from);
  SceneStoryCondition(SceneStoryCondition&& from) noexcept
    : SceneStoryCondition() {
    *this = ::std::move(from);
  }

  inline SceneStoryCondition& operator=(const SceneStoryCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryCondition& operator=(SceneStoryCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryCondition* internal_default_instance() {
    return reinterpret_cast<const SceneStoryCondition*>(
               &_SceneStoryCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SceneStoryCondition& a, SceneStoryCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryCondition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryCondition* New() const final {
    return CreateMaybeMessage<SceneStoryCondition>(nullptr);
  }

  SceneStoryCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryCondition& from);
  void MergeFrom(const SceneStoryCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedHighFieldNumber = 2,
    kValidAreaFieldNumber = 1,
    kGearFieldNumber = 4,
    kSpeedLowFieldNumber = 3,
  };
  // optional double speed_high = 2 [default = 0];
  bool has_speed_high() const;
  void clear_speed_high();
  double speed_high() const;
  void set_speed_high(double value);

  // optional bool valid_area = 1 [default = false];
  bool has_valid_area() const;
  void clear_valid_area();
  bool valid_area() const;
  void set_valid_area(bool value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // optional double speed_low = 3 [default = 0];
  bool has_speed_low() const;
  void clear_speed_low();
  double speed_low() const;
  void set_speed_low(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryCondition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_high_;
  bool valid_area_;
  int gear_;
  double speed_low_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStoryAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStoryAction) */ {
 public:
  SceneStoryAction();
  virtual ~SceneStoryAction();

  SceneStoryAction(const SceneStoryAction& from);
  SceneStoryAction(SceneStoryAction&& from) noexcept
    : SceneStoryAction() {
    *this = ::std::move(from);
  }

  inline SceneStoryAction& operator=(const SceneStoryAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStoryAction& operator=(SceneStoryAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStoryAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStoryAction* internal_default_instance() {
    return reinterpret_cast<const SceneStoryAction*>(
               &_SceneStoryAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SceneStoryAction& a, SceneStoryAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStoryAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStoryAction* New() const final {
    return CreateMaybeMessage<SceneStoryAction>(nullptr);
  }

  SceneStoryAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStoryAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStoryAction& from);
  void MergeFrom(const SceneStoryAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStoryAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStoryAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kGearFieldNumber = 1,
    kTurnLampFieldNumber = 5,
    kHoldTimeFieldNumber = 4,
    kBrakeLampFieldNumber = 6,
  };
  // optional double speed = 2 [default = 0];
  bool has_speed() const;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 3 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 1 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
  bool has_turn_lamp() const;
  void clear_turn_lamp();
  ::phoenix::msg::control::Chassis_SignalTurnLamp turn_lamp() const;
  void set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value);

  // optional double hold_time = 4 [default = 0];
  bool has_hold_time() const;
  void clear_hold_time();
  double hold_time() const;
  void set_hold_time(double value);

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
  bool has_brake_lamp() const;
  void clear_brake_lamp();
  ::phoenix::msg::control::Chassis_SignalLamp brake_lamp() const;
  void set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStoryAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_;
  double acceleration_;
  int gear_;
  int turn_lamp_;
  double hold_time_;
  int brake_lamp_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToSpeedBumps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToSpeedBumps) */ {
 public:
  CloseToSpeedBumps();
  virtual ~CloseToSpeedBumps();

  CloseToSpeedBumps(const CloseToSpeedBumps& from);
  CloseToSpeedBumps(CloseToSpeedBumps&& from) noexcept
    : CloseToSpeedBumps() {
    *this = ::std::move(from);
  }

  inline CloseToSpeedBumps& operator=(const CloseToSpeedBumps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToSpeedBumps& operator=(CloseToSpeedBumps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToSpeedBumps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToSpeedBumps* internal_default_instance() {
    return reinterpret_cast<const CloseToSpeedBumps*>(
               &_CloseToSpeedBumps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloseToSpeedBumps& a, CloseToSpeedBumps& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToSpeedBumps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToSpeedBumps* New() const final {
    return CreateMaybeMessage<CloseToSpeedBumps>(nullptr);
  }

  CloseToSpeedBumps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToSpeedBumps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToSpeedBumps& from);
  void MergeFrom(const CloseToSpeedBumps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToSpeedBumps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToSpeedBumps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToSpeedBumps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToParkingSpaces :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToParkingSpaces) */ {
 public:
  CloseToParkingSpaces();
  virtual ~CloseToParkingSpaces();

  CloseToParkingSpaces(const CloseToParkingSpaces& from);
  CloseToParkingSpaces(CloseToParkingSpaces&& from) noexcept
    : CloseToParkingSpaces() {
    *this = ::std::move(from);
  }

  inline CloseToParkingSpaces& operator=(const CloseToParkingSpaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToParkingSpaces& operator=(CloseToParkingSpaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToParkingSpaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToParkingSpaces* internal_default_instance() {
    return reinterpret_cast<const CloseToParkingSpaces*>(
               &_CloseToParkingSpaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CloseToParkingSpaces& a, CloseToParkingSpaces& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToParkingSpaces* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToParkingSpaces* New() const final {
    return CreateMaybeMessage<CloseToParkingSpaces>(nullptr);
  }

  CloseToParkingSpaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToParkingSpaces>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToParkingSpaces& from);
  void MergeFrom(const CloseToParkingSpaces& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToParkingSpaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToParkingSpaces";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToParkingSpaces)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToCrosswalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToCrosswalk) */ {
 public:
  CloseToCrosswalk();
  virtual ~CloseToCrosswalk();

  CloseToCrosswalk(const CloseToCrosswalk& from);
  CloseToCrosswalk(CloseToCrosswalk&& from) noexcept
    : CloseToCrosswalk() {
    *this = ::std::move(from);
  }

  inline CloseToCrosswalk& operator=(const CloseToCrosswalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToCrosswalk& operator=(CloseToCrosswalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToCrosswalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToCrosswalk* internal_default_instance() {
    return reinterpret_cast<const CloseToCrosswalk*>(
               &_CloseToCrosswalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseToCrosswalk& a, CloseToCrosswalk& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToCrosswalk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToCrosswalk* New() const final {
    return CreateMaybeMessage<CloseToCrosswalk>(nullptr);
  }

  CloseToCrosswalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToCrosswalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToCrosswalk& from);
  void MergeFrom(const CloseToCrosswalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToCrosswalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToCrosswalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToCrosswalk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToClearArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToClearArea) */ {
 public:
  CloseToClearArea();
  virtual ~CloseToClearArea();

  CloseToClearArea(const CloseToClearArea& from);
  CloseToClearArea(CloseToClearArea&& from) noexcept
    : CloseToClearArea() {
    *this = ::std::move(from);
  }

  inline CloseToClearArea& operator=(const CloseToClearArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToClearArea& operator=(CloseToClearArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToClearArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToClearArea* internal_default_instance() {
    return reinterpret_cast<const CloseToClearArea*>(
               &_CloseToClearArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CloseToClearArea& a, CloseToClearArea& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToClearArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToClearArea* New() const final {
    return CreateMaybeMessage<CloseToClearArea>(nullptr);
  }

  CloseToClearArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToClearArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToClearArea& from);
  void MergeFrom(const CloseToClearArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToClearArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToClearArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToClearArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToJunction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToJunction) */ {
 public:
  CloseToJunction();
  virtual ~CloseToJunction();

  CloseToJunction(const CloseToJunction& from);
  CloseToJunction(CloseToJunction&& from) noexcept
    : CloseToJunction() {
    *this = ::std::move(from);
  }

  inline CloseToJunction& operator=(const CloseToJunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToJunction& operator=(CloseToJunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToJunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToJunction* internal_default_instance() {
    return reinterpret_cast<const CloseToJunction*>(
               &_CloseToJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseToJunction& a, CloseToJunction& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToJunction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToJunction* New() const final {
    return CreateMaybeMessage<CloseToJunction>(nullptr);
  }

  CloseToJunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToJunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToJunction& from);
  void MergeFrom(const CloseToJunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToJunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToJunction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToJunction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToSignal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToSignal) */ {
 public:
  CloseToSignal();
  virtual ~CloseToSignal();

  CloseToSignal(const CloseToSignal& from);
  CloseToSignal(CloseToSignal&& from) noexcept
    : CloseToSignal() {
    *this = ::std::move(from);
  }

  inline CloseToSignal& operator=(const CloseToSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToSignal& operator=(CloseToSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToSignal* internal_default_instance() {
    return reinterpret_cast<const CloseToSignal*>(
               &_CloseToSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CloseToSignal& a, CloseToSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToSignal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToSignal* New() const final {
    return CreateMaybeMessage<CloseToSignal>(nullptr);
  }

  CloseToSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToSignal& from);
  void MergeFrom(const CloseToSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToSignal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToSignal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToStopSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToStopSign) */ {
 public:
  CloseToStopSign();
  virtual ~CloseToStopSign();

  CloseToStopSign(const CloseToStopSign& from);
  CloseToStopSign(CloseToStopSign&& from) noexcept
    : CloseToStopSign() {
    *this = ::std::move(from);
  }

  inline CloseToStopSign& operator=(const CloseToStopSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToStopSign& operator=(CloseToStopSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToStopSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToStopSign* internal_default_instance() {
    return reinterpret_cast<const CloseToStopSign*>(
               &_CloseToStopSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CloseToStopSign& a, CloseToStopSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToStopSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToStopSign* New() const final {
    return CreateMaybeMessage<CloseToStopSign>(nullptr);
  }

  CloseToStopSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToStopSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToStopSign& from);
  void MergeFrom(const CloseToStopSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToStopSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToStopSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToStopSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToYieldSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToYieldSign) */ {
 public:
  CloseToYieldSign();
  virtual ~CloseToYieldSign();

  CloseToYieldSign(const CloseToYieldSign& from);
  CloseToYieldSign(CloseToYieldSign&& from) noexcept
    : CloseToYieldSign() {
    *this = ::std::move(from);
  }

  inline CloseToYieldSign& operator=(const CloseToYieldSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToYieldSign& operator=(CloseToYieldSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToYieldSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToYieldSign* internal_default_instance() {
    return reinterpret_cast<const CloseToYieldSign*>(
               &_CloseToYieldSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CloseToYieldSign& a, CloseToYieldSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToYieldSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToYieldSign* New() const final {
    return CreateMaybeMessage<CloseToYieldSign>(nullptr);
  }

  CloseToYieldSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToYieldSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToYieldSign& from);
  void MergeFrom(const CloseToYieldSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToYieldSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToYieldSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToYieldSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToCurveRoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToCurveRoad) */ {
 public:
  CloseToCurveRoad();
  virtual ~CloseToCurveRoad();

  CloseToCurveRoad(const CloseToCurveRoad& from);
  CloseToCurveRoad(CloseToCurveRoad&& from) noexcept
    : CloseToCurveRoad() {
    *this = ::std::move(from);
  }

  inline CloseToCurveRoad& operator=(const CloseToCurveRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToCurveRoad& operator=(CloseToCurveRoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToCurveRoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToCurveRoad* internal_default_instance() {
    return reinterpret_cast<const CloseToCurveRoad*>(
               &_CloseToCurveRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CloseToCurveRoad& a, CloseToCurveRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToCurveRoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToCurveRoad* New() const final {
    return CreateMaybeMessage<CloseToCurveRoad>(nullptr);
  }

  CloseToCurveRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToCurveRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToCurveRoad& from);
  void MergeFrom(const CloseToCurveRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToCurveRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToCurveRoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
    kCurvatrueFieldNumber = 5,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // optional double curvatrue = 5 [default = 0];
  bool has_curvatrue() const;
  void clear_curvatrue();
  double curvatrue() const;
  void set_curvatrue(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToCurveRoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  double curvatrue_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToDestination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.CloseToDestination) */ {
 public:
  CloseToDestination();
  virtual ~CloseToDestination();

  CloseToDestination(const CloseToDestination& from);
  CloseToDestination(CloseToDestination&& from) noexcept
    : CloseToDestination() {
    *this = ::std::move(from);
  }

  inline CloseToDestination& operator=(const CloseToDestination& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToDestination& operator=(CloseToDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseToDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseToDestination* internal_default_instance() {
    return reinterpret_cast<const CloseToDestination*>(
               &_CloseToDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CloseToDestination& a, CloseToDestination& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToDestination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseToDestination* New() const final {
    return CreateMaybeMessage<CloseToDestination>(nullptr);
  }

  CloseToDestination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseToDestination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseToDestination& from);
  void MergeFrom(const CloseToDestination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToDestination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.CloseToDestination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAreaFieldNumber = 2,
    kConditionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.routing.SceneStoryArea area = 2;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::routing::SceneStoryArea& area() const;
  ::phoenix::msg::routing::SceneStoryArea* release_area();
  ::phoenix::msg::routing::SceneStoryArea* mutable_area();
  void set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area);

  // optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::routing::SceneStoryCondition& condition() const;
  ::phoenix::msg::routing::SceneStoryCondition* release_condition();
  ::phoenix::msg::routing::SceneStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition);

  // optional .phoenix.msg.routing.SceneStoryAction action = 4;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::routing::SceneStoryAction& action() const;
  ::phoenix::msg::routing::SceneStoryAction* release_action();
  ::phoenix::msg::routing::SceneStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action);

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.CloseToDestination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::routing::SceneStoryArea* area_;
  ::phoenix::msg::routing::SceneStoryCondition* condition_;
  ::phoenix::msg::routing::SceneStoryAction* action_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// -------------------------------------------------------------------

class SceneStories :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.routing.SceneStories) */ {
 public:
  SceneStories();
  virtual ~SceneStories();

  SceneStories(const SceneStories& from);
  SceneStories(SceneStories&& from) noexcept
    : SceneStories() {
    *this = ::std::move(from);
  }

  inline SceneStories& operator=(const SceneStories& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneStories& operator=(SceneStories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneStories& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneStories* internal_default_instance() {
    return reinterpret_cast<const SceneStories*>(
               &_SceneStories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SceneStories& a, SceneStories& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneStories* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneStories* New() const final {
    return CreateMaybeMessage<SceneStories>(nullptr);
  }

  SceneStories* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneStories>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneStories& from);
  void MergeFrom(const SceneStories& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneStories* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.routing.SceneStories";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fstory_2eproto);
    return ::descriptor_table_scene_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseToCurveRoadFieldNumber = 1,
    kCloseToDestinationFieldNumber = 2,
    kCloseToCrosswalkFieldNumber = 3,
    kCloseToSpeedBumpsFieldNumber = 4,
    kCloseToParkingSpacesFieldNumber = 5,
    kCloseToClearAreaFieldNumber = 6,
    kCloseToJunctionFieldNumber = 7,
    kCloseToSignalFieldNumber = 8,
    kCloseToStopSignFieldNumber = 9,
    kCloseToYieldSignFieldNumber = 10,
  };
  // repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
  int close_to_curve_road_size() const;
  void clear_close_to_curve_road();
  ::phoenix::msg::routing::CloseToCurveRoad* mutable_close_to_curve_road(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >*
      mutable_close_to_curve_road();
  const ::phoenix::msg::routing::CloseToCurveRoad& close_to_curve_road(int index) const;
  ::phoenix::msg::routing::CloseToCurveRoad* add_close_to_curve_road();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >&
      close_to_curve_road() const;

  // repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
  int close_to_destination_size() const;
  void clear_close_to_destination();
  ::phoenix::msg::routing::CloseToDestination* mutable_close_to_destination(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >*
      mutable_close_to_destination();
  const ::phoenix::msg::routing::CloseToDestination& close_to_destination(int index) const;
  ::phoenix::msg::routing::CloseToDestination* add_close_to_destination();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >&
      close_to_destination() const;

  // repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
  int close_to_crosswalk_size() const;
  void clear_close_to_crosswalk();
  ::phoenix::msg::routing::CloseToCrosswalk* mutable_close_to_crosswalk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >*
      mutable_close_to_crosswalk();
  const ::phoenix::msg::routing::CloseToCrosswalk& close_to_crosswalk(int index) const;
  ::phoenix::msg::routing::CloseToCrosswalk* add_close_to_crosswalk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >&
      close_to_crosswalk() const;

  // repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
  int close_to_speed_bumps_size() const;
  void clear_close_to_speed_bumps();
  ::phoenix::msg::routing::CloseToSpeedBumps* mutable_close_to_speed_bumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >*
      mutable_close_to_speed_bumps();
  const ::phoenix::msg::routing::CloseToSpeedBumps& close_to_speed_bumps(int index) const;
  ::phoenix::msg::routing::CloseToSpeedBumps* add_close_to_speed_bumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >&
      close_to_speed_bumps() const;

  // repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
  int close_to_parking_spaces_size() const;
  void clear_close_to_parking_spaces();
  ::phoenix::msg::routing::CloseToParkingSpaces* mutable_close_to_parking_spaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >*
      mutable_close_to_parking_spaces();
  const ::phoenix::msg::routing::CloseToParkingSpaces& close_to_parking_spaces(int index) const;
  ::phoenix::msg::routing::CloseToParkingSpaces* add_close_to_parking_spaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >&
      close_to_parking_spaces() const;

  // repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
  int close_to_clear_area_size() const;
  void clear_close_to_clear_area();
  ::phoenix::msg::routing::CloseToClearArea* mutable_close_to_clear_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >*
      mutable_close_to_clear_area();
  const ::phoenix::msg::routing::CloseToClearArea& close_to_clear_area(int index) const;
  ::phoenix::msg::routing::CloseToClearArea* add_close_to_clear_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >&
      close_to_clear_area() const;

  // repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
  int close_to_junction_size() const;
  void clear_close_to_junction();
  ::phoenix::msg::routing::CloseToJunction* mutable_close_to_junction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >*
      mutable_close_to_junction();
  const ::phoenix::msg::routing::CloseToJunction& close_to_junction(int index) const;
  ::phoenix::msg::routing::CloseToJunction* add_close_to_junction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >&
      close_to_junction() const;

  // repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
  int close_to_signal_size() const;
  void clear_close_to_signal();
  ::phoenix::msg::routing::CloseToSignal* mutable_close_to_signal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >*
      mutable_close_to_signal();
  const ::phoenix::msg::routing::CloseToSignal& close_to_signal(int index) const;
  ::phoenix::msg::routing::CloseToSignal* add_close_to_signal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >&
      close_to_signal() const;

  // repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
  int close_to_stop_sign_size() const;
  void clear_close_to_stop_sign();
  ::phoenix::msg::routing::CloseToStopSign* mutable_close_to_stop_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >*
      mutable_close_to_stop_sign();
  const ::phoenix::msg::routing::CloseToStopSign& close_to_stop_sign(int index) const;
  ::phoenix::msg::routing::CloseToStopSign* add_close_to_stop_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >&
      close_to_stop_sign() const;

  // repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
  int close_to_yield_sign_size() const;
  void clear_close_to_yield_sign();
  ::phoenix::msg::routing::CloseToYieldSign* mutable_close_to_yield_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >*
      mutable_close_to_yield_sign();
  const ::phoenix::msg::routing::CloseToYieldSign& close_to_yield_sign(int index) const;
  ::phoenix::msg::routing::CloseToYieldSign* add_close_to_yield_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >&
      close_to_yield_sign() const;

  // @@protoc_insertion_point(class_scope:phoenix.msg.routing.SceneStories)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad > close_to_curve_road_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination > close_to_destination_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk > close_to_crosswalk_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps > close_to_speed_bumps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces > close_to_parking_spaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea > close_to_clear_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction > close_to_junction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal > close_to_signal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign > close_to_stop_sign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign > close_to_yield_sign_;
  friend struct ::TableStruct_scene_5fstory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneStoryControlLine_Point

// optional double x = 1 [default = 0];
inline bool SceneStoryControlLine_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryControlLine_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SceneStoryControlLine_Point::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryControlLine.Point.x)
  return x_;
}
inline void SceneStoryControlLine_Point::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryControlLine.Point.x)
}

// optional double y = 2 [default = 0];
inline bool SceneStoryControlLine_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryControlLine_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SceneStoryControlLine_Point::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryControlLine.Point.y)
  return y_;
}
inline void SceneStoryControlLine_Point::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryControlLine.Point.y)
}

// -------------------------------------------------------------------

// SceneStoryControlLine

// optional .phoenix.msg.routing.SceneStoryControlLine.Point start_point = 1;
inline bool SceneStoryControlLine::has_start_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryControlLine::clear_start_point() {
  if (start_point_ != nullptr) start_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::SceneStoryControlLine_Point& SceneStoryControlLine::start_point() const {
  const ::phoenix::msg::routing::SceneStoryControlLine_Point* p = start_point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryControlLine.start_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryControlLine_Point*>(
      &::phoenix::msg::routing::_SceneStoryControlLine_Point_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryControlLine_Point* SceneStoryControlLine::release_start_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.SceneStoryControlLine.start_point)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* temp = start_point_;
  start_point_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryControlLine_Point* SceneStoryControlLine::mutable_start_point() {
  _has_bits_[0] |= 0x00000001u;
  if (start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryControlLine_Point>(GetArenaNoVirtual());
    start_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStoryControlLine.start_point)
  return start_point_;
}
inline void SceneStoryControlLine::set_allocated_start_point(::phoenix::msg::routing::SceneStoryControlLine_Point* start_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_point_;
  }
  if (start_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_point_ = start_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.SceneStoryControlLine.start_point)
}

// optional .phoenix.msg.routing.SceneStoryControlLine.Point end_point = 2;
inline bool SceneStoryControlLine::has_end_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryControlLine::clear_end_point() {
  if (end_point_ != nullptr) end_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryControlLine_Point& SceneStoryControlLine::end_point() const {
  const ::phoenix::msg::routing::SceneStoryControlLine_Point* p = end_point_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryControlLine.end_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryControlLine_Point*>(
      &::phoenix::msg::routing::_SceneStoryControlLine_Point_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryControlLine_Point* SceneStoryControlLine::release_end_point() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.SceneStoryControlLine.end_point)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryControlLine_Point* temp = end_point_;
  end_point_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryControlLine_Point* SceneStoryControlLine::mutable_end_point() {
  _has_bits_[0] |= 0x00000002u;
  if (end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryControlLine_Point>(GetArenaNoVirtual());
    end_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStoryControlLine.end_point)
  return end_point_;
}
inline void SceneStoryControlLine::set_allocated_end_point(::phoenix::msg::routing::SceneStoryControlLine_Point* end_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_point_;
  }
  if (end_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_point_ = end_point;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.SceneStoryControlLine.end_point)
}

// -------------------------------------------------------------------

// SceneStoryArea_AreaType_01

// optional double distance = 1 [default = 0];
inline bool SceneStoryArea_AreaType_01::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryArea_AreaType_01::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SceneStoryArea_AreaType_01::distance() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.AreaType_01.distance)
  return distance_;
}
inline void SceneStoryArea_AreaType_01::set_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryArea.AreaType_01.distance)
}

// -------------------------------------------------------------------

// SceneStoryArea_AreaType_02

// optional .phoenix.msg.routing.SceneStoryControlLine control_line = 1;
inline bool SceneStoryArea_AreaType_02::has_control_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryArea_AreaType_02::clear_control_line() {
  if (control_line_ != nullptr) control_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::SceneStoryControlLine& SceneStoryArea_AreaType_02::control_line() const {
  const ::phoenix::msg::routing::SceneStoryControlLine* p = control_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.AreaType_02.control_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryControlLine*>(
      &::phoenix::msg::routing::_SceneStoryControlLine_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryControlLine* SceneStoryArea_AreaType_02::release_control_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.SceneStoryArea.AreaType_02.control_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::SceneStoryControlLine* temp = control_line_;
  control_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryControlLine* SceneStoryArea_AreaType_02::mutable_control_line() {
  _has_bits_[0] |= 0x00000001u;
  if (control_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryControlLine>(GetArenaNoVirtual());
    control_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStoryArea.AreaType_02.control_line)
  return control_line_;
}
inline void SceneStoryArea_AreaType_02::set_allocated_control_line(::phoenix::msg::routing::SceneStoryControlLine* control_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_line_;
  }
  if (control_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_line_ = control_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.SceneStoryArea.AreaType_02.control_line)
}

// optional double start_s = 2 [default = 0];
inline bool SceneStoryArea_AreaType_02::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryArea_AreaType_02::clear_start_s() {
  start_s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SceneStoryArea_AreaType_02::start_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.AreaType_02.start_s)
  return start_s_;
}
inline void SceneStoryArea_AreaType_02::set_start_s(double value) {
  _has_bits_[0] |= 0x00000002u;
  start_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryArea.AreaType_02.start_s)
}

// optional double end_s = 3 [default = 0];
inline bool SceneStoryArea_AreaType_02::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneStoryArea_AreaType_02::clear_end_s() {
  end_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SceneStoryArea_AreaType_02::end_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.AreaType_02.end_s)
  return end_s_;
}
inline void SceneStoryArea_AreaType_02::set_end_s(double value) {
  _has_bits_[0] |= 0x00000004u;
  end_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryArea.AreaType_02.end_s)
}

// -------------------------------------------------------------------

// SceneStoryArea

// optional .phoenix.msg.routing.SceneStoryArea.AreaType_01 area_type_01 = 2;
inline bool SceneStoryArea::has_area_type_01() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryArea::clear_area_type_01() {
  if (area_type_01_ != nullptr) area_type_01_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::routing::SceneStoryArea_AreaType_01& SceneStoryArea::area_type_01() const {
  const ::phoenix::msg::routing::SceneStoryArea_AreaType_01* p = area_type_01_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.area_type_01)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea_AreaType_01*>(
      &::phoenix::msg::routing::_SceneStoryArea_AreaType_01_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea_AreaType_01* SceneStoryArea::release_area_type_01() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.SceneStoryArea.area_type_01)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_01* temp = area_type_01_;
  area_type_01_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea_AreaType_01* SceneStoryArea::mutable_area_type_01() {
  _has_bits_[0] |= 0x00000001u;
  if (area_type_01_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea_AreaType_01>(GetArenaNoVirtual());
    area_type_01_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStoryArea.area_type_01)
  return area_type_01_;
}
inline void SceneStoryArea::set_allocated_area_type_01(::phoenix::msg::routing::SceneStoryArea_AreaType_01* area_type_01) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_type_01_;
  }
  if (area_type_01) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area_type_01 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area_type_01, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  area_type_01_ = area_type_01;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.SceneStoryArea.area_type_01)
}

// optional .phoenix.msg.routing.SceneStoryArea.AreaType_02 area_type_02 = 3;
inline bool SceneStoryArea::has_area_type_02() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryArea::clear_area_type_02() {
  if (area_type_02_ != nullptr) area_type_02_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea_AreaType_02& SceneStoryArea::area_type_02() const {
  const ::phoenix::msg::routing::SceneStoryArea_AreaType_02* p = area_type_02_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryArea.area_type_02)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea_AreaType_02*>(
      &::phoenix::msg::routing::_SceneStoryArea_AreaType_02_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea_AreaType_02* SceneStoryArea::release_area_type_02() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.SceneStoryArea.area_type_02)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea_AreaType_02* temp = area_type_02_;
  area_type_02_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea_AreaType_02* SceneStoryArea::mutable_area_type_02() {
  _has_bits_[0] |= 0x00000002u;
  if (area_type_02_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea_AreaType_02>(GetArenaNoVirtual());
    area_type_02_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStoryArea.area_type_02)
  return area_type_02_;
}
inline void SceneStoryArea::set_allocated_area_type_02(::phoenix::msg::routing::SceneStoryArea_AreaType_02* area_type_02) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_type_02_;
  }
  if (area_type_02) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area_type_02 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area_type_02, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_type_02_ = area_type_02;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.SceneStoryArea.area_type_02)
}

// -------------------------------------------------------------------

// SceneStoryCondition

// optional bool valid_area = 1 [default = false];
inline bool SceneStoryCondition::has_valid_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryCondition::clear_valid_area() {
  valid_area_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SceneStoryCondition::valid_area() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryCondition.valid_area)
  return valid_area_;
}
inline void SceneStoryCondition::set_valid_area(bool value) {
  _has_bits_[0] |= 0x00000002u;
  valid_area_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryCondition.valid_area)
}

// optional double speed_high = 2 [default = 0];
inline bool SceneStoryCondition::has_speed_high() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryCondition::clear_speed_high() {
  speed_high_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SceneStoryCondition::speed_high() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryCondition.speed_high)
  return speed_high_;
}
inline void SceneStoryCondition::set_speed_high(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_high_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryCondition.speed_high)
}

// optional double speed_low = 3 [default = 0];
inline bool SceneStoryCondition::has_speed_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneStoryCondition::clear_speed_low() {
  speed_low_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SceneStoryCondition::speed_low() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryCondition.speed_low)
  return speed_low_;
}
inline void SceneStoryCondition::set_speed_low(double value) {
  _has_bits_[0] |= 0x00000008u;
  speed_low_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryCondition.speed_low)
}

// optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
inline bool SceneStoryCondition::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneStoryCondition::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::control::Chassis_GearPosition SceneStoryCondition::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryCondition.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void SceneStoryCondition::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryCondition.gear)
}

// -------------------------------------------------------------------

// SceneStoryAction

// optional double hold_time = 4 [default = 0];
inline bool SceneStoryAction::has_hold_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneStoryAction::clear_hold_time() {
  hold_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SceneStoryAction::hold_time() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.hold_time)
  return hold_time_;
}
inline void SceneStoryAction::set_hold_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.hold_time)
}

// optional double speed = 2 [default = 0];
inline bool SceneStoryAction::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStoryAction::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SceneStoryAction::speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.speed)
  return speed_;
}
inline void SceneStoryAction::set_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.speed)
}

// optional double acceleration = 3 [default = 0];
inline bool SceneStoryAction::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStoryAction::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SceneStoryAction::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.acceleration)
  return acceleration_;
}
inline void SceneStoryAction::set_acceleration(double value) {
  _has_bits_[0] |= 0x00000002u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.acceleration)
}

// optional .phoenix.msg.control.Chassis.GearPosition gear = 1 [default = GEAR_INVALID];
inline bool SceneStoryAction::has_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneStoryAction::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::control::Chassis_GearPosition SceneStoryAction::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void SceneStoryAction::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.gear)
}

// optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
inline bool SceneStoryAction::has_turn_lamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneStoryAction::clear_turn_lamp() {
  turn_lamp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_SignalTurnLamp SceneStoryAction::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.turn_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(turn_lamp_);
}
inline void SceneStoryAction::set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.turn_lamp)
}

// optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
inline bool SceneStoryAction::has_brake_lamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SceneStoryAction::clear_brake_lamp() {
  brake_lamp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::phoenix::msg::control::Chassis_SignalLamp SceneStoryAction::brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStoryAction.brake_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(brake_lamp_);
}
inline void SceneStoryAction::set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalLamp_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.SceneStoryAction.brake_lamp)
}

// -------------------------------------------------------------------

// CloseToSpeedBumps

// optional string id = 1;
inline bool CloseToSpeedBumps::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToSpeedBumps::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToSpeedBumps::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.id)
  return id_.GetNoArena();
}
inline void CloseToSpeedBumps::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSpeedBumps.id)
}
inline void CloseToSpeedBumps::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToSpeedBumps.id)
}
inline void CloseToSpeedBumps::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToSpeedBumps.id)
}
inline void CloseToSpeedBumps::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToSpeedBumps.id)
}
inline std::string* CloseToSpeedBumps::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToSpeedBumps::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToSpeedBumps::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToSpeedBumps::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToSpeedBumps::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToSpeedBumps::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToSpeedBumps::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToSpeedBumps::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.area)
  return area_;
}
inline void CloseToSpeedBumps::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToSpeedBumps::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToSpeedBumps::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToSpeedBumps::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToSpeedBumps::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToSpeedBumps::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.condition)
  return condition_;
}
inline void CloseToSpeedBumps::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToSpeedBumps::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToSpeedBumps::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToSpeedBumps::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSpeedBumps.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToSpeedBumps::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSpeedBumps.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToSpeedBumps::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSpeedBumps.action)
  return action_;
}
inline void CloseToSpeedBumps::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSpeedBumps.action)
}

// -------------------------------------------------------------------

// CloseToParkingSpaces

// optional string id = 1;
inline bool CloseToParkingSpaces::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToParkingSpaces::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToParkingSpaces::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.id)
  return id_.GetNoArena();
}
inline void CloseToParkingSpaces::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToParkingSpaces.id)
}
inline void CloseToParkingSpaces::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToParkingSpaces.id)
}
inline void CloseToParkingSpaces::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToParkingSpaces.id)
}
inline void CloseToParkingSpaces::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToParkingSpaces.id)
}
inline std::string* CloseToParkingSpaces::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToParkingSpaces::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToParkingSpaces::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToParkingSpaces::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToParkingSpaces::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToParkingSpaces::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToParkingSpaces::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToParkingSpaces::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.area)
  return area_;
}
inline void CloseToParkingSpaces::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToParkingSpaces::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToParkingSpaces::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToParkingSpaces::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToParkingSpaces::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToParkingSpaces::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.condition)
  return condition_;
}
inline void CloseToParkingSpaces::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToParkingSpaces::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToParkingSpaces::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToParkingSpaces::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToParkingSpaces.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToParkingSpaces::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToParkingSpaces.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToParkingSpaces::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToParkingSpaces.action)
  return action_;
}
inline void CloseToParkingSpaces::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToParkingSpaces.action)
}

// -------------------------------------------------------------------

// CloseToCrosswalk

// optional string id = 1;
inline bool CloseToCrosswalk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToCrosswalk::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToCrosswalk::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.id)
  return id_.GetNoArena();
}
inline void CloseToCrosswalk::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCrosswalk.id)
}
inline void CloseToCrosswalk::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToCrosswalk.id)
}
inline void CloseToCrosswalk::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToCrosswalk.id)
}
inline void CloseToCrosswalk::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToCrosswalk.id)
}
inline std::string* CloseToCrosswalk::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToCrosswalk::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToCrosswalk::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToCrosswalk::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToCrosswalk::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToCrosswalk::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToCrosswalk::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToCrosswalk::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.area)
  return area_;
}
inline void CloseToCrosswalk::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToCrosswalk::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToCrosswalk::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToCrosswalk::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToCrosswalk::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToCrosswalk::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.condition)
  return condition_;
}
inline void CloseToCrosswalk::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToCrosswalk::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToCrosswalk::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToCrosswalk::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCrosswalk.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToCrosswalk::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCrosswalk.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToCrosswalk::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCrosswalk.action)
  return action_;
}
inline void CloseToCrosswalk::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCrosswalk.action)
}

// -------------------------------------------------------------------

// CloseToClearArea

// optional string id = 1;
inline bool CloseToClearArea::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToClearArea::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToClearArea::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.id)
  return id_.GetNoArena();
}
inline void CloseToClearArea::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToClearArea.id)
}
inline void CloseToClearArea::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToClearArea.id)
}
inline void CloseToClearArea::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToClearArea.id)
}
inline void CloseToClearArea::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToClearArea.id)
}
inline std::string* CloseToClearArea::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToClearArea::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToClearArea::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToClearArea::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToClearArea::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToClearArea::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToClearArea::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToClearArea::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.area)
  return area_;
}
inline void CloseToClearArea::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToClearArea::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToClearArea::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToClearArea::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToClearArea::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToClearArea::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.condition)
  return condition_;
}
inline void CloseToClearArea::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToClearArea::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToClearArea::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToClearArea::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToClearArea.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToClearArea::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToClearArea.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToClearArea::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToClearArea.action)
  return action_;
}
inline void CloseToClearArea::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToClearArea.action)
}

// -------------------------------------------------------------------

// CloseToJunction

// optional string id = 1;
inline bool CloseToJunction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToJunction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToJunction::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.id)
  return id_.GetNoArena();
}
inline void CloseToJunction::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToJunction.id)
}
inline void CloseToJunction::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToJunction.id)
}
inline std::string* CloseToJunction::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToJunction::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToJunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToJunction::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToJunction::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToJunction::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToJunction::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToJunction::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.area)
  return area_;
}
inline void CloseToJunction::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToJunction::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToJunction::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToJunction::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToJunction::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToJunction::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.condition)
  return condition_;
}
inline void CloseToJunction::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToJunction::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToJunction::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToJunction::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToJunction.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToJunction::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToJunction.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToJunction::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToJunction.action)
  return action_;
}
inline void CloseToJunction::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToJunction.action)
}

// -------------------------------------------------------------------

// CloseToSignal

// optional string id = 1;
inline bool CloseToSignal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToSignal::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToSignal::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.id)
  return id_.GetNoArena();
}
inline void CloseToSignal::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToSignal.id)
}
inline void CloseToSignal::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToSignal.id)
}
inline void CloseToSignal::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToSignal.id)
}
inline void CloseToSignal::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToSignal.id)
}
inline std::string* CloseToSignal::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToSignal::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToSignal::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToSignal::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToSignal::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToSignal::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToSignal::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToSignal::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.area)
  return area_;
}
inline void CloseToSignal::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToSignal::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToSignal::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToSignal::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToSignal::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToSignal::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.condition)
  return condition_;
}
inline void CloseToSignal::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToSignal::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToSignal::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToSignal::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToSignal.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToSignal::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToSignal.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToSignal::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToSignal.action)
  return action_;
}
inline void CloseToSignal::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToSignal.action)
}

// -------------------------------------------------------------------

// CloseToStopSign

// optional string id = 1;
inline bool CloseToStopSign::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToStopSign::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToStopSign::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.id)
  return id_.GetNoArena();
}
inline void CloseToStopSign::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToStopSign.id)
}
inline void CloseToStopSign::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToStopSign.id)
}
inline void CloseToStopSign::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToStopSign.id)
}
inline void CloseToStopSign::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToStopSign.id)
}
inline std::string* CloseToStopSign::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToStopSign::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToStopSign::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToStopSign::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToStopSign::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToStopSign::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToStopSign::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToStopSign::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.area)
  return area_;
}
inline void CloseToStopSign::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToStopSign::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToStopSign::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToStopSign::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToStopSign::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToStopSign::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.condition)
  return condition_;
}
inline void CloseToStopSign::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToStopSign::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToStopSign::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToStopSign::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToStopSign.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToStopSign::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToStopSign.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToStopSign::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToStopSign.action)
  return action_;
}
inline void CloseToStopSign::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToStopSign.action)
}

// -------------------------------------------------------------------

// CloseToYieldSign

// optional string id = 1;
inline bool CloseToYieldSign::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToYieldSign::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToYieldSign::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.id)
  return id_.GetNoArena();
}
inline void CloseToYieldSign::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToYieldSign.id)
}
inline void CloseToYieldSign::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToYieldSign.id)
}
inline void CloseToYieldSign::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToYieldSign.id)
}
inline void CloseToYieldSign::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToYieldSign.id)
}
inline std::string* CloseToYieldSign::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToYieldSign::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToYieldSign::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToYieldSign::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToYieldSign::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToYieldSign::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToYieldSign::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToYieldSign::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.area)
  return area_;
}
inline void CloseToYieldSign::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToYieldSign::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToYieldSign::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToYieldSign::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToYieldSign::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToYieldSign::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.condition)
  return condition_;
}
inline void CloseToYieldSign::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToYieldSign::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToYieldSign::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToYieldSign::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToYieldSign.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToYieldSign::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToYieldSign.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToYieldSign::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToYieldSign.action)
  return action_;
}
inline void CloseToYieldSign::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToYieldSign.action)
}

// -------------------------------------------------------------------

// CloseToCurveRoad

// optional string id = 1;
inline bool CloseToCurveRoad::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToCurveRoad::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToCurveRoad::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.id)
  return id_.GetNoArena();
}
inline void CloseToCurveRoad::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCurveRoad.id)
}
inline void CloseToCurveRoad::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToCurveRoad.id)
}
inline void CloseToCurveRoad::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToCurveRoad.id)
}
inline void CloseToCurveRoad::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToCurveRoad.id)
}
inline std::string* CloseToCurveRoad::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToCurveRoad::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToCurveRoad::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToCurveRoad::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToCurveRoad::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToCurveRoad::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToCurveRoad::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToCurveRoad::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.area)
  return area_;
}
inline void CloseToCurveRoad::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToCurveRoad::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToCurveRoad::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToCurveRoad::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToCurveRoad::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToCurveRoad::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.condition)
  return condition_;
}
inline void CloseToCurveRoad::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToCurveRoad::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToCurveRoad::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToCurveRoad::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToCurveRoad::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToCurveRoad.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToCurveRoad::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToCurveRoad.action)
  return action_;
}
inline void CloseToCurveRoad::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToCurveRoad.action)
}

// optional double curvatrue = 5 [default = 0];
inline bool CloseToCurveRoad::has_curvatrue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseToCurveRoad::clear_curvatrue() {
  curvatrue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CloseToCurveRoad::curvatrue() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToCurveRoad.curvatrue)
  return curvatrue_;
}
inline void CloseToCurveRoad::set_curvatrue(double value) {
  _has_bits_[0] |= 0x00000010u;
  curvatrue_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToCurveRoad.curvatrue)
}

// -------------------------------------------------------------------

// CloseToDestination

// optional string id = 1;
inline bool CloseToDestination::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseToDestination::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToDestination::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.id)
  return id_.GetNoArena();
}
inline void CloseToDestination::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.routing.CloseToDestination.id)
}
inline void CloseToDestination::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.routing.CloseToDestination.id)
}
inline void CloseToDestination::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.routing.CloseToDestination.id)
}
inline void CloseToDestination::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.routing.CloseToDestination.id)
}
inline std::string* CloseToDestination::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseToDestination::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseToDestination::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.id)
}

// optional .phoenix.msg.routing.SceneStoryArea area = 2;
inline bool CloseToDestination::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseToDestination::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::routing::SceneStoryArea& CloseToDestination::area() const {
  const ::phoenix::msg::routing::SceneStoryArea* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryArea*>(
      &::phoenix::msg::routing::_SceneStoryArea_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToDestination::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.area)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::routing::SceneStoryArea* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryArea* CloseToDestination::mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryArea>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.area)
  return area_;
}
inline void CloseToDestination::set_allocated_area(::phoenix::msg::routing::SceneStoryArea* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.area)
}

// optional .phoenix.msg.routing.SceneStoryCondition condition = 3;
inline bool CloseToDestination::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseToDestination::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::routing::SceneStoryCondition& CloseToDestination::condition() const {
  const ::phoenix::msg::routing::SceneStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryCondition*>(
      &::phoenix::msg::routing::_SceneStoryCondition_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToDestination::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::routing::SceneStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryCondition* CloseToDestination::mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.condition)
  return condition_;
}
inline void CloseToDestination::set_allocated_condition(::phoenix::msg::routing::SceneStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.condition)
}

// optional .phoenix.msg.routing.SceneStoryAction action = 4;
inline bool CloseToDestination::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseToDestination::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::phoenix::msg::routing::SceneStoryAction& CloseToDestination::action() const {
  const ::phoenix::msg::routing::SceneStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.CloseToDestination.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::routing::SceneStoryAction*>(
      &::phoenix::msg::routing::_SceneStoryAction_default_instance_);
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToDestination::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.routing.CloseToDestination.action)
  _has_bits_[0] &= ~0x00000008u;
  ::phoenix::msg::routing::SceneStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::routing::SceneStoryAction* CloseToDestination::mutable_action() {
  _has_bits_[0] |= 0x00000008u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::routing::SceneStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.CloseToDestination.action)
  return action_;
}
inline void CloseToDestination::set_allocated_action(::phoenix::msg::routing::SceneStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.routing.CloseToDestination.action)
}

// -------------------------------------------------------------------

// SceneStories

// repeated .phoenix.msg.routing.CloseToCurveRoad close_to_curve_road = 1;
inline int SceneStories::close_to_curve_road_size() const {
  return close_to_curve_road_.size();
}
inline void SceneStories::clear_close_to_curve_road() {
  close_to_curve_road_.Clear();
}
inline ::phoenix::msg::routing::CloseToCurveRoad* SceneStories::mutable_close_to_curve_road(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_curve_road)
  return close_to_curve_road_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >*
SceneStories::mutable_close_to_curve_road() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_curve_road)
  return &close_to_curve_road_;
}
inline const ::phoenix::msg::routing::CloseToCurveRoad& SceneStories::close_to_curve_road(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_curve_road)
  return close_to_curve_road_.Get(index);
}
inline ::phoenix::msg::routing::CloseToCurveRoad* SceneStories::add_close_to_curve_road() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_curve_road)
  return close_to_curve_road_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCurveRoad >&
SceneStories::close_to_curve_road() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_curve_road)
  return close_to_curve_road_;
}

// repeated .phoenix.msg.routing.CloseToDestination close_to_destination = 2;
inline int SceneStories::close_to_destination_size() const {
  return close_to_destination_.size();
}
inline void SceneStories::clear_close_to_destination() {
  close_to_destination_.Clear();
}
inline ::phoenix::msg::routing::CloseToDestination* SceneStories::mutable_close_to_destination(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_destination)
  return close_to_destination_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >*
SceneStories::mutable_close_to_destination() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_destination)
  return &close_to_destination_;
}
inline const ::phoenix::msg::routing::CloseToDestination& SceneStories::close_to_destination(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_destination)
  return close_to_destination_.Get(index);
}
inline ::phoenix::msg::routing::CloseToDestination* SceneStories::add_close_to_destination() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_destination)
  return close_to_destination_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToDestination >&
SceneStories::close_to_destination() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_destination)
  return close_to_destination_;
}

// repeated .phoenix.msg.routing.CloseToCrosswalk close_to_crosswalk = 3;
inline int SceneStories::close_to_crosswalk_size() const {
  return close_to_crosswalk_.size();
}
inline void SceneStories::clear_close_to_crosswalk() {
  close_to_crosswalk_.Clear();
}
inline ::phoenix::msg::routing::CloseToCrosswalk* SceneStories::mutable_close_to_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_crosswalk)
  return close_to_crosswalk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >*
SceneStories::mutable_close_to_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_crosswalk)
  return &close_to_crosswalk_;
}
inline const ::phoenix::msg::routing::CloseToCrosswalk& SceneStories::close_to_crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_crosswalk)
  return close_to_crosswalk_.Get(index);
}
inline ::phoenix::msg::routing::CloseToCrosswalk* SceneStories::add_close_to_crosswalk() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_crosswalk)
  return close_to_crosswalk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToCrosswalk >&
SceneStories::close_to_crosswalk() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_crosswalk)
  return close_to_crosswalk_;
}

// repeated .phoenix.msg.routing.CloseToSpeedBumps close_to_speed_bumps = 4;
inline int SceneStories::close_to_speed_bumps_size() const {
  return close_to_speed_bumps_.size();
}
inline void SceneStories::clear_close_to_speed_bumps() {
  close_to_speed_bumps_.Clear();
}
inline ::phoenix::msg::routing::CloseToSpeedBumps* SceneStories::mutable_close_to_speed_bumps(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_speed_bumps)
  return close_to_speed_bumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >*
SceneStories::mutable_close_to_speed_bumps() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_speed_bumps)
  return &close_to_speed_bumps_;
}
inline const ::phoenix::msg::routing::CloseToSpeedBumps& SceneStories::close_to_speed_bumps(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_speed_bumps)
  return close_to_speed_bumps_.Get(index);
}
inline ::phoenix::msg::routing::CloseToSpeedBumps* SceneStories::add_close_to_speed_bumps() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_speed_bumps)
  return close_to_speed_bumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSpeedBumps >&
SceneStories::close_to_speed_bumps() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_speed_bumps)
  return close_to_speed_bumps_;
}

// repeated .phoenix.msg.routing.CloseToParkingSpaces close_to_parking_spaces = 5;
inline int SceneStories::close_to_parking_spaces_size() const {
  return close_to_parking_spaces_.size();
}
inline void SceneStories::clear_close_to_parking_spaces() {
  close_to_parking_spaces_.Clear();
}
inline ::phoenix::msg::routing::CloseToParkingSpaces* SceneStories::mutable_close_to_parking_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_parking_spaces)
  return close_to_parking_spaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >*
SceneStories::mutable_close_to_parking_spaces() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_parking_spaces)
  return &close_to_parking_spaces_;
}
inline const ::phoenix::msg::routing::CloseToParkingSpaces& SceneStories::close_to_parking_spaces(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_parking_spaces)
  return close_to_parking_spaces_.Get(index);
}
inline ::phoenix::msg::routing::CloseToParkingSpaces* SceneStories::add_close_to_parking_spaces() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_parking_spaces)
  return close_to_parking_spaces_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToParkingSpaces >&
SceneStories::close_to_parking_spaces() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_parking_spaces)
  return close_to_parking_spaces_;
}

// repeated .phoenix.msg.routing.CloseToClearArea close_to_clear_area = 6;
inline int SceneStories::close_to_clear_area_size() const {
  return close_to_clear_area_.size();
}
inline void SceneStories::clear_close_to_clear_area() {
  close_to_clear_area_.Clear();
}
inline ::phoenix::msg::routing::CloseToClearArea* SceneStories::mutable_close_to_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_clear_area)
  return close_to_clear_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >*
SceneStories::mutable_close_to_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_clear_area)
  return &close_to_clear_area_;
}
inline const ::phoenix::msg::routing::CloseToClearArea& SceneStories::close_to_clear_area(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_clear_area)
  return close_to_clear_area_.Get(index);
}
inline ::phoenix::msg::routing::CloseToClearArea* SceneStories::add_close_to_clear_area() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_clear_area)
  return close_to_clear_area_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToClearArea >&
SceneStories::close_to_clear_area() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_clear_area)
  return close_to_clear_area_;
}

// repeated .phoenix.msg.routing.CloseToJunction close_to_junction = 7;
inline int SceneStories::close_to_junction_size() const {
  return close_to_junction_.size();
}
inline void SceneStories::clear_close_to_junction() {
  close_to_junction_.Clear();
}
inline ::phoenix::msg::routing::CloseToJunction* SceneStories::mutable_close_to_junction(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_junction)
  return close_to_junction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >*
SceneStories::mutable_close_to_junction() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_junction)
  return &close_to_junction_;
}
inline const ::phoenix::msg::routing::CloseToJunction& SceneStories::close_to_junction(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_junction)
  return close_to_junction_.Get(index);
}
inline ::phoenix::msg::routing::CloseToJunction* SceneStories::add_close_to_junction() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_junction)
  return close_to_junction_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToJunction >&
SceneStories::close_to_junction() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_junction)
  return close_to_junction_;
}

// repeated .phoenix.msg.routing.CloseToSignal close_to_signal = 8;
inline int SceneStories::close_to_signal_size() const {
  return close_to_signal_.size();
}
inline void SceneStories::clear_close_to_signal() {
  close_to_signal_.Clear();
}
inline ::phoenix::msg::routing::CloseToSignal* SceneStories::mutable_close_to_signal(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_signal)
  return close_to_signal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >*
SceneStories::mutable_close_to_signal() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_signal)
  return &close_to_signal_;
}
inline const ::phoenix::msg::routing::CloseToSignal& SceneStories::close_to_signal(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_signal)
  return close_to_signal_.Get(index);
}
inline ::phoenix::msg::routing::CloseToSignal* SceneStories::add_close_to_signal() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_signal)
  return close_to_signal_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToSignal >&
SceneStories::close_to_signal() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_signal)
  return close_to_signal_;
}

// repeated .phoenix.msg.routing.CloseToStopSign close_to_stop_sign = 9;
inline int SceneStories::close_to_stop_sign_size() const {
  return close_to_stop_sign_.size();
}
inline void SceneStories::clear_close_to_stop_sign() {
  close_to_stop_sign_.Clear();
}
inline ::phoenix::msg::routing::CloseToStopSign* SceneStories::mutable_close_to_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_stop_sign)
  return close_to_stop_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >*
SceneStories::mutable_close_to_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_stop_sign)
  return &close_to_stop_sign_;
}
inline const ::phoenix::msg::routing::CloseToStopSign& SceneStories::close_to_stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_stop_sign)
  return close_to_stop_sign_.Get(index);
}
inline ::phoenix::msg::routing::CloseToStopSign* SceneStories::add_close_to_stop_sign() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_stop_sign)
  return close_to_stop_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToStopSign >&
SceneStories::close_to_stop_sign() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_stop_sign)
  return close_to_stop_sign_;
}

// repeated .phoenix.msg.routing.CloseToYieldSign close_to_yield_sign = 10;
inline int SceneStories::close_to_yield_sign_size() const {
  return close_to_yield_sign_.size();
}
inline void SceneStories::clear_close_to_yield_sign() {
  close_to_yield_sign_.Clear();
}
inline ::phoenix::msg::routing::CloseToYieldSign* SceneStories::mutable_close_to_yield_sign(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.routing.SceneStories.close_to_yield_sign)
  return close_to_yield_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >*
SceneStories::mutable_close_to_yield_sign() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.routing.SceneStories.close_to_yield_sign)
  return &close_to_yield_sign_;
}
inline const ::phoenix::msg::routing::CloseToYieldSign& SceneStories::close_to_yield_sign(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.routing.SceneStories.close_to_yield_sign)
  return close_to_yield_sign_.Get(index);
}
inline ::phoenix::msg::routing::CloseToYieldSign* SceneStories::add_close_to_yield_sign() {
  // @@protoc_insertion_point(field_add:phoenix.msg.routing.SceneStories.close_to_yield_sign)
  return close_to_yield_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::routing::CloseToYieldSign >&
SceneStories::close_to_yield_sign() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.routing.SceneStories.close_to_yield_sign)
  return close_to_yield_sign_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_5fstory_2eproto
