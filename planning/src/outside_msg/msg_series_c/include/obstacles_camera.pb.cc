// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_camera.proto

#include "obstacles_camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacles_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleCamera_obstacles_5fcamera_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleCameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleCamera> _instance;
} _ObstacleCamera_default_instance_;
class ObstacleCameraListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleCameraList> _instance;
} _ObstacleCameraList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_ObstacleCamera_obstacles_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleCamera_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleCamera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleCamera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleCamera_obstacles_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObstacleCamera_obstacles_5fcamera_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleCameraList_obstacles_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleCameraList_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleCameraList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleCameraList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleCameraList_obstacles_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObstacleCameraList_obstacles_5fcamera_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_ObstacleCamera_obstacles_5fcamera_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacles_5fcamera_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_obstacles_5fcamera_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacles_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacles_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, cut_in_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, blinker_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, brake_lights_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, age_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, lane_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, length_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, height_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, heading_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, v_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, v_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, accel_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, accel_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCamera, scale_change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, cam_type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleCameraList, obstacles_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::phoenix::msg::perception::ObstacleCamera)},
  { 45, 54, sizeof(::phoenix::msg::perception::ObstacleCameraList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleCameraList_default_instance_),
};

const char descriptor_table_protodef_obstacles_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026obstacles_camera.proto\022\026phoenix.msg.pe"
  "rception\032\014header.proto\"\267\n\n\016ObstacleCamer"
  "a\022\r\n\002id\030\001 \001(\005:\0010\022N\n\004type\030\002 \001(\0162..phoenix"
  ".msg.perception.ObstacleCamera.ObjType:\020"
  "OBJ_TYPE_UNKNOWN\022T\n\006status\030\003 \001(\01620.phoen"
  "ix.msg.perception.ObstacleCamera.ObjStat"
  "us:\022OBJ_STATUS_UNKNOWN\022U\n\006cut_in\030\004 \001(\01620"
  ".phoenix.msg.perception.ObstacleCamera.C"
  "utInType:\023CUT_IN_TYPE_UNKNOWN\022T\n\007blinker"
  "\030\005 \001(\01622.phoenix.msg.perception.Obstacle"
  "Camera.BlinkerType:\017BLINKER_UNKNOWN\022\033\n\014b"
  "rake_lights\030\006 \001(\010:\005false\022\016\n\003age\030\007 \001(\005:\0010"
  "\022\017\n\004lane\030\010 \001(\005:\0010\022\021\n\006length\030\t \001(\002:\0010\022\020\n\005"
  "width\030\n \001(\002:\0010\022\021\n\006height\030\013 \001(\002:\0010\022\014\n\001x\030\014"
  " \001(\002:\0010\022\014\n\001y\030\r \001(\002:\0010\022\022\n\007heading\030\016 \001(\002:\001"
  "0\022\016\n\003v_x\030\017 \001(\002:\0010\022\016\n\003v_y\030\020 \001(\002:\0010\022\022\n\007acc"
  "el_x\030\021 \001(\002:\0010\022\022\n\007accel_y\030\022 \001(\002:\0010\022\023\n\010yaw"
  "_rate\030\023 \001(\002:\0010\022\027\n\014scale_change\030\024 \001(\002:\0010\""
  "\207\002\n\007ObjType\022\024\n\020OBJ_TYPE_UNKNOWN\020\000\022\036\n\032OBJ"
  "_TYPE_PASSENGER_VEHICLE\020\001\022\037\n\033OBJ_TYPE_CO"
  "MMERCIAL_VEHICLE\020\002\022\034\n\030OBJ_TYPE_SPECIAL_V"
  "EHICLE\020\003\022\032\n\026OBJ_TYPE_OTHER_VEHICLE\020\004\022\027\n\023"
  "OBJ_TYPE_PEDESTRIAN\020\005\022\024\n\020OBJ_TYPE_BICYCL"
  "E\020\006\022\023\n\017OBJ_TYPE_ANIMAL\020\007\022\024\n\020OBJ_TYPE_DIS"
  "CARD\020\010\022\021\n\rOBJ_TYPE_CURB\020\t\"\233\001\n\tObjStatus\022"
  "\026\n\022OBJ_STATUS_UNKNOWN\020\000\022\027\n\023OBJ_STATUS_ST"
  "ANDING\020\001\022\026\n\022OBJ_STATUS_STOPPED\020\002\022\025\n\021OBJ_"
  "STATUS_MOVING\020\003\022\027\n\023OBJ_STATUS_ONCOMING\020\004"
  "\022\025\n\021OBJ_STATUS_PARKED\020\005\"\222\001\n\tCutInType\022\027\n"
  "\023CUT_IN_TYPE_UNKNOWN\020\000\022\034\n\030CUT_IN_TYPE_IN"
  "_HOST_LANE\020\001\022\035\n\031CUT_IN_TYPE_OUT_HOST_LAN"
  "E\020\002\022\026\n\022CUT_IN_TYPE_CUT_IN\020\003\022\027\n\023CUT_IN_TY"
  "PE_CUT_OUT\020\004\"j\n\013BlinkerType\022\023\n\017BLINKER_U"
  "NKNOWN\020\000\022\017\n\013BLINKER_OFF\020\001\022\020\n\014BLINKER_LEF"
  "T\020\002\022\021\n\rBLINKER_RIGHT\020\003\022\020\n\014BLINKER_BOTH\020\004"
  "\"\303\002\n\022ObstacleCameraList\022*\n\006header\030\001 \001(\0132"
  "\032.phoenix.msg.common.Header\022V\n\010cam_type\030"
  "\002 \001(\01622.phoenix.msg.perception.ObstacleC"
  "ameraList.CamType:\020CAM_TYPE_UNKNOWN\022\030\n\ro"
  "bstacles_num\030\003 \001(\005:\0010\0229\n\tobstacles\030\004 \003(\013"
  "2&.phoenix.msg.perception.ObstacleCamera"
  "\"T\n\007CamType\022\024\n\020CAM_TYPE_UNKNOWN\020\000\022\030\n\024CAM"
  "_TYPE_MOBILEYE_Q2\020\001\022\031\n\025CAM_TYPE_MAXIEYE_"
  "D500\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacles_5fcamera_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacles_5fcamera_2eproto_sccs[2] = {
  &scc_info_ObstacleCamera_obstacles_5fcamera_2eproto.base,
  &scc_info_ObstacleCameraList_obstacles_5fcamera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacles_5fcamera_2eproto_once;
static bool descriptor_table_obstacles_5fcamera_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5fcamera_2eproto = {
  &descriptor_table_obstacles_5fcamera_2eproto_initialized, descriptor_table_protodef_obstacles_5fcamera_2eproto, "obstacles_camera.proto", 1726,
  &descriptor_table_obstacles_5fcamera_2eproto_once, descriptor_table_obstacles_5fcamera_2eproto_sccs, descriptor_table_obstacles_5fcamera_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_obstacles_5fcamera_2eproto::offsets,
  file_level_metadata_obstacles_5fcamera_2eproto, 2, file_level_enum_descriptors_obstacles_5fcamera_2eproto, file_level_service_descriptors_obstacles_5fcamera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacles_5fcamera_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacles_5fcamera_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_ObjType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fcamera_2eproto);
  return file_level_enum_descriptors_obstacles_5fcamera_2eproto[0];
}
bool ObstacleCamera_ObjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_UNKNOWN;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_PASSENGER_VEHICLE;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_COMMERCIAL_VEHICLE;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_SPECIAL_VEHICLE;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_OTHER_VEHICLE;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_PEDESTRIAN;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_BICYCLE;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_ANIMAL;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_DISCARD;
constexpr ObstacleCamera_ObjType ObstacleCamera::OBJ_TYPE_CURB;
constexpr ObstacleCamera_ObjType ObstacleCamera::ObjType_MIN;
constexpr ObstacleCamera_ObjType ObstacleCamera::ObjType_MAX;
constexpr int ObstacleCamera::ObjType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_ObjStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fcamera_2eproto);
  return file_level_enum_descriptors_obstacles_5fcamera_2eproto[1];
}
bool ObstacleCamera_ObjStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_UNKNOWN;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_STANDING;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_STOPPED;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_MOVING;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_ONCOMING;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::OBJ_STATUS_PARKED;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::ObjStatus_MIN;
constexpr ObstacleCamera_ObjStatus ObstacleCamera::ObjStatus_MAX;
constexpr int ObstacleCamera::ObjStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_CutInType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fcamera_2eproto);
  return file_level_enum_descriptors_obstacles_5fcamera_2eproto[2];
}
bool ObstacleCamera_CutInType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleCamera_CutInType ObstacleCamera::CUT_IN_TYPE_UNKNOWN;
constexpr ObstacleCamera_CutInType ObstacleCamera::CUT_IN_TYPE_IN_HOST_LANE;
constexpr ObstacleCamera_CutInType ObstacleCamera::CUT_IN_TYPE_OUT_HOST_LANE;
constexpr ObstacleCamera_CutInType ObstacleCamera::CUT_IN_TYPE_CUT_IN;
constexpr ObstacleCamera_CutInType ObstacleCamera::CUT_IN_TYPE_CUT_OUT;
constexpr ObstacleCamera_CutInType ObstacleCamera::CutInType_MIN;
constexpr ObstacleCamera_CutInType ObstacleCamera::CutInType_MAX;
constexpr int ObstacleCamera::CutInType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCamera_BlinkerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fcamera_2eproto);
  return file_level_enum_descriptors_obstacles_5fcamera_2eproto[3];
}
bool ObstacleCamera_BlinkerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BLINKER_UNKNOWN;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BLINKER_OFF;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BLINKER_LEFT;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BLINKER_RIGHT;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BLINKER_BOTH;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BlinkerType_MIN;
constexpr ObstacleCamera_BlinkerType ObstacleCamera::BlinkerType_MAX;
constexpr int ObstacleCamera::BlinkerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleCameraList_CamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5fcamera_2eproto);
  return file_level_enum_descriptors_obstacles_5fcamera_2eproto[4];
}
bool ObstacleCameraList_CamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleCameraList_CamType ObstacleCameraList::CAM_TYPE_UNKNOWN;
constexpr ObstacleCameraList_CamType ObstacleCameraList::CAM_TYPE_MOBILEYE_Q2;
constexpr ObstacleCameraList_CamType ObstacleCameraList::CAM_TYPE_MAXIEYE_D500;
constexpr ObstacleCameraList_CamType ObstacleCameraList::CamType_MIN;
constexpr ObstacleCameraList_CamType ObstacleCameraList::CamType_MAX;
constexpr int ObstacleCameraList::CamType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObstacleCamera::InitAsDefaultInstance() {
}
class ObstacleCamera::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleCamera>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cut_in(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blinker(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_accel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_accel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_scale_change(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

ObstacleCamera::ObstacleCamera()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleCamera)
}
ObstacleCamera::ObstacleCamera(const ObstacleCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_change_) -
    reinterpret_cast<char*>(&id_)) + sizeof(scale_change_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleCamera)
}

void ObstacleCamera::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_change_) -
      reinterpret_cast<char*>(&id_)) + sizeof(scale_change_));
}

ObstacleCamera::~ObstacleCamera() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleCamera)
  SharedDtor();
}

void ObstacleCamera::SharedDtor() {
}

void ObstacleCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleCamera& ObstacleCamera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleCamera_obstacles_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void ObstacleCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_) -
        reinterpret_cast<char*>(&id_)) + sizeof(lane_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_y_) -
        reinterpret_cast<char*>(&length_)) + sizeof(v_y_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&accel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_change_) -
        reinterpret_cast<char*>(&accel_x_)) + sizeof(scale_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleCamera_ObjType_IsValid(val))) {
            set_type(static_cast<::phoenix::msg::perception::ObstacleCamera_ObjType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleCamera_ObjStatus_IsValid(val))) {
            set_status(static_cast<::phoenix::msg::perception::ObstacleCamera_ObjStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleCamera_CutInType_IsValid(val))) {
            set_cut_in(static_cast<::phoenix::msg::perception::ObstacleCamera_CutInType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleCamera_BlinkerType_IsValid(val))) {
            set_blinker(static_cast<::phoenix::msg::perception::ObstacleCamera_BlinkerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool brake_lights = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_brake_lights(&has_bits);
          brake_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 age = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_age(&has_bits);
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lane = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float length = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float heading = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_x = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_accel_x(&has_bits);
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_y = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_accel_y(&has_bits);
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale_change = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_scale_change(&has_bits);
          scale_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleCamera::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleCamera)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleCamera_ObjType_IsValid(value)) {
            set_type(static_cast< ::phoenix::msg::perception::ObstacleCamera_ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleCamera_ObjStatus_IsValid(value)) {
            set_status(static_cast< ::phoenix::msg::perception::ObstacleCamera_ObjStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleCamera_CutInType_IsValid(value)) {
            set_cut_in(static_cast< ::phoenix::msg::perception::ObstacleCamera_CutInType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleCamera_BlinkerType_IsValid(value)) {
            set_blinker(static_cast< ::phoenix::msg::perception::ObstacleCamera_BlinkerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool brake_lights = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_brake_lights(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_age(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lane = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_lane(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_heading(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          _Internal::set_has_v_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_v_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_x = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {
          _Internal::set_has_accel_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_y = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {
          _Internal::set_has_accel_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {
          _Internal::set_has_yaw_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_change = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          _Internal::set_has_scale_change(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleCamera)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleCamera::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->cut_in(), output);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->blinker(), output);
  }

  // optional bool brake_lights = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->brake_lights(), output);
  }

  // optional int32 age = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->age(), output);
  }

  // optional int32 lane = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->lane(), output);
  }

  // optional float length = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->length(), output);
  }

  // optional float width = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->width(), output);
  }

  // optional float height = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->height(), output);
  }

  // optional float x = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->x(), output);
  }

  // optional float y = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->y(), output);
  }

  // optional float heading = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->heading(), output);
  }

  // optional float v_x = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->v_x(), output);
  }

  // optional float v_y = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->v_y(), output);
  }

  // optional float accel_x = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->accel_x(), output);
  }

  // optional float accel_y = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->accel_y(), output);
  }

  // optional float yaw_rate = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->yaw_rate(), output);
  }

  // optional float scale_change = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->scale_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleCamera)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleCamera::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->cut_in(), target);
  }

  // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->blinker(), target);
  }

  // optional bool brake_lights = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->brake_lights(), target);
  }

  // optional int32 age = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->age(), target);
  }

  // optional int32 lane = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->lane(), target);
  }

  // optional float length = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->length(), target);
  }

  // optional float width = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->width(), target);
  }

  // optional float height = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->height(), target);
  }

  // optional float x = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->x(), target);
  }

  // optional float y = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->y(), target);
  }

  // optional float heading = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->heading(), target);
  }

  // optional float v_x = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->v_x(), target);
  }

  // optional float v_y = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->v_y(), target);
  }

  // optional float accel_x = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->accel_x(), target);
  }

  // optional float accel_y = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->accel_y(), target);
  }

  // optional float yaw_rate = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->yaw_rate(), target);
  }

  // optional float scale_change = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->scale_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleCamera)
  return target;
}

size_t ObstacleCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleCamera)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .phoenix.msg.perception.ObstacleCamera.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .phoenix.msg.perception.ObstacleCamera.ObjStatus status = 3 [default = OBJ_STATUS_UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .phoenix.msg.perception.ObstacleCamera.CutInType cut_in = 4 [default = CUT_IN_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cut_in());
    }

    // optional .phoenix.msg.perception.ObstacleCamera.BlinkerType blinker = 5 [default = BLINKER_UNKNOWN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blinker());
    }

    // optional bool brake_lights = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 age = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 lane = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lane());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float length = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float width = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float height = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float x = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float y = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float heading = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float v_x = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float accel_x = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float accel_y = 18 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float yaw_rate = 19 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float scale_change = 20 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleCamera)
    MergeFrom(*source);
  }
}

void ObstacleCamera::MergeFrom(const ObstacleCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      cut_in_ = from.cut_in_;
    }
    if (cached_has_bits & 0x00000010u) {
      blinker_ = from.blinker_;
    }
    if (cached_has_bits & 0x00000020u) {
      brake_lights_ = from.brake_lights_;
    }
    if (cached_has_bits & 0x00000040u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_ = from.lane_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000400u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000800u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00001000u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00002000u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00004000u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      v_y_ = from.v_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      accel_x_ = from.accel_x_;
    }
    if (cached_has_bits & 0x00020000u) {
      accel_y_ = from.accel_y_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00080000u) {
      scale_change_ = from.scale_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleCamera::CopyFrom(const ObstacleCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleCamera::IsInitialized() const {
  return true;
}

void ObstacleCamera::InternalSwap(ObstacleCamera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(cut_in_, other->cut_in_);
  swap(blinker_, other->blinker_);
  swap(brake_lights_, other->brake_lights_);
  swap(age_, other->age_);
  swap(lane_, other->lane_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(v_x_, other->v_x_);
  swap(v_y_, other->v_y_);
  swap(accel_x_, other->accel_x_);
  swap(accel_y_, other->accel_y_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(scale_change_, other->scale_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleCameraList::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_ObstacleCameraList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class ObstacleCameraList::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleCameraList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const ObstacleCameraList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cam_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacles_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::common::Header&
ObstacleCameraList::_Internal::header(const ObstacleCameraList* msg) {
  return *msg->header_;
}
void ObstacleCameraList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObstacleCameraList::ObstacleCameraList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleCameraList)
}
ObstacleCameraList::ObstacleCameraList(const ObstacleCameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&cam_type_, &from.cam_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacles_num_) -
    reinterpret_cast<char*>(&cam_type_)) + sizeof(obstacles_num_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleCameraList)
}

void ObstacleCameraList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleCameraList_obstacles_5fcamera_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacles_num_) -
      reinterpret_cast<char*>(&header_)) + sizeof(obstacles_num_));
}

ObstacleCameraList::~ObstacleCameraList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleCameraList)
  SharedDtor();
}

void ObstacleCameraList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ObstacleCameraList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleCameraList& ObstacleCameraList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleCameraList_obstacles_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void ObstacleCameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&cam_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacles_num_) -
        reinterpret_cast<char*>(&cam_type_)) + sizeof(obstacles_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleCameraList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleCameraList_CamType_IsValid(val))) {
            set_cam_type(static_cast<::phoenix::msg::perception::ObstacleCameraList_CamType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 obstacles_num = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obstacles_num(&has_bits);
          obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleCameraList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleCameraList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleCameraList_CamType_IsValid(value)) {
            set_cam_type(static_cast< ::phoenix::msg::perception::ObstacleCameraList_CamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacles_num = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_obstacles_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacles_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleCameraList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleCameraList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleCameraList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->cam_type(), output);
  }

  // optional int32 obstacles_num = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->obstacles_num(), output);
  }

  // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleCameraList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleCameraList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->cam_type(), target);
  }

  // optional int32 obstacles_num = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->obstacles_num(), target);
  }

  // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->obstacles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleCameraList)
  return target;
}

size_t ObstacleCameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleCameraList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.ObstacleCamera obstacles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.perception.ObstacleCameraList.CamType cam_type = 2 [default = CAM_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cam_type());
    }

    // optional int32 obstacles_num = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->obstacles_num());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleCameraList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleCameraList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleCameraList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleCameraList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleCameraList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleCameraList)
    MergeFrom(*source);
  }
}

void ObstacleCameraList::MergeFrom(const ObstacleCameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleCameraList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      cam_type_ = from.cam_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacles_num_ = from.obstacles_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleCameraList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleCameraList::CopyFrom(const ObstacleCameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleCameraList::IsInitialized() const {
  return true;
}

void ObstacleCameraList::InternalSwap(ObstacleCameraList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(header_, other->header_);
  swap(cam_type_, other->cam_type_);
  swap(obstacles_num_, other->obstacles_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleCameraList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleCamera* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleCamera >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleCameraList* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleCameraList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleCameraList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
