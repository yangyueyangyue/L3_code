// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss.proto

#include "gnss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
namespace phoenix {
namespace msg {
namespace localization {
class GnssDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gnss> _instance;
} _Gnss_default_instance_;
}  // namespace localization
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_Gnss_gnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::localization::_Gnss_default_instance_;
    new (ptr) ::phoenix::msg::localization::Gnss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::localization::Gnss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Gnss_gnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Gnss_gnss_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gnss_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gnss_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, latitude_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, longitude_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, altitude_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, heading_gnss_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, x_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, y_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, z_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, heading_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, x_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, y_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, z_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, heading_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, pitch_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, roll_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_e_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_n_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_u_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_x_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_y_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_z_utm_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_x_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_y_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, v_z_odom_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, gnss_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, utm_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::localization::Gnss, odom_status_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  8,
  7,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::phoenix::msg::localization::Gnss)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::localization::_Gnss_default_instance_),
};

const char descriptor_table_protodef_gnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngnss.proto\022\030phoenix.msg.localization\032\014"
  "header.proto\"\262\006\n\004Gnss\022*\n\006header\030\001 \001(\0132\032."
  "phoenix.msg.common.Header\022\023\n\010latitude\030\002 "
  "\001(\001:\0010\022\024\n\tlongitude\030\003 \001(\001:\0010\022\023\n\010altitude"
  "\030\004 \001(\001:\0010\022\027\n\014heading_gnss\030\005 \001(\002:\0010\022\020\n\005x_"
  "utm\030\006 \001(\001:\0010\022\020\n\005y_utm\030\007 \001(\001:\0010\022\020\n\005z_utm\030"
  "\010 \001(\001:\0010\022\026\n\013heading_utm\030\t \001(\002:\0010\022\021\n\006x_od"
  "om\030\n \001(\001:\0010\022\021\n\006y_odom\030\013 \001(\001:\0010\022\021\n\006z_odom"
  "\030\014 \001(\001:\0010\022\027\n\014heading_odom\030\r \001(\002:\0010\022\020\n\005pi"
  "tch\030\016 \001(\002:\0010\022\017\n\004roll\030\017 \001(\002:\0010\022\016\n\003v_e\030\020 \001"
  "(\002:\0010\022\016\n\003v_n\030\021 \001(\002:\0010\022\016\n\003v_u\030\022 \001(\002:\0010\022\022\n"
  "\007v_x_utm\030\023 \001(\002:\0010\022\022\n\007v_y_utm\030\024 \001(\002:\0010\022\022\n"
  "\007v_z_utm\030\025 \001(\002:\0010\022\023\n\010v_x_odom\030\026 \001(\002:\0010\022\023"
  "\n\010v_y_odom\030\027 \001(\002:\0010\022\023\n\010v_z_odom\030\030 \001(\002:\0010"
  "\022J\n\013gnss_status\030\031 \001(\0162%.phoenix.msg.loca"
  "lization.Gnss.Status:\016STATUS_INVALID\022I\n\n"
  "utm_status\030\032 \001(\0162%.phoenix.msg.localizat"
  "ion.Gnss.Status:\016STATUS_INVALID\022J\n\013odom_"
  "status\030\033 \001(\0162%.phoenix.msg.localization."
  "Gnss.Status:\016STATUS_INVALID\"T\n\006Status\022\022\n"
  "\016STATUS_INVALID\020\000\022\016\n\nSTATUS_BAD\020\001\022\025\n\021STA"
  "TUS_CONVERGING\020\002\022\017\n\013STATUS_GOOD\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gnss_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gnss_2eproto_sccs[1] = {
  &scc_info_Gnss_gnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gnss_2eproto_once;
static bool descriptor_table_gnss_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnss_2eproto = {
  &descriptor_table_gnss_2eproto_initialized, descriptor_table_protodef_gnss_2eproto, "gnss.proto", 873,
  &descriptor_table_gnss_2eproto_once, descriptor_table_gnss_2eproto_sccs, descriptor_table_gnss_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_gnss_2eproto::offsets,
  file_level_metadata_gnss_2eproto, 1, file_level_enum_descriptors_gnss_2eproto, file_level_service_descriptors_gnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gnss_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gnss_2eproto), true);
namespace phoenix {
namespace msg {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnss_2eproto);
  return file_level_enum_descriptors_gnss_2eproto[0];
}
bool Gnss_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gnss_Status Gnss::STATUS_INVALID;
constexpr Gnss_Status Gnss::STATUS_BAD;
constexpr Gnss_Status Gnss::STATUS_CONVERGING;
constexpr Gnss_Status Gnss::STATUS_GOOD;
constexpr Gnss_Status Gnss::Status_MIN;
constexpr Gnss_Status Gnss::Status_MAX;
constexpr int Gnss::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Gnss::InitAsDefaultInstance() {
  ::phoenix::msg::localization::_Gnss_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class Gnss::_Internal {
 public:
  using HasBits = decltype(std::declval<Gnss>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const Gnss* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_gnss(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_x_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_z_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_x_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_z_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_heading_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_v_e(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_v_n(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_v_u(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_v_x_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_v_y_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_v_z_utm(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_v_x_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_v_y_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_v_z_odom(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_gnss_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_utm_status(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_odom_status(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::phoenix::msg::common::Header&
Gnss::_Internal::header(const Gnss* msg) {
  return *msg->header_;
}
void Gnss::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Gnss::Gnss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.localization.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&odom_status_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(odom_status_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.localization.Gnss)
}

void Gnss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gnss_gnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(odom_status_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:phoenix.msg.localization.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Gnss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gnss& Gnss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gnss_gnss_2eproto.base);
  return *internal_default_instance();
}


void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.localization.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_utm_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(heading_utm_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&z_utm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_e_) -
        reinterpret_cast<char*>(&z_utm_)) + sizeof(v_e_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&v_n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_z_odom_) -
        reinterpret_cast<char*>(&v_n_)) + sizeof(v_z_odom_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&gnss_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&odom_status_) -
        reinterpret_cast<char*>(&gnss_status_)) + sizeof(odom_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Gnss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double altitude = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float heading_gnss = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_heading_gnss(&has_bits);
          heading_gnss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double x_utm = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_x_utm(&has_bits);
          x_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y_utm = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_y_utm(&has_bits);
          y_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z_utm = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_z_utm(&has_bits);
          z_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float heading_utm = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_heading_utm(&has_bits);
          heading_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double x_odom = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_x_odom(&has_bits);
          x_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y_odom = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_y_odom(&has_bits);
          y_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z_odom = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_z_odom(&has_bits);
          z_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float heading_odom = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_heading_odom(&has_bits);
          heading_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitch = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roll = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_e = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_v_e(&has_bits);
          v_e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_n = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_v_n(&has_bits);
          v_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_u = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_v_u(&has_bits);
          v_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x_utm = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_v_x_utm(&has_bits);
          v_x_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y_utm = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_v_y_utm(&has_bits);
          v_y_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_z_utm = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_v_z_utm(&has_bits);
          v_z_utm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_x_odom = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_v_x_odom(&has_bits);
          v_x_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y_odom = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_v_y_odom(&has_bits);
          v_y_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_z_odom = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_v_z_odom(&has_bits);
          v_z_odom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.localization.Gnss.Status gnss_status = 25 [default = STATUS_INVALID];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::localization::Gnss_Status_IsValid(val))) {
            set_gnss_status(static_cast<::phoenix::msg::localization::Gnss_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.localization.Gnss.Status utm_status = 26 [default = STATUS_INVALID];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::localization::Gnss_Status_IsValid(val))) {
            set_utm_status(static_cast<::phoenix::msg::localization::Gnss_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.localization.Gnss.Status odom_status = 27 [default = STATUS_INVALID];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::localization::Gnss_Status_IsValid(val))) {
            set_odom_status(static_cast<::phoenix::msg::localization::Gnss_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Gnss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.localization.Gnss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_altitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading_gnss = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_heading_gnss(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_gnss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_utm = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_x_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_utm = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          _Internal::set_has_y_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z_utm = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_z_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading_utm = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_heading_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_odom = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          _Internal::set_has_x_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_odom = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          _Internal::set_has_y_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z_odom = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {
          _Internal::set_has_z_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading_odom = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_heading_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_pitch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roll = 15 [default = 0];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          _Internal::set_has_roll(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_e = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_v_e(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_n = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {
          _Internal::set_has_v_n(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_u = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {
          _Internal::set_has_v_u(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x_utm = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {
          _Internal::set_has_v_x_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y_utm = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          _Internal::set_has_v_y_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_z_utm = 21 [default = 0];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          _Internal::set_has_v_z_utm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_z_utm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x_odom = 22 [default = 0];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          _Internal::set_has_v_x_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y_odom = 23 [default = 0];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {
          _Internal::set_has_v_y_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_z_odom = 24 [default = 0];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (197 & 0xFF)) {
          _Internal::set_has_v_z_odom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_z_odom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.localization.Gnss.Status gnss_status = 25 [default = STATUS_INVALID];
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::localization::Gnss_Status_IsValid(value)) {
            set_gnss_status(static_cast< ::phoenix::msg::localization::Gnss_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.localization.Gnss.Status utm_status = 26 [default = STATUS_INVALID];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::localization::Gnss_Status_IsValid(value)) {
            set_utm_status(static_cast< ::phoenix::msg::localization::Gnss_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                26, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.localization.Gnss.Status odom_status = 27 [default = STATUS_INVALID];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::localization::Gnss_Status_IsValid(value)) {
            set_odom_status(static_cast< ::phoenix::msg::localization::Gnss_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.localization.Gnss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.localization.Gnss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Gnss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.localization.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional double latitude = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional double altitude = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->altitude(), output);
  }

  // optional float heading_gnss = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->heading_gnss(), output);
  }

  // optional double x_utm = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->x_utm(), output);
  }

  // optional double y_utm = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->y_utm(), output);
  }

  // optional double z_utm = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->z_utm(), output);
  }

  // optional float heading_utm = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->heading_utm(), output);
  }

  // optional double x_odom = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->x_odom(), output);
  }

  // optional double y_odom = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->y_odom(), output);
  }

  // optional double z_odom = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->z_odom(), output);
  }

  // optional float heading_odom = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->heading_odom(), output);
  }

  // optional float pitch = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->pitch(), output);
  }

  // optional float roll = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->roll(), output);
  }

  // optional float v_e = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->v_e(), output);
  }

  // optional float v_n = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->v_n(), output);
  }

  // optional float v_u = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->v_u(), output);
  }

  // optional float v_x_utm = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->v_x_utm(), output);
  }

  // optional float v_y_utm = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->v_y_utm(), output);
  }

  // optional float v_z_utm = 21 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->v_z_utm(), output);
  }

  // optional float v_x_odom = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->v_x_odom(), output);
  }

  // optional float v_y_odom = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(23, this->v_y_odom(), output);
  }

  // optional float v_z_odom = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(24, this->v_z_odom(), output);
  }

  // optional .phoenix.msg.localization.Gnss.Status gnss_status = 25 [default = STATUS_INVALID];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      25, this->gnss_status(), output);
  }

  // optional .phoenix.msg.localization.Gnss.Status utm_status = 26 [default = STATUS_INVALID];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      26, this->utm_status(), output);
  }

  // optional .phoenix.msg.localization.Gnss.Status odom_status = 27 [default = STATUS_INVALID];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->odom_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.localization.Gnss)
}

::PROTOBUF_NAMESPACE_ID::uint8* Gnss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.localization.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional double latitude = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double longitude = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // optional double altitude = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude(), target);
  }

  // optional float heading_gnss = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->heading_gnss(), target);
  }

  // optional double x_utm = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->x_utm(), target);
  }

  // optional double y_utm = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->y_utm(), target);
  }

  // optional double z_utm = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->z_utm(), target);
  }

  // optional float heading_utm = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->heading_utm(), target);
  }

  // optional double x_odom = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->x_odom(), target);
  }

  // optional double y_odom = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->y_odom(), target);
  }

  // optional double z_odom = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->z_odom(), target);
  }

  // optional float heading_odom = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->heading_odom(), target);
  }

  // optional float pitch = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->pitch(), target);
  }

  // optional float roll = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->roll(), target);
  }

  // optional float v_e = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->v_e(), target);
  }

  // optional float v_n = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->v_n(), target);
  }

  // optional float v_u = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->v_u(), target);
  }

  // optional float v_x_utm = 19 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->v_x_utm(), target);
  }

  // optional float v_y_utm = 20 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->v_y_utm(), target);
  }

  // optional float v_z_utm = 21 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->v_z_utm(), target);
  }

  // optional float v_x_odom = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->v_x_odom(), target);
  }

  // optional float v_y_odom = 23 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->v_y_odom(), target);
  }

  // optional float v_z_odom = 24 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->v_z_odom(), target);
  }

  // optional .phoenix.msg.localization.Gnss.Status gnss_status = 25 [default = STATUS_INVALID];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->gnss_status(), target);
  }

  // optional .phoenix.msg.localization.Gnss.Status utm_status = 26 [default = STATUS_INVALID];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->utm_status(), target);
  }

  // optional .phoenix.msg.localization.Gnss.Status odom_status = 27 [default = STATUS_INVALID];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->odom_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.localization.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.localization.Gnss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double latitude = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double altitude = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double x_utm = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double y_utm = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float heading_gnss = 5 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float heading_utm = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double z_utm = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double x_odom = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double y_odom = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double z_odom = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional float heading_odom = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float pitch = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float roll = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float v_e = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float v_n = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float v_u = 18 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float v_x_utm = 19 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float v_y_utm = 20 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float v_z_utm = 21 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float v_x_odom = 22 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float v_y_odom = 23 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float v_z_odom = 24 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional .phoenix.msg.localization.Gnss.Status gnss_status = 25 [default = STATUS_INVALID];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gnss_status());
    }

    // optional .phoenix.msg.localization.Gnss.Status utm_status = 26 [default = STATUS_INVALID];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->utm_status());
    }

    // optional .phoenix.msg.localization.Gnss.Status odom_status = 27 [default = STATUS_INVALID];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->odom_status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.localization.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gnss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.localization.Gnss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.localization.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.localization.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_utm_ = from.x_utm_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_utm_ = from.y_utm_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_gnss_ = from.heading_gnss_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_utm_ = from.heading_utm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      z_utm_ = from.z_utm_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_odom_ = from.x_odom_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_odom_ = from.y_odom_;
    }
    if (cached_has_bits & 0x00000800u) {
      z_odom_ = from.z_odom_;
    }
    if (cached_has_bits & 0x00001000u) {
      heading_odom_ = from.heading_odom_;
    }
    if (cached_has_bits & 0x00002000u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00004000u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00008000u) {
      v_e_ = from.v_e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      v_n_ = from.v_n_;
    }
    if (cached_has_bits & 0x00020000u) {
      v_u_ = from.v_u_;
    }
    if (cached_has_bits & 0x00040000u) {
      v_x_utm_ = from.v_x_utm_;
    }
    if (cached_has_bits & 0x00080000u) {
      v_y_utm_ = from.v_y_utm_;
    }
    if (cached_has_bits & 0x00100000u) {
      v_z_utm_ = from.v_z_utm_;
    }
    if (cached_has_bits & 0x00200000u) {
      v_x_odom_ = from.v_x_odom_;
    }
    if (cached_has_bits & 0x00400000u) {
      v_y_odom_ = from.v_y_odom_;
    }
    if (cached_has_bits & 0x00800000u) {
      v_z_odom_ = from.v_z_odom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      gnss_status_ = from.gnss_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      utm_status_ = from.utm_status_;
    }
    if (cached_has_bits & 0x04000000u) {
      odom_status_ = from.odom_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gnss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.localization.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.localization.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(x_utm_, other->x_utm_);
  swap(y_utm_, other->y_utm_);
  swap(heading_gnss_, other->heading_gnss_);
  swap(heading_utm_, other->heading_utm_);
  swap(z_utm_, other->z_utm_);
  swap(x_odom_, other->x_odom_);
  swap(y_odom_, other->y_odom_);
  swap(z_odom_, other->z_odom_);
  swap(heading_odom_, other->heading_odom_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(v_e_, other->v_e_);
  swap(v_n_, other->v_n_);
  swap(v_u_, other->v_u_);
  swap(v_x_utm_, other->v_x_utm_);
  swap(v_y_utm_, other->v_y_utm_);
  swap(v_z_utm_, other->v_z_utm_);
  swap(v_x_odom_, other->v_x_odom_);
  swap(v_y_odom_, other->v_y_odom_);
  swap(v_z_odom_, other->v_z_odom_);
  swap(gnss_status_, other->gnss_status_);
  swap(utm_status_, other->utm_status_);
  swap(odom_status_, other->odom_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gnss::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::localization::Gnss* Arena::CreateMaybeMessage< ::phoenix::msg::localization::Gnss >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::localization::Gnss >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
