// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_story.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_5fstory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planning_5fstory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_5fstory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_5fstory_2eproto;
namespace phoenix {
namespace msg {
namespace planning {
class PlanningStory;
class PlanningStoryDefaultTypeInternal;
extern PlanningStoryDefaultTypeInternal _PlanningStory_default_instance_;
class PlanningStoryAction;
class PlanningStoryActionDefaultTypeInternal;
extern PlanningStoryActionDefaultTypeInternal _PlanningStoryAction_default_instance_;
class PlanningStoryCondition;
class PlanningStoryConditionDefaultTypeInternal;
extern PlanningStoryConditionDefaultTypeInternal _PlanningStoryCondition_default_instance_;
class PlanningStoryCondition_Area;
class PlanningStoryCondition_AreaDefaultTypeInternal;
extern PlanningStoryCondition_AreaDefaultTypeInternal _PlanningStoryCondition_Area_default_instance_;
class PlanningStoryList;
class PlanningStoryListDefaultTypeInternal;
extern PlanningStoryListDefaultTypeInternal _PlanningStoryList_default_instance_;
class PlanningStoryRefLine;
class PlanningStoryRefLineDefaultTypeInternal;
extern PlanningStoryRefLineDefaultTypeInternal _PlanningStoryRefLine_default_instance_;
class PlanningStoryRefLine_Point;
class PlanningStoryRefLine_PointDefaultTypeInternal;
extern PlanningStoryRefLine_PointDefaultTypeInternal _PlanningStoryRefLine_Point_default_instance_;
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::planning::PlanningStory* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStory>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryAction* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryAction>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryCondition* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryCondition>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryCondition_Area* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryCondition_Area>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryList* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryList>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryRefLine* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryRefLine>(Arena*);
template<> ::phoenix::msg::planning::PlanningStoryRefLine_Point* Arena::CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryRefLine_Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace planning {

// ===================================================================

class PlanningStoryRefLine_Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryRefLine.Point) */ {
 public:
  PlanningStoryRefLine_Point();
  virtual ~PlanningStoryRefLine_Point();

  PlanningStoryRefLine_Point(const PlanningStoryRefLine_Point& from);
  PlanningStoryRefLine_Point(PlanningStoryRefLine_Point&& from) noexcept
    : PlanningStoryRefLine_Point() {
    *this = ::std::move(from);
  }

  inline PlanningStoryRefLine_Point& operator=(const PlanningStoryRefLine_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryRefLine_Point& operator=(PlanningStoryRefLine_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryRefLine_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryRefLine_Point* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryRefLine_Point*>(
               &_PlanningStoryRefLine_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanningStoryRefLine_Point& a, PlanningStoryRefLine_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryRefLine_Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryRefLine_Point* New() const final {
    return CreateMaybeMessage<PlanningStoryRefLine_Point>(nullptr);
  }

  PlanningStoryRefLine_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryRefLine_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryRefLine_Point& from);
  void MergeFrom(const PlanningStoryRefLine_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryRefLine_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryRefLine.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryRefLine.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStoryRefLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryRefLine) */ {
 public:
  PlanningStoryRefLine();
  virtual ~PlanningStoryRefLine();

  PlanningStoryRefLine(const PlanningStoryRefLine& from);
  PlanningStoryRefLine(PlanningStoryRefLine&& from) noexcept
    : PlanningStoryRefLine() {
    *this = ::std::move(from);
  }

  inline PlanningStoryRefLine& operator=(const PlanningStoryRefLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryRefLine& operator=(PlanningStoryRefLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryRefLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryRefLine* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryRefLine*>(
               &_PlanningStoryRefLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanningStoryRefLine& a, PlanningStoryRefLine& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryRefLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryRefLine* New() const final {
    return CreateMaybeMessage<PlanningStoryRefLine>(nullptr);
  }

  PlanningStoryRefLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryRefLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryRefLine& from);
  void MergeFrom(const PlanningStoryRefLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryRefLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryRefLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlanningStoryRefLine_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
  int points_size() const;
  void clear_points();
  ::phoenix::msg::planning::PlanningStoryRefLine_Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStoryRefLine_Point >*
      mutable_points();
  const ::phoenix::msg::planning::PlanningStoryRefLine_Point& points(int index) const;
  ::phoenix::msg::planning::PlanningStoryRefLine_Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStoryRefLine_Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryRefLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStoryRefLine_Point > points_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStoryCondition_Area :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryCondition.Area) */ {
 public:
  PlanningStoryCondition_Area();
  virtual ~PlanningStoryCondition_Area();

  PlanningStoryCondition_Area(const PlanningStoryCondition_Area& from);
  PlanningStoryCondition_Area(PlanningStoryCondition_Area&& from) noexcept
    : PlanningStoryCondition_Area() {
    *this = ::std::move(from);
  }

  inline PlanningStoryCondition_Area& operator=(const PlanningStoryCondition_Area& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryCondition_Area& operator=(PlanningStoryCondition_Area&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryCondition_Area& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryCondition_Area* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryCondition_Area*>(
               &_PlanningStoryCondition_Area_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanningStoryCondition_Area& a, PlanningStoryCondition_Area& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryCondition_Area* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryCondition_Area* New() const final {
    return CreateMaybeMessage<PlanningStoryCondition_Area>(nullptr);
  }

  PlanningStoryCondition_Area* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryCondition_Area>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryCondition_Area& from);
  void MergeFrom(const PlanningStoryCondition_Area& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryCondition_Area* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryCondition.Area";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftWidthFieldNumber = 1,
    kRightWidthFieldNumber = 2,
    kStartSFieldNumber = 3,
    kEndSFieldNumber = 4,
  };
  // optional double left_width = 1 [default = 2];
  bool has_left_width() const;
  void clear_left_width();
  double left_width() const;
  void set_left_width(double value);

  // optional double right_width = 2 [default = 2];
  bool has_right_width() const;
  void clear_right_width();
  double right_width() const;
  void set_right_width(double value);

  // optional double start_s = 3 [default = -1];
  bool has_start_s() const;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 4 [default = -1];
  bool has_end_s() const;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryCondition.Area)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double left_width_;
  double right_width_;
  double start_s_;
  double end_s_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStoryCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryCondition) */ {
 public:
  PlanningStoryCondition();
  virtual ~PlanningStoryCondition();

  PlanningStoryCondition(const PlanningStoryCondition& from);
  PlanningStoryCondition(PlanningStoryCondition&& from) noexcept
    : PlanningStoryCondition() {
    *this = ::std::move(from);
  }

  inline PlanningStoryCondition& operator=(const PlanningStoryCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryCondition& operator=(PlanningStoryCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryCondition* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryCondition*>(
               &_PlanningStoryCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlanningStoryCondition& a, PlanningStoryCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryCondition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryCondition* New() const final {
    return CreateMaybeMessage<PlanningStoryCondition>(nullptr);
  }

  PlanningStoryCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryCondition& from);
  void MergeFrom(const PlanningStoryCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlanningStoryCondition_Area Area;

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
    kSpeedHighFieldNumber = 2,
    kSpeedLowFieldNumber = 3,
    kGearFieldNumber = 4,
  };
  // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
  bool has_area() const;
  void clear_area();
  const ::phoenix::msg::planning::PlanningStoryCondition_Area& area() const;
  ::phoenix::msg::planning::PlanningStoryCondition_Area* release_area();
  ::phoenix::msg::planning::PlanningStoryCondition_Area* mutable_area();
  void set_allocated_area(::phoenix::msg::planning::PlanningStoryCondition_Area* area);

  // optional double speed_high = 2 [default = 0];
  bool has_speed_high() const;
  void clear_speed_high();
  double speed_high() const;
  void set_speed_high(double value);

  // optional double speed_low = 3 [default = 0];
  bool has_speed_low() const;
  void clear_speed_low();
  double speed_low() const;
  void set_speed_low(double value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryCondition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::planning::PlanningStoryCondition_Area* area_;
  double speed_high_;
  double speed_low_;
  int gear_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStoryAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryAction) */ {
 public:
  PlanningStoryAction();
  virtual ~PlanningStoryAction();

  PlanningStoryAction(const PlanningStoryAction& from);
  PlanningStoryAction(PlanningStoryAction&& from) noexcept
    : PlanningStoryAction() {
    *this = ::std::move(from);
  }

  inline PlanningStoryAction& operator=(const PlanningStoryAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryAction& operator=(PlanningStoryAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryAction* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryAction*>(
               &_PlanningStoryAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlanningStoryAction& a, PlanningStoryAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryAction* New() const final {
    return CreateMaybeMessage<PlanningStoryAction>(nullptr);
  }

  PlanningStoryAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryAction& from);
  void MergeFrom(const PlanningStoryAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoldingTimeFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kGearFieldNumber = 4,
    kTurnLampFieldNumber = 5,
    kBrakeLampFieldNumber = 6,
    kCmdFieldNumber = 7,
  };
  // optional double holding_time = 1 [default = 0];
  bool has_holding_time() const;
  void clear_holding_time();
  double holding_time() const;
  void set_holding_time(double value);

  // optional double speed = 2 [default = 0];
  bool has_speed() const;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 3 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
  bool has_turn_lamp() const;
  void clear_turn_lamp();
  ::phoenix::msg::control::Chassis_SignalTurnLamp turn_lamp() const;
  void set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value);

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
  bool has_brake_lamp() const;
  void clear_brake_lamp();
  ::phoenix::msg::control::Chassis_SignalLamp brake_lamp() const;
  void set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value);

  // optional uint32 cmd = 7 [default = 0];
  bool has_cmd() const;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double holding_time_;
  double speed_;
  double acceleration_;
  int gear_;
  int turn_lamp_;
  int brake_lamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStory) */ {
 public:
  PlanningStory();
  virtual ~PlanningStory();

  PlanningStory(const PlanningStory& from);
  PlanningStory(PlanningStory&& from) noexcept
    : PlanningStory() {
    *this = ::std::move(from);
  }

  inline PlanningStory& operator=(const PlanningStory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStory& operator=(PlanningStory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStory* internal_default_instance() {
    return reinterpret_cast<const PlanningStory*>(
               &_PlanningStory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlanningStory& a, PlanningStory& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStory* New() const final {
    return CreateMaybeMessage<PlanningStory>(nullptr);
  }

  PlanningStory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStory& from);
  void MergeFrom(const PlanningStory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefLineFieldNumber = 3,
    kConditionFieldNumber = 4,
    kActionFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
  bool has_ref_line() const;
  void clear_ref_line();
  const ::phoenix::msg::planning::PlanningStoryRefLine& ref_line() const;
  ::phoenix::msg::planning::PlanningStoryRefLine* release_ref_line();
  ::phoenix::msg::planning::PlanningStoryRefLine* mutable_ref_line();
  void set_allocated_ref_line(::phoenix::msg::planning::PlanningStoryRefLine* ref_line);

  // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
  bool has_condition() const;
  void clear_condition();
  const ::phoenix::msg::planning::PlanningStoryCondition& condition() const;
  ::phoenix::msg::planning::PlanningStoryCondition* release_condition();
  ::phoenix::msg::planning::PlanningStoryCondition* mutable_condition();
  void set_allocated_condition(::phoenix::msg::planning::PlanningStoryCondition* condition);

  // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
  bool has_action() const;
  void clear_action();
  const ::phoenix::msg::planning::PlanningStoryAction& action() const;
  ::phoenix::msg::planning::PlanningStoryAction* release_action();
  ::phoenix::msg::planning::PlanningStoryAction* mutable_action();
  void set_allocated_action(::phoenix::msg::planning::PlanningStoryAction* action);

  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 type = 2 [default = 0];
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::planning::PlanningStoryRefLine* ref_line_;
  ::phoenix::msg::planning::PlanningStoryCondition* condition_;
  ::phoenix::msg::planning::PlanningStoryAction* action_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// -------------------------------------------------------------------

class PlanningStoryList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.planning.PlanningStoryList) */ {
 public:
  PlanningStoryList();
  virtual ~PlanningStoryList();

  PlanningStoryList(const PlanningStoryList& from);
  PlanningStoryList(PlanningStoryList&& from) noexcept
    : PlanningStoryList() {
    *this = ::std::move(from);
  }

  inline PlanningStoryList& operator=(const PlanningStoryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStoryList& operator=(PlanningStoryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStoryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStoryList* internal_default_instance() {
    return reinterpret_cast<const PlanningStoryList*>(
               &_PlanningStoryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlanningStoryList& a, PlanningStoryList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStoryList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStoryList* New() const final {
    return CreateMaybeMessage<PlanningStoryList>(nullptr);
  }

  PlanningStoryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStoryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStoryList& from);
  void MergeFrom(const PlanningStoryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStoryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.planning.PlanningStoryList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_5fstory_2eproto);
    return ::descriptor_table_planning_5fstory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorysFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .phoenix.msg.planning.PlanningStory storys = 2;
  int storys_size() const;
  void clear_storys();
  ::phoenix::msg::planning::PlanningStory* mutable_storys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStory >*
      mutable_storys();
  const ::phoenix::msg::planning::PlanningStory& storys(int index) const;
  ::phoenix::msg::planning::PlanningStory* add_storys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStory >&
      storys() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // @@protoc_insertion_point(class_scope:phoenix.msg.planning.PlanningStoryList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStory > storys_;
  ::phoenix::msg::common::Header* header_;
  friend struct ::TableStruct_planning_5fstory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanningStoryRefLine_Point

// optional double x = 1 [default = 0];
inline bool PlanningStoryRefLine_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStoryRefLine_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningStoryRefLine_Point::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryRefLine.Point.x)
  return x_;
}
inline void PlanningStoryRefLine_Point::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryRefLine.Point.x)
}

// optional double y = 2 [default = 0];
inline bool PlanningStoryRefLine_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStoryRefLine_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningStoryRefLine_Point::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryRefLine.Point.y)
  return y_;
}
inline void PlanningStoryRefLine_Point::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryRefLine.Point.y)
}

// -------------------------------------------------------------------

// PlanningStoryRefLine

// repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
inline int PlanningStoryRefLine::points_size() const {
  return points_.size();
}
inline void PlanningStoryRefLine::clear_points() {
  points_.Clear();
}
inline ::phoenix::msg::planning::PlanningStoryRefLine_Point* PlanningStoryRefLine::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStoryRefLine.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStoryRefLine_Point >*
PlanningStoryRefLine::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.planning.PlanningStoryRefLine.points)
  return &points_;
}
inline const ::phoenix::msg::planning::PlanningStoryRefLine_Point& PlanningStoryRefLine::points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryRefLine.points)
  return points_.Get(index);
}
inline ::phoenix::msg::planning::PlanningStoryRefLine_Point* PlanningStoryRefLine::add_points() {
  // @@protoc_insertion_point(field_add:phoenix.msg.planning.PlanningStoryRefLine.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStoryRefLine_Point >&
PlanningStoryRefLine::points() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.planning.PlanningStoryRefLine.points)
  return points_;
}

// -------------------------------------------------------------------

// PlanningStoryCondition_Area

// optional double left_width = 1 [default = 2];
inline bool PlanningStoryCondition_Area::has_left_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStoryCondition_Area::clear_left_width() {
  left_width_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningStoryCondition_Area::left_width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.Area.left_width)
  return left_width_;
}
inline void PlanningStoryCondition_Area::set_left_width(double value) {
  _has_bits_[0] |= 0x00000001u;
  left_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.Area.left_width)
}

// optional double right_width = 2 [default = 2];
inline bool PlanningStoryCondition_Area::has_right_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStoryCondition_Area::clear_right_width() {
  right_width_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningStoryCondition_Area::right_width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.Area.right_width)
  return right_width_;
}
inline void PlanningStoryCondition_Area::set_right_width(double value) {
  _has_bits_[0] |= 0x00000002u;
  right_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.Area.right_width)
}

// optional double start_s = 3 [default = -1];
inline bool PlanningStoryCondition_Area::has_start_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningStoryCondition_Area::clear_start_s() {
  start_s_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningStoryCondition_Area::start_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.Area.start_s)
  return start_s_;
}
inline void PlanningStoryCondition_Area::set_start_s(double value) {
  _has_bits_[0] |= 0x00000004u;
  start_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.Area.start_s)
}

// optional double end_s = 4 [default = -1];
inline bool PlanningStoryCondition_Area::has_end_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningStoryCondition_Area::clear_end_s() {
  end_s_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PlanningStoryCondition_Area::end_s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.Area.end_s)
  return end_s_;
}
inline void PlanningStoryCondition_Area::set_end_s(double value) {
  _has_bits_[0] |= 0x00000008u;
  end_s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.Area.end_s)
}

// -------------------------------------------------------------------

// PlanningStoryCondition

// optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
inline bool PlanningStoryCondition::has_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStoryCondition::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::planning::PlanningStoryCondition_Area& PlanningStoryCondition::area() const {
  const ::phoenix::msg::planning::PlanningStoryCondition_Area* p = area_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.area)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningStoryCondition_Area*>(
      &::phoenix::msg::planning::_PlanningStoryCondition_Area_default_instance_);
}
inline ::phoenix::msg::planning::PlanningStoryCondition_Area* PlanningStoryCondition::release_area() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningStoryCondition.area)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::planning::PlanningStoryCondition_Area* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningStoryCondition_Area* PlanningStoryCondition::mutable_area() {
  _has_bits_[0] |= 0x00000001u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryCondition_Area>(GetArenaNoVirtual());
    area_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStoryCondition.area)
  return area_;
}
inline void PlanningStoryCondition::set_allocated_area(::phoenix::msg::planning::PlanningStoryCondition_Area* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningStoryCondition.area)
}

// optional double speed_high = 2 [default = 0];
inline bool PlanningStoryCondition::has_speed_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStoryCondition::clear_speed_high() {
  speed_high_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningStoryCondition::speed_high() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.speed_high)
  return speed_high_;
}
inline void PlanningStoryCondition::set_speed_high(double value) {
  _has_bits_[0] |= 0x00000002u;
  speed_high_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.speed_high)
}

// optional double speed_low = 3 [default = 0];
inline bool PlanningStoryCondition::has_speed_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningStoryCondition::clear_speed_low() {
  speed_low_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningStoryCondition::speed_low() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.speed_low)
  return speed_low_;
}
inline void PlanningStoryCondition::set_speed_low(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_low_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.speed_low)
}

// optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
inline bool PlanningStoryCondition::has_gear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningStoryCondition::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_GearPosition PlanningStoryCondition::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryCondition.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void PlanningStoryCondition::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryCondition.gear)
}

// -------------------------------------------------------------------

// PlanningStoryAction

// optional double holding_time = 1 [default = 0];
inline bool PlanningStoryAction::has_holding_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStoryAction::clear_holding_time() {
  holding_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PlanningStoryAction::holding_time() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.holding_time)
  return holding_time_;
}
inline void PlanningStoryAction::set_holding_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  holding_time_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.holding_time)
}

// optional double speed = 2 [default = 0];
inline bool PlanningStoryAction::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStoryAction::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlanningStoryAction::speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.speed)
  return speed_;
}
inline void PlanningStoryAction::set_speed(double value) {
  _has_bits_[0] |= 0x00000002u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.speed)
}

// optional double acceleration = 3 [default = 0];
inline bool PlanningStoryAction::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningStoryAction::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningStoryAction::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.acceleration)
  return acceleration_;
}
inline void PlanningStoryAction::set_acceleration(double value) {
  _has_bits_[0] |= 0x00000004u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.acceleration)
}

// optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
inline bool PlanningStoryAction::has_gear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningStoryAction::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_GearPosition PlanningStoryAction::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void PlanningStoryAction::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.gear)
}

// optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
inline bool PlanningStoryAction::has_turn_lamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningStoryAction::clear_turn_lamp() {
  turn_lamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::phoenix::msg::control::Chassis_SignalTurnLamp PlanningStoryAction::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.turn_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(turn_lamp_);
}
inline void PlanningStoryAction::set_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.turn_lamp)
}

// optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
inline bool PlanningStoryAction::has_brake_lamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningStoryAction::clear_brake_lamp() {
  brake_lamp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::phoenix::msg::control::Chassis_SignalLamp PlanningStoryAction::brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.brake_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(brake_lamp_);
}
inline void PlanningStoryAction::set_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalLamp_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.brake_lamp)
}

// optional uint32 cmd = 7 [default = 0];
inline bool PlanningStoryAction::has_cmd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningStoryAction::clear_cmd() {
  cmd_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlanningStoryAction::cmd() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryAction.cmd)
  return cmd_;
}
inline void PlanningStoryAction::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  cmd_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStoryAction.cmd)
}

// -------------------------------------------------------------------

// PlanningStory

// optional int32 id = 1 [default = 0];
inline bool PlanningStory::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningStory::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningStory::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStory.id)
  return id_;
}
inline void PlanningStory::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStory.id)
}

// optional int32 type = 2 [default = 0];
inline bool PlanningStory::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningStory::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanningStory::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStory.type)
  return type_;
}
inline void PlanningStory::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.planning.PlanningStory.type)
}

// optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
inline bool PlanningStory::has_ref_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningStory::clear_ref_line() {
  if (ref_line_ != nullptr) ref_line_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::planning::PlanningStoryRefLine& PlanningStory::ref_line() const {
  const ::phoenix::msg::planning::PlanningStoryRefLine* p = ref_line_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStory.ref_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningStoryRefLine*>(
      &::phoenix::msg::planning::_PlanningStoryRefLine_default_instance_);
}
inline ::phoenix::msg::planning::PlanningStoryRefLine* PlanningStory::release_ref_line() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningStory.ref_line)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::planning::PlanningStoryRefLine* temp = ref_line_;
  ref_line_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningStoryRefLine* PlanningStory::mutable_ref_line() {
  _has_bits_[0] |= 0x00000001u;
  if (ref_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryRefLine>(GetArenaNoVirtual());
    ref_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStory.ref_line)
  return ref_line_;
}
inline void PlanningStory::set_allocated_ref_line(::phoenix::msg::planning::PlanningStoryRefLine* ref_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ref_line_;
  }
  if (ref_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ref_line_ = ref_line;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningStory.ref_line)
}

// optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
inline bool PlanningStory::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningStory::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::planning::PlanningStoryCondition& PlanningStory::condition() const {
  const ::phoenix::msg::planning::PlanningStoryCondition* p = condition_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStory.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningStoryCondition*>(
      &::phoenix::msg::planning::_PlanningStoryCondition_default_instance_);
}
inline ::phoenix::msg::planning::PlanningStoryCondition* PlanningStory::release_condition() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningStory.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::planning::PlanningStoryCondition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningStoryCondition* PlanningStory::mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStory.condition)
  return condition_;
}
inline void PlanningStory::set_allocated_condition(::phoenix::msg::planning::PlanningStoryCondition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningStory.condition)
}

// optional .phoenix.msg.planning.PlanningStoryAction action = 5;
inline bool PlanningStory::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningStory::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::phoenix::msg::planning::PlanningStoryAction& PlanningStory::action() const {
  const ::phoenix::msg::planning::PlanningStoryAction* p = action_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStory.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::planning::PlanningStoryAction*>(
      &::phoenix::msg::planning::_PlanningStoryAction_default_instance_);
}
inline ::phoenix::msg::planning::PlanningStoryAction* PlanningStory::release_action() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningStory.action)
  _has_bits_[0] &= ~0x00000004u;
  ::phoenix::msg::planning::PlanningStoryAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::phoenix::msg::planning::PlanningStoryAction* PlanningStory::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::planning::PlanningStoryAction>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStory.action)
  return action_;
}
inline void PlanningStory::set_allocated_action(::phoenix::msg::planning::PlanningStoryAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningStory.action)
}

// -------------------------------------------------------------------

// PlanningStoryList

// optional .phoenix.msg.common.Header header = 1;
inline bool PlanningStoryList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& PlanningStoryList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* PlanningStoryList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.planning.PlanningStoryList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* PlanningStoryList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStoryList.header)
  return header_;
}
inline void PlanningStoryList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.planning.PlanningStoryList.header)
}

// repeated .phoenix.msg.planning.PlanningStory storys = 2;
inline int PlanningStoryList::storys_size() const {
  return storys_.size();
}
inline void PlanningStoryList::clear_storys() {
  storys_.Clear();
}
inline ::phoenix::msg::planning::PlanningStory* PlanningStoryList::mutable_storys(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.planning.PlanningStoryList.storys)
  return storys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStory >*
PlanningStoryList::mutable_storys() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.planning.PlanningStoryList.storys)
  return &storys_;
}
inline const ::phoenix::msg::planning::PlanningStory& PlanningStoryList::storys(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.planning.PlanningStoryList.storys)
  return storys_.Get(index);
}
inline ::phoenix::msg::planning::PlanningStory* PlanningStoryList::add_storys() {
  // @@protoc_insertion_point(field_add:phoenix.msg.planning.PlanningStoryList.storys)
  return storys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::planning::PlanningStory >&
PlanningStoryList::storys() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.planning.PlanningStoryList.storys)
  return storys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace msg
}  // namespace phoenix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planning_5fstory_2eproto
