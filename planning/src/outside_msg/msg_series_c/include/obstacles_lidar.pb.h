// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_lidar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacles_5flidar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacles_5flidar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacles_5flidar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacles_5flidar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5flidar_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleLidar;
class ObstacleLidarDefaultTypeInternal;
extern ObstacleLidarDefaultTypeInternal _ObstacleLidar_default_instance_;
class ObstacleLidarList;
class ObstacleLidarListDefaultTypeInternal;
extern ObstacleLidarListDefaultTypeInternal _ObstacleLidarList_default_instance_;
class ObstacleLidar_OBBox;
class ObstacleLidar_OBBoxDefaultTypeInternal;
extern ObstacleLidar_OBBoxDefaultTypeInternal _ObstacleLidar_OBBox_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::ObstacleLidar* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleLidar>(Arena*);
template<> ::phoenix::msg::perception::ObstacleLidarList* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleLidarList>(Arena*);
template<> ::phoenix::msg::perception::ObstacleLidar_OBBox* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleLidar_OBBox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum ObstacleLidar_ObjType : int {
  ObstacleLidar_ObjType_OBJ_TYPE_UNKNOWN = 0,
  ObstacleLidar_ObjType_OBJ_TYPE_PASSENGER_VEHICLE = 1,
  ObstacleLidar_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE = 2,
  ObstacleLidar_ObjType_OBJ_TYPE_SPECIAL_VEHICLE = 3,
  ObstacleLidar_ObjType_OBJ_TYPE_OTHER_VEHICLE = 4,
  ObstacleLidar_ObjType_OBJ_TYPE_PEDESTRIAN = 5,
  ObstacleLidar_ObjType_OBJ_TYPE_BICYCLE = 6,
  ObstacleLidar_ObjType_OBJ_TYPE_ANIMAL = 7,
  ObstacleLidar_ObjType_OBJ_TYPE_DISCARD = 8,
  ObstacleLidar_ObjType_OBJ_TYPE_CURB = 9
};
bool ObstacleLidar_ObjType_IsValid(int value);
constexpr ObstacleLidar_ObjType ObstacleLidar_ObjType_ObjType_MIN = ObstacleLidar_ObjType_OBJ_TYPE_UNKNOWN;
constexpr ObstacleLidar_ObjType ObstacleLidar_ObjType_ObjType_MAX = ObstacleLidar_ObjType_OBJ_TYPE_CURB;
constexpr int ObstacleLidar_ObjType_ObjType_ARRAYSIZE = ObstacleLidar_ObjType_ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleLidar_ObjType_descriptor();
template<typename T>
inline const std::string& ObstacleLidar_ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleLidar_ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleLidar_ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleLidar_ObjType_descriptor(), enum_t_value);
}
inline bool ObstacleLidar_ObjType_Parse(
    const std::string& name, ObstacleLidar_ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleLidar_ObjType>(
    ObstacleLidar_ObjType_descriptor(), name, value);
}
enum ObstacleLidarList_LidarType : int {
  ObstacleLidarList_LidarType_LIDAR_TYPE_UNKNOWN = 0,
  ObstacleLidarList_LidarType_LIDAR_TYPE_IBEO_4 = 1,
  ObstacleLidarList_LidarType_LIDAR_TYPE_VLP_16 = 2
};
bool ObstacleLidarList_LidarType_IsValid(int value);
constexpr ObstacleLidarList_LidarType ObstacleLidarList_LidarType_LidarType_MIN = ObstacleLidarList_LidarType_LIDAR_TYPE_UNKNOWN;
constexpr ObstacleLidarList_LidarType ObstacleLidarList_LidarType_LidarType_MAX = ObstacleLidarList_LidarType_LIDAR_TYPE_VLP_16;
constexpr int ObstacleLidarList_LidarType_LidarType_ARRAYSIZE = ObstacleLidarList_LidarType_LidarType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleLidarList_LidarType_descriptor();
template<typename T>
inline const std::string& ObstacleLidarList_LidarType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleLidarList_LidarType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleLidarList_LidarType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleLidarList_LidarType_descriptor(), enum_t_value);
}
inline bool ObstacleLidarList_LidarType_Parse(
    const std::string& name, ObstacleLidarList_LidarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleLidarList_LidarType>(
    ObstacleLidarList_LidarType_descriptor(), name, value);
}
// ===================================================================

class ObstacleLidar_OBBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleLidar.OBBox) */ {
 public:
  ObstacleLidar_OBBox();
  virtual ~ObstacleLidar_OBBox();

  ObstacleLidar_OBBox(const ObstacleLidar_OBBox& from);
  ObstacleLidar_OBBox(ObstacleLidar_OBBox&& from) noexcept
    : ObstacleLidar_OBBox() {
    *this = ::std::move(from);
  }

  inline ObstacleLidar_OBBox& operator=(const ObstacleLidar_OBBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleLidar_OBBox& operator=(ObstacleLidar_OBBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleLidar_OBBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleLidar_OBBox* internal_default_instance() {
    return reinterpret_cast<const ObstacleLidar_OBBox*>(
               &_ObstacleLidar_OBBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleLidar_OBBox& a, ObstacleLidar_OBBox& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleLidar_OBBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleLidar_OBBox* New() const final {
    return CreateMaybeMessage<ObstacleLidar_OBBox>(nullptr);
  }

  ObstacleLidar_OBBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleLidar_OBBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleLidar_OBBox& from);
  void MergeFrom(const ObstacleLidar_OBBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleLidar_OBBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleLidar.OBBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5flidar_2eproto);
    return ::descriptor_table_obstacles_5flidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHalfWidthFieldNumber = 4,
    kHalfLengthFieldNumber = 5,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float heading = 3 [default = 0];
  bool has_heading() const;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // optional float half_width = 4 [default = 0];
  bool has_half_width() const;
  void clear_half_width();
  float half_width() const;
  void set_half_width(float value);

  // optional float half_length = 5 [default = 0];
  bool has_half_length() const;
  void clear_half_length();
  float half_length() const;
  void set_half_length(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleLidar.OBBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float heading_;
  float half_width_;
  float half_length_;
  friend struct ::TableStruct_obstacles_5flidar_2eproto;
};
// -------------------------------------------------------------------

class ObstacleLidar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleLidar) */ {
 public:
  ObstacleLidar();
  virtual ~ObstacleLidar();

  ObstacleLidar(const ObstacleLidar& from);
  ObstacleLidar(ObstacleLidar&& from) noexcept
    : ObstacleLidar() {
    *this = ::std::move(from);
  }

  inline ObstacleLidar& operator=(const ObstacleLidar& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleLidar& operator=(ObstacleLidar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleLidar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleLidar* internal_default_instance() {
    return reinterpret_cast<const ObstacleLidar*>(
               &_ObstacleLidar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObstacleLidar& a, ObstacleLidar& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleLidar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleLidar* New() const final {
    return CreateMaybeMessage<ObstacleLidar>(nullptr);
  }

  ObstacleLidar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleLidar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleLidar& from);
  void MergeFrom(const ObstacleLidar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleLidar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleLidar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5flidar_2eproto);
    return ::descriptor_table_obstacles_5flidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleLidar_OBBox OBBox;

  typedef ObstacleLidar_ObjType ObjType;
  static constexpr ObjType OBJ_TYPE_UNKNOWN =
    ObstacleLidar_ObjType_OBJ_TYPE_UNKNOWN;
  static constexpr ObjType OBJ_TYPE_PASSENGER_VEHICLE =
    ObstacleLidar_ObjType_OBJ_TYPE_PASSENGER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_COMMERCIAL_VEHICLE =
    ObstacleLidar_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_SPECIAL_VEHICLE =
    ObstacleLidar_ObjType_OBJ_TYPE_SPECIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_OTHER_VEHICLE =
    ObstacleLidar_ObjType_OBJ_TYPE_OTHER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_PEDESTRIAN =
    ObstacleLidar_ObjType_OBJ_TYPE_PEDESTRIAN;
  static constexpr ObjType OBJ_TYPE_BICYCLE =
    ObstacleLidar_ObjType_OBJ_TYPE_BICYCLE;
  static constexpr ObjType OBJ_TYPE_ANIMAL =
    ObstacleLidar_ObjType_OBJ_TYPE_ANIMAL;
  static constexpr ObjType OBJ_TYPE_DISCARD =
    ObstacleLidar_ObjType_OBJ_TYPE_DISCARD;
  static constexpr ObjType OBJ_TYPE_CURB =
    ObstacleLidar_ObjType_OBJ_TYPE_CURB;
  static inline bool ObjType_IsValid(int value) {
    return ObstacleLidar_ObjType_IsValid(value);
  }
  static constexpr ObjType ObjType_MIN =
    ObstacleLidar_ObjType_ObjType_MIN;
  static constexpr ObjType ObjType_MAX =
    ObstacleLidar_ObjType_ObjType_MAX;
  static constexpr int ObjType_ARRAYSIZE =
    ObstacleLidar_ObjType_ObjType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjType_descriptor() {
    return ObstacleLidar_ObjType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjType_Name.");
    return ObstacleLidar_ObjType_Name(enum_t_value);
  }
  static inline bool ObjType_Parse(const std::string& name,
      ObjType* value) {
    return ObstacleLidar_ObjType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObbFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAgeFieldNumber = 3,
    kPredictionAgeFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kVXFieldNumber = 8,
    kVYFieldNumber = 9,
    kAccelXFieldNumber = 10,
    kAccelYFieldNumber = 11,
    kYawRateFieldNumber = 12,
  };
  // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
  bool has_obb() const;
  void clear_obb();
  const ::phoenix::msg::perception::ObstacleLidar_OBBox& obb() const;
  ::phoenix::msg::perception::ObstacleLidar_OBBox* release_obb();
  ::phoenix::msg::perception::ObstacleLidar_OBBox* mutable_obb();
  void set_allocated_obb(::phoenix::msg::perception::ObstacleLidar_OBBox* obb);

  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::phoenix::msg::perception::ObstacleLidar_ObjType type() const;
  void set_type(::phoenix::msg::perception::ObstacleLidar_ObjType value);

  // optional int32 age = 3 [default = 0];
  bool has_age() const;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 prediction_age = 4 [default = 0];
  bool has_prediction_age() const;
  void clear_prediction_age();
  ::PROTOBUF_NAMESPACE_ID::int32 prediction_age() const;
  void set_prediction_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 5 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 6 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float v_x = 8 [default = 0];
  bool has_v_x() const;
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 9 [default = 0];
  bool has_v_y() const;
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);

  // optional float accel_x = 10 [default = 0];
  bool has_accel_x() const;
  void clear_accel_x();
  float accel_x() const;
  void set_accel_x(float value);

  // optional float accel_y = 11 [default = 0];
  bool has_accel_y() const;
  void clear_accel_y();
  float accel_y() const;
  void set_accel_y(float value);

  // optional float yaw_rate = 12 [default = 0];
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleLidar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::perception::ObstacleLidar_OBBox* obb_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 prediction_age_;
  float x_;
  float y_;
  float v_x_;
  float v_y_;
  float accel_x_;
  float accel_y_;
  float yaw_rate_;
  friend struct ::TableStruct_obstacles_5flidar_2eproto;
};
// -------------------------------------------------------------------

class ObstacleLidarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleLidarList) */ {
 public:
  ObstacleLidarList();
  virtual ~ObstacleLidarList();

  ObstacleLidarList(const ObstacleLidarList& from);
  ObstacleLidarList(ObstacleLidarList&& from) noexcept
    : ObstacleLidarList() {
    *this = ::std::move(from);
  }

  inline ObstacleLidarList& operator=(const ObstacleLidarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleLidarList& operator=(ObstacleLidarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleLidarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleLidarList* internal_default_instance() {
    return reinterpret_cast<const ObstacleLidarList*>(
               &_ObstacleLidarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObstacleLidarList& a, ObstacleLidarList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleLidarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleLidarList* New() const final {
    return CreateMaybeMessage<ObstacleLidarList>(nullptr);
  }

  ObstacleLidarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleLidarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleLidarList& from);
  void MergeFrom(const ObstacleLidarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleLidarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleLidarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5flidar_2eproto);
    return ::descriptor_table_obstacles_5flidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleLidarList_LidarType LidarType;
  static constexpr LidarType LIDAR_TYPE_UNKNOWN =
    ObstacleLidarList_LidarType_LIDAR_TYPE_UNKNOWN;
  static constexpr LidarType LIDAR_TYPE_IBEO_4 =
    ObstacleLidarList_LidarType_LIDAR_TYPE_IBEO_4;
  static constexpr LidarType LIDAR_TYPE_VLP_16 =
    ObstacleLidarList_LidarType_LIDAR_TYPE_VLP_16;
  static inline bool LidarType_IsValid(int value) {
    return ObstacleLidarList_LidarType_IsValid(value);
  }
  static constexpr LidarType LidarType_MIN =
    ObstacleLidarList_LidarType_LidarType_MIN;
  static constexpr LidarType LidarType_MAX =
    ObstacleLidarList_LidarType_LidarType_MAX;
  static constexpr int LidarType_ARRAYSIZE =
    ObstacleLidarList_LidarType_LidarType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LidarType_descriptor() {
    return ObstacleLidarList_LidarType_descriptor();
  }
  template<typename T>
  static inline const std::string& LidarType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LidarType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LidarType_Name.");
    return ObstacleLidarList_LidarType_Name(enum_t_value);
  }
  static inline bool LidarType_Parse(const std::string& name,
      LidarType* value) {
    return ObstacleLidarList_LidarType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kLidarTypeFieldNumber = 2,
  };
  // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
  int obstacles_size() const;
  void clear_obstacles();
  ::phoenix::msg::perception::ObstacleLidar* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleLidar >*
      mutable_obstacles();
  const ::phoenix::msg::perception::ObstacleLidar& obstacles(int index) const;
  ::phoenix::msg::perception::ObstacleLidar* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleLidar >&
      obstacles() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
  bool has_lidar_type() const;
  void clear_lidar_type();
  ::phoenix::msg::perception::ObstacleLidarList_LidarType lidar_type() const;
  void set_lidar_type(::phoenix::msg::perception::ObstacleLidarList_LidarType value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleLidarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleLidar > obstacles_;
  ::phoenix::msg::common::Header* header_;
  int lidar_type_;
  friend struct ::TableStruct_obstacles_5flidar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleLidar_OBBox

// optional float x = 1 [default = 0];
inline bool ObstacleLidar_OBBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleLidar_OBBox::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ObstacleLidar_OBBox::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.OBBox.x)
  return x_;
}
inline void ObstacleLidar_OBBox::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.OBBox.x)
}

// optional float y = 2 [default = 0];
inline bool ObstacleLidar_OBBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleLidar_OBBox::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObstacleLidar_OBBox::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.OBBox.y)
  return y_;
}
inline void ObstacleLidar_OBBox::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.OBBox.y)
}

// optional float heading = 3 [default = 0];
inline bool ObstacleLidar_OBBox::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleLidar_OBBox::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ObstacleLidar_OBBox::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.OBBox.heading)
  return heading_;
}
inline void ObstacleLidar_OBBox::set_heading(float value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.OBBox.heading)
}

// optional float half_width = 4 [default = 0];
inline bool ObstacleLidar_OBBox::has_half_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleLidar_OBBox::clear_half_width() {
  half_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ObstacleLidar_OBBox::half_width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.OBBox.half_width)
  return half_width_;
}
inline void ObstacleLidar_OBBox::set_half_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  half_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.OBBox.half_width)
}

// optional float half_length = 5 [default = 0];
inline bool ObstacleLidar_OBBox::has_half_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleLidar_OBBox::clear_half_length() {
  half_length_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ObstacleLidar_OBBox::half_length() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.OBBox.half_length)
  return half_length_;
}
inline void ObstacleLidar_OBBox::set_half_length(float value) {
  _has_bits_[0] |= 0x00000010u;
  half_length_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.OBBox.half_length)
}

// -------------------------------------------------------------------

// ObstacleLidar

// optional int32 id = 1 [default = 0];
inline bool ObstacleLidar::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleLidar::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleLidar::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.id)
  return id_;
}
inline void ObstacleLidar::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.id)
}

// optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
inline bool ObstacleLidar::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleLidar::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::perception::ObstacleLidar_ObjType ObstacleLidar::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.type)
  return static_cast< ::phoenix::msg::perception::ObstacleLidar_ObjType >(type_);
}
inline void ObstacleLidar::set_type(::phoenix::msg::perception::ObstacleLidar_ObjType value) {
  assert(::phoenix::msg::perception::ObstacleLidar_ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.type)
}

// optional int32 age = 3 [default = 0];
inline bool ObstacleLidar::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleLidar::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleLidar::age() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.age)
  return age_;
}
inline void ObstacleLidar::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  age_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.age)
}

// optional int32 prediction_age = 4 [default = 0];
inline bool ObstacleLidar::has_prediction_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleLidar::clear_prediction_age() {
  prediction_age_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleLidar::prediction_age() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.prediction_age)
  return prediction_age_;
}
inline void ObstacleLidar::set_prediction_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  prediction_age_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.prediction_age)
}

// optional float x = 5 [default = 0];
inline bool ObstacleLidar::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObstacleLidar::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ObstacleLidar::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.x)
  return x_;
}
inline void ObstacleLidar::set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.x)
}

// optional float y = 6 [default = 0];
inline bool ObstacleLidar::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObstacleLidar::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ObstacleLidar::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.y)
  return y_;
}
inline void ObstacleLidar::set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.y)
}

// optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
inline bool ObstacleLidar::has_obb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleLidar::clear_obb() {
  if (obb_ != nullptr) obb_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::perception::ObstacleLidar_OBBox& ObstacleLidar::obb() const {
  const ::phoenix::msg::perception::ObstacleLidar_OBBox* p = obb_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.obb)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::perception::ObstacleLidar_OBBox*>(
      &::phoenix::msg::perception::_ObstacleLidar_OBBox_default_instance_);
}
inline ::phoenix::msg::perception::ObstacleLidar_OBBox* ObstacleLidar::release_obb() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.ObstacleLidar.obb)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::perception::ObstacleLidar_OBBox* temp = obb_;
  obb_ = nullptr;
  return temp;
}
inline ::phoenix::msg::perception::ObstacleLidar_OBBox* ObstacleLidar::mutable_obb() {
  _has_bits_[0] |= 0x00000001u;
  if (obb_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::perception::ObstacleLidar_OBBox>(GetArenaNoVirtual());
    obb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleLidar.obb)
  return obb_;
}
inline void ObstacleLidar::set_allocated_obb(::phoenix::msg::perception::ObstacleLidar_OBBox* obb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obb_;
  }
  if (obb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obb_ = obb;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.ObstacleLidar.obb)
}

// optional float v_x = 8 [default = 0];
inline bool ObstacleLidar::has_v_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObstacleLidar::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ObstacleLidar::v_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.v_x)
  return v_x_;
}
inline void ObstacleLidar::set_v_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  v_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.v_x)
}

// optional float v_y = 9 [default = 0];
inline bool ObstacleLidar::has_v_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObstacleLidar::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ObstacleLidar::v_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.v_y)
  return v_y_;
}
inline void ObstacleLidar::set_v_y(float value) {
  _has_bits_[0] |= 0x00000100u;
  v_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.v_y)
}

// optional float accel_x = 10 [default = 0];
inline bool ObstacleLidar::has_accel_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObstacleLidar::clear_accel_x() {
  accel_x_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ObstacleLidar::accel_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.accel_x)
  return accel_x_;
}
inline void ObstacleLidar::set_accel_x(float value) {
  _has_bits_[0] |= 0x00000200u;
  accel_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.accel_x)
}

// optional float accel_y = 11 [default = 0];
inline bool ObstacleLidar::has_accel_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObstacleLidar::clear_accel_y() {
  accel_y_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ObstacleLidar::accel_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.accel_y)
  return accel_y_;
}
inline void ObstacleLidar::set_accel_y(float value) {
  _has_bits_[0] |= 0x00000400u;
  accel_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.accel_y)
}

// optional float yaw_rate = 12 [default = 0];
inline bool ObstacleLidar::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObstacleLidar::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ObstacleLidar::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidar.yaw_rate)
  return yaw_rate_;
}
inline void ObstacleLidar::set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00000800u;
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidar.yaw_rate)
}

// -------------------------------------------------------------------

// ObstacleLidarList

// optional .phoenix.msg.common.Header header = 1;
inline bool ObstacleLidarList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& ObstacleLidarList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidarList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ObstacleLidarList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.ObstacleLidarList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* ObstacleLidarList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleLidarList.header)
  return header_;
}
inline void ObstacleLidarList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.ObstacleLidarList.header)
}

// optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
inline bool ObstacleLidarList::has_lidar_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleLidarList::clear_lidar_type() {
  lidar_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::ObstacleLidarList_LidarType ObstacleLidarList::lidar_type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidarList.lidar_type)
  return static_cast< ::phoenix::msg::perception::ObstacleLidarList_LidarType >(lidar_type_);
}
inline void ObstacleLidarList::set_lidar_type(::phoenix::msg::perception::ObstacleLidarList_LidarType value) {
  assert(::phoenix::msg::perception::ObstacleLidarList_LidarType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  lidar_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleLidarList.lidar_type)
}

// repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
inline int ObstacleLidarList::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstacleLidarList::clear_obstacles() {
  obstacles_.Clear();
}
inline ::phoenix::msg::perception::ObstacleLidar* ObstacleLidarList::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleLidarList.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleLidar >*
ObstacleLidarList::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.ObstacleLidarList.obstacles)
  return &obstacles_;
}
inline const ::phoenix::msg::perception::ObstacleLidar& ObstacleLidarList::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleLidarList.obstacles)
  return obstacles_.Get(index);
}
inline ::phoenix::msg::perception::ObstacleLidar* ObstacleLidarList::add_obstacles() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.ObstacleLidarList.obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleLidar >&
ObstacleLidarList::obstacles() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.ObstacleLidarList.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleLidar_ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleLidar_ObjType>() {
  return ::phoenix::msg::perception::ObstacleLidar_ObjType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleLidarList_LidarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleLidarList_LidarType>() {
  return ::phoenix::msg::perception::ObstacleLidarList_LidarType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacles_5flidar_2eproto
