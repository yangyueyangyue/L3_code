// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class ObstacleList;
class ObstacleListDefaultTypeInternal;
extern ObstacleListDefaultTypeInternal _ObstacleList_default_instance_;
class Obstacle_OBBox;
class Obstacle_OBBoxDefaultTypeInternal;
extern Obstacle_OBBoxDefaultTypeInternal _Obstacle_OBBox_default_instance_;
class Obstacle_Point2D;
class Obstacle_Point2DDefaultTypeInternal;
extern Obstacle_Point2DDefaultTypeInternal _Obstacle_Point2D_default_instance_;
class Obstacle_PredPath;
class Obstacle_PredPathDefaultTypeInternal;
extern Obstacle_PredPathDefaultTypeInternal _Obstacle_PredPath_default_instance_;
class Obstacle_PredPathPoint;
class Obstacle_PredPathPointDefaultTypeInternal;
extern Obstacle_PredPathPointDefaultTypeInternal _Obstacle_PredPathPoint_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::Obstacle* Arena::CreateMaybeMessage<::phoenix::msg::perception::Obstacle>(Arena*);
template<> ::phoenix::msg::perception::ObstacleList* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleList>(Arena*);
template<> ::phoenix::msg::perception::Obstacle_OBBox* Arena::CreateMaybeMessage<::phoenix::msg::perception::Obstacle_OBBox>(Arena*);
template<> ::phoenix::msg::perception::Obstacle_Point2D* Arena::CreateMaybeMessage<::phoenix::msg::perception::Obstacle_Point2D>(Arena*);
template<> ::phoenix::msg::perception::Obstacle_PredPath* Arena::CreateMaybeMessage<::phoenix::msg::perception::Obstacle_PredPath>(Arena*);
template<> ::phoenix::msg::perception::Obstacle_PredPathPoint* Arena::CreateMaybeMessage<::phoenix::msg::perception::Obstacle_PredPathPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum Obstacle_ObjType : int {
  Obstacle_ObjType_OBJ_TYPE_UNKNOWN = 0,
  Obstacle_ObjType_OBJ_TYPE_PASSENGER_VEHICLE = 1,
  Obstacle_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE = 2,
  Obstacle_ObjType_OBJ_TYPE_SPECIAL_VEHICLE = 3,
  Obstacle_ObjType_OBJ_TYPE_OTHER_VEHICLE = 4,
  Obstacle_ObjType_OBJ_TYPE_PEDESTRIAN = 5,
  Obstacle_ObjType_OBJ_TYPE_BICYCLE = 6,
  Obstacle_ObjType_OBJ_TYPE_ANIMAL = 7,
  Obstacle_ObjType_OBJ_TYPE_DISCARD = 8,
  Obstacle_ObjType_OBJ_TYPE_CURB = 9
};
bool Obstacle_ObjType_IsValid(int value);
constexpr Obstacle_ObjType Obstacle_ObjType_ObjType_MIN = Obstacle_ObjType_OBJ_TYPE_UNKNOWN;
constexpr Obstacle_ObjType Obstacle_ObjType_ObjType_MAX = Obstacle_ObjType_OBJ_TYPE_CURB;
constexpr int Obstacle_ObjType_ObjType_ARRAYSIZE = Obstacle_ObjType_ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Obstacle_ObjType_descriptor();
template<typename T>
inline const std::string& Obstacle_ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Obstacle_ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Obstacle_ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Obstacle_ObjType_descriptor(), enum_t_value);
}
inline bool Obstacle_ObjType_Parse(
    const std::string& name, Obstacle_ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Obstacle_ObjType>(
    Obstacle_ObjType_descriptor(), name, value);
}
enum Obstacle_PerceptionType : int {
  Obstacle_PerceptionType_OBJ_PRCP_TYPE_UNKNOWN = 0,
  Obstacle_PerceptionType_OBJ_PRCP_TYPE_RADAR = 1,
  Obstacle_PerceptionType_OBJ_PRCP_TYPE_CAMERA = 2,
  Obstacle_PerceptionType_OBJ_PRCP_TYPE_FUSED = 3
};
bool Obstacle_PerceptionType_IsValid(int value);
constexpr Obstacle_PerceptionType Obstacle_PerceptionType_PerceptionType_MIN = Obstacle_PerceptionType_OBJ_PRCP_TYPE_UNKNOWN;
constexpr Obstacle_PerceptionType Obstacle_PerceptionType_PerceptionType_MAX = Obstacle_PerceptionType_OBJ_PRCP_TYPE_FUSED;
constexpr int Obstacle_PerceptionType_PerceptionType_ARRAYSIZE = Obstacle_PerceptionType_PerceptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Obstacle_PerceptionType_descriptor();
template<typename T>
inline const std::string& Obstacle_PerceptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Obstacle_PerceptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Obstacle_PerceptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Obstacle_PerceptionType_descriptor(), enum_t_value);
}
inline bool Obstacle_PerceptionType_Parse(
    const std::string& name, Obstacle_PerceptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Obstacle_PerceptionType>(
    Obstacle_PerceptionType_descriptor(), name, value);
}
// ===================================================================

class Obstacle_OBBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.Obstacle.OBBox) */ {
 public:
  Obstacle_OBBox();
  virtual ~Obstacle_OBBox();

  Obstacle_OBBox(const Obstacle_OBBox& from);
  Obstacle_OBBox(Obstacle_OBBox&& from) noexcept
    : Obstacle_OBBox() {
    *this = ::std::move(from);
  }

  inline Obstacle_OBBox& operator=(const Obstacle_OBBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_OBBox& operator=(Obstacle_OBBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle_OBBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_OBBox* internal_default_instance() {
    return reinterpret_cast<const Obstacle_OBBox*>(
               &_Obstacle_OBBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Obstacle_OBBox& a, Obstacle_OBBox& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_OBBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_OBBox* New() const final {
    return CreateMaybeMessage<Obstacle_OBBox>(nullptr);
  }

  Obstacle_OBBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_OBBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle_OBBox& from);
  void MergeFrom(const Obstacle_OBBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle_OBBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.Obstacle.OBBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kHalfWidthFieldNumber = 4,
    kHalfLengthFieldNumber = 5,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float heading = 3 [default = 0];
  bool has_heading() const;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // optional float half_width = 4 [default = 0];
  bool has_half_width() const;
  void clear_half_width();
  float half_width() const;
  void set_half_width(float value);

  // optional float half_length = 5 [default = 0];
  bool has_half_length() const;
  void clear_half_length();
  float half_length() const;
  void set_half_length(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.Obstacle.OBBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float heading_;
  float half_width_;
  float half_length_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class Obstacle_PredPathPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.Obstacle.PredPathPoint) */ {
 public:
  Obstacle_PredPathPoint();
  virtual ~Obstacle_PredPathPoint();

  Obstacle_PredPathPoint(const Obstacle_PredPathPoint& from);
  Obstacle_PredPathPoint(Obstacle_PredPathPoint&& from) noexcept
    : Obstacle_PredPathPoint() {
    *this = ::std::move(from);
  }

  inline Obstacle_PredPathPoint& operator=(const Obstacle_PredPathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_PredPathPoint& operator=(Obstacle_PredPathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle_PredPathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_PredPathPoint* internal_default_instance() {
    return reinterpret_cast<const Obstacle_PredPathPoint*>(
               &_Obstacle_PredPathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Obstacle_PredPathPoint& a, Obstacle_PredPathPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_PredPathPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_PredPathPoint* New() const final {
    return CreateMaybeMessage<Obstacle_PredPathPoint>(nullptr);
  }

  Obstacle_PredPathPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_PredPathPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle_PredPathPoint& from);
  void MergeFrom(const Obstacle_PredPathPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle_PredPathPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.Obstacle.PredPathPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kSFieldNumber = 4,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float heading = 3 [default = 0];
  bool has_heading() const;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // optional float s = 4 [default = 0];
  bool has_s() const;
  void clear_s();
  float s() const;
  void set_s(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.Obstacle.PredPathPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float heading_;
  float s_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class Obstacle_PredPath :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.Obstacle.PredPath) */ {
 public:
  Obstacle_PredPath();
  virtual ~Obstacle_PredPath();

  Obstacle_PredPath(const Obstacle_PredPath& from);
  Obstacle_PredPath(Obstacle_PredPath&& from) noexcept
    : Obstacle_PredPath() {
    *this = ::std::move(from);
  }

  inline Obstacle_PredPath& operator=(const Obstacle_PredPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_PredPath& operator=(Obstacle_PredPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle_PredPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_PredPath* internal_default_instance() {
    return reinterpret_cast<const Obstacle_PredPath*>(
               &_Obstacle_PredPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Obstacle_PredPath& a, Obstacle_PredPath& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_PredPath* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_PredPath* New() const final {
    return CreateMaybeMessage<Obstacle_PredPath>(nullptr);
  }

  Obstacle_PredPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_PredPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle_PredPath& from);
  void MergeFrom(const Obstacle_PredPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle_PredPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.Obstacle.PredPath";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .phoenix.msg.perception.Obstacle.PredPathPoint points = 1;
  int points_size() const;
  void clear_points();
  ::phoenix::msg::perception::Obstacle_PredPathPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPathPoint >*
      mutable_points();
  const ::phoenix::msg::perception::Obstacle_PredPathPoint& points(int index) const;
  ::phoenix::msg::perception::Obstacle_PredPathPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPathPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.Obstacle.PredPath)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPathPoint > points_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class Obstacle_Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.Obstacle.Point2D) */ {
 public:
  Obstacle_Point2D();
  virtual ~Obstacle_Point2D();

  Obstacle_Point2D(const Obstacle_Point2D& from);
  Obstacle_Point2D(Obstacle_Point2D&& from) noexcept
    : Obstacle_Point2D() {
    *this = ::std::move(from);
  }

  inline Obstacle_Point2D& operator=(const Obstacle_Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle_Point2D& operator=(Obstacle_Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle_Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle_Point2D* internal_default_instance() {
    return reinterpret_cast<const Obstacle_Point2D*>(
               &_Obstacle_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Obstacle_Point2D& a, Obstacle_Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle_Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle_Point2D* New() const final {
    return CreateMaybeMessage<Obstacle_Point2D>(nullptr);
  }

  Obstacle_Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle_Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle_Point2D& from);
  void MergeFrom(const Obstacle_Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle_Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.Obstacle.Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.Obstacle.Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class Obstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.Obstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Obstacle_OBBox OBBox;
  typedef Obstacle_PredPathPoint PredPathPoint;
  typedef Obstacle_PredPath PredPath;
  typedef Obstacle_Point2D Point2D;

  typedef Obstacle_ObjType ObjType;
  static constexpr ObjType OBJ_TYPE_UNKNOWN =
    Obstacle_ObjType_OBJ_TYPE_UNKNOWN;
  static constexpr ObjType OBJ_TYPE_PASSENGER_VEHICLE =
    Obstacle_ObjType_OBJ_TYPE_PASSENGER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_COMMERCIAL_VEHICLE =
    Obstacle_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_SPECIAL_VEHICLE =
    Obstacle_ObjType_OBJ_TYPE_SPECIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_OTHER_VEHICLE =
    Obstacle_ObjType_OBJ_TYPE_OTHER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_PEDESTRIAN =
    Obstacle_ObjType_OBJ_TYPE_PEDESTRIAN;
  static constexpr ObjType OBJ_TYPE_BICYCLE =
    Obstacle_ObjType_OBJ_TYPE_BICYCLE;
  static constexpr ObjType OBJ_TYPE_ANIMAL =
    Obstacle_ObjType_OBJ_TYPE_ANIMAL;
  static constexpr ObjType OBJ_TYPE_DISCARD =
    Obstacle_ObjType_OBJ_TYPE_DISCARD;
  static constexpr ObjType OBJ_TYPE_CURB =
    Obstacle_ObjType_OBJ_TYPE_CURB;
  static inline bool ObjType_IsValid(int value) {
    return Obstacle_ObjType_IsValid(value);
  }
  static constexpr ObjType ObjType_MIN =
    Obstacle_ObjType_ObjType_MIN;
  static constexpr ObjType ObjType_MAX =
    Obstacle_ObjType_ObjType_MAX;
  static constexpr int ObjType_ARRAYSIZE =
    Obstacle_ObjType_ObjType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjType_descriptor() {
    return Obstacle_ObjType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjType_Name.");
    return Obstacle_ObjType_Name(enum_t_value);
  }
  static inline bool ObjType_Parse(const std::string& name,
      ObjType* value) {
    return Obstacle_ObjType_Parse(name, value);
  }

  typedef Obstacle_PerceptionType PerceptionType;
  static constexpr PerceptionType OBJ_PRCP_TYPE_UNKNOWN =
    Obstacle_PerceptionType_OBJ_PRCP_TYPE_UNKNOWN;
  static constexpr PerceptionType OBJ_PRCP_TYPE_RADAR =
    Obstacle_PerceptionType_OBJ_PRCP_TYPE_RADAR;
  static constexpr PerceptionType OBJ_PRCP_TYPE_CAMERA =
    Obstacle_PerceptionType_OBJ_PRCP_TYPE_CAMERA;
  static constexpr PerceptionType OBJ_PRCP_TYPE_FUSED =
    Obstacle_PerceptionType_OBJ_PRCP_TYPE_FUSED;
  static inline bool PerceptionType_IsValid(int value) {
    return Obstacle_PerceptionType_IsValid(value);
  }
  static constexpr PerceptionType PerceptionType_MIN =
    Obstacle_PerceptionType_PerceptionType_MIN;
  static constexpr PerceptionType PerceptionType_MAX =
    Obstacle_PerceptionType_PerceptionType_MAX;
  static constexpr int PerceptionType_ARRAYSIZE =
    Obstacle_PerceptionType_PerceptionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PerceptionType_descriptor() {
    return Obstacle_PerceptionType_descriptor();
  }
  template<typename T>
  static inline const std::string& PerceptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PerceptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PerceptionType_Name.");
    return Obstacle_PerceptionType_Name(enum_t_value);
  }
  static inline bool PerceptionType_Parse(const std::string& name,
      PerceptionType* value) {
    return Obstacle_PerceptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPredPathFieldNumber = 17,
    kTrackedPathFieldNumber = 18,
    kObbFieldNumber = 4,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kHeightFieldNumber = 5,
    kHeightToGroundFieldNumber = 6,
    kTypeFieldNumber = 7,
    kDynamicFieldNumber = 8,
    kConfidenceFieldNumber = 9,
    kPerceptionTypeFieldNumber = 10,
    kVXFieldNumber = 11,
    kVYFieldNumber = 12,
    kVFieldNumber = 13,
    kAXFieldNumber = 14,
    kAYFieldNumber = 15,
    kAFieldNumber = 16,
  };
  // repeated .phoenix.msg.perception.Obstacle.PredPath pred_path = 17;
  int pred_path_size() const;
  void clear_pred_path();
  ::phoenix::msg::perception::Obstacle_PredPath* mutable_pred_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPath >*
      mutable_pred_path();
  const ::phoenix::msg::perception::Obstacle_PredPath& pred_path(int index) const;
  ::phoenix::msg::perception::Obstacle_PredPath* add_pred_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPath >&
      pred_path() const;

  // repeated .phoenix.msg.perception.Obstacle.Point2D tracked_path = 18;
  int tracked_path_size() const;
  void clear_tracked_path();
  ::phoenix::msg::perception::Obstacle_Point2D* mutable_tracked_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_Point2D >*
      mutable_tracked_path();
  const ::phoenix::msg::perception::Obstacle_Point2D& tracked_path(int index) const;
  ::phoenix::msg::perception::Obstacle_Point2D* add_tracked_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_Point2D >&
      tracked_path() const;

  // optional .phoenix.msg.perception.Obstacle.OBBox obb = 4;
  bool has_obb() const;
  void clear_obb();
  const ::phoenix::msg::perception::Obstacle_OBBox& obb() const;
  ::phoenix::msg::perception::Obstacle_OBBox* release_obb();
  ::phoenix::msg::perception::Obstacle_OBBox* mutable_obb();
  void set_allocated_obb(::phoenix::msg::perception::Obstacle_OBBox* obb);

  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 2 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 3 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float height = 5 [default = 0];
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // optional float height_to_ground = 6 [default = 0];
  bool has_height_to_ground() const;
  void clear_height_to_ground();
  float height_to_ground() const;
  void set_height_to_ground(float value);

  // optional .phoenix.msg.perception.Obstacle.ObjType type = 7 [default = OBJ_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::phoenix::msg::perception::Obstacle_ObjType type() const;
  void set_type(::phoenix::msg::perception::Obstacle_ObjType value);

  // optional bool dynamic = 8 [default = false];
  bool has_dynamic() const;
  void clear_dynamic();
  bool dynamic() const;
  void set_dynamic(bool value);

  // optional int32 confidence = 9 [default = 0];
  bool has_confidence() const;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.perception.Obstacle.PerceptionType perception_type = 10 [default = OBJ_PRCP_TYPE_UNKNOWN];
  bool has_perception_type() const;
  void clear_perception_type();
  ::phoenix::msg::perception::Obstacle_PerceptionType perception_type() const;
  void set_perception_type(::phoenix::msg::perception::Obstacle_PerceptionType value);

  // optional float v_x = 11 [default = 0];
  bool has_v_x() const;
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 12 [default = 0];
  bool has_v_y() const;
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);

  // optional float v = 13 [default = 0];
  bool has_v() const;
  void clear_v();
  float v() const;
  void set_v(float value);

  // optional float a_x = 14 [default = 0];
  bool has_a_x() const;
  void clear_a_x();
  float a_x() const;
  void set_a_x(float value);

  // optional float a_y = 15 [default = 0];
  bool has_a_y() const;
  void clear_a_y();
  float a_y() const;
  void set_a_y(float value);

  // optional float a = 16 [default = 0];
  bool has_a() const;
  void clear_a();
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.Obstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPath > pred_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_Point2D > tracked_path_;
  ::phoenix::msg::perception::Obstacle_OBBox* obb_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float height_;
  float height_to_ground_;
  int type_;
  bool dynamic_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  int perception_type_;
  float v_x_;
  float v_y_;
  float v_;
  float a_x_;
  float a_y_;
  float a_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class ObstacleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleList) */ {
 public:
  ObstacleList();
  virtual ~ObstacleList();

  ObstacleList(const ObstacleList& from);
  ObstacleList(ObstacleList&& from) noexcept
    : ObstacleList() {
    *this = ::std::move(from);
  }

  inline ObstacleList& operator=(const ObstacleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleList& operator=(ObstacleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleList* internal_default_instance() {
    return reinterpret_cast<const ObstacleList*>(
               &_ObstacleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObstacleList& a, ObstacleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleList* New() const final {
    return CreateMaybeMessage<ObstacleList>(nullptr);
  }

  ObstacleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleList& from);
  void MergeFrom(const ObstacleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .phoenix.msg.perception.Obstacle obstacles = 2;
  int obstacles_size() const;
  void clear_obstacles();
  ::phoenix::msg::perception::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle >*
      mutable_obstacles();
  const ::phoenix::msg::perception::Obstacle& obstacles(int index) const;
  ::phoenix::msg::perception::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle >&
      obstacles() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle > obstacles_;
  ::phoenix::msg::common::Header* header_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Obstacle_OBBox

// optional float x = 1 [default = 0];
inline bool Obstacle_OBBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle_OBBox::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Obstacle_OBBox::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.OBBox.x)
  return x_;
}
inline void Obstacle_OBBox::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.OBBox.x)
}

// optional float y = 2 [default = 0];
inline bool Obstacle_OBBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle_OBBox::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Obstacle_OBBox::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.OBBox.y)
  return y_;
}
inline void Obstacle_OBBox::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.OBBox.y)
}

// optional float heading = 3 [default = 0];
inline bool Obstacle_OBBox::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle_OBBox::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Obstacle_OBBox::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.OBBox.heading)
  return heading_;
}
inline void Obstacle_OBBox::set_heading(float value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.OBBox.heading)
}

// optional float half_width = 4 [default = 0];
inline bool Obstacle_OBBox::has_half_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle_OBBox::clear_half_width() {
  half_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Obstacle_OBBox::half_width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.OBBox.half_width)
  return half_width_;
}
inline void Obstacle_OBBox::set_half_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  half_width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.OBBox.half_width)
}

// optional float half_length = 5 [default = 0];
inline bool Obstacle_OBBox::has_half_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle_OBBox::clear_half_length() {
  half_length_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Obstacle_OBBox::half_length() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.OBBox.half_length)
  return half_length_;
}
inline void Obstacle_OBBox::set_half_length(float value) {
  _has_bits_[0] |= 0x00000010u;
  half_length_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.OBBox.half_length)
}

// -------------------------------------------------------------------

// Obstacle_PredPathPoint

// optional float x = 1 [default = 0];
inline bool Obstacle_PredPathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle_PredPathPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Obstacle_PredPathPoint::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.PredPathPoint.x)
  return x_;
}
inline void Obstacle_PredPathPoint::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.PredPathPoint.x)
}

// optional float y = 2 [default = 0];
inline bool Obstacle_PredPathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle_PredPathPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Obstacle_PredPathPoint::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.PredPathPoint.y)
  return y_;
}
inline void Obstacle_PredPathPoint::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.PredPathPoint.y)
}

// optional float heading = 3 [default = 0];
inline bool Obstacle_PredPathPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle_PredPathPoint::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Obstacle_PredPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.PredPathPoint.heading)
  return heading_;
}
inline void Obstacle_PredPathPoint::set_heading(float value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.PredPathPoint.heading)
}

// optional float s = 4 [default = 0];
inline bool Obstacle_PredPathPoint::has_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle_PredPathPoint::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Obstacle_PredPathPoint::s() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.PredPathPoint.s)
  return s_;
}
inline void Obstacle_PredPathPoint::set_s(float value) {
  _has_bits_[0] |= 0x00000008u;
  s_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.PredPathPoint.s)
}

// -------------------------------------------------------------------

// Obstacle_PredPath

// repeated .phoenix.msg.perception.Obstacle.PredPathPoint points = 1;
inline int Obstacle_PredPath::points_size() const {
  return points_.size();
}
inline void Obstacle_PredPath::clear_points() {
  points_.Clear();
}
inline ::phoenix::msg::perception::Obstacle_PredPathPoint* Obstacle_PredPath::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.Obstacle.PredPath.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPathPoint >*
Obstacle_PredPath::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.Obstacle.PredPath.points)
  return &points_;
}
inline const ::phoenix::msg::perception::Obstacle_PredPathPoint& Obstacle_PredPath::points(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.PredPath.points)
  return points_.Get(index);
}
inline ::phoenix::msg::perception::Obstacle_PredPathPoint* Obstacle_PredPath::add_points() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.Obstacle.PredPath.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPathPoint >&
Obstacle_PredPath::points() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.Obstacle.PredPath.points)
  return points_;
}

// -------------------------------------------------------------------

// Obstacle_Point2D

// optional float x = 1 [default = 0];
inline bool Obstacle_Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle_Point2D::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Obstacle_Point2D::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.Point2D.x)
  return x_;
}
inline void Obstacle_Point2D::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.Point2D.x)
}

// optional float y = 2 [default = 0];
inline bool Obstacle_Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle_Point2D::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Obstacle_Point2D::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.Point2D.y)
  return y_;
}
inline void Obstacle_Point2D::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.Point2D.y)
}

// -------------------------------------------------------------------

// Obstacle

// optional int32 id = 1 [default = 0];
inline bool Obstacle::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.id)
  return id_;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.id)
}

// optional float x = 2 [default = 0];
inline bool Obstacle::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Obstacle::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.x)
  return x_;
}
inline void Obstacle::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.x)
}

// optional float y = 3 [default = 0];
inline bool Obstacle::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Obstacle::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.y)
  return y_;
}
inline void Obstacle::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.y)
}

// optional .phoenix.msg.perception.Obstacle.OBBox obb = 4;
inline bool Obstacle::has_obb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::clear_obb() {
  if (obb_ != nullptr) obb_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::phoenix::msg::perception::Obstacle_OBBox& Obstacle::obb() const {
  const ::phoenix::msg::perception::Obstacle_OBBox* p = obb_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.obb)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::perception::Obstacle_OBBox*>(
      &::phoenix::msg::perception::_Obstacle_OBBox_default_instance_);
}
inline ::phoenix::msg::perception::Obstacle_OBBox* Obstacle::release_obb() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.Obstacle.obb)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::perception::Obstacle_OBBox* temp = obb_;
  obb_ = nullptr;
  return temp;
}
inline ::phoenix::msg::perception::Obstacle_OBBox* Obstacle::mutable_obb() {
  _has_bits_[0] |= 0x00000001u;
  if (obb_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::perception::Obstacle_OBBox>(GetArenaNoVirtual());
    obb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.Obstacle.obb)
  return obb_;
}
inline void Obstacle::set_allocated_obb(::phoenix::msg::perception::Obstacle_OBBox* obb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obb_;
  }
  if (obb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obb_ = obb;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.Obstacle.obb)
}

// optional float height = 5 [default = 0];
inline bool Obstacle::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Obstacle::height() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.height)
  return height_;
}
inline void Obstacle::set_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.height)
}

// optional float height_to_ground = 6 [default = 0];
inline bool Obstacle::has_height_to_ground() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::clear_height_to_ground() {
  height_to_ground_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Obstacle::height_to_ground() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.height_to_ground)
  return height_to_ground_;
}
inline void Obstacle::set_height_to_ground(float value) {
  _has_bits_[0] |= 0x00000020u;
  height_to_ground_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.height_to_ground)
}

// optional .phoenix.msg.perception.Obstacle.ObjType type = 7 [default = OBJ_TYPE_UNKNOWN];
inline bool Obstacle::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::phoenix::msg::perception::Obstacle_ObjType Obstacle::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.type)
  return static_cast< ::phoenix::msg::perception::Obstacle_ObjType >(type_);
}
inline void Obstacle::set_type(::phoenix::msg::perception::Obstacle_ObjType value) {
  assert(::phoenix::msg::perception::Obstacle_ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.type)
}

// optional bool dynamic = 8 [default = false];
inline bool Obstacle::has_dynamic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Obstacle::clear_dynamic() {
  dynamic_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Obstacle::dynamic() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.dynamic)
  return dynamic_;
}
inline void Obstacle::set_dynamic(bool value) {
  _has_bits_[0] |= 0x00000080u;
  dynamic_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.dynamic)
}

// optional int32 confidence = 9 [default = 0];
inline bool Obstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Obstacle::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::confidence() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.confidence)
  return confidence_;
}
inline void Obstacle::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.confidence)
}

// optional .phoenix.msg.perception.Obstacle.PerceptionType perception_type = 10 [default = OBJ_PRCP_TYPE_UNKNOWN];
inline bool Obstacle::has_perception_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Obstacle::clear_perception_type() {
  perception_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::phoenix::msg::perception::Obstacle_PerceptionType Obstacle::perception_type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.perception_type)
  return static_cast< ::phoenix::msg::perception::Obstacle_PerceptionType >(perception_type_);
}
inline void Obstacle::set_perception_type(::phoenix::msg::perception::Obstacle_PerceptionType value) {
  assert(::phoenix::msg::perception::Obstacle_PerceptionType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  perception_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.perception_type)
}

// optional float v_x = 11 [default = 0];
inline bool Obstacle::has_v_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Obstacle::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Obstacle::v_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.v_x)
  return v_x_;
}
inline void Obstacle::set_v_x(float value) {
  _has_bits_[0] |= 0x00000400u;
  v_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.v_x)
}

// optional float v_y = 12 [default = 0];
inline bool Obstacle::has_v_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Obstacle::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Obstacle::v_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.v_y)
  return v_y_;
}
inline void Obstacle::set_v_y(float value) {
  _has_bits_[0] |= 0x00000800u;
  v_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.v_y)
}

// optional float v = 13 [default = 0];
inline bool Obstacle::has_v() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Obstacle::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Obstacle::v() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.v)
  return v_;
}
inline void Obstacle::set_v(float value) {
  _has_bits_[0] |= 0x00001000u;
  v_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.v)
}

// optional float a_x = 14 [default = 0];
inline bool Obstacle::has_a_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Obstacle::clear_a_x() {
  a_x_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float Obstacle::a_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.a_x)
  return a_x_;
}
inline void Obstacle::set_a_x(float value) {
  _has_bits_[0] |= 0x00002000u;
  a_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.a_x)
}

// optional float a_y = 15 [default = 0];
inline bool Obstacle::has_a_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Obstacle::clear_a_y() {
  a_y_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float Obstacle::a_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.a_y)
  return a_y_;
}
inline void Obstacle::set_a_y(float value) {
  _has_bits_[0] |= 0x00004000u;
  a_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.a_y)
}

// optional float a = 16 [default = 0];
inline bool Obstacle::has_a() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Obstacle::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Obstacle::a() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.a)
  return a_;
}
inline void Obstacle::set_a(float value) {
  _has_bits_[0] |= 0x00008000u;
  a_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.Obstacle.a)
}

// repeated .phoenix.msg.perception.Obstacle.PredPath pred_path = 17;
inline int Obstacle::pred_path_size() const {
  return pred_path_.size();
}
inline void Obstacle::clear_pred_path() {
  pred_path_.Clear();
}
inline ::phoenix::msg::perception::Obstacle_PredPath* Obstacle::mutable_pred_path(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.Obstacle.pred_path)
  return pred_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPath >*
Obstacle::mutable_pred_path() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.Obstacle.pred_path)
  return &pred_path_;
}
inline const ::phoenix::msg::perception::Obstacle_PredPath& Obstacle::pred_path(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.pred_path)
  return pred_path_.Get(index);
}
inline ::phoenix::msg::perception::Obstacle_PredPath* Obstacle::add_pred_path() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.Obstacle.pred_path)
  return pred_path_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_PredPath >&
Obstacle::pred_path() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.Obstacle.pred_path)
  return pred_path_;
}

// repeated .phoenix.msg.perception.Obstacle.Point2D tracked_path = 18;
inline int Obstacle::tracked_path_size() const {
  return tracked_path_.size();
}
inline void Obstacle::clear_tracked_path() {
  tracked_path_.Clear();
}
inline ::phoenix::msg::perception::Obstacle_Point2D* Obstacle::mutable_tracked_path(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.Obstacle.tracked_path)
  return tracked_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_Point2D >*
Obstacle::mutable_tracked_path() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.Obstacle.tracked_path)
  return &tracked_path_;
}
inline const ::phoenix::msg::perception::Obstacle_Point2D& Obstacle::tracked_path(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.Obstacle.tracked_path)
  return tracked_path_.Get(index);
}
inline ::phoenix::msg::perception::Obstacle_Point2D* Obstacle::add_tracked_path() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.Obstacle.tracked_path)
  return tracked_path_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle_Point2D >&
Obstacle::tracked_path() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.Obstacle.tracked_path)
  return tracked_path_;
}

// -------------------------------------------------------------------

// ObstacleList

// optional .phoenix.msg.common.Header header = 1;
inline bool ObstacleList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& ObstacleList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ObstacleList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.ObstacleList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* ObstacleList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleList.header)
  return header_;
}
inline void ObstacleList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.ObstacleList.header)
}

// repeated .phoenix.msg.perception.Obstacle obstacles = 2;
inline int ObstacleList::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstacleList::clear_obstacles() {
  obstacles_.Clear();
}
inline ::phoenix::msg::perception::Obstacle* ObstacleList::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleList.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle >*
ObstacleList::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.ObstacleList.obstacles)
  return &obstacles_;
}
inline const ::phoenix::msg::perception::Obstacle& ObstacleList::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleList.obstacles)
  return obstacles_.Get(index);
}
inline ::phoenix::msg::perception::Obstacle* ObstacleList::add_obstacles() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.ObstacleList.obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::Obstacle >&
ObstacleList::obstacles() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.ObstacleList.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::Obstacle_ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::Obstacle_ObjType>() {
  return ::phoenix::msg::perception::Obstacle_ObjType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::Obstacle_PerceptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::Obstacle_PerceptionType>() {
  return ::phoenix::msg::perception::Obstacle_PerceptionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto
