// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traffic_5fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traffic_5fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traffic_5fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traffic_5fsignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_5fsignal_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class TrafficSignalBox;
class TrafficSignalBoxDefaultTypeInternal;
extern TrafficSignalBoxDefaultTypeInternal _TrafficSignalBox_default_instance_;
class TrafficSignalList;
class TrafficSignalListDefaultTypeInternal;
extern TrafficSignalListDefaultTypeInternal _TrafficSignalList_default_instance_;
class TrafficSignalSpeedRestriction;
class TrafficSignalSpeedRestrictionDefaultTypeInternal;
extern TrafficSignalSpeedRestrictionDefaultTypeInternal _TrafficSignalSpeedRestriction_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::TrafficSignalBox* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficSignalBox>(Arena*);
template<> ::phoenix::msg::perception::TrafficSignalList* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficSignalList>(Arena*);
template<> ::phoenix::msg::perception::TrafficSignalSpeedRestriction* Arena::CreateMaybeMessage<::phoenix::msg::perception::TrafficSignalSpeedRestriction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum TrafficSignalSpeedRestriction_Type : int {
  TrafficSignalSpeedRestriction_Type_UNKNOWN = 0,
  TrafficSignalSpeedRestriction_Type_START_RESTRICTION = 1,
  TrafficSignalSpeedRestriction_Type_END_RESTRICTION = 2
};
bool TrafficSignalSpeedRestriction_Type_IsValid(int value);
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction_Type_Type_MIN = TrafficSignalSpeedRestriction_Type_UNKNOWN;
constexpr TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction_Type_Type_MAX = TrafficSignalSpeedRestriction_Type_END_RESTRICTION;
constexpr int TrafficSignalSpeedRestriction_Type_Type_ARRAYSIZE = TrafficSignalSpeedRestriction_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignalSpeedRestriction_Type_descriptor();
template<typename T>
inline const std::string& TrafficSignalSpeedRestriction_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficSignalSpeedRestriction_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficSignalSpeedRestriction_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficSignalSpeedRestriction_Type_descriptor(), enum_t_value);
}
inline bool TrafficSignalSpeedRestriction_Type_Parse(
    const std::string& name, TrafficSignalSpeedRestriction_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficSignalSpeedRestriction_Type>(
    TrafficSignalSpeedRestriction_Type_descriptor(), name, value);
}
// ===================================================================

class TrafficSignalBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficSignalBox) */ {
 public:
  TrafficSignalBox();
  virtual ~TrafficSignalBox();

  TrafficSignalBox(const TrafficSignalBox& from);
  TrafficSignalBox(TrafficSignalBox&& from) noexcept
    : TrafficSignalBox() {
    *this = ::std::move(from);
  }

  inline TrafficSignalBox& operator=(const TrafficSignalBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalBox& operator=(TrafficSignalBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalBox* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalBox*>(
               &_TrafficSignalBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficSignalBox& a, TrafficSignalBox& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalBox* New() const final {
    return CreateMaybeMessage<TrafficSignalBox>(nullptr);
  }

  TrafficSignalBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalBox& from);
  void MergeFrom(const TrafficSignalBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficSignalBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5fsignal_2eproto);
    return ::descriptor_table_traffic_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kCameraIdFieldNumber = 6,
  };
  // optional float x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  float z() const;
  void set_z(float value);

  // optional float width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // optional float height = 5 [default = 0];
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // optional int32 camera_id = 6 [default = 0];
  bool has_camera_id() const;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficSignalBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float width_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  friend struct ::TableStruct_traffic_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalSpeedRestriction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficSignalSpeedRestriction) */ {
 public:
  TrafficSignalSpeedRestriction();
  virtual ~TrafficSignalSpeedRestriction();

  TrafficSignalSpeedRestriction(const TrafficSignalSpeedRestriction& from);
  TrafficSignalSpeedRestriction(TrafficSignalSpeedRestriction&& from) noexcept
    : TrafficSignalSpeedRestriction() {
    *this = ::std::move(from);
  }

  inline TrafficSignalSpeedRestriction& operator=(const TrafficSignalSpeedRestriction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalSpeedRestriction& operator=(TrafficSignalSpeedRestriction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalSpeedRestriction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalSpeedRestriction* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalSpeedRestriction*>(
               &_TrafficSignalSpeedRestriction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficSignalSpeedRestriction& a, TrafficSignalSpeedRestriction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalSpeedRestriction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalSpeedRestriction* New() const final {
    return CreateMaybeMessage<TrafficSignalSpeedRestriction>(nullptr);
  }

  TrafficSignalSpeedRestriction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalSpeedRestriction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalSpeedRestriction& from);
  void MergeFrom(const TrafficSignalSpeedRestriction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalSpeedRestriction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficSignalSpeedRestriction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5fsignal_2eproto);
    return ::descriptor_table_traffic_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficSignalSpeedRestriction_Type Type;
  static constexpr Type UNKNOWN =
    TrafficSignalSpeedRestriction_Type_UNKNOWN;
  static constexpr Type START_RESTRICTION =
    TrafficSignalSpeedRestriction_Type_START_RESTRICTION;
  static constexpr Type END_RESTRICTION =
    TrafficSignalSpeedRestriction_Type_END_RESTRICTION;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalSpeedRestriction_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TrafficSignalSpeedRestriction_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TrafficSignalSpeedRestriction_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TrafficSignalSpeedRestriction_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TrafficSignalSpeedRestriction_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TrafficSignalSpeedRestriction_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TrafficSignalSpeedRestriction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBoxFieldNumber = 3,
    kTypeFieldNumber = 2,
    kSpeedFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .phoenix.msg.perception.TrafficSignalBox box = 3;
  bool has_box() const;
  void clear_box();
  const ::phoenix::msg::perception::TrafficSignalBox& box() const;
  ::phoenix::msg::perception::TrafficSignalBox* release_box();
  ::phoenix::msg::perception::TrafficSignalBox* mutable_box();
  void set_allocated_box(::phoenix::msg::perception::TrafficSignalBox* box);

  // optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type type() const;
  void set_type(::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type value);

  // optional float speed = 4 [default = 0];
  bool has_speed() const;
  void clear_speed();
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficSignalSpeedRestriction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::phoenix::msg::perception::TrafficSignalBox* box_;
  int type_;
  float speed_;
  friend struct ::TableStruct_traffic_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.TrafficSignalList) */ {
 public:
  TrafficSignalList();
  virtual ~TrafficSignalList();

  TrafficSignalList(const TrafficSignalList& from);
  TrafficSignalList(TrafficSignalList&& from) noexcept
    : TrafficSignalList() {
    *this = ::std::move(from);
  }

  inline TrafficSignalList& operator=(const TrafficSignalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalList& operator=(TrafficSignalList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalList* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalList*>(
               &_TrafficSignalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficSignalList& a, TrafficSignalList& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalList* New() const final {
    return CreateMaybeMessage<TrafficSignalList>(nullptr);
  }

  TrafficSignalList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalList& from);
  void MergeFrom(const TrafficSignalList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.TrafficSignalList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_5fsignal_2eproto);
    return ::descriptor_table_traffic_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedRestrictionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
  int speed_restrictions_size() const;
  void clear_speed_restrictions();
  ::phoenix::msg::perception::TrafficSignalSpeedRestriction* mutable_speed_restrictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >*
      mutable_speed_restrictions();
  const ::phoenix::msg::perception::TrafficSignalSpeedRestriction& speed_restrictions(int index) const;
  ::phoenix::msg::perception::TrafficSignalSpeedRestriction* add_speed_restrictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >&
      speed_restrictions() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.TrafficSignalList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficSignalSpeedRestriction > speed_restrictions_;
  ::phoenix::msg::common::Header* header_;
  friend struct ::TableStruct_traffic_5fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficSignalBox

// optional float x = 1 [default = 0];
inline bool TrafficSignalBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSignalBox::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrafficSignalBox::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.x)
  return x_;
}
inline void TrafficSignalBox::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.x)
}

// optional float y = 2 [default = 0];
inline bool TrafficSignalBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSignalBox::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrafficSignalBox::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.y)
  return y_;
}
inline void TrafficSignalBox::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.y)
}

// optional float z = 3 [default = 0];
inline bool TrafficSignalBox::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficSignalBox::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrafficSignalBox::z() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.z)
  return z_;
}
inline void TrafficSignalBox::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.z)
}

// optional float width = 4 [default = 0];
inline bool TrafficSignalBox::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficSignalBox::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrafficSignalBox::width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.width)
  return width_;
}
inline void TrafficSignalBox::set_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.width)
}

// optional float height = 5 [default = 0];
inline bool TrafficSignalBox::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficSignalBox::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrafficSignalBox::height() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.height)
  return height_;
}
inline void TrafficSignalBox::set_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.height)
}

// optional int32 camera_id = 6 [default = 0];
inline bool TrafficSignalBox::has_camera_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficSignalBox::clear_camera_id() {
  camera_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalBox::camera_id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalBox.camera_id)
  return camera_id_;
}
inline void TrafficSignalBox::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalBox.camera_id)
}

// -------------------------------------------------------------------

// TrafficSignalSpeedRestriction

// optional string id = 1;
inline bool TrafficSignalSpeedRestriction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSignalSpeedRestriction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrafficSignalSpeedRestriction::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
  return id_.GetNoArena();
}
inline void TrafficSignalSpeedRestriction::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
}
inline void TrafficSignalSpeedRestriction::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
}
inline void TrafficSignalSpeedRestriction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
}
inline void TrafficSignalSpeedRestriction::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
}
inline std::string* TrafficSignalSpeedRestriction::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficSignalSpeedRestriction::release_id() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficSignalSpeedRestriction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficSignalSpeedRestriction.id)
}

// optional .phoenix.msg.perception.TrafficSignalSpeedRestriction.Type type = 2 [default = UNKNOWN];
inline bool TrafficSignalSpeedRestriction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficSignalSpeedRestriction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type TrafficSignalSpeedRestriction::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalSpeedRestriction.type)
  return static_cast< ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type >(type_);
}
inline void TrafficSignalSpeedRestriction::set_type(::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type value) {
  assert(::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalSpeedRestriction.type)
}

// optional .phoenix.msg.perception.TrafficSignalBox box = 3;
inline bool TrafficSignalSpeedRestriction::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficSignalSpeedRestriction::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::phoenix::msg::perception::TrafficSignalBox& TrafficSignalSpeedRestriction::box() const {
  const ::phoenix::msg::perception::TrafficSignalBox* p = box_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalSpeedRestriction.box)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::perception::TrafficSignalBox*>(
      &::phoenix::msg::perception::_TrafficSignalBox_default_instance_);
}
inline ::phoenix::msg::perception::TrafficSignalBox* TrafficSignalSpeedRestriction::release_box() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficSignalSpeedRestriction.box)
  _has_bits_[0] &= ~0x00000002u;
  ::phoenix::msg::perception::TrafficSignalBox* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::phoenix::msg::perception::TrafficSignalBox* TrafficSignalSpeedRestriction::mutable_box() {
  _has_bits_[0] |= 0x00000002u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::perception::TrafficSignalBox>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficSignalSpeedRestriction.box)
  return box_;
}
inline void TrafficSignalSpeedRestriction::set_allocated_box(::phoenix::msg::perception::TrafficSignalBox* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficSignalSpeedRestriction.box)
}

// optional float speed = 4 [default = 0];
inline bool TrafficSignalSpeedRestriction::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficSignalSpeedRestriction::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrafficSignalSpeedRestriction::speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalSpeedRestriction.speed)
  return speed_;
}
inline void TrafficSignalSpeedRestriction::set_speed(float value) {
  _has_bits_[0] |= 0x00000008u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.TrafficSignalSpeedRestriction.speed)
}

// -------------------------------------------------------------------

// TrafficSignalList

// optional .phoenix.msg.common.Header header = 1;
inline bool TrafficSignalList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& TrafficSignalList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* TrafficSignalList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.TrafficSignalList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* TrafficSignalList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficSignalList.header)
  return header_;
}
inline void TrafficSignalList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.TrafficSignalList.header)
}

// repeated .phoenix.msg.perception.TrafficSignalSpeedRestriction speed_restrictions = 2;
inline int TrafficSignalList::speed_restrictions_size() const {
  return speed_restrictions_.size();
}
inline void TrafficSignalList::clear_speed_restrictions() {
  speed_restrictions_.Clear();
}
inline ::phoenix::msg::perception::TrafficSignalSpeedRestriction* TrafficSignalList::mutable_speed_restrictions(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.TrafficSignalList.speed_restrictions)
  return speed_restrictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >*
TrafficSignalList::mutable_speed_restrictions() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.TrafficSignalList.speed_restrictions)
  return &speed_restrictions_;
}
inline const ::phoenix::msg::perception::TrafficSignalSpeedRestriction& TrafficSignalList::speed_restrictions(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.TrafficSignalList.speed_restrictions)
  return speed_restrictions_.Get(index);
}
inline ::phoenix::msg::perception::TrafficSignalSpeedRestriction* TrafficSignalList::add_speed_restrictions() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.TrafficSignalList.speed_restrictions)
  return speed_restrictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::TrafficSignalSpeedRestriction >&
TrafficSignalList::speed_restrictions() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.TrafficSignalList.speed_restrictions)
  return speed_restrictions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type>() {
  return ::phoenix::msg::perception::TrafficSignalSpeedRestriction_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traffic_5fsignal_2eproto
