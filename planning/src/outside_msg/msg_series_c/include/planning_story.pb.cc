// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_story.proto

#include "planning_story.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlanningStory_planning_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryAction_planning_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningStoryCondition_planning_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningStoryRefLine_planning_5fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_5fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto;
namespace phoenix {
namespace msg {
namespace planning {
class PlanningStoryRefLine_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryRefLine_Point> _instance;
} _PlanningStoryRefLine_Point_default_instance_;
class PlanningStoryRefLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryRefLine> _instance;
} _PlanningStoryRefLine_default_instance_;
class PlanningStoryCondition_AreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryCondition_Area> _instance;
} _PlanningStoryCondition_Area_default_instance_;
class PlanningStoryConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryCondition> _instance;
} _PlanningStoryCondition_default_instance_;
class PlanningStoryActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryAction> _instance;
} _PlanningStoryAction_default_instance_;
class PlanningStoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStory> _instance;
} _PlanningStory_default_instance_;
class PlanningStoryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStoryList> _instance;
} _PlanningStoryList_default_instance_;
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_PlanningStory_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStory_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlanningStory_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PlanningStory_planning_5fstory_2eproto}, {
      &scc_info_PlanningStoryRefLine_planning_5fstory_2eproto.base,
      &scc_info_PlanningStoryCondition_planning_5fstory_2eproto.base,
      &scc_info_PlanningStoryAction_planning_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_PlanningStoryAction_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryAction_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryAction_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningStoryAction_planning_5fstory_2eproto}, {}};

static void InitDefaultsscc_info_PlanningStoryCondition_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryCondition_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningStoryCondition_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlanningStoryCondition_planning_5fstory_2eproto}, {
      &scc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryCondition_Area_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryCondition_Area();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryCondition_Area::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto}, {}};

static void InitDefaultsscc_info_PlanningStoryList_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryList_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanningStoryList_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PlanningStoryList_planning_5fstory_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_PlanningStory_planning_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_PlanningStoryRefLine_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryRefLine_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryRefLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryRefLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningStoryRefLine_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlanningStoryRefLine_planning_5fstory_2eproto}, {
      &scc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto.base,}};

static void InitDefaultsscc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::planning::_PlanningStoryRefLine_Point_default_instance_;
    new (ptr) ::phoenix::msg::planning::PlanningStoryRefLine_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::planning::PlanningStoryRefLine_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planning_5fstory_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_planning_5fstory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planning_5fstory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planning_5fstory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine_Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine_Point, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine_Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryRefLine, points_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, left_width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, right_width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, start_s_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition_Area, end_s_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, area_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, speed_high_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, speed_low_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryCondition, gear_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, holding_time_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, speed_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, acceleration_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, turn_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, brake_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryAction, cmd_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, ref_line_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, condition_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStory, action_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::planning::PlanningStoryList, storys_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::phoenix::msg::planning::PlanningStoryRefLine_Point)},
  { 9, 15, sizeof(::phoenix::msg::planning::PlanningStoryRefLine)},
  { 16, 25, sizeof(::phoenix::msg::planning::PlanningStoryCondition_Area)},
  { 29, 38, sizeof(::phoenix::msg::planning::PlanningStoryCondition)},
  { 42, 54, sizeof(::phoenix::msg::planning::PlanningStoryAction)},
  { 61, 71, sizeof(::phoenix::msg::planning::PlanningStory)},
  { 76, 83, sizeof(::phoenix::msg::planning::PlanningStoryList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryRefLine_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryRefLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryCondition_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::planning::_PlanningStoryList_default_instance_),
};

const char descriptor_table_protodef_planning_5fstory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024planning_story.proto\022\024phoenix.msg.plan"
  "ning\032\014header.proto\032\rchassis.proto\"}\n\024Pla"
  "nningStoryRefLine\022@\n\006points\030\001 \003(\01320.phoe"
  "nix.msg.planning.PlanningStoryRefLine.Po"
  "int\032#\n\005Point\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010"
  "\"\254\002\n\026PlanningStoryCondition\022\?\n\004area\030\001 \001("
  "\01321.phoenix.msg.planning.PlanningStoryCo"
  "ndition.Area\022\025\n\nspeed_high\030\002 \001(\001:\0010\022\024\n\ts"
  "peed_low\030\003 \001(\001:\0010\022E\n\004gear\030\004 \001(\0162).phoeni"
  "x.msg.control.Chassis.GearPosition:\014GEAR"
  "_INVALID\032]\n\004Area\022\025\n\nleft_width\030\001 \001(\001:\0012\022"
  "\026\n\013right_width\030\002 \001(\001:\0012\022\023\n\007start_s\030\003 \001(\001"
  ":\002-1\022\021\n\005end_s\030\004 \001(\001:\002-1\"\316\002\n\023PlanningStor"
  "yAction\022\027\n\014holding_time\030\001 \001(\001:\0010\022\020\n\005spee"
  "d\030\002 \001(\001:\0010\022\027\n\014acceleration\030\003 \001(\001:\0010\022E\n\004g"
  "ear\030\004 \001(\0162).phoenix.msg.control.Chassis."
  "GearPosition:\014GEAR_INVALID\022Q\n\tturn_lamp\030"
  "\005 \001(\0162+.phoenix.msg.control.Chassis.Sign"
  "alTurnLamp:\021TURN_LAMP_INVALID\022I\n\nbrake_l"
  "amp\030\006 \001(\0162\'.phoenix.msg.control.Chassis."
  "SignalLamp:\014LAMP_INVALID\022\016\n\003cmd\030\007 \001(\r:\0010"
  "\"\351\001\n\rPlanningStory\022\r\n\002id\030\001 \001(\005:\0010\022\017\n\004typ"
  "e\030\002 \001(\005:\0010\022<\n\010ref_line\030\003 \001(\0132*.phoenix.m"
  "sg.planning.PlanningStoryRefLine\022\?\n\tcond"
  "ition\030\004 \001(\0132,.phoenix.msg.planning.Plann"
  "ingStoryCondition\0229\n\006action\030\005 \001(\0132).phoe"
  "nix.msg.planning.PlanningStoryAction\"t\n\021"
  "PlanningStoryList\022*\n\006header\030\001 \001(\0132\032.phoe"
  "nix.msg.common.Header\0223\n\006storys\030\002 \003(\0132#."
  "phoenix.msg.planning.PlanningStory"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planning_5fstory_2eproto_deps[2] = {
  &::descriptor_table_chassis_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planning_5fstory_2eproto_sccs[7] = {
  &scc_info_PlanningStory_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryAction_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryCondition_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryList_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryRefLine_planning_5fstory_2eproto.base,
  &scc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planning_5fstory_2eproto_once;
static bool descriptor_table_planning_5fstory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_5fstory_2eproto = {
  &descriptor_table_planning_5fstory_2eproto_initialized, descriptor_table_protodef_planning_5fstory_2eproto, "planning_story.proto", 1194,
  &descriptor_table_planning_5fstory_2eproto_once, descriptor_table_planning_5fstory_2eproto_sccs, descriptor_table_planning_5fstory_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_planning_5fstory_2eproto::offsets,
  file_level_metadata_planning_5fstory_2eproto, 7, file_level_enum_descriptors_planning_5fstory_2eproto, file_level_service_descriptors_planning_5fstory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planning_5fstory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planning_5fstory_2eproto), true);
namespace phoenix {
namespace msg {
namespace planning {

// ===================================================================

void PlanningStoryRefLine_Point::InitAsDefaultInstance() {
}
class PlanningStoryRefLine_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryRefLine_Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlanningStoryRefLine_Point::PlanningStoryRefLine_Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryRefLine.Point)
}
PlanningStoryRefLine_Point::PlanningStoryRefLine_Point(const PlanningStoryRefLine_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryRefLine.Point)
}

void PlanningStoryRefLine_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PlanningStoryRefLine_Point::~PlanningStoryRefLine_Point() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryRefLine.Point)
  SharedDtor();
}

void PlanningStoryRefLine_Point::SharedDtor() {
}

void PlanningStoryRefLine_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryRefLine_Point& PlanningStoryRefLine_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryRefLine_Point_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryRefLine_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryRefLine_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryRefLine_Point::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryRefLine.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryRefLine.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryRefLine_Point::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryRefLine.Point)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryRefLine_Point::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryRefLine.Point)
  return target;
}

size_t PlanningStoryRefLine_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryRefLine_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryRefLine_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryRefLine_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryRefLine.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryRefLine.Point)
    MergeFrom(*source);
  }
}

void PlanningStoryRefLine_Point::MergeFrom(const PlanningStoryRefLine_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningStoryRefLine_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryRefLine_Point::CopyFrom(const PlanningStoryRefLine_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryRefLine.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryRefLine_Point::IsInitialized() const {
  return true;
}

void PlanningStoryRefLine_Point::InternalSwap(PlanningStoryRefLine_Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryRefLine_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStoryRefLine::InitAsDefaultInstance() {
}
class PlanningStoryRefLine::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryRefLine>()._has_bits_);
};

PlanningStoryRefLine::PlanningStoryRefLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryRefLine)
}
PlanningStoryRefLine::PlanningStoryRefLine(const PlanningStoryRefLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryRefLine)
}

void PlanningStoryRefLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStoryRefLine_planning_5fstory_2eproto.base);
}

PlanningStoryRefLine::~PlanningStoryRefLine() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryRefLine)
  SharedDtor();
}

void PlanningStoryRefLine::SharedDtor() {
}

void PlanningStoryRefLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryRefLine& PlanningStoryRefLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryRefLine_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryRefLine::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryRefLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryRefLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryRefLine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryRefLine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryRefLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryRefLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryRefLine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryRefLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryRefLine)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryRefLine::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryRefLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryRefLine)
  return target;
}

size_t PlanningStoryRefLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryRefLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningStoryRefLine.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryRefLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryRefLine)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryRefLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryRefLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryRefLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryRefLine)
    MergeFrom(*source);
  }
}

void PlanningStoryRefLine::MergeFrom(const PlanningStoryRefLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryRefLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PlanningStoryRefLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryRefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryRefLine::CopyFrom(const PlanningStoryRefLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryRefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryRefLine::IsInitialized() const {
  return true;
}

void PlanningStoryRefLine::InternalSwap(PlanningStoryRefLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryRefLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStoryCondition_Area::InitAsDefaultInstance() {
}
class PlanningStoryCondition_Area::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryCondition_Area>()._has_bits_);
  static void set_has_left_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlanningStoryCondition_Area::PlanningStoryCondition_Area()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryCondition.Area)
}
PlanningStoryCondition_Area::PlanningStoryCondition_Area(const PlanningStoryCondition_Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_width_, &from.left_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&left_width_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryCondition.Area)
}

void PlanningStoryCondition_Area::SharedCtor() {
  left_width_ = 2;
  right_width_ = 2;
  start_s_ = -1;
  end_s_ = -1;
}

PlanningStoryCondition_Area::~PlanningStoryCondition_Area() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryCondition.Area)
  SharedDtor();
}

void PlanningStoryCondition_Area::SharedDtor() {
}

void PlanningStoryCondition_Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryCondition_Area& PlanningStoryCondition_Area::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryCondition_Area_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryCondition_Area::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    left_width_ = 2;
    right_width_ = 2;
    start_s_ = -1;
    end_s_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryCondition_Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double left_width = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_left_width(&has_bits);
          left_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right_width = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_right_width(&has_bits);
          right_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double start_s = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryCondition_Area::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double left_width = 1 [default = 2];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_left_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_width = 2 [default = 2];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_right_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 3 [default = -1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_start_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 4 [default = -1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_end_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryCondition.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryCondition.Area)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryCondition_Area::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double left_width = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->left_width(), output);
  }

  // optional double right_width = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->right_width(), output);
  }

  // optional double start_s = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->start_s(), output);
  }

  // optional double end_s = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->end_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryCondition.Area)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryCondition_Area::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double left_width = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->left_width(), target);
  }

  // optional double right_width = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->right_width(), target);
  }

  // optional double start_s = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->start_s(), target);
  }

  // optional double end_s = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->end_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryCondition.Area)
  return target;
}

size_t PlanningStoryCondition_Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double left_width = 1 [default = 2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double right_width = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double start_s = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryCondition_Area::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryCondition_Area* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryCondition_Area>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryCondition.Area)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryCondition.Area)
    MergeFrom(*source);
  }
}

void PlanningStoryCondition_Area::MergeFrom(const PlanningStoryCondition_Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_width_ = from.left_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_width_ = from.right_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_s_ = from.end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningStoryCondition_Area::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryCondition_Area::CopyFrom(const PlanningStoryCondition_Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryCondition.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryCondition_Area::IsInitialized() const {
  return true;
}

void PlanningStoryCondition_Area::InternalSwap(PlanningStoryCondition_Area* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(left_width_, other->left_width_);
  swap(right_width_, other->right_width_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryCondition_Area::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStoryCondition::InitAsDefaultInstance() {
  ::phoenix::msg::planning::_PlanningStoryCondition_default_instance_._instance.get_mutable()->area_ = const_cast< ::phoenix::msg::planning::PlanningStoryCondition_Area*>(
      ::phoenix::msg::planning::PlanningStoryCondition_Area::internal_default_instance());
}
class PlanningStoryCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryCondition>()._has_bits_);
  static const ::phoenix::msg::planning::PlanningStoryCondition_Area& area(const PlanningStoryCondition* msg);
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::phoenix::msg::planning::PlanningStoryCondition_Area&
PlanningStoryCondition::_Internal::area(const PlanningStoryCondition* msg) {
  return *msg->area_;
}
PlanningStoryCondition::PlanningStoryCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryCondition)
}
PlanningStoryCondition::PlanningStoryCondition(const PlanningStoryCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_area()) {
    area_ = new ::phoenix::msg::planning::PlanningStoryCondition_Area(*from.area_);
  } else {
    area_ = nullptr;
  }
  ::memcpy(&speed_high_, &from.speed_high_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&speed_high_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryCondition)
}

void PlanningStoryCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStoryCondition_planning_5fstory_2eproto.base);
  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&area_)) + sizeof(gear_));
}

PlanningStoryCondition::~PlanningStoryCondition() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryCondition)
  SharedDtor();
}

void PlanningStoryCondition::SharedDtor() {
  if (this != internal_default_instance()) delete area_;
}

void PlanningStoryCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryCondition& PlanningStoryCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryCondition_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(area_ != nullptr);
    area_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&speed_high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_) -
        reinterpret_cast<char*>(&speed_high_)) + sizeof(gear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_high = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed_high(&has_bits);
          speed_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_low = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_speed_low(&has_bits);
          speed_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_GearPosition_IsValid(val))) {
            set_gear(static_cast<::phoenix::msg::control::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_high = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_speed_high(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_low = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_speed_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::area(this), output);
  }

  // optional double speed_high = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed_high(), output);
  }

  // optional double speed_low = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->speed_low(), output);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryCondition)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryCondition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::area(this), target);
  }

  // optional double speed_high = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed_high(), target);
  }

  // optional double speed_low = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_low(), target);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryCondition)
  return target;
}

size_t PlanningStoryCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .phoenix.msg.planning.PlanningStoryCondition.Area area = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *area_);
    }

    // optional double speed_high = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double speed_low = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryCondition)
    MergeFrom(*source);
  }
}

void PlanningStoryCondition::MergeFrom(const PlanningStoryCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_area()->::phoenix::msg::planning::PlanningStoryCondition_Area::MergeFrom(from.area());
    }
    if (cached_has_bits & 0x00000002u) {
      speed_high_ = from.speed_high_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_low_ = from.speed_low_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_ = from.gear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningStoryCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryCondition::CopyFrom(const PlanningStoryCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryCondition::IsInitialized() const {
  return true;
}

void PlanningStoryCondition::InternalSwap(PlanningStoryCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(area_, other->area_);
  swap(speed_high_, other->speed_high_);
  swap(speed_low_, other->speed_low_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStoryAction::InitAsDefaultInstance() {
}
class PlanningStoryAction::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryAction>()._has_bits_);
  static void set_has_holding_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turn_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_lamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PlanningStoryAction::PlanningStoryAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryAction)
}
PlanningStoryAction::PlanningStoryAction(const PlanningStoryAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&holding_time_, &from.holding_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&holding_time_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryAction)
}

void PlanningStoryAction::SharedCtor() {
  ::memset(&holding_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&holding_time_)) + sizeof(cmd_));
}

PlanningStoryAction::~PlanningStoryAction() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryAction)
  SharedDtor();
}

void PlanningStoryAction::SharedDtor() {
}

void PlanningStoryAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryAction& PlanningStoryAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryAction_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryAction::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&holding_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_) -
        reinterpret_cast<char*>(&holding_time_)) + sizeof(cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double holding_time = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_holding_time(&has_bits);
          holding_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_GearPosition_IsValid(val))) {
            set_gear(static_cast<::phoenix::msg::control::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(val))) {
            set_turn_lamp(static_cast<::phoenix::msg::control::Chassis_SignalTurnLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalLamp_IsValid(val))) {
            set_brake_lamp(static_cast<::phoenix::msg::control::Chassis_SignalLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cmd(&has_bits);
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double holding_time = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_holding_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &holding_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_acceleration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value)) {
            set_turn_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalLamp_IsValid(value)) {
            set_brake_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_cmd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double holding_time = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->holding_time(), output);
  }

  // optional double speed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // optional double acceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->gear(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->turn_lamp(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->brake_lamp(), output);
  }

  // optional uint32 cmd = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double holding_time = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->holding_time(), target);
  }

  // optional double speed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // optional double acceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->turn_lamp(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->brake_lamp(), target);
  }

  // optional uint32 cmd = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryAction)
  return target;
}

size_t PlanningStoryAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double holding_time = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .phoenix.msg.control.Chassis.GearPosition gear = 4 [default = GEAR_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .phoenix.msg.control.Chassis.SignalTurnLamp turn_lamp = 5 [default = TURN_LAMP_INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->turn_lamp());
    }

    // optional .phoenix.msg.control.Chassis.SignalLamp brake_lamp = 6 [default = LAMP_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brake_lamp());
    }

    // optional uint32 cmd = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryAction)
    MergeFrom(*source);
  }
}

void PlanningStoryAction::MergeFrom(const PlanningStoryAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      holding_time_ = from.holding_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000010u) {
      turn_lamp_ = from.turn_lamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      brake_lamp_ = from.brake_lamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningStoryAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryAction::CopyFrom(const PlanningStoryAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryAction::IsInitialized() const {
  return true;
}

void PlanningStoryAction::InternalSwap(PlanningStoryAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(holding_time_, other->holding_time_);
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(gear_, other->gear_);
  swap(turn_lamp_, other->turn_lamp_);
  swap(brake_lamp_, other->brake_lamp_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStory::InitAsDefaultInstance() {
  ::phoenix::msg::planning::_PlanningStory_default_instance_._instance.get_mutable()->ref_line_ = const_cast< ::phoenix::msg::planning::PlanningStoryRefLine*>(
      ::phoenix::msg::planning::PlanningStoryRefLine::internal_default_instance());
  ::phoenix::msg::planning::_PlanningStory_default_instance_._instance.get_mutable()->condition_ = const_cast< ::phoenix::msg::planning::PlanningStoryCondition*>(
      ::phoenix::msg::planning::PlanningStoryCondition::internal_default_instance());
  ::phoenix::msg::planning::_PlanningStory_default_instance_._instance.get_mutable()->action_ = const_cast< ::phoenix::msg::planning::PlanningStoryAction*>(
      ::phoenix::msg::planning::PlanningStoryAction::internal_default_instance());
}
class PlanningStory::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStory>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::phoenix::msg::planning::PlanningStoryRefLine& ref_line(const PlanningStory* msg);
  static void set_has_ref_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::phoenix::msg::planning::PlanningStoryCondition& condition(const PlanningStory* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::phoenix::msg::planning::PlanningStoryAction& action(const PlanningStory* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::phoenix::msg::planning::PlanningStoryRefLine&
PlanningStory::_Internal::ref_line(const PlanningStory* msg) {
  return *msg->ref_line_;
}
const ::phoenix::msg::planning::PlanningStoryCondition&
PlanningStory::_Internal::condition(const PlanningStory* msg) {
  return *msg->condition_;
}
const ::phoenix::msg::planning::PlanningStoryAction&
PlanningStory::_Internal::action(const PlanningStory* msg) {
  return *msg->action_;
}
PlanningStory::PlanningStory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStory)
}
PlanningStory::PlanningStory(const PlanningStory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ref_line()) {
    ref_line_ = new ::phoenix::msg::planning::PlanningStoryRefLine(*from.ref_line_);
  } else {
    ref_line_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::phoenix::msg::planning::PlanningStoryCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::phoenix::msg::planning::PlanningStoryAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStory)
}

void PlanningStory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStory_planning_5fstory_2eproto.base);
  ::memset(&ref_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ref_line_)) + sizeof(type_));
}

PlanningStory::~PlanningStory() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStory)
  SharedDtor();
}

void PlanningStory::SharedDtor() {
  if (this != internal_default_instance()) delete ref_line_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete action_;
}

void PlanningStory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStory& PlanningStory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStory_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStory::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ref_line_ != nullptr);
      ref_line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ref_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ref_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::ref_line(this), output);
  }

  // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::condition(this), output);
  }

  // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStory)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::ref_line(this), target);
  }

  // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::condition(this), target);
  }

  // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStory)
  return target;
}

size_t PlanningStory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .phoenix.msg.planning.PlanningStoryRefLine ref_line = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_line_);
    }

    // optional .phoenix.msg.planning.PlanningStoryCondition condition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional .phoenix.msg.planning.PlanningStoryAction action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional int32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStory)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStory)
    MergeFrom(*source);
  }
}

void PlanningStory::MergeFrom(const PlanningStory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ref_line()->::phoenix::msg::planning::PlanningStoryRefLine::MergeFrom(from.ref_line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition()->::phoenix::msg::planning::PlanningStoryCondition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::phoenix::msg::planning::PlanningStoryAction::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningStory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStory::CopyFrom(const PlanningStory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStory::IsInitialized() const {
  return true;
}

void PlanningStory::InternalSwap(PlanningStory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ref_line_, other->ref_line_);
  swap(condition_, other->condition_);
  swap(action_, other->action_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStoryList::InitAsDefaultInstance() {
  ::phoenix::msg::planning::_PlanningStoryList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class PlanningStoryList::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStoryList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const PlanningStoryList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::phoenix::msg::common::Header&
PlanningStoryList::_Internal::header(const PlanningStoryList* msg) {
  return *msg->header_;
}
void PlanningStoryList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlanningStoryList::PlanningStoryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.planning.PlanningStoryList)
}
PlanningStoryList::PlanningStoryList(const PlanningStoryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      storys_(from.storys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.planning.PlanningStoryList)
}

void PlanningStoryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStoryList_planning_5fstory_2eproto.base);
  header_ = nullptr;
}

PlanningStoryList::~PlanningStoryList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.planning.PlanningStoryList)
  SharedDtor();
}

void PlanningStoryList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PlanningStoryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStoryList& PlanningStoryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStoryList_planning_5fstory_2eproto.base);
  return *internal_default_instance();
}


void PlanningStoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.planning.PlanningStoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanningStoryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.planning.PlanningStory storys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_storys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanningStoryList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.planning.PlanningStoryList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.planning.PlanningStory storys = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_storys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.planning.PlanningStoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.planning.PlanningStoryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanningStoryList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.planning.PlanningStoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .phoenix.msg.planning.PlanningStory storys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storys_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->storys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.planning.PlanningStoryList)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStoryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.planning.PlanningStoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .phoenix.msg.planning.PlanningStory storys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storys_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->storys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.planning.PlanningStoryList)
  return target;
}

size_t PlanningStoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.planning.PlanningStoryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.planning.PlanningStory storys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->storys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->storys(static_cast<int>(i)));
    }
  }

  // optional .phoenix.msg.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStoryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.planning.PlanningStoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStoryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStoryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.planning.PlanningStoryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.planning.PlanningStoryList)
    MergeFrom(*source);
  }
}

void PlanningStoryList::MergeFrom(const PlanningStoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.planning.PlanningStoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  storys_.MergeFrom(from.storys_);
  if (from.has_header()) {
    mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
  }
}

void PlanningStoryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.planning.PlanningStoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStoryList::CopyFrom(const PlanningStoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.planning.PlanningStoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStoryList::IsInitialized() const {
  return true;
}

void PlanningStoryList::InternalSwap(PlanningStoryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&storys_)->InternalSwap(CastToBase(&other->storys_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStoryList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryRefLine_Point* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryRefLine_Point >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryRefLine_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryRefLine* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryRefLine >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryRefLine >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryCondition_Area* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryCondition_Area >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryCondition_Area >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryCondition* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryCondition >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryAction* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryAction >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryAction >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStory* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStory >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStory >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::planning::PlanningStoryList* Arena::CreateMaybeMessage< ::phoenix::msg::planning::PlanningStoryList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::planning::PlanningStoryList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
