// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_mark_camera.proto

#include "lane_mark_camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lane_5fmark_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class LaneMarkCameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarkCamera> _instance;
} _LaneMarkCamera_default_instance_;
class LaneMarkCameraListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarkCameraList> _instance;
} _LaneMarkCameraList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_LaneMarkCamera_default_instance_;
    new (ptr) ::phoenix::msg::perception::LaneMarkCamera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::LaneMarkCamera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto}, {}};

static void InitDefaultsscc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_LaneMarkCameraList_default_instance_;
    new (ptr) ::phoenix::msg::perception::LaneMarkCameraList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::LaneMarkCameraList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lane_5fmark_5fcamera_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lane_5fmark_5fcamera_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lane_5fmark_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lane_5fmark_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, lane_mark_type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, quality_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, view_range_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, mark_width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, view_range_start_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, view_range_end_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, c0_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, c1_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, c2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCamera, c3_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCameraList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCameraList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LaneMarkCameraList, lane_mark_list_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::phoenix::msg::perception::LaneMarkCamera)},
  { 27, 34, sizeof(::phoenix::msg::perception::LaneMarkCameraList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_LaneMarkCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_LaneMarkCameraList_default_instance_),
};

const char descriptor_table_protodef_lane_5fmark_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026lane_mark_camera.proto\022\026phoenix.msg.pe"
  "rception\032\014header.proto\"\244\004\n\016LaneMarkCamer"
  "a\022\r\n\002id\030\001 \001(\005:\0010\022c\n\016lane_mark_type\030\002 \001(\016"
  "23.phoenix.msg.perception.LaneMarkCamera"
  ".LaneMarkType:\026LANE_MARK_TYPE_INVALID\022\022\n"
  "\007quality\030\003 \001(\005:\0010\022\037\n\020view_range_valid\030\004 "
  "\001(\010:\005false\022\025\n\nmark_width\030\005 \001(\002:\0010\022\033\n\020vie"
  "w_range_start\030\006 \001(\002:\0010\022\031\n\016view_range_end"
  "\030\007 \001(\002:\0010\022\r\n\002c0\030\010 \001(\001:\0010\022\r\n\002c1\030\t \001(\001:\0010\022"
  "\r\n\002c2\030\n \001(\001:\0010\022\r\n\002c3\030\013 \001(\001:\0010\"\335\001\n\014LaneMa"
  "rkType\022\032\n\026LANE_MARK_TYPE_INVALID\020\000\022\032\n\026LA"
  "NE_MARK_TYPE_UNKNOWN\020\001\022\031\n\025LANE_MARK_TYPE"
  "_DASHED\020\002\022\030\n\024LANE_MARK_TYPE_SOLID\020\003\022#\n\037L"
  "ANE_MARK_TYPE_DOUBLE_LANE_MARK\020\004\022\035\n\031LANE"
  "_MARK_TYPE_BOTTS_DOTS\020\005\022\034\n\030LANE_MARK_TYP"
  "E_ROAD_EDGE\020\006\"\200\001\n\022LaneMarkCameraList\022*\n\006"
  "header\030\001 \001(\0132\032.phoenix.msg.common.Header"
  "\022>\n\016lane_mark_list\030\002 \003(\0132&.phoenix.msg.p"
  "erception.LaneMarkCamera"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lane_5fmark_5fcamera_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lane_5fmark_5fcamera_2eproto_sccs[2] = {
  &scc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto.base,
  &scc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lane_5fmark_5fcamera_2eproto_once;
static bool descriptor_table_lane_5fmark_5fcamera_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lane_5fmark_5fcamera_2eproto = {
  &descriptor_table_lane_5fmark_5fcamera_2eproto_initialized, descriptor_table_protodef_lane_5fmark_5fcamera_2eproto, "lane_mark_camera.proto", 744,
  &descriptor_table_lane_5fmark_5fcamera_2eproto_once, descriptor_table_lane_5fmark_5fcamera_2eproto_sccs, descriptor_table_lane_5fmark_5fcamera_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lane_5fmark_5fcamera_2eproto::offsets,
  file_level_metadata_lane_5fmark_5fcamera_2eproto, 2, file_level_enum_descriptors_lane_5fmark_5fcamera_2eproto, file_level_service_descriptors_lane_5fmark_5fcamera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lane_5fmark_5fcamera_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lane_5fmark_5fcamera_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneMarkCamera_LaneMarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lane_5fmark_5fcamera_2eproto);
  return file_level_enum_descriptors_lane_5fmark_5fcamera_2eproto[0];
}
bool LaneMarkCamera_LaneMarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_INVALID;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_UNKNOWN;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_DASHED;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_SOLID;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_DOUBLE_LANE_MARK;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_BOTTS_DOTS;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LANE_MARK_TYPE_ROAD_EDGE;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LaneMarkType_MIN;
constexpr LaneMarkCamera_LaneMarkType LaneMarkCamera::LaneMarkType_MAX;
constexpr int LaneMarkCamera::LaneMarkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LaneMarkCamera::InitAsDefaultInstance() {
}
class LaneMarkCamera::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarkCamera>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_mark_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_view_range_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mark_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_view_range_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_view_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

LaneMarkCamera::LaneMarkCamera()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.LaneMarkCamera)
}
LaneMarkCamera::LaneMarkCamera(const LaneMarkCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_range_end_) -
    reinterpret_cast<char*>(&id_)) + sizeof(view_range_end_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.LaneMarkCamera)
}

void LaneMarkCamera::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_range_end_) -
      reinterpret_cast<char*>(&id_)) + sizeof(view_range_end_));
}

LaneMarkCamera::~LaneMarkCamera() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.LaneMarkCamera)
  SharedDtor();
}

void LaneMarkCamera::SharedDtor() {
}

void LaneMarkCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarkCamera& LaneMarkCamera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarkCamera_lane_5fmark_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void LaneMarkCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.LaneMarkCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c1_) -
        reinterpret_cast<char*>(&id_)) + sizeof(c1_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&c2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_end_) -
        reinterpret_cast<char*>(&c2_)) + sizeof(view_range_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarkCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::LaneMarkCamera_LaneMarkType_IsValid(val))) {
            set_lane_mark_type(static_cast<::phoenix::msg::perception::LaneMarkCamera_LaneMarkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 quality = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool view_range_valid = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_view_range_valid(&has_bits);
          view_range_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mark_width = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mark_width(&has_bits);
          mark_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float view_range_start = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_view_range_start(&has_bits);
          view_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float view_range_end = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_view_range_end(&has_bits);
          view_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double c0 = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_c0(&has_bits);
          c0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c1 = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_c1(&has_bits);
          c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c2 = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_c2(&has_bits);
          c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c3 = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_c3(&has_bits);
          c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarkCamera::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.LaneMarkCamera)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::LaneMarkCamera_LaneMarkType_IsValid(value)) {
            set_lane_mark_type(static_cast< ::phoenix::msg::perception::LaneMarkCamera_LaneMarkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_quality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_range_valid = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_view_range_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_range_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mark_width = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_mark_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mark_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_start = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_view_range_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_end = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_view_range_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c0 = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_c0(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c1 = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {
          _Internal::set_has_c1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c2 = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          _Internal::set_has_c2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c3 = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          _Internal::set_has_c3(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.LaneMarkCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.LaneMarkCamera)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarkCamera::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.LaneMarkCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->lane_mark_type(), output);
  }

  // optional int32 quality = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional bool view_range_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->view_range_valid(), output);
  }

  // optional float mark_width = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->mark_width(), output);
  }

  // optional float view_range_start = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->view_range_start(), output);
  }

  // optional float view_range_end = 7 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->view_range_end(), output);
  }

  // optional double c0 = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->c0(), output);
  }

  // optional double c1 = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->c1(), output);
  }

  // optional double c2 = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->c2(), output);
  }

  // optional double c3 = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->c3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.LaneMarkCamera)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarkCamera::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.LaneMarkCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->lane_mark_type(), target);
  }

  // optional int32 quality = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional bool view_range_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->view_range_valid(), target);
  }

  // optional float mark_width = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->mark_width(), target);
  }

  // optional float view_range_start = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->view_range_start(), target);
  }

  // optional float view_range_end = 7 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->view_range_end(), target);
  }

  // optional double c0 = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->c0(), target);
  }

  // optional double c1 = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->c1(), target);
  }

  // optional double c2 = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->c2(), target);
  }

  // optional double c3 = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->c3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.LaneMarkCamera)
  return target;
}

size_t LaneMarkCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.LaneMarkCamera)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .phoenix.msg.perception.LaneMarkCamera.LaneMarkType lane_mark_type = 2 [default = LANE_MARK_TYPE_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lane_mark_type());
    }

    // optional int32 quality = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional bool view_range_valid = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float mark_width = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float view_range_start = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional double c0 = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double c1 = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double c2 = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double c3 = 11 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional float view_range_end = 7 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarkCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.LaneMarkCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarkCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.LaneMarkCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.LaneMarkCamera)
    MergeFrom(*source);
  }
}

void LaneMarkCamera::MergeFrom(const LaneMarkCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.LaneMarkCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_mark_type_ = from.lane_mark_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      view_range_valid_ = from.view_range_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      mark_width_ = from.mark_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      view_range_start_ = from.view_range_start_;
    }
    if (cached_has_bits & 0x00000040u) {
      c0_ = from.c0_;
    }
    if (cached_has_bits & 0x00000080u) {
      c1_ = from.c1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      c2_ = from.c2_;
    }
    if (cached_has_bits & 0x00000200u) {
      c3_ = from.c3_;
    }
    if (cached_has_bits & 0x00000400u) {
      view_range_end_ = from.view_range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneMarkCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.LaneMarkCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkCamera::CopyFrom(const LaneMarkCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.LaneMarkCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkCamera::IsInitialized() const {
  return true;
}

void LaneMarkCamera::InternalSwap(LaneMarkCamera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(lane_mark_type_, other->lane_mark_type_);
  swap(quality_, other->quality_);
  swap(view_range_valid_, other->view_range_valid_);
  swap(mark_width_, other->mark_width_);
  swap(view_range_start_, other->view_range_start_);
  swap(c0_, other->c0_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(view_range_end_, other->view_range_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneMarkCameraList::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_LaneMarkCameraList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class LaneMarkCameraList::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarkCameraList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const LaneMarkCameraList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::phoenix::msg::common::Header&
LaneMarkCameraList::_Internal::header(const LaneMarkCameraList* msg) {
  return *msg->header_;
}
void LaneMarkCameraList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LaneMarkCameraList::LaneMarkCameraList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.LaneMarkCameraList)
}
LaneMarkCameraList::LaneMarkCameraList(const LaneMarkCameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lane_mark_list_(from.lane_mark_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.LaneMarkCameraList)
}

void LaneMarkCameraList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto.base);
  header_ = nullptr;
}

LaneMarkCameraList::~LaneMarkCameraList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.LaneMarkCameraList)
  SharedDtor();
}

void LaneMarkCameraList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LaneMarkCameraList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarkCameraList& LaneMarkCameraList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarkCameraList_lane_5fmark_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void LaneMarkCameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.LaneMarkCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_mark_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarkCameraList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_mark_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarkCameraList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.LaneMarkCameraList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_mark_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.LaneMarkCameraList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.LaneMarkCameraList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarkCameraList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.LaneMarkCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_mark_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_mark_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.LaneMarkCameraList)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarkCameraList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.LaneMarkCameraList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_mark_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_mark_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.LaneMarkCameraList)
  return target;
}

size_t LaneMarkCameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.LaneMarkCameraList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.LaneMarkCamera lane_mark_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_mark_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_mark_list(static_cast<int>(i)));
    }
  }

  // optional .phoenix.msg.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarkCameraList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.LaneMarkCameraList)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkCameraList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarkCameraList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.LaneMarkCameraList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.LaneMarkCameraList)
    MergeFrom(*source);
  }
}

void LaneMarkCameraList::MergeFrom(const LaneMarkCameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.LaneMarkCameraList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_mark_list_.MergeFrom(from.lane_mark_list_);
  if (from.has_header()) {
    mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
  }
}

void LaneMarkCameraList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.LaneMarkCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkCameraList::CopyFrom(const LaneMarkCameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.LaneMarkCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkCameraList::IsInitialized() const {
  return true;
}

void LaneMarkCameraList::InternalSwap(LaneMarkCameraList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lane_mark_list_)->InternalSwap(CastToBase(&other->lane_mark_list_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkCameraList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::LaneMarkCamera* Arena::CreateMaybeMessage< ::phoenix::msg::perception::LaneMarkCamera >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::LaneMarkCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::LaneMarkCameraList* Arena::CreateMaybeMessage< ::phoenix::msg::perception::LaneMarkCameraList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::LaneMarkCameraList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
