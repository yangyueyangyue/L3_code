// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_lidar.proto

#include "obstacles_lidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacles_5flidar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleLidar_obstacles_5flidar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacles_5flidar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleLidar_OBBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleLidar_OBBox> _instance;
} _ObstacleLidar_OBBox_default_instance_;
class ObstacleLidarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleLidar> _instance;
} _ObstacleLidar_default_instance_;
class ObstacleLidarListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleLidarList> _instance;
} _ObstacleLidarList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_ObstacleLidar_obstacles_5flidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleLidar_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleLidar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleLidar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleLidar_obstacles_5flidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObstacleLidar_obstacles_5flidar_2eproto}, {
      &scc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleLidar_OBBox_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleLidar_OBBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleLidar_OBBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleLidarList_obstacles_5flidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_ObstacleLidarList_default_instance_;
    new (ptr) ::phoenix::msg::perception::ObstacleLidarList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::ObstacleLidarList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleLidarList_obstacles_5flidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObstacleLidarList_obstacles_5flidar_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_ObstacleLidar_obstacles_5flidar_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacles_5flidar_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_obstacles_5flidar_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacles_5flidar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacles_5flidar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, heading_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, half_width_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar_OBBox, half_length_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, id_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, age_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, prediction_age_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, obb_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, v_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, v_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, accel_x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, accel_y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidar, yaw_rate_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidarList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidarList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidarList, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidarList, lidar_type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::ObstacleLidarList, obstacles_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::phoenix::msg::perception::ObstacleLidar_OBBox)},
  { 15, 32, sizeof(::phoenix::msg::perception::ObstacleLidar)},
  { 44, 52, sizeof(::phoenix::msg::perception::ObstacleLidarList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleLidar_OBBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleLidar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_ObstacleLidarList_default_instance_),
};

const char descriptor_table_protodef_obstacles_5flidar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025obstacles_lidar.proto\022\026phoenix.msg.per"
  "ception\032\014header.proto\"\275\005\n\rObstacleLidar\022"
  "\r\n\002id\030\001 \001(\005:\0010\022M\n\004type\030\002 \001(\0162-.phoenix.m"
  "sg.perception.ObstacleLidar.ObjType:\020OBJ"
  "_TYPE_UNKNOWN\022\016\n\003age\030\003 \001(\005:\0010\022\031\n\016predict"
  "ion_age\030\004 \001(\005:\0010\022\014\n\001x\030\005 \001(\002:\0010\022\014\n\001y\030\006 \001("
  "\002:\0010\0228\n\003obb\030\007 \001(\0132+.phoenix.msg.percepti"
  "on.ObstacleLidar.OBBox\022\016\n\003v_x\030\010 \001(\002:\0010\022\016"
  "\n\003v_y\030\t \001(\002:\0010\022\022\n\007accel_x\030\n \001(\002:\0010\022\022\n\007ac"
  "cel_y\030\013 \001(\002:\0010\022\023\n\010yaw_rate\030\014 \001(\002:\0010\032f\n\005O"
  "BBox\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\022\n\007head"
  "ing\030\003 \001(\002:\0010\022\025\n\nhalf_width\030\004 \001(\002:\0010\022\026\n\013h"
  "alf_length\030\005 \001(\002:\0010\"\207\002\n\007ObjType\022\024\n\020OBJ_T"
  "YPE_UNKNOWN\020\000\022\036\n\032OBJ_TYPE_PASSENGER_VEHI"
  "CLE\020\001\022\037\n\033OBJ_TYPE_COMMERCIAL_VEHICLE\020\002\022\034"
  "\n\030OBJ_TYPE_SPECIAL_VEHICLE\020\003\022\032\n\026OBJ_TYPE"
  "_OTHER_VEHICLE\020\004\022\027\n\023OBJ_TYPE_PEDESTRIAN\020"
  "\005\022\024\n\020OBJ_TYPE_BICYCLE\020\006\022\023\n\017OBJ_TYPE_ANIM"
  "AL\020\007\022\024\n\020OBJ_TYPE_DISCARD\020\010\022\021\n\rOBJ_TYPE_C"
  "URB\020\t\"\306\002\n\021ObstacleLidarList\022*\n\006header\030\001 "
  "\001(\0132\032.phoenix.msg.common.Header\022[\n\nlidar"
  "_type\030\002 \001(\01623.phoenix.msg.perception.Obs"
  "tacleLidarList.LidarType:\022LIDAR_TYPE_UNK"
  "NOWN\0228\n\tobstacles\030\003 \003(\0132%.phoenix.msg.pe"
  "rception.ObstacleLidar\"n\n\tLidarType\022\026\n\022L"
  "IDAR_TYPE_UNKNOWN\020\000\022\025\n\021LIDAR_TYPE_IBEO_4"
  "\020\001\022\025\n\021LIDAR_TYPE_VLP_16\020\002\022\033\n\027LIDAR_TYPE_"
  "ROBOSENSE_M1\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacles_5flidar_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacles_5flidar_2eproto_sccs[3] = {
  &scc_info_ObstacleLidar_obstacles_5flidar_2eproto.base,
  &scc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto.base,
  &scc_info_ObstacleLidarList_obstacles_5flidar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacles_5flidar_2eproto_once;
static bool descriptor_table_obstacles_5flidar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5flidar_2eproto = {
  &descriptor_table_obstacles_5flidar_2eproto_initialized, descriptor_table_protodef_obstacles_5flidar_2eproto, "obstacles_lidar.proto", 1094,
  &descriptor_table_obstacles_5flidar_2eproto_once, descriptor_table_obstacles_5flidar_2eproto_sccs, descriptor_table_obstacles_5flidar_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_obstacles_5flidar_2eproto::offsets,
  file_level_metadata_obstacles_5flidar_2eproto, 3, file_level_enum_descriptors_obstacles_5flidar_2eproto, file_level_service_descriptors_obstacles_5flidar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacles_5flidar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacles_5flidar_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleLidar_ObjType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5flidar_2eproto);
  return file_level_enum_descriptors_obstacles_5flidar_2eproto[0];
}
bool ObstacleLidar_ObjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_UNKNOWN;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_PASSENGER_VEHICLE;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_COMMERCIAL_VEHICLE;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_SPECIAL_VEHICLE;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_OTHER_VEHICLE;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_PEDESTRIAN;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_BICYCLE;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_ANIMAL;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_DISCARD;
constexpr ObstacleLidar_ObjType ObstacleLidar::OBJ_TYPE_CURB;
constexpr ObstacleLidar_ObjType ObstacleLidar::ObjType_MIN;
constexpr ObstacleLidar_ObjType ObstacleLidar::ObjType_MAX;
constexpr int ObstacleLidar::ObjType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleLidarList_LidarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_5flidar_2eproto);
  return file_level_enum_descriptors_obstacles_5flidar_2eproto[1];
}
bool ObstacleLidarList_LidarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LIDAR_TYPE_UNKNOWN;
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LIDAR_TYPE_IBEO_4;
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LIDAR_TYPE_VLP_16;
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LIDAR_TYPE_ROBOSENSE_M1;
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LidarType_MIN;
constexpr ObstacleLidarList_LidarType ObstacleLidarList::LidarType_MAX;
constexpr int ObstacleLidarList::LidarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObstacleLidar_OBBox::InitAsDefaultInstance() {
}
class ObstacleLidar_OBBox::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleLidar_OBBox>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_half_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_half_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ObstacleLidar_OBBox::ObstacleLidar_OBBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleLidar.OBBox)
}
ObstacleLidar_OBBox::ObstacleLidar_OBBox(const ObstacleLidar_OBBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&half_length_) -
    reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleLidar.OBBox)
}

void ObstacleLidar_OBBox::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&half_length_) -
      reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
}

ObstacleLidar_OBBox::~ObstacleLidar_OBBox() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleLidar.OBBox)
  SharedDtor();
}

void ObstacleLidar_OBBox::SharedDtor() {
}

void ObstacleLidar_OBBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleLidar_OBBox& ObstacleLidar_OBBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleLidar_OBBox_obstacles_5flidar_2eproto.base);
  return *internal_default_instance();
}


void ObstacleLidar_OBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&half_length_) -
        reinterpret_cast<char*>(&x_)) + sizeof(half_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleLidar_OBBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float heading = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float half_width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_half_width(&has_bits);
          half_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float half_length = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_half_length(&has_bits);
          half_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleLidar_OBBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_heading(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float half_width = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_half_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float half_length = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_half_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &half_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleLidar.OBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleLidar.OBBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleLidar_OBBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float heading = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // optional float half_width = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->half_width(), output);
  }

  // optional float half_length = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->half_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleLidar.OBBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleLidar_OBBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float heading = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // optional float half_width = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->half_width(), target);
  }

  // optional float half_length = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->half_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleLidar.OBBox)
  return target;
}

size_t ObstacleLidar_OBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float heading = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float half_width = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float half_length = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleLidar_OBBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleLidar_OBBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleLidar_OBBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleLidar.OBBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleLidar.OBBox)
    MergeFrom(*source);
  }
}

void ObstacleLidar_OBBox::MergeFrom(const ObstacleLidar_OBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      half_width_ = from.half_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      half_length_ = from.half_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleLidar_OBBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleLidar_OBBox::CopyFrom(const ObstacleLidar_OBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleLidar.OBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleLidar_OBBox::IsInitialized() const {
  return true;
}

void ObstacleLidar_OBBox::InternalSwap(ObstacleLidar_OBBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(half_width_, other->half_width_);
  swap(half_length_, other->half_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleLidar_OBBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleLidar::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_ObstacleLidar_default_instance_._instance.get_mutable()->obb_ = const_cast< ::phoenix::msg::perception::ObstacleLidar_OBBox*>(
      ::phoenix::msg::perception::ObstacleLidar_OBBox::internal_default_instance());
}
class ObstacleLidar::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleLidar>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prediction_age(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::phoenix::msg::perception::ObstacleLidar_OBBox& obb(const ObstacleLidar* msg);
  static void set_has_obb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_accel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_accel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::phoenix::msg::perception::ObstacleLidar_OBBox&
ObstacleLidar::_Internal::obb(const ObstacleLidar* msg) {
  return *msg->obb_;
}
ObstacleLidar::ObstacleLidar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleLidar)
}
ObstacleLidar::ObstacleLidar(const ObstacleLidar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obb()) {
    obb_ = new ::phoenix::msg::perception::ObstacleLidar_OBBox(*from.obb_);
  } else {
    obb_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleLidar)
}

void ObstacleLidar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleLidar_obstacles_5flidar_2eproto.base);
  ::memset(&obb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&obb_)) + sizeof(yaw_rate_));
}

ObstacleLidar::~ObstacleLidar() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleLidar)
  SharedDtor();
}

void ObstacleLidar::SharedDtor() {
  if (this != internal_default_instance()) delete obb_;
}

void ObstacleLidar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleLidar& ObstacleLidar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleLidar_obstacles_5flidar_2eproto.base);
  return *internal_default_instance();
}


void ObstacleLidar::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleLidar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(obb_ != nullptr);
    obb_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_x_) -
        reinterpret_cast<char*>(&id_)) + sizeof(v_x_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&v_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_) -
        reinterpret_cast<char*>(&v_y_)) + sizeof(yaw_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleLidar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleLidar_ObjType_IsValid(val))) {
            set_type(static_cast<::phoenix::msg::perception::ObstacleLidar_ObjType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 age = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_age(&has_bits);
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 prediction_age = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prediction_age(&has_bits);
          prediction_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_obb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float v_x = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v_y = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_x = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_accel_x(&has_bits);
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accel_y = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_accel_y(&has_bits);
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleLidar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleLidar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleLidar_ObjType_IsValid(value)) {
            set_type(static_cast< ::phoenix::msg::perception::ObstacleLidar_ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_age(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prediction_age = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_prediction_age(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &prediction_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_v_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_v_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_x = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_accel_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_y = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_accel_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_yaw_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleLidar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleLidar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleLidar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleLidar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 age = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // optional int32 prediction_age = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->prediction_age(), output);
  }

  // optional float x = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::obb(this), output);
  }

  // optional float v_x = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->v_x(), output);
  }

  // optional float v_y = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->v_y(), output);
  }

  // optional float accel_x = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->accel_x(), output);
  }

  // optional float accel_y = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->accel_y(), output);
  }

  // optional float yaw_rate = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleLidar)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleLidar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleLidar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 age = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  // optional int32 prediction_age = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->prediction_age(), target);
  }

  // optional float x = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // optional float y = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::obb(this), target);
  }

  // optional float v_x = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->v_x(), target);
  }

  // optional float v_y = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->v_y(), target);
  }

  // optional float accel_x = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->accel_x(), target);
  }

  // optional float accel_y = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->accel_y(), target);
  }

  // optional float yaw_rate = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleLidar)
  return target;
}

size_t ObstacleLidar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleLidar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.perception.ObstacleLidar.OBBox obb = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obb_);
    }

    // optional int32 id = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .phoenix.msg.perception.ObstacleLidar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 age = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 prediction_age = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->prediction_age());
    }

    // optional float x = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float v_x = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float v_y = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float accel_x = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float accel_y = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleLidar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleLidar)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleLidar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleLidar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleLidar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleLidar)
    MergeFrom(*source);
  }
}

void ObstacleLidar::MergeFrom(const ObstacleLidar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleLidar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_obb()->::phoenix::msg::perception::ObstacleLidar_OBBox::MergeFrom(from.obb());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000010u) {
      prediction_age_ = from.prediction_age_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      v_x_ = from.v_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      accel_x_ = from.accel_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      accel_y_ = from.accel_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      yaw_rate_ = from.yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleLidar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleLidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleLidar::CopyFrom(const ObstacleLidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleLidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleLidar::IsInitialized() const {
  return true;
}

void ObstacleLidar::InternalSwap(ObstacleLidar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(obb_, other->obb_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(age_, other->age_);
  swap(prediction_age_, other->prediction_age_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(v_x_, other->v_x_);
  swap(v_y_, other->v_y_);
  swap(accel_x_, other->accel_x_);
  swap(accel_y_, other->accel_y_);
  swap(yaw_rate_, other->yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleLidar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleLidarList::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_ObstacleLidarList_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class ObstacleLidarList::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleLidarList>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const ObstacleLidarList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lidar_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::phoenix::msg::common::Header&
ObstacleLidarList::_Internal::header(const ObstacleLidarList* msg) {
  return *msg->header_;
}
void ObstacleLidarList::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObstacleLidarList::ObstacleLidarList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.ObstacleLidarList)
}
ObstacleLidarList::ObstacleLidarList(const ObstacleLidarList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  lidar_type_ = from.lidar_type_;
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.ObstacleLidarList)
}

void ObstacleLidarList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleLidarList_obstacles_5flidar_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lidar_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lidar_type_));
}

ObstacleLidarList::~ObstacleLidarList() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.ObstacleLidarList)
  SharedDtor();
}

void ObstacleLidarList::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ObstacleLidarList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleLidarList& ObstacleLidarList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleLidarList_obstacles_5flidar_2eproto.base);
  return *internal_default_instance();
}


void ObstacleLidarList::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.ObstacleLidarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  lidar_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleLidarList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::ObstacleLidarList_LidarType_IsValid(val))) {
            set_lidar_type(static_cast<::phoenix::msg::perception::ObstacleLidarList_LidarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleLidarList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.ObstacleLidarList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::ObstacleLidarList_LidarType_IsValid(value)) {
            set_lidar_type(static_cast< ::phoenix::msg::perception::ObstacleLidarList_LidarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.ObstacleLidarList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.ObstacleLidarList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleLidarList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.ObstacleLidarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->lidar_type(), output);
  }

  // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.ObstacleLidarList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleLidarList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.ObstacleLidarList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->lidar_type(), target);
  }

  // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->obstacles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.ObstacleLidarList)
  return target;
}

size_t ObstacleLidarList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.ObstacleLidarList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.ObstacleLidar obstacles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.perception.ObstacleLidarList.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lidar_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleLidarList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.ObstacleLidarList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleLidarList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleLidarList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.ObstacleLidarList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.ObstacleLidarList)
    MergeFrom(*source);
  }
}

void ObstacleLidarList::MergeFrom(const ObstacleLidarList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.ObstacleLidarList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      lidar_type_ = from.lidar_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleLidarList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.ObstacleLidarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleLidarList::CopyFrom(const ObstacleLidarList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.ObstacleLidarList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleLidarList::IsInitialized() const {
  return true;
}

void ObstacleLidarList::InternalSwap(ObstacleLidarList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(header_, other->header_);
  swap(lidar_type_, other->lidar_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleLidarList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleLidar_OBBox* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleLidar_OBBox >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleLidar_OBBox >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleLidar* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleLidar >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleLidar >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::ObstacleLidarList* Arena::CreateMaybeMessage< ::phoenix::msg::perception::ObstacleLidarList >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::ObstacleLidarList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
