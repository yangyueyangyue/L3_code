// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::control::Chassis* Arena::CreateMaybeMessage<::phoenix::msg::control::Chassis>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace control {

enum Chassis_DrivingMode : int {
  Chassis_DrivingMode_DRIVING_MODE_INVALID = 0,
  Chassis_DrivingMode_DRIVING_MODE_MANUAL = 1,
  Chassis_DrivingMode_DRIVING_MODE_ROBOTIC = 2
};
bool Chassis_DrivingMode_IsValid(int value);
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_DRIVING_MODE_INVALID;
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_DRIVING_MODE_ROBOTIC;
constexpr int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor();
template<typename T>
inline const std::string& Chassis_DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), enum_t_value);
}
inline bool Chassis_DrivingMode_Parse(
    const std::string& name, Chassis_DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_EStop : int {
  Chassis_EStop_E_STOP_INVALID = 0,
  Chassis_EStop_E_STOP_OFF = 1,
  Chassis_EStop_E_STOP_ON = 2
};
bool Chassis_EStop_IsValid(int value);
constexpr Chassis_EStop Chassis_EStop_EStop_MIN = Chassis_EStop_E_STOP_INVALID;
constexpr Chassis_EStop Chassis_EStop_EStop_MAX = Chassis_EStop_E_STOP_ON;
constexpr int Chassis_EStop_EStop_ARRAYSIZE = Chassis_EStop_EStop_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EStop_descriptor();
template<typename T>
inline const std::string& Chassis_EStop_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_EStop>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_EStop_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_EStop_descriptor(), enum_t_value);
}
inline bool Chassis_EStop_Parse(
    const std::string& name, Chassis_EStop* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_EStop>(
    Chassis_EStop_descriptor(), name, value);
}
enum Chassis_EpsStatus : int {
  Chassis_EpsStatus_EPS_STATUS_INVALID = 0,
  Chassis_EpsStatus_EPS_STATUS_MANUAL = 1,
  Chassis_EpsStatus_EPS_STATUS_ROBOTIC = 2,
  Chassis_EpsStatus_EPS_STATUS_MANUAL_INTERRUPT = 3,
  Chassis_EpsStatus_EPS_STATUS_ERROR = 4
};
bool Chassis_EpsStatus_IsValid(int value);
constexpr Chassis_EpsStatus Chassis_EpsStatus_EpsStatus_MIN = Chassis_EpsStatus_EPS_STATUS_INVALID;
constexpr Chassis_EpsStatus Chassis_EpsStatus_EpsStatus_MAX = Chassis_EpsStatus_EPS_STATUS_ERROR;
constexpr int Chassis_EpsStatus_EpsStatus_ARRAYSIZE = Chassis_EpsStatus_EpsStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EpsStatus_descriptor();
template<typename T>
inline const std::string& Chassis_EpsStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_EpsStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_EpsStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_EpsStatus_descriptor(), enum_t_value);
}
inline bool Chassis_EpsStatus_Parse(
    const std::string& name, Chassis_EpsStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_EpsStatus>(
    Chassis_EpsStatus_descriptor(), name, value);
}
enum Chassis_ThrottleSysStatus : int {
  Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_INVALID = 0,
  Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_MANUAL = 1,
  Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_ROBOTIC = 2,
  Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_ERROR = 3
};
bool Chassis_ThrottleSysStatus_IsValid(int value);
constexpr Chassis_ThrottleSysStatus Chassis_ThrottleSysStatus_ThrottleSysStatus_MIN = Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_INVALID;
constexpr Chassis_ThrottleSysStatus Chassis_ThrottleSysStatus_ThrottleSysStatus_MAX = Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_ERROR;
constexpr int Chassis_ThrottleSysStatus_ThrottleSysStatus_ARRAYSIZE = Chassis_ThrottleSysStatus_ThrottleSysStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ThrottleSysStatus_descriptor();
template<typename T>
inline const std::string& Chassis_ThrottleSysStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_ThrottleSysStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_ThrottleSysStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_ThrottleSysStatus_descriptor(), enum_t_value);
}
inline bool Chassis_ThrottleSysStatus_Parse(
    const std::string& name, Chassis_ThrottleSysStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_ThrottleSysStatus>(
    Chassis_ThrottleSysStatus_descriptor(), name, value);
}
enum Chassis_EbsStatus : int {
  Chassis_EbsStatus_EBS_STATUS_INVALID = 0,
  Chassis_EbsStatus_EBS_STATUS_MANUAL = 1,
  Chassis_EbsStatus_EBS_STATUS_ROBOTIC = 2,
  Chassis_EbsStatus_EBS_STATUS_ERROR = 3
};
bool Chassis_EbsStatus_IsValid(int value);
constexpr Chassis_EbsStatus Chassis_EbsStatus_EbsStatus_MIN = Chassis_EbsStatus_EBS_STATUS_INVALID;
constexpr Chassis_EbsStatus Chassis_EbsStatus_EbsStatus_MAX = Chassis_EbsStatus_EBS_STATUS_ERROR;
constexpr int Chassis_EbsStatus_EbsStatus_ARRAYSIZE = Chassis_EbsStatus_EbsStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EbsStatus_descriptor();
template<typename T>
inline const std::string& Chassis_EbsStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_EbsStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_EbsStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_EbsStatus_descriptor(), enum_t_value);
}
inline bool Chassis_EbsStatus_Parse(
    const std::string& name, Chassis_EbsStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_EbsStatus>(
    Chassis_EbsStatus_descriptor(), name, value);
}
enum Chassis_GearPosition : int {
  Chassis_GearPosition_GEAR_INVALID = 0,
  Chassis_GearPosition_GEAR_P = 1,
  Chassis_GearPosition_GEAR_N = 2,
  Chassis_GearPosition_GEAR_R = 3,
  Chassis_GearPosition_GEAR_D = 4
};
bool Chassis_GearPosition_IsValid(int value);
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_INVALID;
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_D;
constexpr int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor();
template<typename T>
inline const std::string& Chassis_GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), enum_t_value);
}
inline bool Chassis_GearPosition_Parse(
    const std::string& name, Chassis_GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
enum Chassis_SignalLamp : int {
  Chassis_SignalLamp_LAMP_INVALID = 0,
  Chassis_SignalLamp_LAMP_OFF = 1,
  Chassis_SignalLamp_LAMP_ON = 2
};
bool Chassis_SignalLamp_IsValid(int value);
constexpr Chassis_SignalLamp Chassis_SignalLamp_SignalLamp_MIN = Chassis_SignalLamp_LAMP_INVALID;
constexpr Chassis_SignalLamp Chassis_SignalLamp_SignalLamp_MAX = Chassis_SignalLamp_LAMP_ON;
constexpr int Chassis_SignalLamp_SignalLamp_ARRAYSIZE = Chassis_SignalLamp_SignalLamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalLamp_descriptor();
template<typename T>
inline const std::string& Chassis_SignalLamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_SignalLamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_SignalLamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_SignalLamp_descriptor(), enum_t_value);
}
inline bool Chassis_SignalLamp_Parse(
    const std::string& name, Chassis_SignalLamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_SignalLamp>(
    Chassis_SignalLamp_descriptor(), name, value);
}
enum Chassis_SignalTurnLamp : int {
  Chassis_SignalTurnLamp_TURN_LAMP_INVALID = 0,
  Chassis_SignalTurnLamp_TURN_LAMP_OFF = 1,
  Chassis_SignalTurnLamp_TURN_LAMP_LEFT = 2,
  Chassis_SignalTurnLamp_TURN_LAMP_RIGHT = 3,
  Chassis_SignalTurnLamp_TURN_LAMP_EMERGENCY = 4
};
bool Chassis_SignalTurnLamp_IsValid(int value);
constexpr Chassis_SignalTurnLamp Chassis_SignalTurnLamp_SignalTurnLamp_MIN = Chassis_SignalTurnLamp_TURN_LAMP_INVALID;
constexpr Chassis_SignalTurnLamp Chassis_SignalTurnLamp_SignalTurnLamp_MAX = Chassis_SignalTurnLamp_TURN_LAMP_EMERGENCY;
constexpr int Chassis_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE = Chassis_SignalTurnLamp_SignalTurnLamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalTurnLamp_descriptor();
template<typename T>
inline const std::string& Chassis_SignalTurnLamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_SignalTurnLamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_SignalTurnLamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_SignalTurnLamp_descriptor(), enum_t_value);
}
inline bool Chassis_SignalTurnLamp_Parse(
    const std::string& name, Chassis_SignalTurnLamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_SignalTurnLamp>(
    Chassis_SignalTurnLamp_descriptor(), name, value);
}
enum Chassis_SignalTurningIndicator : int {
  Chassis_SignalTurningIndicator_TURNING_INDICATOR_INVALID = 0,
  Chassis_SignalTurningIndicator_TURNING_INDICATOR_NONE = 1,
  Chassis_SignalTurningIndicator_TURNING_INDICATOR_LEFT = 2,
  Chassis_SignalTurningIndicator_TURNING_INDICATOR_RIGHT = 3
};
bool Chassis_SignalTurningIndicator_IsValid(int value);
constexpr Chassis_SignalTurningIndicator Chassis_SignalTurningIndicator_SignalTurningIndicator_MIN = Chassis_SignalTurningIndicator_TURNING_INDICATOR_INVALID;
constexpr Chassis_SignalTurningIndicator Chassis_SignalTurningIndicator_SignalTurningIndicator_MAX = Chassis_SignalTurningIndicator_TURNING_INDICATOR_RIGHT;
constexpr int Chassis_SignalTurningIndicator_SignalTurningIndicator_ARRAYSIZE = Chassis_SignalTurningIndicator_SignalTurningIndicator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalTurningIndicator_descriptor();
template<typename T>
inline const std::string& Chassis_SignalTurningIndicator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_SignalTurningIndicator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_SignalTurningIndicator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_SignalTurningIndicator_descriptor(), enum_t_value);
}
inline bool Chassis_SignalTurningIndicator_Parse(
    const std::string& name, Chassis_SignalTurningIndicator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_SignalTurningIndicator>(
    Chassis_SignalTurningIndicator_descriptor(), name, value);
}
enum Chassis_EpbStatus : int {
  Chassis_EpbStatus_EPB_STATUS_INVALID = 0,
  Chassis_EpbStatus_EPB_STATUS_OFF = 1,
  Chassis_EpbStatus_EPB_STATUS_ON = 2
};
bool Chassis_EpbStatus_IsValid(int value);
constexpr Chassis_EpbStatus Chassis_EpbStatus_EpbStatus_MIN = Chassis_EpbStatus_EPB_STATUS_INVALID;
constexpr Chassis_EpbStatus Chassis_EpbStatus_EpbStatus_MAX = Chassis_EpbStatus_EPB_STATUS_ON;
constexpr int Chassis_EpbStatus_EpbStatus_ARRAYSIZE = Chassis_EpbStatus_EpbStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EpbStatus_descriptor();
template<typename T>
inline const std::string& Chassis_EpbStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_EpbStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_EpbStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_EpbStatus_descriptor(), enum_t_value);
}
inline bool Chassis_EpbStatus_Parse(
    const std::string& name, Chassis_EpbStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_EpbStatus>(
    Chassis_EpbStatus_descriptor(), name, value);
}
// ===================================================================

class Chassis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.control.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);
  Chassis(Chassis&& from) noexcept
    : Chassis() {
    *this = ::std::move(from);
  }

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chassis& operator=(Chassis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chassis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chassis& a, Chassis& b) {
    a.Swap(&b);
  }
  inline void Swap(Chassis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chassis* New() const final {
    return CreateMaybeMessage<Chassis>(nullptr);
  }

  Chassis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chassis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chassis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.control.Chassis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chassis_2eproto);
    return ::descriptor_table_chassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static constexpr DrivingMode DRIVING_MODE_INVALID =
    Chassis_DrivingMode_DRIVING_MODE_INVALID;
  static constexpr DrivingMode DRIVING_MODE_MANUAL =
    Chassis_DrivingMode_DRIVING_MODE_MANUAL;
  static constexpr DrivingMode DRIVING_MODE_ROBOTIC =
    Chassis_DrivingMode_DRIVING_MODE_ROBOTIC;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static constexpr DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static constexpr DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static constexpr int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrivingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrivingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrivingMode_Name.");
    return Chassis_DrivingMode_Name(enum_t_value);
  }
  static inline bool DrivingMode_Parse(const std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_EStop EStop;
  static constexpr EStop E_STOP_INVALID =
    Chassis_EStop_E_STOP_INVALID;
  static constexpr EStop E_STOP_OFF =
    Chassis_EStop_E_STOP_OFF;
  static constexpr EStop E_STOP_ON =
    Chassis_EStop_E_STOP_ON;
  static inline bool EStop_IsValid(int value) {
    return Chassis_EStop_IsValid(value);
  }
  static constexpr EStop EStop_MIN =
    Chassis_EStop_EStop_MIN;
  static constexpr EStop EStop_MAX =
    Chassis_EStop_EStop_MAX;
  static constexpr int EStop_ARRAYSIZE =
    Chassis_EStop_EStop_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EStop_descriptor() {
    return Chassis_EStop_descriptor();
  }
  template<typename T>
  static inline const std::string& EStop_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EStop>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EStop_Name.");
    return Chassis_EStop_Name(enum_t_value);
  }
  static inline bool EStop_Parse(const std::string& name,
      EStop* value) {
    return Chassis_EStop_Parse(name, value);
  }

  typedef Chassis_EpsStatus EpsStatus;
  static constexpr EpsStatus EPS_STATUS_INVALID =
    Chassis_EpsStatus_EPS_STATUS_INVALID;
  static constexpr EpsStatus EPS_STATUS_MANUAL =
    Chassis_EpsStatus_EPS_STATUS_MANUAL;
  static constexpr EpsStatus EPS_STATUS_ROBOTIC =
    Chassis_EpsStatus_EPS_STATUS_ROBOTIC;
  static constexpr EpsStatus EPS_STATUS_MANUAL_INTERRUPT =
    Chassis_EpsStatus_EPS_STATUS_MANUAL_INTERRUPT;
  static constexpr EpsStatus EPS_STATUS_ERROR =
    Chassis_EpsStatus_EPS_STATUS_ERROR;
  static inline bool EpsStatus_IsValid(int value) {
    return Chassis_EpsStatus_IsValid(value);
  }
  static constexpr EpsStatus EpsStatus_MIN =
    Chassis_EpsStatus_EpsStatus_MIN;
  static constexpr EpsStatus EpsStatus_MAX =
    Chassis_EpsStatus_EpsStatus_MAX;
  static constexpr int EpsStatus_ARRAYSIZE =
    Chassis_EpsStatus_EpsStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsStatus_descriptor() {
    return Chassis_EpsStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsStatus_Name.");
    return Chassis_EpsStatus_Name(enum_t_value);
  }
  static inline bool EpsStatus_Parse(const std::string& name,
      EpsStatus* value) {
    return Chassis_EpsStatus_Parse(name, value);
  }

  typedef Chassis_ThrottleSysStatus ThrottleSysStatus;
  static constexpr ThrottleSysStatus THROTTLE_SYS_STATUS_INVALID =
    Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_INVALID;
  static constexpr ThrottleSysStatus THROTTLE_SYS_STATUS_MANUAL =
    Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_MANUAL;
  static constexpr ThrottleSysStatus THROTTLE_SYS_STATUS_ROBOTIC =
    Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_ROBOTIC;
  static constexpr ThrottleSysStatus THROTTLE_SYS_STATUS_ERROR =
    Chassis_ThrottleSysStatus_THROTTLE_SYS_STATUS_ERROR;
  static inline bool ThrottleSysStatus_IsValid(int value) {
    return Chassis_ThrottleSysStatus_IsValid(value);
  }
  static constexpr ThrottleSysStatus ThrottleSysStatus_MIN =
    Chassis_ThrottleSysStatus_ThrottleSysStatus_MIN;
  static constexpr ThrottleSysStatus ThrottleSysStatus_MAX =
    Chassis_ThrottleSysStatus_ThrottleSysStatus_MAX;
  static constexpr int ThrottleSysStatus_ARRAYSIZE =
    Chassis_ThrottleSysStatus_ThrottleSysStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ThrottleSysStatus_descriptor() {
    return Chassis_ThrottleSysStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ThrottleSysStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThrottleSysStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThrottleSysStatus_Name.");
    return Chassis_ThrottleSysStatus_Name(enum_t_value);
  }
  static inline bool ThrottleSysStatus_Parse(const std::string& name,
      ThrottleSysStatus* value) {
    return Chassis_ThrottleSysStatus_Parse(name, value);
  }

  typedef Chassis_EbsStatus EbsStatus;
  static constexpr EbsStatus EBS_STATUS_INVALID =
    Chassis_EbsStatus_EBS_STATUS_INVALID;
  static constexpr EbsStatus EBS_STATUS_MANUAL =
    Chassis_EbsStatus_EBS_STATUS_MANUAL;
  static constexpr EbsStatus EBS_STATUS_ROBOTIC =
    Chassis_EbsStatus_EBS_STATUS_ROBOTIC;
  static constexpr EbsStatus EBS_STATUS_ERROR =
    Chassis_EbsStatus_EBS_STATUS_ERROR;
  static inline bool EbsStatus_IsValid(int value) {
    return Chassis_EbsStatus_IsValid(value);
  }
  static constexpr EbsStatus EbsStatus_MIN =
    Chassis_EbsStatus_EbsStatus_MIN;
  static constexpr EbsStatus EbsStatus_MAX =
    Chassis_EbsStatus_EbsStatus_MAX;
  static constexpr int EbsStatus_ARRAYSIZE =
    Chassis_EbsStatus_EbsStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EbsStatus_descriptor() {
    return Chassis_EbsStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EbsStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EbsStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EbsStatus_Name.");
    return Chassis_EbsStatus_Name(enum_t_value);
  }
  static inline bool EbsStatus_Parse(const std::string& name,
      EbsStatus* value) {
    return Chassis_EbsStatus_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static constexpr GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static constexpr GearPosition GEAR_P =
    Chassis_GearPosition_GEAR_P;
  static constexpr GearPosition GEAR_N =
    Chassis_GearPosition_GEAR_N;
  static constexpr GearPosition GEAR_R =
    Chassis_GearPosition_GEAR_R;
  static constexpr GearPosition GEAR_D =
    Chassis_GearPosition_GEAR_D;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  template<typename T>
  static inline const std::string& GearPosition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GearPosition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GearPosition_Name.");
    return Chassis_GearPosition_Name(enum_t_value);
  }
  static inline bool GearPosition_Parse(const std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  typedef Chassis_SignalLamp SignalLamp;
  static constexpr SignalLamp LAMP_INVALID =
    Chassis_SignalLamp_LAMP_INVALID;
  static constexpr SignalLamp LAMP_OFF =
    Chassis_SignalLamp_LAMP_OFF;
  static constexpr SignalLamp LAMP_ON =
    Chassis_SignalLamp_LAMP_ON;
  static inline bool SignalLamp_IsValid(int value) {
    return Chassis_SignalLamp_IsValid(value);
  }
  static constexpr SignalLamp SignalLamp_MIN =
    Chassis_SignalLamp_SignalLamp_MIN;
  static constexpr SignalLamp SignalLamp_MAX =
    Chassis_SignalLamp_SignalLamp_MAX;
  static constexpr int SignalLamp_ARRAYSIZE =
    Chassis_SignalLamp_SignalLamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalLamp_descriptor() {
    return Chassis_SignalLamp_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalLamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalLamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalLamp_Name.");
    return Chassis_SignalLamp_Name(enum_t_value);
  }
  static inline bool SignalLamp_Parse(const std::string& name,
      SignalLamp* value) {
    return Chassis_SignalLamp_Parse(name, value);
  }

  typedef Chassis_SignalTurnLamp SignalTurnLamp;
  static constexpr SignalTurnLamp TURN_LAMP_INVALID =
    Chassis_SignalTurnLamp_TURN_LAMP_INVALID;
  static constexpr SignalTurnLamp TURN_LAMP_OFF =
    Chassis_SignalTurnLamp_TURN_LAMP_OFF;
  static constexpr SignalTurnLamp TURN_LAMP_LEFT =
    Chassis_SignalTurnLamp_TURN_LAMP_LEFT;
  static constexpr SignalTurnLamp TURN_LAMP_RIGHT =
    Chassis_SignalTurnLamp_TURN_LAMP_RIGHT;
  static constexpr SignalTurnLamp TURN_LAMP_EMERGENCY =
    Chassis_SignalTurnLamp_TURN_LAMP_EMERGENCY;
  static inline bool SignalTurnLamp_IsValid(int value) {
    return Chassis_SignalTurnLamp_IsValid(value);
  }
  static constexpr SignalTurnLamp SignalTurnLamp_MIN =
    Chassis_SignalTurnLamp_SignalTurnLamp_MIN;
  static constexpr SignalTurnLamp SignalTurnLamp_MAX =
    Chassis_SignalTurnLamp_SignalTurnLamp_MAX;
  static constexpr int SignalTurnLamp_ARRAYSIZE =
    Chassis_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalTurnLamp_descriptor() {
    return Chassis_SignalTurnLamp_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalTurnLamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalTurnLamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalTurnLamp_Name.");
    return Chassis_SignalTurnLamp_Name(enum_t_value);
  }
  static inline bool SignalTurnLamp_Parse(const std::string& name,
      SignalTurnLamp* value) {
    return Chassis_SignalTurnLamp_Parse(name, value);
  }

  typedef Chassis_SignalTurningIndicator SignalTurningIndicator;
  static constexpr SignalTurningIndicator TURNING_INDICATOR_INVALID =
    Chassis_SignalTurningIndicator_TURNING_INDICATOR_INVALID;
  static constexpr SignalTurningIndicator TURNING_INDICATOR_NONE =
    Chassis_SignalTurningIndicator_TURNING_INDICATOR_NONE;
  static constexpr SignalTurningIndicator TURNING_INDICATOR_LEFT =
    Chassis_SignalTurningIndicator_TURNING_INDICATOR_LEFT;
  static constexpr SignalTurningIndicator TURNING_INDICATOR_RIGHT =
    Chassis_SignalTurningIndicator_TURNING_INDICATOR_RIGHT;
  static inline bool SignalTurningIndicator_IsValid(int value) {
    return Chassis_SignalTurningIndicator_IsValid(value);
  }
  static constexpr SignalTurningIndicator SignalTurningIndicator_MIN =
    Chassis_SignalTurningIndicator_SignalTurningIndicator_MIN;
  static constexpr SignalTurningIndicator SignalTurningIndicator_MAX =
    Chassis_SignalTurningIndicator_SignalTurningIndicator_MAX;
  static constexpr int SignalTurningIndicator_ARRAYSIZE =
    Chassis_SignalTurningIndicator_SignalTurningIndicator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalTurningIndicator_descriptor() {
    return Chassis_SignalTurningIndicator_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalTurningIndicator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalTurningIndicator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalTurningIndicator_Name.");
    return Chassis_SignalTurningIndicator_Name(enum_t_value);
  }
  static inline bool SignalTurningIndicator_Parse(const std::string& name,
      SignalTurningIndicator* value) {
    return Chassis_SignalTurningIndicator_Parse(name, value);
  }

  typedef Chassis_EpbStatus EpbStatus;
  static constexpr EpbStatus EPB_STATUS_INVALID =
    Chassis_EpbStatus_EPB_STATUS_INVALID;
  static constexpr EpbStatus EPB_STATUS_OFF =
    Chassis_EpbStatus_EPB_STATUS_OFF;
  static constexpr EpbStatus EPB_STATUS_ON =
    Chassis_EpbStatus_EPB_STATUS_ON;
  static inline bool EpbStatus_IsValid(int value) {
    return Chassis_EpbStatus_IsValid(value);
  }
  static constexpr EpbStatus EpbStatus_MIN =
    Chassis_EpbStatus_EpbStatus_MIN;
  static constexpr EpbStatus EpbStatus_MAX =
    Chassis_EpbStatus_EpbStatus_MAX;
  static constexpr int EpbStatus_ARRAYSIZE =
    Chassis_EpbStatus_EpbStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbStatus_descriptor() {
    return Chassis_EpbStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbStatus_Name.");
    return Chassis_EpbStatus_Name(enum_t_value);
  }
  static inline bool EpbStatus_Parse(const std::string& name,
      EpbStatus* value) {
    return Chassis_EpbStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDrivingModeFieldNumber = 2,
    kEStopFieldNumber = 3,
    kEpsStatusFieldNumber = 4,
    kThrottleSysStatusFieldNumber = 5,
    kEbsStatusFieldNumber = 6,
    kSteeringWheelAngleFieldNumber = 8,
    kSteeringWheelSpeedFieldNumber = 10,
    kSteeringWheelAngleValidFieldNumber = 7,
    kSteeringWheelSpeedValidFieldNumber = 9,
    kSteeringWheelTorqueValidFieldNumber = 11,
    kVelocityValidFieldNumber = 13,
    kSteeringWheelTorqueFieldNumber = 12,
    kVelocityFieldNumber = 14,
    kAccelerationFieldNumber = 16,
    kYawRateFieldNumber = 18,
    kAccelerationValidFieldNumber = 15,
    kYawRateValidFieldNumber = 17,
    kAxValidFieldNumber = 19,
    kAyValidFieldNumber = 21,
    kAxFieldNumber = 20,
    kAyFieldNumber = 22,
    kWheelSpeedFlFieldNumber = 24,
    kWheelSpeedFrFieldNumber = 26,
    kWheelSpeedFlValidFieldNumber = 23,
    kWheelSpeedFrValidFieldNumber = 25,
    kWheelSpeedRlValidFieldNumber = 27,
    kWheelSpeedRrValidFieldNumber = 29,
    kWheelSpeedRlFieldNumber = 28,
    kWheelSpeedRrFieldNumber = 30,
    kWheelSpeedRl2FieldNumber = 32,
    kWheelSpeedRr2FieldNumber = 34,
    kEpbStatusFieldNumber = 35,
    kGearFieldNumber = 36,
    kGearNumberFieldNumber = 37,
    kSignalTurningIndicatorFieldNumber = 38,
    kWheelSpeedRl2ValidFieldNumber = 31,
    kWheelSpeedRr2ValidFieldNumber = 33,
    kEngineSpeedValidFieldNumber = 43,
    kEngineTorqueValidFieldNumber = 45,
    kSignalTurnLampFieldNumber = 39,
    kSignalBrakeLampFieldNumber = 40,
    kBrakePedalValueFieldNumber = 41,
    kAccPedalValueFieldNumber = 42,
    kEngineSpeedFieldNumber = 44,
    kEngineTorqueFieldNumber = 46,
  };
  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
  bool has_driving_mode() const;
  void clear_driving_mode();
  ::phoenix::msg::control::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::phoenix::msg::control::Chassis_DrivingMode value);

  // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
  bool has_e_stop() const;
  void clear_e_stop();
  ::phoenix::msg::control::Chassis_EStop e_stop() const;
  void set_e_stop(::phoenix::msg::control::Chassis_EStop value);

  // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
  bool has_eps_status() const;
  void clear_eps_status();
  ::phoenix::msg::control::Chassis_EpsStatus eps_status() const;
  void set_eps_status(::phoenix::msg::control::Chassis_EpsStatus value);

  // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
  bool has_throttle_sys_status() const;
  void clear_throttle_sys_status();
  ::phoenix::msg::control::Chassis_ThrottleSysStatus throttle_sys_status() const;
  void set_throttle_sys_status(::phoenix::msg::control::Chassis_ThrottleSysStatus value);

  // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
  bool has_ebs_status() const;
  void clear_ebs_status();
  ::phoenix::msg::control::Chassis_EbsStatus ebs_status() const;
  void set_ebs_status(::phoenix::msg::control::Chassis_EbsStatus value);

  // optional float steering_wheel_angle = 8 [default = 0];
  bool has_steering_wheel_angle() const;
  void clear_steering_wheel_angle();
  float steering_wheel_angle() const;
  void set_steering_wheel_angle(float value);

  // optional float steering_wheel_speed = 10 [default = 0];
  bool has_steering_wheel_speed() const;
  void clear_steering_wheel_speed();
  float steering_wheel_speed() const;
  void set_steering_wheel_speed(float value);

  // optional bool steering_wheel_angle_valid = 7 [default = false];
  bool has_steering_wheel_angle_valid() const;
  void clear_steering_wheel_angle_valid();
  bool steering_wheel_angle_valid() const;
  void set_steering_wheel_angle_valid(bool value);

  // optional bool steering_wheel_speed_valid = 9 [default = false];
  bool has_steering_wheel_speed_valid() const;
  void clear_steering_wheel_speed_valid();
  bool steering_wheel_speed_valid() const;
  void set_steering_wheel_speed_valid(bool value);

  // optional bool steering_wheel_torque_valid = 11 [default = false];
  bool has_steering_wheel_torque_valid() const;
  void clear_steering_wheel_torque_valid();
  bool steering_wheel_torque_valid() const;
  void set_steering_wheel_torque_valid(bool value);

  // optional bool velocity_valid = 13 [default = false];
  bool has_velocity_valid() const;
  void clear_velocity_valid();
  bool velocity_valid() const;
  void set_velocity_valid(bool value);

  // optional float steering_wheel_torque = 12 [default = 0];
  bool has_steering_wheel_torque() const;
  void clear_steering_wheel_torque();
  float steering_wheel_torque() const;
  void set_steering_wheel_torque(float value);

  // optional float velocity = 14 [default = 0];
  bool has_velocity() const;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);

  // optional float acceleration = 16 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  float acceleration() const;
  void set_acceleration(float value);

  // optional float yaw_rate = 18 [default = 0];
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // optional bool acceleration_valid = 15 [default = false];
  bool has_acceleration_valid() const;
  void clear_acceleration_valid();
  bool acceleration_valid() const;
  void set_acceleration_valid(bool value);

  // optional bool yaw_rate_valid = 17 [default = false];
  bool has_yaw_rate_valid() const;
  void clear_yaw_rate_valid();
  bool yaw_rate_valid() const;
  void set_yaw_rate_valid(bool value);

  // optional bool ax_valid = 19 [default = false];
  bool has_ax_valid() const;
  void clear_ax_valid();
  bool ax_valid() const;
  void set_ax_valid(bool value);

  // optional bool ay_valid = 21 [default = false];
  bool has_ay_valid() const;
  void clear_ay_valid();
  bool ay_valid() const;
  void set_ay_valid(bool value);

  // optional float ax = 20 [default = 0];
  bool has_ax() const;
  void clear_ax();
  float ax() const;
  void set_ax(float value);

  // optional float ay = 22 [default = 0];
  bool has_ay() const;
  void clear_ay();
  float ay() const;
  void set_ay(float value);

  // optional float wheel_speed_fl = 24 [default = 0];
  bool has_wheel_speed_fl() const;
  void clear_wheel_speed_fl();
  float wheel_speed_fl() const;
  void set_wheel_speed_fl(float value);

  // optional float wheel_speed_fr = 26 [default = 0];
  bool has_wheel_speed_fr() const;
  void clear_wheel_speed_fr();
  float wheel_speed_fr() const;
  void set_wheel_speed_fr(float value);

  // optional bool wheel_speed_fl_valid = 23 [default = false];
  bool has_wheel_speed_fl_valid() const;
  void clear_wheel_speed_fl_valid();
  bool wheel_speed_fl_valid() const;
  void set_wheel_speed_fl_valid(bool value);

  // optional bool wheel_speed_fr_valid = 25 [default = false];
  bool has_wheel_speed_fr_valid() const;
  void clear_wheel_speed_fr_valid();
  bool wheel_speed_fr_valid() const;
  void set_wheel_speed_fr_valid(bool value);

  // optional bool wheel_speed_rl_valid = 27 [default = false];
  bool has_wheel_speed_rl_valid() const;
  void clear_wheel_speed_rl_valid();
  bool wheel_speed_rl_valid() const;
  void set_wheel_speed_rl_valid(bool value);

  // optional bool wheel_speed_rr_valid = 29 [default = false];
  bool has_wheel_speed_rr_valid() const;
  void clear_wheel_speed_rr_valid();
  bool wheel_speed_rr_valid() const;
  void set_wheel_speed_rr_valid(bool value);

  // optional float wheel_speed_rl = 28 [default = 0];
  bool has_wheel_speed_rl() const;
  void clear_wheel_speed_rl();
  float wheel_speed_rl() const;
  void set_wheel_speed_rl(float value);

  // optional float wheel_speed_rr = 30 [default = 0];
  bool has_wheel_speed_rr() const;
  void clear_wheel_speed_rr();
  float wheel_speed_rr() const;
  void set_wheel_speed_rr(float value);

  // optional float wheel_speed_rl2 = 32 [default = 0];
  bool has_wheel_speed_rl2() const;
  void clear_wheel_speed_rl2();
  float wheel_speed_rl2() const;
  void set_wheel_speed_rl2(float value);

  // optional float wheel_speed_rr2 = 34 [default = 0];
  bool has_wheel_speed_rr2() const;
  void clear_wheel_speed_rr2();
  float wheel_speed_rr2() const;
  void set_wheel_speed_rr2(float value);

  // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
  bool has_epb_status() const;
  void clear_epb_status();
  ::phoenix::msg::control::Chassis_EpbStatus epb_status() const;
  void set_epb_status(::phoenix::msg::control::Chassis_EpbStatus value);

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::Chassis_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::Chassis_GearPosition value);

  // optional int32 gear_number = 37 [default = 0];
  bool has_gear_number() const;
  void clear_gear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 gear_number() const;
  void set_gear_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
  bool has_signal_turning_indicator() const;
  void clear_signal_turning_indicator();
  ::phoenix::msg::control::Chassis_SignalTurningIndicator signal_turning_indicator() const;
  void set_signal_turning_indicator(::phoenix::msg::control::Chassis_SignalTurningIndicator value);

  // optional bool wheel_speed_rl2_valid = 31 [default = false];
  bool has_wheel_speed_rl2_valid() const;
  void clear_wheel_speed_rl2_valid();
  bool wheel_speed_rl2_valid() const;
  void set_wheel_speed_rl2_valid(bool value);

  // optional bool wheel_speed_rr2_valid = 33 [default = false];
  bool has_wheel_speed_rr2_valid() const;
  void clear_wheel_speed_rr2_valid();
  bool wheel_speed_rr2_valid() const;
  void set_wheel_speed_rr2_valid(bool value);

  // optional bool engine_speed_valid = 43 [default = false];
  bool has_engine_speed_valid() const;
  void clear_engine_speed_valid();
  bool engine_speed_valid() const;
  void set_engine_speed_valid(bool value);

  // optional bool engine_torque_valid = 45 [default = false];
  bool has_engine_torque_valid() const;
  void clear_engine_torque_valid();
  bool engine_torque_valid() const;
  void set_engine_torque_valid(bool value);

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
  bool has_signal_turn_lamp() const;
  void clear_signal_turn_lamp();
  ::phoenix::msg::control::Chassis_SignalTurnLamp signal_turn_lamp() const;
  void set_signal_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value);

  // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
  bool has_signal_brake_lamp() const;
  void clear_signal_brake_lamp();
  ::phoenix::msg::control::Chassis_SignalLamp signal_brake_lamp() const;
  void set_signal_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value);

  // optional int32 brake_pedal_value = 41 [default = 0];
  bool has_brake_pedal_value() const;
  void clear_brake_pedal_value();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_value() const;
  void set_brake_pedal_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 acc_pedal_value = 42 [default = 0];
  bool has_acc_pedal_value() const;
  void clear_acc_pedal_value();
  ::PROTOBUF_NAMESPACE_ID::int32 acc_pedal_value() const;
  void set_acc_pedal_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float engine_speed = 44 [default = 0];
  bool has_engine_speed() const;
  void clear_engine_speed();
  float engine_speed() const;
  void set_engine_speed(float value);

  // optional float engine_torque = 46 [default = 0];
  bool has_engine_torque() const;
  void clear_engine_torque();
  float engine_torque() const;
  void set_engine_torque(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.control.Chassis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::common::Header* header_;
  int driving_mode_;
  int e_stop_;
  int eps_status_;
  int throttle_sys_status_;
  int ebs_status_;
  float steering_wheel_angle_;
  float steering_wheel_speed_;
  bool steering_wheel_angle_valid_;
  bool steering_wheel_speed_valid_;
  bool steering_wheel_torque_valid_;
  bool velocity_valid_;
  float steering_wheel_torque_;
  float velocity_;
  float acceleration_;
  float yaw_rate_;
  bool acceleration_valid_;
  bool yaw_rate_valid_;
  bool ax_valid_;
  bool ay_valid_;
  float ax_;
  float ay_;
  float wheel_speed_fl_;
  float wheel_speed_fr_;
  bool wheel_speed_fl_valid_;
  bool wheel_speed_fr_valid_;
  bool wheel_speed_rl_valid_;
  bool wheel_speed_rr_valid_;
  float wheel_speed_rl_;
  float wheel_speed_rr_;
  float wheel_speed_rl2_;
  float wheel_speed_rr2_;
  int epb_status_;
  int gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_number_;
  int signal_turning_indicator_;
  bool wheel_speed_rl2_valid_;
  bool wheel_speed_rr2_valid_;
  bool engine_speed_valid_;
  bool engine_torque_valid_;
  int signal_turn_lamp_;
  int signal_brake_lamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 acc_pedal_value_;
  float engine_speed_;
  float engine_torque_;
  friend struct ::TableStruct_chassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chassis

// optional .phoenix.msg.common.Header header = 1;
inline bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& Chassis::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.control.Chassis.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* Chassis::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.control.Chassis.header)
  return header_;
}
inline void Chassis::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.control.Chassis.header)
}

// optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
inline bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::control::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.driving_mode)
  return static_cast< ::phoenix::msg::control::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::phoenix::msg::control::Chassis_DrivingMode value) {
  assert(::phoenix::msg::control::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.driving_mode)
}

// optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
inline bool Chassis::has_e_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chassis::clear_e_stop() {
  e_stop_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::control::Chassis_EStop Chassis::e_stop() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.e_stop)
  return static_cast< ::phoenix::msg::control::Chassis_EStop >(e_stop_);
}
inline void Chassis::set_e_stop(::phoenix::msg::control::Chassis_EStop value) {
  assert(::phoenix::msg::control::Chassis_EStop_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  e_stop_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.e_stop)
}

// optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
inline bool Chassis::has_eps_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chassis::clear_eps_status() {
  eps_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_EpsStatus Chassis::eps_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.eps_status)
  return static_cast< ::phoenix::msg::control::Chassis_EpsStatus >(eps_status_);
}
inline void Chassis::set_eps_status(::phoenix::msg::control::Chassis_EpsStatus value) {
  assert(::phoenix::msg::control::Chassis_EpsStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  eps_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.eps_status)
}

// optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
inline bool Chassis::has_throttle_sys_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chassis::clear_throttle_sys_status() {
  throttle_sys_status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::phoenix::msg::control::Chassis_ThrottleSysStatus Chassis::throttle_sys_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.throttle_sys_status)
  return static_cast< ::phoenix::msg::control::Chassis_ThrottleSysStatus >(throttle_sys_status_);
}
inline void Chassis::set_throttle_sys_status(::phoenix::msg::control::Chassis_ThrottleSysStatus value) {
  assert(::phoenix::msg::control::Chassis_ThrottleSysStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  throttle_sys_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.throttle_sys_status)
}

// optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
inline bool Chassis::has_ebs_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chassis::clear_ebs_status() {
  ebs_status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::phoenix::msg::control::Chassis_EbsStatus Chassis::ebs_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.ebs_status)
  return static_cast< ::phoenix::msg::control::Chassis_EbsStatus >(ebs_status_);
}
inline void Chassis::set_ebs_status(::phoenix::msg::control::Chassis_EbsStatus value) {
  assert(::phoenix::msg::control::Chassis_EbsStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  ebs_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.ebs_status)
}

// optional bool steering_wheel_angle_valid = 7 [default = false];
inline bool Chassis::has_steering_wheel_angle_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chassis::clear_steering_wheel_angle_valid() {
  steering_wheel_angle_valid_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Chassis::steering_wheel_angle_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_angle_valid)
  return steering_wheel_angle_valid_;
}
inline void Chassis::set_steering_wheel_angle_valid(bool value) {
  _has_bits_[0] |= 0x00000100u;
  steering_wheel_angle_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_angle_valid)
}

// optional float steering_wheel_angle = 8 [default = 0];
inline bool Chassis::has_steering_wheel_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chassis::clear_steering_wheel_angle() {
  steering_wheel_angle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Chassis::steering_wheel_angle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_angle)
  return steering_wheel_angle_;
}
inline void Chassis::set_steering_wheel_angle(float value) {
  _has_bits_[0] |= 0x00000040u;
  steering_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_angle)
}

// optional bool steering_wheel_speed_valid = 9 [default = false];
inline bool Chassis::has_steering_wheel_speed_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chassis::clear_steering_wheel_speed_valid() {
  steering_wheel_speed_valid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Chassis::steering_wheel_speed_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_speed_valid)
  return steering_wheel_speed_valid_;
}
inline void Chassis::set_steering_wheel_speed_valid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  steering_wheel_speed_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_speed_valid)
}

// optional float steering_wheel_speed = 10 [default = 0];
inline bool Chassis::has_steering_wheel_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chassis::clear_steering_wheel_speed() {
  steering_wheel_speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Chassis::steering_wheel_speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_speed)
  return steering_wheel_speed_;
}
inline void Chassis::set_steering_wheel_speed(float value) {
  _has_bits_[0] |= 0x00000080u;
  steering_wheel_speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_speed)
}

// optional bool steering_wheel_torque_valid = 11 [default = false];
inline bool Chassis::has_steering_wheel_torque_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chassis::clear_steering_wheel_torque_valid() {
  steering_wheel_torque_valid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Chassis::steering_wheel_torque_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_torque_valid)
  return steering_wheel_torque_valid_;
}
inline void Chassis::set_steering_wheel_torque_valid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  steering_wheel_torque_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_torque_valid)
}

// optional float steering_wheel_torque = 12 [default = 0];
inline bool Chassis::has_steering_wheel_torque() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chassis::clear_steering_wheel_torque() {
  steering_wheel_torque_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Chassis::steering_wheel_torque() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.steering_wheel_torque)
  return steering_wheel_torque_;
}
inline void Chassis::set_steering_wheel_torque(float value) {
  _has_bits_[0] |= 0x00001000u;
  steering_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.steering_wheel_torque)
}

// optional bool velocity_valid = 13 [default = false];
inline bool Chassis::has_velocity_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chassis::clear_velocity_valid() {
  velocity_valid_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Chassis::velocity_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.velocity_valid)
  return velocity_valid_;
}
inline void Chassis::set_velocity_valid(bool value) {
  _has_bits_[0] |= 0x00000800u;
  velocity_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.velocity_valid)
}

// optional float velocity = 14 [default = 0];
inline bool Chassis::has_velocity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chassis::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float Chassis::velocity() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.velocity)
  return velocity_;
}
inline void Chassis::set_velocity(float value) {
  _has_bits_[0] |= 0x00002000u;
  velocity_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.velocity)
}

// optional bool acceleration_valid = 15 [default = false];
inline bool Chassis::has_acceleration_valid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Chassis::clear_acceleration_valid() {
  acceleration_valid_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Chassis::acceleration_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.acceleration_valid)
  return acceleration_valid_;
}
inline void Chassis::set_acceleration_valid(bool value) {
  _has_bits_[0] |= 0x00010000u;
  acceleration_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.acceleration_valid)
}

// optional float acceleration = 16 [default = 0];
inline bool Chassis::has_acceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chassis::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float Chassis::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.acceleration)
  return acceleration_;
}
inline void Chassis::set_acceleration(float value) {
  _has_bits_[0] |= 0x00004000u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.acceleration)
}

// optional bool yaw_rate_valid = 17 [default = false];
inline bool Chassis::has_yaw_rate_valid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Chassis::clear_yaw_rate_valid() {
  yaw_rate_valid_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Chassis::yaw_rate_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.yaw_rate_valid)
  return yaw_rate_valid_;
}
inline void Chassis::set_yaw_rate_valid(bool value) {
  _has_bits_[0] |= 0x00020000u;
  yaw_rate_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.yaw_rate_valid)
}

// optional float yaw_rate = 18 [default = 0];
inline bool Chassis::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chassis::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Chassis::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.yaw_rate)
  return yaw_rate_;
}
inline void Chassis::set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00008000u;
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.yaw_rate)
}

// optional bool ax_valid = 19 [default = false];
inline bool Chassis::has_ax_valid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Chassis::clear_ax_valid() {
  ax_valid_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool Chassis::ax_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.ax_valid)
  return ax_valid_;
}
inline void Chassis::set_ax_valid(bool value) {
  _has_bits_[0] |= 0x00040000u;
  ax_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.ax_valid)
}

// optional float ax = 20 [default = 0];
inline bool Chassis::has_ax() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Chassis::clear_ax() {
  ax_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float Chassis::ax() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.ax)
  return ax_;
}
inline void Chassis::set_ax(float value) {
  _has_bits_[0] |= 0x00100000u;
  ax_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.ax)
}

// optional bool ay_valid = 21 [default = false];
inline bool Chassis::has_ay_valid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Chassis::clear_ay_valid() {
  ay_valid_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool Chassis::ay_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.ay_valid)
  return ay_valid_;
}
inline void Chassis::set_ay_valid(bool value) {
  _has_bits_[0] |= 0x00080000u;
  ay_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.ay_valid)
}

// optional float ay = 22 [default = 0];
inline bool Chassis::has_ay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Chassis::clear_ay() {
  ay_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float Chassis::ay() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.ay)
  return ay_;
}
inline void Chassis::set_ay(float value) {
  _has_bits_[0] |= 0x00200000u;
  ay_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.ay)
}

// optional bool wheel_speed_fl_valid = 23 [default = false];
inline bool Chassis::has_wheel_speed_fl_valid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Chassis::clear_wheel_speed_fl_valid() {
  wheel_speed_fl_valid_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool Chassis::wheel_speed_fl_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_fl_valid)
  return wheel_speed_fl_valid_;
}
inline void Chassis::set_wheel_speed_fl_valid(bool value) {
  _has_bits_[0] |= 0x01000000u;
  wheel_speed_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_fl_valid)
}

// optional float wheel_speed_fl = 24 [default = 0];
inline bool Chassis::has_wheel_speed_fl() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Chassis::clear_wheel_speed_fl() {
  wheel_speed_fl_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float Chassis::wheel_speed_fl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_fl)
  return wheel_speed_fl_;
}
inline void Chassis::set_wheel_speed_fl(float value) {
  _has_bits_[0] |= 0x00400000u;
  wheel_speed_fl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_fl)
}

// optional bool wheel_speed_fr_valid = 25 [default = false];
inline bool Chassis::has_wheel_speed_fr_valid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Chassis::clear_wheel_speed_fr_valid() {
  wheel_speed_fr_valid_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool Chassis::wheel_speed_fr_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_fr_valid)
  return wheel_speed_fr_valid_;
}
inline void Chassis::set_wheel_speed_fr_valid(bool value) {
  _has_bits_[0] |= 0x02000000u;
  wheel_speed_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_fr_valid)
}

// optional float wheel_speed_fr = 26 [default = 0];
inline bool Chassis::has_wheel_speed_fr() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Chassis::clear_wheel_speed_fr() {
  wheel_speed_fr_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float Chassis::wheel_speed_fr() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_fr)
  return wheel_speed_fr_;
}
inline void Chassis::set_wheel_speed_fr(float value) {
  _has_bits_[0] |= 0x00800000u;
  wheel_speed_fr_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_fr)
}

// optional bool wheel_speed_rl_valid = 27 [default = false];
inline bool Chassis::has_wheel_speed_rl_valid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rl_valid() {
  wheel_speed_rl_valid_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool Chassis::wheel_speed_rl_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rl_valid)
  return wheel_speed_rl_valid_;
}
inline void Chassis::set_wheel_speed_rl_valid(bool value) {
  _has_bits_[0] |= 0x04000000u;
  wheel_speed_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rl_valid)
}

// optional float wheel_speed_rl = 28 [default = 0];
inline bool Chassis::has_wheel_speed_rl() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rl() {
  wheel_speed_rl_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float Chassis::wheel_speed_rl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rl)
  return wheel_speed_rl_;
}
inline void Chassis::set_wheel_speed_rl(float value) {
  _has_bits_[0] |= 0x10000000u;
  wheel_speed_rl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rl)
}

// optional bool wheel_speed_rr_valid = 29 [default = false];
inline bool Chassis::has_wheel_speed_rr_valid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rr_valid() {
  wheel_speed_rr_valid_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool Chassis::wheel_speed_rr_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rr_valid)
  return wheel_speed_rr_valid_;
}
inline void Chassis::set_wheel_speed_rr_valid(bool value) {
  _has_bits_[0] |= 0x08000000u;
  wheel_speed_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rr_valid)
}

// optional float wheel_speed_rr = 30 [default = 0];
inline bool Chassis::has_wheel_speed_rr() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rr() {
  wheel_speed_rr_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float Chassis::wheel_speed_rr() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rr)
  return wheel_speed_rr_;
}
inline void Chassis::set_wheel_speed_rr(float value) {
  _has_bits_[0] |= 0x20000000u;
  wheel_speed_rr_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rr)
}

// optional bool wheel_speed_rl2_valid = 31 [default = false];
inline bool Chassis::has_wheel_speed_rl2_valid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Chassis::clear_wheel_speed_rl2_valid() {
  wheel_speed_rl2_valid_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool Chassis::wheel_speed_rl2_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rl2_valid)
  return wheel_speed_rl2_valid_;
}
inline void Chassis::set_wheel_speed_rl2_valid(bool value) {
  _has_bits_[1] |= 0x00000010u;
  wheel_speed_rl2_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rl2_valid)
}

// optional float wheel_speed_rl2 = 32 [default = 0];
inline bool Chassis::has_wheel_speed_rl2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rl2() {
  wheel_speed_rl2_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float Chassis::wheel_speed_rl2() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rl2)
  return wheel_speed_rl2_;
}
inline void Chassis::set_wheel_speed_rl2(float value) {
  _has_bits_[0] |= 0x40000000u;
  wheel_speed_rl2_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rl2)
}

// optional bool wheel_speed_rr2_valid = 33 [default = false];
inline bool Chassis::has_wheel_speed_rr2_valid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Chassis::clear_wheel_speed_rr2_valid() {
  wheel_speed_rr2_valid_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool Chassis::wheel_speed_rr2_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rr2_valid)
  return wheel_speed_rr2_valid_;
}
inline void Chassis::set_wheel_speed_rr2_valid(bool value) {
  _has_bits_[1] |= 0x00000020u;
  wheel_speed_rr2_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rr2_valid)
}

// optional float wheel_speed_rr2 = 34 [default = 0];
inline bool Chassis::has_wheel_speed_rr2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Chassis::clear_wheel_speed_rr2() {
  wheel_speed_rr2_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float Chassis::wheel_speed_rr2() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.wheel_speed_rr2)
  return wheel_speed_rr2_;
}
inline void Chassis::set_wheel_speed_rr2(float value) {
  _has_bits_[0] |= 0x80000000u;
  wheel_speed_rr2_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.wheel_speed_rr2)
}

// optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
inline bool Chassis::has_epb_status() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Chassis::clear_epb_status() {
  epb_status_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::phoenix::msg::control::Chassis_EpbStatus Chassis::epb_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.epb_status)
  return static_cast< ::phoenix::msg::control::Chassis_EpbStatus >(epb_status_);
}
inline void Chassis::set_epb_status(::phoenix::msg::control::Chassis_EpbStatus value) {
  assert(::phoenix::msg::control::Chassis_EpbStatus_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.epb_status)
}

// optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
inline bool Chassis::has_gear() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Chassis::clear_gear() {
  gear_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::phoenix::msg::control::Chassis_GearPosition Chassis::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.gear)
  return static_cast< ::phoenix::msg::control::Chassis_GearPosition >(gear_);
}
inline void Chassis::set_gear(::phoenix::msg::control::Chassis_GearPosition value) {
  assert(::phoenix::msg::control::Chassis_GearPosition_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.gear)
}

// optional int32 gear_number = 37 [default = 0];
inline bool Chassis::has_gear_number() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Chassis::clear_gear_number() {
  gear_number_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chassis::gear_number() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.gear_number)
  return gear_number_;
}
inline void Chassis::set_gear_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  gear_number_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.gear_number)
}

// optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
inline bool Chassis::has_signal_turning_indicator() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Chassis::clear_signal_turning_indicator() {
  signal_turning_indicator_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::phoenix::msg::control::Chassis_SignalTurningIndicator Chassis::signal_turning_indicator() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.signal_turning_indicator)
  return static_cast< ::phoenix::msg::control::Chassis_SignalTurningIndicator >(signal_turning_indicator_);
}
inline void Chassis::set_signal_turning_indicator(::phoenix::msg::control::Chassis_SignalTurningIndicator value) {
  assert(::phoenix::msg::control::Chassis_SignalTurningIndicator_IsValid(value));
  _has_bits_[1] |= 0x00000008u;
  signal_turning_indicator_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.signal_turning_indicator)
}

// optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
inline bool Chassis::has_signal_turn_lamp() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Chassis::clear_signal_turn_lamp() {
  signal_turn_lamp_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::phoenix::msg::control::Chassis_SignalTurnLamp Chassis::signal_turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.signal_turn_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(signal_turn_lamp_);
}
inline void Chassis::set_signal_turn_lamp(::phoenix::msg::control::Chassis_SignalTurnLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  signal_turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.signal_turn_lamp)
}

// optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
inline bool Chassis::has_signal_brake_lamp() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Chassis::clear_signal_brake_lamp() {
  signal_brake_lamp_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::phoenix::msg::control::Chassis_SignalLamp Chassis::signal_brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.signal_brake_lamp)
  return static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(signal_brake_lamp_);
}
inline void Chassis::set_signal_brake_lamp(::phoenix::msg::control::Chassis_SignalLamp value) {
  assert(::phoenix::msg::control::Chassis_SignalLamp_IsValid(value));
  _has_bits_[1] |= 0x00000200u;
  signal_brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.signal_brake_lamp)
}

// optional int32 brake_pedal_value = 41 [default = 0];
inline bool Chassis::has_brake_pedal_value() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Chassis::clear_brake_pedal_value() {
  brake_pedal_value_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chassis::brake_pedal_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.brake_pedal_value)
  return brake_pedal_value_;
}
inline void Chassis::set_brake_pedal_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  brake_pedal_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.brake_pedal_value)
}

// optional int32 acc_pedal_value = 42 [default = 0];
inline bool Chassis::has_acc_pedal_value() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Chassis::clear_acc_pedal_value() {
  acc_pedal_value_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chassis::acc_pedal_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.acc_pedal_value)
  return acc_pedal_value_;
}
inline void Chassis::set_acc_pedal_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  acc_pedal_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.acc_pedal_value)
}

// optional bool engine_speed_valid = 43 [default = false];
inline bool Chassis::has_engine_speed_valid() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Chassis::clear_engine_speed_valid() {
  engine_speed_valid_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool Chassis::engine_speed_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.engine_speed_valid)
  return engine_speed_valid_;
}
inline void Chassis::set_engine_speed_valid(bool value) {
  _has_bits_[1] |= 0x00000040u;
  engine_speed_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.engine_speed_valid)
}

// optional float engine_speed = 44 [default = 0];
inline bool Chassis::has_engine_speed() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Chassis::clear_engine_speed() {
  engine_speed_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float Chassis::engine_speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.engine_speed)
  return engine_speed_;
}
inline void Chassis::set_engine_speed(float value) {
  _has_bits_[1] |= 0x00001000u;
  engine_speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.engine_speed)
}

// optional bool engine_torque_valid = 45 [default = false];
inline bool Chassis::has_engine_torque_valid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Chassis::clear_engine_torque_valid() {
  engine_torque_valid_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool Chassis::engine_torque_valid() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.engine_torque_valid)
  return engine_torque_valid_;
}
inline void Chassis::set_engine_torque_valid(bool value) {
  _has_bits_[1] |= 0x00000080u;
  engine_torque_valid_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.engine_torque_valid)
}

// optional float engine_torque = 46 [default = 0];
inline bool Chassis::has_engine_torque() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Chassis::clear_engine_torque() {
  engine_torque_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float Chassis::engine_torque() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.Chassis.engine_torque)
  return engine_torque_;
}
inline void Chassis::set_engine_torque(float value) {
  _has_bits_[1] |= 0x00002000u;
  engine_torque_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.Chassis.engine_torque)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_DrivingMode>() {
  return ::phoenix::msg::control::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_EStop> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_EStop>() {
  return ::phoenix::msg::control::Chassis_EStop_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_EpsStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_EpsStatus>() {
  return ::phoenix::msg::control::Chassis_EpsStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_ThrottleSysStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_ThrottleSysStatus>() {
  return ::phoenix::msg::control::Chassis_ThrottleSysStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_EbsStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_EbsStatus>() {
  return ::phoenix::msg::control::Chassis_EbsStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_GearPosition>() {
  return ::phoenix::msg::control::Chassis_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_SignalLamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_SignalLamp>() {
  return ::phoenix::msg::control::Chassis_SignalLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_SignalTurnLamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_SignalTurnLamp>() {
  return ::phoenix::msg::control::Chassis_SignalTurnLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_SignalTurningIndicator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_SignalTurningIndicator>() {
  return ::phoenix::msg::control::Chassis_SignalTurningIndicator_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::Chassis_EpbStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::Chassis_EpbStatus>() {
  return ::phoenix::msg::control::Chassis_EpbStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chassis_2eproto
