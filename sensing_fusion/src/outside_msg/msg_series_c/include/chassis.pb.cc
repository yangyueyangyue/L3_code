// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class ChassisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chassis> _instance;
} _Chassis_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_Chassis_chassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::control::_Chassis_default_instance_;
    new (ptr) ::phoenix::msg::control::Chassis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::control::Chassis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Chassis_chassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Chassis_chassis_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chassis_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chassis_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chassis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, e_stop_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, eps_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, throttle_sys_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, ebs_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_speed_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_torque_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, steering_wheel_torque_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, velocity_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, velocity_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, acceleration_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, acceleration_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, yaw_rate_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, ax_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, ax_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, ay_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, ay_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_fr_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl2_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rl2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr2_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, wheel_speed_rr2_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, epb_status_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, gear_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, gear_number_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_turning_indicator_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_turn_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, signal_brake_lamp_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, brake_pedal_value_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, acc_pedal_value_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_speed_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_speed_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_torque_valid_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::control::Chassis, engine_torque_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  9,
  7,
  10,
  12,
  11,
  13,
  16,
  14,
  17,
  15,
  18,
  20,
  19,
  21,
  24,
  22,
  25,
  23,
  26,
  28,
  27,
  29,
  36,
  30,
  37,
  31,
  32,
  33,
  34,
  35,
  40,
  41,
  42,
  43,
  38,
  44,
  39,
  45,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 51, sizeof(::phoenix::msg::control::Chassis)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::control::_Chassis_default_instance_),
};

const char descriptor_table_protodef_chassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rchassis.proto\022\023phoenix.msg.control\032\014he"
  "ader.proto\"\303\027\n\007Chassis\022*\n\006header\030\001 \001(\0132\032"
  ".phoenix.msg.common.Header\022T\n\014driving_mo"
  "de\030\002 \001(\0162(.phoenix.msg.control.Chassis.D"
  "rivingMode:\024DRIVING_MODE_INVALID\022B\n\006e_st"
  "op\030\003 \001(\0162\".phoenix.msg.control.Chassis.E"
  "Stop:\016E_STOP_INVALID\022N\n\neps_status\030\004 \001(\016"
  "2&.phoenix.msg.control.Chassis.EpsStatus"
  ":\022EPS_STATUS_INVALID\022h\n\023throttle_sys_sta"
  "tus\030\005 \001(\0162..phoenix.msg.control.Chassis."
  "ThrottleSysStatus:\033THROTTLE_SYS_STATUS_I"
  "NVALID\022N\n\nebs_status\030\006 \001(\0162&.phoenix.msg"
  ".control.Chassis.EbsStatus:\022EBS_STATUS_I"
  "NVALID\022)\n\032steering_wheel_angle_valid\030\007 \001"
  "(\010:\005false\022\037\n\024steering_wheel_angle\030\010 \001(\002:"
  "\0010\022)\n\032steering_wheel_speed_valid\030\t \001(\010:\005"
  "false\022\037\n\024steering_wheel_speed\030\n \001(\002:\0010\022*"
  "\n\033steering_wheel_torque_valid\030\013 \001(\010:\005fal"
  "se\022 \n\025steering_wheel_torque\030\014 \001(\002:\0010\022\035\n\016"
  "velocity_valid\030\r \001(\010:\005false\022\023\n\010velocity\030"
  "\016 \001(\002:\0010\022!\n\022acceleration_valid\030\017 \001(\010:\005fa"
  "lse\022\027\n\014acceleration\030\020 \001(\002:\0010\022\035\n\016yaw_rate"
  "_valid\030\021 \001(\010:\005false\022\023\n\010yaw_rate\030\022 \001(\002:\0010"
  "\022\027\n\010ax_valid\030\023 \001(\010:\005false\022\r\n\002ax\030\024 \001(\002:\0010"
  "\022\027\n\010ay_valid\030\025 \001(\010:\005false\022\r\n\002ay\030\026 \001(\002:\0010"
  "\022#\n\024wheel_speed_fl_valid\030\027 \001(\010:\005false\022\031\n"
  "\016wheel_speed_fl\030\030 \001(\002:\0010\022#\n\024wheel_speed_"
  "fr_valid\030\031 \001(\010:\005false\022\031\n\016wheel_speed_fr\030"
  "\032 \001(\002:\0010\022#\n\024wheel_speed_rl_valid\030\033 \001(\010:\005"
  "false\022\031\n\016wheel_speed_rl\030\034 \001(\002:\0010\022#\n\024whee"
  "l_speed_rr_valid\030\035 \001(\010:\005false\022\031\n\016wheel_s"
  "peed_rr\030\036 \001(\002:\0010\022$\n\025wheel_speed_rl2_vali"
  "d\030\037 \001(\010:\005false\022\032\n\017wheel_speed_rl2\030  \001(\002:"
  "\0010\022$\n\025wheel_speed_rr2_valid\030! \001(\010:\005false"
  "\022\032\n\017wheel_speed_rr2\030\" \001(\002:\0010\022N\n\nepb_stat"
  "us\030# \001(\0162&.phoenix.msg.control.Chassis.E"
  "pbStatus:\022EPB_STATUS_INVALID\022E\n\004gear\030$ \001"
  "(\0162).phoenix.msg.control.Chassis.GearPos"
  "ition:\014GEAR_INVALID\022\026\n\013gear_number\030% \001(\005"
  ":\0010\022p\n\030signal_turning_indicator\030& \001(\01623."
  "phoenix.msg.control.Chassis.SignalTurnin"
  "gIndicator:\031TURNING_INDICATOR_INVALID\022X\n"
  "\020signal_turn_lamp\030\' \001(\0162+.phoenix.msg.co"
  "ntrol.Chassis.SignalTurnLamp:\021TURN_LAMP_"
  "INVALID\022P\n\021signal_brake_lamp\030( \001(\0162\'.pho"
  "enix.msg.control.Chassis.SignalLamp:\014LAM"
  "P_INVALID\022\034\n\021brake_pedal_value\030) \001(\005:\0010\022"
  "\032\n\017acc_pedal_value\030* \001(\005:\0010\022!\n\022engine_sp"
  "eed_valid\030+ \001(\010:\005false\022\027\n\014engine_speed\030,"
  " \001(\002:\0010\022\"\n\023engine_torque_valid\030- \001(\010:\005fa"
  "lse\022\030\n\rengine_torque\030. \001(\002:\0010\"Z\n\013Driving"
  "Mode\022\030\n\024DRIVING_MODE_INVALID\020\000\022\027\n\023DRIVIN"
  "G_MODE_MANUAL\020\001\022\030\n\024DRIVING_MODE_ROBOTIC\020"
  "\002\":\n\005EStop\022\022\n\016E_STOP_INVALID\020\000\022\016\n\nE_STOP"
  "_OFF\020\001\022\r\n\tE_STOP_ON\020\002\"\211\001\n\tEpsStatus\022\026\n\022E"
  "PS_STATUS_INVALID\020\000\022\025\n\021EPS_STATUS_MANUAL"
  "\020\001\022\026\n\022EPS_STATUS_ROBOTIC\020\002\022\037\n\033EPS_STATUS"
  "_MANUAL_INTERRUPT\020\003\022\024\n\020EPS_STATUS_ERROR\020"
  "\004\"\224\001\n\021ThrottleSysStatus\022\037\n\033THROTTLE_SYS_"
  "STATUS_INVALID\020\000\022\036\n\032THROTTLE_SYS_STATUS_"
  "MANUAL\020\001\022\037\n\033THROTTLE_SYS_STATUS_ROBOTIC\020"
  "\002\022\035\n\031THROTTLE_SYS_STATUS_ERROR\020\003\"h\n\tEbsS"
  "tatus\022\026\n\022EBS_STATUS_INVALID\020\000\022\025\n\021EBS_STA"
  "TUS_MANUAL\020\001\022\026\n\022EBS_STATUS_ROBOTIC\020\002\022\024\n\020"
  "EBS_STATUS_ERROR\020\003\"P\n\014GearPosition\022\020\n\014GE"
  "AR_INVALID\020\000\022\n\n\006GEAR_P\020\001\022\n\n\006GEAR_N\020\002\022\n\n\006"
  "GEAR_R\020\003\022\n\n\006GEAR_D\020\004\"9\n\nSignalLamp\022\020\n\014LA"
  "MP_INVALID\020\000\022\014\n\010LAMP_OFF\020\001\022\013\n\007LAMP_ON\020\002\""
  "|\n\016SignalTurnLamp\022\025\n\021TURN_LAMP_INVALID\020\000"
  "\022\021\n\rTURN_LAMP_OFF\020\001\022\022\n\016TURN_LAMP_LEFT\020\002\022"
  "\023\n\017TURN_LAMP_RIGHT\020\003\022\027\n\023TURN_LAMP_EMERGE"
  "NCY\020\004\"\214\001\n\026SignalTurningIndicator\022\035\n\031TURN"
  "ING_INDICATOR_INVALID\020\000\022\032\n\026TURNING_INDIC"
  "ATOR_NONE\020\001\022\032\n\026TURNING_INDICATOR_LEFT\020\002\022"
  "\033\n\027TURNING_INDICATOR_RIGHT\020\003\"J\n\tEpbStatu"
  "s\022\026\n\022EPB_STATUS_INVALID\020\000\022\022\n\016EPB_STATUS_"
  "OFF\020\001\022\021\n\rEPB_STATUS_ON\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chassis_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chassis_2eproto_sccs[1] = {
  &scc_info_Chassis_chassis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chassis_2eproto_once;
static bool descriptor_table_chassis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_2eproto = {
  &descriptor_table_chassis_2eproto_initialized, descriptor_table_protodef_chassis_2eproto, "chassis.proto", 3064,
  &descriptor_table_chassis_2eproto_once, descriptor_table_chassis_2eproto_sccs, descriptor_table_chassis_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_chassis_2eproto::offsets,
  file_level_metadata_chassis_2eproto, 1, file_level_enum_descriptors_chassis_2eproto, file_level_service_descriptors_chassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chassis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chassis_2eproto), true);
namespace phoenix {
namespace msg {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_DrivingMode Chassis::DRIVING_MODE_INVALID;
constexpr Chassis_DrivingMode Chassis::DRIVING_MODE_MANUAL;
constexpr Chassis_DrivingMode Chassis::DRIVING_MODE_ROBOTIC;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EStop_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[1];
}
bool Chassis_EStop_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_EStop Chassis::E_STOP_INVALID;
constexpr Chassis_EStop Chassis::E_STOP_OFF;
constexpr Chassis_EStop Chassis::E_STOP_ON;
constexpr Chassis_EStop Chassis::EStop_MIN;
constexpr Chassis_EStop Chassis::EStop_MAX;
constexpr int Chassis::EStop_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EpsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[2];
}
bool Chassis_EpsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_EpsStatus Chassis::EPS_STATUS_INVALID;
constexpr Chassis_EpsStatus Chassis::EPS_STATUS_MANUAL;
constexpr Chassis_EpsStatus Chassis::EPS_STATUS_ROBOTIC;
constexpr Chassis_EpsStatus Chassis::EPS_STATUS_MANUAL_INTERRUPT;
constexpr Chassis_EpsStatus Chassis::EPS_STATUS_ERROR;
constexpr Chassis_EpsStatus Chassis::EpsStatus_MIN;
constexpr Chassis_EpsStatus Chassis::EpsStatus_MAX;
constexpr int Chassis::EpsStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ThrottleSysStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[3];
}
bool Chassis_ThrottleSysStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_INVALID;
constexpr Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_MANUAL;
constexpr Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_ROBOTIC;
constexpr Chassis_ThrottleSysStatus Chassis::THROTTLE_SYS_STATUS_ERROR;
constexpr Chassis_ThrottleSysStatus Chassis::ThrottleSysStatus_MIN;
constexpr Chassis_ThrottleSysStatus Chassis::ThrottleSysStatus_MAX;
constexpr int Chassis::ThrottleSysStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EbsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[4];
}
bool Chassis_EbsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_EbsStatus Chassis::EBS_STATUS_INVALID;
constexpr Chassis_EbsStatus Chassis::EBS_STATUS_MANUAL;
constexpr Chassis_EbsStatus Chassis::EBS_STATUS_ROBOTIC;
constexpr Chassis_EbsStatus Chassis::EBS_STATUS_ERROR;
constexpr Chassis_EbsStatus Chassis::EbsStatus_MIN;
constexpr Chassis_EbsStatus Chassis::EbsStatus_MAX;
constexpr int Chassis::EbsStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[5];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GEAR_P;
constexpr Chassis_GearPosition Chassis::GEAR_N;
constexpr Chassis_GearPosition Chassis::GEAR_R;
constexpr Chassis_GearPosition Chassis::GEAR_D;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[6];
}
bool Chassis_SignalLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_SignalLamp Chassis::LAMP_INVALID;
constexpr Chassis_SignalLamp Chassis::LAMP_OFF;
constexpr Chassis_SignalLamp Chassis::LAMP_ON;
constexpr Chassis_SignalLamp Chassis::SignalLamp_MIN;
constexpr Chassis_SignalLamp Chassis::SignalLamp_MAX;
constexpr int Chassis::SignalLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalTurnLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[7];
}
bool Chassis_SignalTurnLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_SignalTurnLamp Chassis::TURN_LAMP_INVALID;
constexpr Chassis_SignalTurnLamp Chassis::TURN_LAMP_OFF;
constexpr Chassis_SignalTurnLamp Chassis::TURN_LAMP_LEFT;
constexpr Chassis_SignalTurnLamp Chassis::TURN_LAMP_RIGHT;
constexpr Chassis_SignalTurnLamp Chassis::TURN_LAMP_EMERGENCY;
constexpr Chassis_SignalTurnLamp Chassis::SignalTurnLamp_MIN;
constexpr Chassis_SignalTurnLamp Chassis::SignalTurnLamp_MAX;
constexpr int Chassis::SignalTurnLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_SignalTurningIndicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[8];
}
bool Chassis_SignalTurningIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_INVALID;
constexpr Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_NONE;
constexpr Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_LEFT;
constexpr Chassis_SignalTurningIndicator Chassis::TURNING_INDICATOR_RIGHT;
constexpr Chassis_SignalTurningIndicator Chassis::SignalTurningIndicator_MIN;
constexpr Chassis_SignalTurningIndicator Chassis::SignalTurningIndicator_MAX;
constexpr int Chassis::SignalTurningIndicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_EpbStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[9];
}
bool Chassis_EpbStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_EpbStatus Chassis::EPB_STATUS_INVALID;
constexpr Chassis_EpbStatus Chassis::EPB_STATUS_OFF;
constexpr Chassis_EpbStatus Chassis::EPB_STATUS_ON;
constexpr Chassis_EpbStatus Chassis::EpbStatus_MIN;
constexpr Chassis_EpbStatus Chassis::EpbStatus_MAX;
constexpr int Chassis::EpbStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::phoenix::msg::control::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class Chassis::_Internal {
 public:
  using HasBits = decltype(std::declval<Chassis>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const Chassis* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_e_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttle_sys_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ebs_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_steering_wheel_angle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steering_wheel_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steering_wheel_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steering_wheel_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steering_wheel_torque_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steering_wheel_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_velocity_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acceleration_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yaw_rate_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ax_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ax(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ay_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ay(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_wheel_speed_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_wheel_speed_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_wheel_speed_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_wheel_speed_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_wheel_speed_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_wheel_speed_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_wheel_speed_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_wheel_speed_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_wheel_speed_rl2_valid(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_wheel_speed_rl2(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_wheel_speed_rr2_valid(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_wheel_speed_rr2(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_epb_status(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_gear_number(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_signal_turning_indicator(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_signal_turn_lamp(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_signal_brake_lamp(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_brake_pedal_value(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_acc_pedal_value(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_engine_speed_valid(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_engine_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_engine_torque_valid(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_engine_torque(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
};

const ::phoenix::msg::common::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->header_;
}
void Chassis::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Chassis::Chassis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.control.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&driving_mode_, &from.driving_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_torque_) -
    reinterpret_cast<char*>(&driving_mode_)) + sizeof(engine_torque_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.control.Chassis)
}

void Chassis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chassis_chassis_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_torque_) -
      reinterpret_cast<char*>(&header_)) + sizeof(engine_torque_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:phoenix.msg.control.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chassis_chassis_2eproto.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.control.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&driving_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_wheel_speed_) -
        reinterpret_cast<char*>(&driving_mode_)) + sizeof(steering_wheel_speed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steering_wheel_angle_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_rate_) -
        reinterpret_cast<char*>(&steering_wheel_angle_valid_)) + sizeof(yaw_rate_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&acceleration_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_speed_fr_) -
        reinterpret_cast<char*>(&acceleration_valid_)) + sizeof(wheel_speed_fr_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&wheel_speed_fl_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_speed_rr2_) -
        reinterpret_cast<char*>(&wheel_speed_fl_valid_)) + sizeof(wheel_speed_rr2_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&epb_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_torque_valid_) -
        reinterpret_cast<char*>(&epb_status_)) + sizeof(engine_torque_valid_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&signal_turn_lamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_torque_) -
        reinterpret_cast<char*>(&signal_turn_lamp_)) + sizeof(engine_torque_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Chassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_DrivingMode_IsValid(val))) {
            set_driving_mode(static_cast<::phoenix::msg::control::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_EStop_IsValid(val))) {
            set_e_stop(static_cast<::phoenix::msg::control::Chassis_EStop>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_EpsStatus_IsValid(val))) {
            set_eps_status(static_cast<::phoenix::msg::control::Chassis_EpsStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_ThrottleSysStatus_IsValid(val))) {
            set_throttle_sys_status(static_cast<::phoenix::msg::control::Chassis_ThrottleSysStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_EbsStatus_IsValid(val))) {
            set_ebs_status(static_cast<::phoenix::msg::control::Chassis_EbsStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool steering_wheel_angle_valid = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_steering_wheel_angle_valid(&_has_bits_);
          steering_wheel_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_angle = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_steering_wheel_angle(&_has_bits_);
          steering_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool steering_wheel_speed_valid = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_steering_wheel_speed_valid(&_has_bits_);
          steering_wheel_speed_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_speed = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_steering_wheel_speed(&_has_bits_);
          steering_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool steering_wheel_torque_valid = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_steering_wheel_torque_valid(&_has_bits_);
          steering_wheel_torque_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steering_wheel_torque = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_steering_wheel_torque(&_has_bits_);
          steering_wheel_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool velocity_valid = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_velocity_valid(&_has_bits_);
          velocity_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float velocity = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_velocity(&_has_bits_);
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool acceleration_valid = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_acceleration_valid(&_has_bits_);
          acceleration_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float acceleration = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_acceleration(&_has_bits_);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool yaw_rate_valid = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_yaw_rate_valid(&_has_bits_);
          yaw_rate_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_yaw_rate(&_has_bits_);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool ax_valid = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ax_valid(&_has_bits_);
          ax_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ax = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ax(&_has_bits_);
          ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool ay_valid = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ay_valid(&_has_bits_);
          ay_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ay = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ay(&_has_bits_);
          ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_fl_valid = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_wheel_speed_fl_valid(&_has_bits_);
          wheel_speed_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_fl = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_wheel_speed_fl(&_has_bits_);
          wheel_speed_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_fr_valid = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_wheel_speed_fr_valid(&_has_bits_);
          wheel_speed_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_fr = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_wheel_speed_fr(&_has_bits_);
          wheel_speed_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_rl_valid = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_wheel_speed_rl_valid(&_has_bits_);
          wheel_speed_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_rl = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_wheel_speed_rl(&_has_bits_);
          wheel_speed_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_rr_valid = 29 [default = false];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_wheel_speed_rr_valid(&_has_bits_);
          wheel_speed_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_rr = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_wheel_speed_rr(&_has_bits_);
          wheel_speed_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_rl2_valid = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_wheel_speed_rl2_valid(&_has_bits_);
          wheel_speed_rl2_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_rl2 = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_wheel_speed_rl2(&_has_bits_);
          wheel_speed_rl2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wheel_speed_rr2_valid = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wheel_speed_rr2_valid(&_has_bits_);
          wheel_speed_rr2_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheel_speed_rr2 = 34 [default = 0];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_wheel_speed_rr2(&_has_bits_);
          wheel_speed_rr2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_EpbStatus_IsValid(val))) {
            set_epb_status(static_cast<::phoenix::msg::control::Chassis_EpbStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_GearPosition_IsValid(val))) {
            set_gear(static_cast<::phoenix::msg::control::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 gear_number = 37 [default = 0];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gear_number(&_has_bits_);
          gear_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalTurningIndicator_IsValid(val))) {
            set_signal_turning_indicator(static_cast<::phoenix::msg::control::Chassis_SignalTurningIndicator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(38, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(val))) {
            set_signal_turn_lamp(static_cast<::phoenix::msg::control::Chassis_SignalTurnLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(39, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::control::Chassis_SignalLamp_IsValid(val))) {
            set_signal_brake_lamp(static_cast<::phoenix::msg::control::Chassis_SignalLamp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 brake_pedal_value = 41 [default = 0];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_brake_pedal_value(&_has_bits_);
          brake_pedal_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acc_pedal_value = 42 [default = 0];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_acc_pedal_value(&_has_bits_);
          acc_pedal_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool engine_speed_valid = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_engine_speed_valid(&_has_bits_);
          engine_speed_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float engine_speed = 44 [default = 0];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_engine_speed(&_has_bits_);
          engine_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool engine_torque_valid = 45 [default = false];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_engine_torque_valid(&_has_bits_);
          engine_torque_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float engine_torque = 46 [default = 0];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_engine_torque(&_has_bits_);
          engine_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Chassis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.control.Chassis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::phoenix::msg::control::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EStop_IsValid(value)) {
            set_e_stop(static_cast< ::phoenix::msg::control::Chassis_EStop >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EpsStatus_IsValid(value)) {
            set_eps_status(static_cast< ::phoenix::msg::control::Chassis_EpsStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_ThrottleSysStatus_IsValid(value)) {
            set_throttle_sys_status(static_cast< ::phoenix::msg::control::Chassis_ThrottleSysStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EbsStatus_IsValid(value)) {
            set_ebs_status(static_cast< ::phoenix::msg::control::Chassis_EbsStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_angle_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_steering_wheel_angle_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_angle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_angle = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_steering_wheel_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_speed_valid = 9 [default = false];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_steering_wheel_speed_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_speed_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_speed = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_steering_wheel_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_wheel_torque_valid = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_steering_wheel_torque_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_wheel_torque_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_wheel_torque = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_steering_wheel_torque(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_wheel_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool velocity_valid = 13 [default = false];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_velocity_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocity_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_velocity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acceleration_valid = 15 [default = false];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_acceleration_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceleration_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 16 [default = 0];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_acceleration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yaw_rate_valid = 17 [default = false];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_yaw_rate_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_rate = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {
          _Internal::set_has_yaw_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ax_valid = 19 [default = false];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_ax_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ax_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ax = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          _Internal::set_has_ax(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ay_valid = 21 [default = false];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_ay_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ay = 22 [default = 0];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          _Internal::set_has_ay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_fl_valid = 23 [default = false];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_wheel_speed_fl_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_fl = 24 [default = 0];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (197 & 0xFF)) {
          _Internal::set_has_wheel_speed_fl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_fr_valid = 25 [default = false];
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_wheel_speed_fr_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_fr = 26 [default = 0];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (213 & 0xFF)) {
          _Internal::set_has_wheel_speed_fr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rl_valid = 27 [default = false];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_wheel_speed_rl_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rl = 28 [default = 0];
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (229 & 0xFF)) {
          _Internal::set_has_wheel_speed_rl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rr_valid = 29 [default = false];
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_wheel_speed_rr_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rr = 30 [default = 0];
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (245 & 0xFF)) {
          _Internal::set_has_wheel_speed_rr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rl2_valid = 31 [default = false];
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_wheel_speed_rl2_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rl2_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rl2 = 32 [default = 0];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (261 & 0xFF)) {
          _Internal::set_has_wheel_speed_rl2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rl2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wheel_speed_rr2_valid = 33 [default = false];
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_wheel_speed_rr2_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheel_speed_rr2_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed_rr2 = 34 [default = 0];
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (277 & 0xFF)) {
          _Internal::set_has_wheel_speed_rr2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rr2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_EpbStatus_IsValid(value)) {
            set_epb_status(static_cast< ::phoenix::msg::control::Chassis_EpbStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                35, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::phoenix::msg::control::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gear_number = 37 [default = 0];
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_gear_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurningIndicator_IsValid(value)) {
            set_signal_turning_indicator(static_cast< ::phoenix::msg::control::Chassis_SignalTurningIndicator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                38, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalTurnLamp_IsValid(value)) {
            set_signal_turn_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalTurnLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                39, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::control::Chassis_SignalLamp_IsValid(value)) {
            set_signal_brake_lamp(static_cast< ::phoenix::msg::control::Chassis_SignalLamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 brake_pedal_value = 41 [default = 0];
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_brake_pedal_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_pedal_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acc_pedal_value = 42 [default = 0];
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_acc_pedal_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_pedal_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_speed_valid = 43 [default = false];
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {
          _Internal::set_has_engine_speed_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_speed_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_speed = 44 [default = 0];
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (357 & 0xFF)) {
          _Internal::set_has_engine_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool engine_torque_valid = 45 [default = false];
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          _Internal::set_has_engine_torque_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_torque_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_torque = 46 [default = 0];
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (373 & 0xFF)) {
          _Internal::set_has_engine_torque(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.control.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.control.Chassis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Chassis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.control.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->driving_mode(), output);
  }

  // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->e_stop(), output);
  }

  // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->eps_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->throttle_sys_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->ebs_status(), output);
  }

  // optional bool steering_wheel_angle_valid = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->steering_wheel_angle_valid(), output);
  }

  // optional float steering_wheel_angle = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->steering_wheel_angle(), output);
  }

  // optional bool steering_wheel_speed_valid = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->steering_wheel_speed_valid(), output);
  }

  // optional float steering_wheel_speed = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->steering_wheel_speed(), output);
  }

  // optional bool steering_wheel_torque_valid = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->steering_wheel_torque_valid(), output);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->steering_wheel_torque(), output);
  }

  // optional bool velocity_valid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->velocity_valid(), output);
  }

  // optional float velocity = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->velocity(), output);
  }

  // optional bool acceleration_valid = 15 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->acceleration_valid(), output);
  }

  // optional float acceleration = 16 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->acceleration(), output);
  }

  // optional bool yaw_rate_valid = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->yaw_rate_valid(), output);
  }

  // optional float yaw_rate = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->yaw_rate(), output);
  }

  // optional bool ax_valid = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->ax_valid(), output);
  }

  // optional float ax = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->ax(), output);
  }

  // optional bool ay_valid = 21 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->ay_valid(), output);
  }

  // optional float ay = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->ay(), output);
  }

  // optional bool wheel_speed_fl_valid = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->wheel_speed_fl_valid(), output);
  }

  // optional float wheel_speed_fl = 24 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(24, this->wheel_speed_fl(), output);
  }

  // optional bool wheel_speed_fr_valid = 25 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->wheel_speed_fr_valid(), output);
  }

  // optional float wheel_speed_fr = 26 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(26, this->wheel_speed_fr(), output);
  }

  // optional bool wheel_speed_rl_valid = 27 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->wheel_speed_rl_valid(), output);
  }

  // optional float wheel_speed_rl = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(28, this->wheel_speed_rl(), output);
  }

  // optional bool wheel_speed_rr_valid = 29 [default = false];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(29, this->wheel_speed_rr_valid(), output);
  }

  // optional float wheel_speed_rr = 30 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(30, this->wheel_speed_rr(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rl2_valid = 31 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(31, this->wheel_speed_rl2_valid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rl2 = 32 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(32, this->wheel_speed_rl2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rr2_valid = 33 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(33, this->wheel_speed_rr2_valid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rr2 = 34 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(34, this->wheel_speed_rr2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      35, this->epb_status(), output);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      36, this->gear(), output);
  }

  // optional int32 gear_number = 37 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(37, this->gear_number(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      38, this->signal_turning_indicator(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      39, this->signal_turn_lamp(), output);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      40, this->signal_brake_lamp(), output);
  }

  // optional int32 brake_pedal_value = 41 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(41, this->brake_pedal_value(), output);
  }

  // optional int32 acc_pedal_value = 42 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(42, this->acc_pedal_value(), output);
  }

  // optional bool engine_speed_valid = 43 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->engine_speed_valid(), output);
  }

  // optional float engine_speed = 44 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(44, this->engine_speed(), output);
  }

  // optional bool engine_torque_valid = 45 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(45, this->engine_torque_valid(), output);
  }

  // optional float engine_torque = 46 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(46, this->engine_torque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.control.Chassis)
}

::PROTOBUF_NAMESPACE_ID::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.control.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->driving_mode(), target);
  }

  // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->e_stop(), target);
  }

  // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->eps_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->throttle_sys_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->ebs_status(), target);
  }

  // optional bool steering_wheel_angle_valid = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->steering_wheel_angle_valid(), target);
  }

  // optional float steering_wheel_angle = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->steering_wheel_angle(), target);
  }

  // optional bool steering_wheel_speed_valid = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->steering_wheel_speed_valid(), target);
  }

  // optional float steering_wheel_speed = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->steering_wheel_speed(), target);
  }

  // optional bool steering_wheel_torque_valid = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->steering_wheel_torque_valid(), target);
  }

  // optional float steering_wheel_torque = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->steering_wheel_torque(), target);
  }

  // optional bool velocity_valid = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->velocity_valid(), target);
  }

  // optional float velocity = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->velocity(), target);
  }

  // optional bool acceleration_valid = 15 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->acceleration_valid(), target);
  }

  // optional float acceleration = 16 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->acceleration(), target);
  }

  // optional bool yaw_rate_valid = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->yaw_rate_valid(), target);
  }

  // optional float yaw_rate = 18 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->yaw_rate(), target);
  }

  // optional bool ax_valid = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->ax_valid(), target);
  }

  // optional float ax = 20 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->ax(), target);
  }

  // optional bool ay_valid = 21 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->ay_valid(), target);
  }

  // optional float ay = 22 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->ay(), target);
  }

  // optional bool wheel_speed_fl_valid = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->wheel_speed_fl_valid(), target);
  }

  // optional float wheel_speed_fl = 24 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->wheel_speed_fl(), target);
  }

  // optional bool wheel_speed_fr_valid = 25 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->wheel_speed_fr_valid(), target);
  }

  // optional float wheel_speed_fr = 26 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->wheel_speed_fr(), target);
  }

  // optional bool wheel_speed_rl_valid = 27 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->wheel_speed_rl_valid(), target);
  }

  // optional float wheel_speed_rl = 28 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->wheel_speed_rl(), target);
  }

  // optional bool wheel_speed_rr_valid = 29 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->wheel_speed_rr_valid(), target);
  }

  // optional float wheel_speed_rr = 30 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->wheel_speed_rr(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rl2_valid = 31 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->wheel_speed_rl2_valid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rl2 = 32 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->wheel_speed_rl2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wheel_speed_rr2_valid = 33 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->wheel_speed_rr2_valid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float wheel_speed_rr2 = 34 [default = 0];
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->wheel_speed_rr2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      35, this->epb_status(), target);
  }

  // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->gear(), target);
  }

  // optional int32 gear_number = 37 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->gear_number(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      38, this->signal_turning_indicator(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      39, this->signal_turn_lamp(), target);
  }

  // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->signal_brake_lamp(), target);
  }

  // optional int32 brake_pedal_value = 41 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->brake_pedal_value(), target);
  }

  // optional int32 acc_pedal_value = 42 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->acc_pedal_value(), target);
  }

  // optional bool engine_speed_valid = 43 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->engine_speed_valid(), target);
  }

  // optional float engine_speed = 44 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->engine_speed(), target);
  }

  // optional bool engine_torque_valid = 45 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->engine_torque_valid(), target);
  }

  // optional float engine_torque = 46 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->engine_torque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.control.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.control.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.control.Chassis.DrivingMode driving_mode = 2 [default = DRIVING_MODE_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .phoenix.msg.control.Chassis.EStop e_stop = 3 [default = E_STOP_INVALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->e_stop());
    }

    // optional .phoenix.msg.control.Chassis.EpsStatus eps_status = 4 [default = EPS_STATUS_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->eps_status());
    }

    // optional .phoenix.msg.control.Chassis.ThrottleSysStatus throttle_sys_status = 5 [default = THROTTLE_SYS_STATUS_INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->throttle_sys_status());
    }

    // optional .phoenix.msg.control.Chassis.EbsStatus ebs_status = 6 [default = EBS_STATUS_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ebs_status());
    }

    // optional float steering_wheel_angle = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float steering_wheel_speed = 10 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool steering_wheel_angle_valid = 7 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool steering_wheel_speed_valid = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool steering_wheel_torque_valid = 11 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool velocity_valid = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional float steering_wheel_torque = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float velocity = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 16 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float yaw_rate = 18 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool acceleration_valid = 15 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool yaw_rate_valid = 17 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool ax_valid = 19 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool ay_valid = 21 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional float ax = 20 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float ay = 22 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_fl = 24 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_fr = 26 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool wheel_speed_fl_valid = 23 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_fr_valid = 25 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rl_valid = 27 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rr_valid = 29 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional float wheel_speed_rl = 28 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rr = 30 [default = 0];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rl2 = 32 [default = 0];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float wheel_speed_rr2 = 34 [default = 0];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .phoenix.msg.control.Chassis.EpbStatus epb_status = 35 [default = EPB_STATUS_INVALID];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->epb_status());
    }

    // optional .phoenix.msg.control.Chassis.GearPosition gear = 36 [default = GEAR_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional int32 gear_number = 37 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->gear_number());
    }

    // optional .phoenix.msg.control.Chassis.SignalTurningIndicator signal_turning_indicator = 38 [default = TURNING_INDICATOR_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->signal_turning_indicator());
    }

    // optional bool wheel_speed_rl2_valid = 31 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool wheel_speed_rr2_valid = 33 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool engine_speed_valid = 43 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool engine_torque_valid = 45 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .phoenix.msg.control.Chassis.SignalTurnLamp signal_turn_lamp = 39 [default = TURN_LAMP_INVALID];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->signal_turn_lamp());
    }

    // optional .phoenix.msg.control.Chassis.SignalLamp signal_brake_lamp = 40 [default = LAMP_INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->signal_brake_lamp());
    }

    // optional int32 brake_pedal_value = 41 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->brake_pedal_value());
    }

    // optional int32 acc_pedal_value = 42 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->acc_pedal_value());
    }

    // optional float engine_speed = 44 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float engine_torque = 46 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.control.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.control.Chassis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.control.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.control.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_stop_ = from.e_stop_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_status_ = from.eps_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_sys_status_ = from.throttle_sys_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      ebs_status_ = from.ebs_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_wheel_angle_ = from.steering_wheel_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_wheel_speed_ = from.steering_wheel_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steering_wheel_angle_valid_ = from.steering_wheel_angle_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_wheel_speed_valid_ = from.steering_wheel_speed_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_wheel_torque_valid_ = from.steering_wheel_torque_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      velocity_valid_ = from.velocity_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      steering_wheel_torque_ = from.steering_wheel_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00004000u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      acceleration_valid_ = from.acceleration_valid_;
    }
    if (cached_has_bits & 0x00020000u) {
      yaw_rate_valid_ = from.yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00040000u) {
      ax_valid_ = from.ax_valid_;
    }
    if (cached_has_bits & 0x00080000u) {
      ay_valid_ = from.ay_valid_;
    }
    if (cached_has_bits & 0x00100000u) {
      ax_ = from.ax_;
    }
    if (cached_has_bits & 0x00200000u) {
      ay_ = from.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      wheel_speed_fl_ = from.wheel_speed_fl_;
    }
    if (cached_has_bits & 0x00800000u) {
      wheel_speed_fr_ = from.wheel_speed_fr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      wheel_speed_fl_valid_ = from.wheel_speed_fl_valid_;
    }
    if (cached_has_bits & 0x02000000u) {
      wheel_speed_fr_valid_ = from.wheel_speed_fr_valid_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheel_speed_rl_valid_ = from.wheel_speed_rl_valid_;
    }
    if (cached_has_bits & 0x08000000u) {
      wheel_speed_rr_valid_ = from.wheel_speed_rr_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      wheel_speed_rl_ = from.wheel_speed_rl_;
    }
    if (cached_has_bits & 0x20000000u) {
      wheel_speed_rr_ = from.wheel_speed_rr_;
    }
    if (cached_has_bits & 0x40000000u) {
      wheel_speed_rl2_ = from.wheel_speed_rl2_;
    }
    if (cached_has_bits & 0x80000000u) {
      wheel_speed_rr2_ = from.wheel_speed_rr2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_number_ = from.gear_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      signal_turning_indicator_ = from.signal_turning_indicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      wheel_speed_rl2_valid_ = from.wheel_speed_rl2_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_speed_rr2_valid_ = from.wheel_speed_rr2_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine_speed_valid_ = from.engine_speed_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine_torque_valid_ = from.engine_torque_valid_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      signal_turn_lamp_ = from.signal_turn_lamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      signal_brake_lamp_ = from.signal_brake_lamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_pedal_value_ = from.brake_pedal_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_pedal_value_ = from.acc_pedal_value_;
    }
    if (cached_has_bits & 0x00001000u) {
      engine_speed_ = from.engine_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      engine_torque_ = from.engine_torque_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.control.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.control.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(header_, other->header_);
  swap(driving_mode_, other->driving_mode_);
  swap(e_stop_, other->e_stop_);
  swap(eps_status_, other->eps_status_);
  swap(throttle_sys_status_, other->throttle_sys_status_);
  swap(ebs_status_, other->ebs_status_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(steering_wheel_speed_, other->steering_wheel_speed_);
  swap(steering_wheel_angle_valid_, other->steering_wheel_angle_valid_);
  swap(steering_wheel_speed_valid_, other->steering_wheel_speed_valid_);
  swap(steering_wheel_torque_valid_, other->steering_wheel_torque_valid_);
  swap(velocity_valid_, other->velocity_valid_);
  swap(steering_wheel_torque_, other->steering_wheel_torque_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(acceleration_valid_, other->acceleration_valid_);
  swap(yaw_rate_valid_, other->yaw_rate_valid_);
  swap(ax_valid_, other->ax_valid_);
  swap(ay_valid_, other->ay_valid_);
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  swap(wheel_speed_fl_, other->wheel_speed_fl_);
  swap(wheel_speed_fr_, other->wheel_speed_fr_);
  swap(wheel_speed_fl_valid_, other->wheel_speed_fl_valid_);
  swap(wheel_speed_fr_valid_, other->wheel_speed_fr_valid_);
  swap(wheel_speed_rl_valid_, other->wheel_speed_rl_valid_);
  swap(wheel_speed_rr_valid_, other->wheel_speed_rr_valid_);
  swap(wheel_speed_rl_, other->wheel_speed_rl_);
  swap(wheel_speed_rr_, other->wheel_speed_rr_);
  swap(wheel_speed_rl2_, other->wheel_speed_rl2_);
  swap(wheel_speed_rr2_, other->wheel_speed_rr2_);
  swap(epb_status_, other->epb_status_);
  swap(gear_, other->gear_);
  swap(gear_number_, other->gear_number_);
  swap(signal_turning_indicator_, other->signal_turning_indicator_);
  swap(wheel_speed_rl2_valid_, other->wheel_speed_rl2_valid_);
  swap(wheel_speed_rr2_valid_, other->wheel_speed_rr2_valid_);
  swap(engine_speed_valid_, other->engine_speed_valid_);
  swap(engine_torque_valid_, other->engine_torque_valid_);
  swap(signal_turn_lamp_, other->signal_turn_lamp_);
  swap(signal_brake_lamp_, other->signal_brake_lamp_);
  swap(brake_pedal_value_, other->brake_pedal_value_);
  swap(acc_pedal_value_, other->acc_pedal_value_);
  swap(engine_speed_, other->engine_speed_);
  swap(engine_torque_, other->engine_torque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::control::Chassis* Arena::CreateMaybeMessage< ::phoenix::msg::control::Chassis >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::control::Chassis >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
