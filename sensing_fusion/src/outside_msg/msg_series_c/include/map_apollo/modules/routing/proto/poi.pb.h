// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/poi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2fpoi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2frouting_2fproto_2fpoi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto;
namespace apollo {
namespace routing {
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class POI;
class POIDefaultTypeInternal;
extern POIDefaultTypeInternal _POI_default_instance_;
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::routing::Landmark* Arena::CreateMaybeMessage<::apollo::routing::Landmark>(Arena*);
template<> ::apollo::routing::POI* Arena::CreateMaybeMessage<::apollo::routing::POI>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace routing {

// ===================================================================

class Landmark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Landmark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(nullptr);
  }

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Landmark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto);
    return ::descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointFieldNumber = 2,
    kNameFieldNumber = 1,
    kParkingSpaceIdFieldNumber = 3,
    kParkingInfoFieldNumber = 4,
  };
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  void clear_waypoint();
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* add_waypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string parking_space_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_parking_space_id() const;
  PROTOBUF_DEPRECATED void clear_parking_space_id();
  PROTOBUF_DEPRECATED const std::string& parking_space_id() const;
  PROTOBUF_DEPRECATED void set_parking_space_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_parking_space_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_parking_space_id(const char* value);
  PROTOBUF_DEPRECATED void set_parking_space_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_parking_space_id();
  PROTOBUF_DEPRECATED std::string* release_parking_space_id();
  PROTOBUF_DEPRECATED void set_allocated_parking_space_id(std::string* parking_space_id);

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  bool has_parking_info() const;
  void clear_parking_info();
  const ::apollo::routing::ParkingInfo& parking_info() const;
  ::apollo::routing::ParkingInfo* release_parking_info();
  ::apollo::routing::ParkingInfo* mutable_parking_info();
  void set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info);

  // @@protoc_insertion_point(class_scope:apollo.routing.Landmark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parking_space_id_;
  ::apollo::routing::ParkingInfo* parking_info_;
  friend struct ::TableStruct_modules_2frouting_2fproto_2fpoi_2eproto;
};
// -------------------------------------------------------------------

class POI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.POI) */ {
 public:
  POI();
  virtual ~POI();

  POI(const POI& from);
  POI(POI&& from) noexcept
    : POI() {
    *this = ::std::move(from);
  }

  inline POI& operator=(const POI& from) {
    CopyFrom(from);
    return *this;
  }
  inline POI& operator=(POI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const POI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const POI* internal_default_instance() {
    return reinterpret_cast<const POI*>(
               &_POI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(POI& a, POI& b) {
    a.Swap(&b);
  }
  inline void Swap(POI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline POI* New() const final {
    return CreateMaybeMessage<POI>(nullptr);
  }

  POI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<POI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const POI& from);
  void MergeFrom(const POI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(POI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.POI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto);
    return ::descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .apollo.routing.Landmark landmark = 1;
  int landmark_size() const;
  void clear_landmark();
  ::apollo::routing::Landmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >*
      mutable_landmark();
  const ::apollo::routing::Landmark& landmark(int index) const;
  ::apollo::routing::Landmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:apollo.routing.POI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark > landmark_;
  friend struct ::TableStruct_modules_2frouting_2fproto_2fpoi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// optional string name = 1;
inline bool Landmark::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Landmark::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Landmark::name() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.name)
  return name_.GetNoArena();
}
inline void Landmark::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.name)
}
inline std::string* Landmark::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Landmark::release_name() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.name)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int Landmark::waypoint_size() const {
  return waypoint_.size();
}
inline ::apollo::routing::LaneWaypoint* Landmark::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.waypoint)
  return waypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
Landmark::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Landmark.waypoint)
  return &waypoint_;
}
inline const ::apollo::routing::LaneWaypoint& Landmark::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.waypoint)
  return waypoint_.Get(index);
}
inline ::apollo::routing::LaneWaypoint* Landmark::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.Landmark.waypoint)
  return waypoint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
Landmark::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Landmark.waypoint)
  return waypoint_;
}

// optional string parking_space_id = 3 [deprecated = true];
inline bool Landmark::has_parking_space_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Landmark::clear_parking_space_id() {
  parking_space_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Landmark::parking_space_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.GetNoArena();
}
inline void Landmark::set_parking_space_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parking_space_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.parking_space_id)
}
inline void Landmark::set_parking_space_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parking_space_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.parking_space_id)
}
inline void Landmark::set_parking_space_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parking_space_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.parking_space_id)
}
inline void Landmark::set_parking_space_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parking_space_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.parking_space_id)
}
inline std::string* Landmark::mutable_parking_space_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Landmark::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_space_id)
  if (!has_parking_space_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parking_space_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_parking_space_id(std::string* parking_space_id) {
  if (parking_space_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parking_space_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parking_space_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_space_id)
}

// optional .apollo.routing.ParkingInfo parking_info = 4;
inline bool Landmark::has_parking_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::apollo::routing::ParkingInfo& Landmark::parking_info() const {
  const ::apollo::routing::ParkingInfo* p = parking_info_;
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::routing::ParkingInfo*>(
      &::apollo::routing::_ParkingInfo_default_instance_);
}
inline ::apollo::routing::ParkingInfo* Landmark::release_parking_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_info)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::ParkingInfo* temp = parking_info_;
  parking_info_ = nullptr;
  return temp;
}
inline ::apollo::routing::ParkingInfo* Landmark::mutable_parking_info() {
  _has_bits_[0] |= 0x00000004u;
  if (parking_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::ParkingInfo>(GetArenaNoVirtual());
    parking_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_info)
  return parking_info_;
}
inline void Landmark::set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_info_);
  }
  if (parking_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parking_info_ = parking_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_info)
}

// -------------------------------------------------------------------

// POI

// repeated .apollo.routing.Landmark landmark = 1;
inline int POI::landmark_size() const {
  return landmark_.size();
}
inline void POI::clear_landmark() {
  landmark_.Clear();
}
inline ::apollo::routing::Landmark* POI::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.POI.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >*
POI::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.POI.landmark)
  return &landmark_;
}
inline const ::apollo::routing::Landmark& POI::landmark(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.POI.landmark)
  return landmark_.Get(index);
}
inline ::apollo::routing::Landmark* POI::add_landmark() {
  // @@protoc_insertion_point(field_add:apollo.routing.POI.landmark)
  return landmark_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >&
POI::landmark() const {
  // @@protoc_insertion_point(field_list:apollo.routing.POI.landmark)
  return landmark_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
