// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_cloud.proto

#include "lidar_cloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lidar_5fcloud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class LidarCloud_CloudPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarCloud_CloudPoint> _instance;
} _LidarCloud_CloudPoint_default_instance_;
class LidarCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarCloud> _instance;
} _LidarCloud_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
static void InitDefaultsscc_info_LidarCloud_lidar_5fcloud_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_LidarCloud_default_instance_;
    new (ptr) ::phoenix::msg::perception::LidarCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::LidarCloud::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LidarCloud_lidar_5fcloud_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LidarCloud_lidar_5fcloud_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto.base,}};

static void InitDefaultsscc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phoenix::msg::perception::_LidarCloud_CloudPoint_default_instance_;
    new (ptr) ::phoenix::msg::perception::LidarCloud_CloudPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phoenix::msg::perception::LidarCloud_CloudPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lidar_5fcloud_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lidar_5fcloud_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lidar_5fcloud_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lidar_5fcloud_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, layer_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, x_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, y_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud_CloudPoint, z_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud, header_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud, lidar_type_),
  PROTOBUF_FIELD_OFFSET(::phoenix::msg::perception::LidarCloud, points_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::phoenix::msg::perception::LidarCloud_CloudPoint)},
  { 13, 21, sizeof(::phoenix::msg::perception::LidarCloud)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_LidarCloud_CloudPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phoenix::msg::perception::_LidarCloud_default_instance_),
};

const char descriptor_table_protodef_lidar_5fcloud_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021lidar_cloud.proto\022\026phoenix.msg.percept"
  "ion\032\014header.proto\"\207\003\n\nLidarCloud\022*\n\006head"
  "er\030\001 \001(\0132\032.phoenix.msg.common.Header\022T\n\n"
  "lidar_type\030\002 \001(\0162,.phoenix.msg.perceptio"
  "n.LidarCloud.LidarType:\022LIDAR_TYPE_UNKNO"
  "WN\022=\n\006points\030\003 \003(\0132-.phoenix.msg.percept"
  "ion.LidarCloud.CloudPoint\032H\n\nCloudPoint\022"
  "\020\n\005layer\030\001 \001(\005:\0010\022\014\n\001x\030\002 \001(\002:\0010\022\014\n\001y\030\003 \001"
  "(\002:\0010\022\014\n\001z\030\004 \001(\002:\0010\"n\n\tLidarType\022\026\n\022LIDA"
  "R_TYPE_UNKNOWN\020\000\022\025\n\021LIDAR_TYPE_IBEO_4\020\001\022"
  "\025\n\021LIDAR_TYPE_VLP_16\020\002\022\033\n\027LIDAR_TYPE_ROB"
  "OSENSE_M1\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lidar_5fcloud_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lidar_5fcloud_2eproto_sccs[2] = {
  &scc_info_LidarCloud_lidar_5fcloud_2eproto.base,
  &scc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lidar_5fcloud_2eproto_once;
static bool descriptor_table_lidar_5fcloud_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidar_5fcloud_2eproto = {
  &descriptor_table_lidar_5fcloud_2eproto_initialized, descriptor_table_protodef_lidar_5fcloud_2eproto, "lidar_cloud.proto", 451,
  &descriptor_table_lidar_5fcloud_2eproto_once, descriptor_table_lidar_5fcloud_2eproto_sccs, descriptor_table_lidar_5fcloud_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lidar_5fcloud_2eproto::offsets,
  file_level_metadata_lidar_5fcloud_2eproto, 2, file_level_enum_descriptors_lidar_5fcloud_2eproto, file_level_service_descriptors_lidar_5fcloud_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lidar_5fcloud_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lidar_5fcloud_2eproto), true);
namespace phoenix {
namespace msg {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LidarCloud_LidarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lidar_5fcloud_2eproto);
  return file_level_enum_descriptors_lidar_5fcloud_2eproto[0];
}
bool LidarCloud_LidarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LidarCloud_LidarType LidarCloud::LIDAR_TYPE_UNKNOWN;
constexpr LidarCloud_LidarType LidarCloud::LIDAR_TYPE_IBEO_4;
constexpr LidarCloud_LidarType LidarCloud::LIDAR_TYPE_VLP_16;
constexpr LidarCloud_LidarType LidarCloud::LIDAR_TYPE_ROBOSENSE_M1;
constexpr LidarCloud_LidarType LidarCloud::LidarType_MIN;
constexpr LidarCloud_LidarType LidarCloud::LidarType_MAX;
constexpr int LidarCloud::LidarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LidarCloud_CloudPoint::InitAsDefaultInstance() {
}
class LidarCloud_CloudPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarCloud_CloudPoint>()._has_bits_);
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LidarCloud_CloudPoint::LidarCloud_CloudPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.LidarCloud.CloudPoint)
}
LidarCloud_CloudPoint::LidarCloud_CloudPoint(const LidarCloud_CloudPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.LidarCloud.CloudPoint)
}

void LidarCloud_CloudPoint::SharedCtor() {
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(z_));
}

LidarCloud_CloudPoint::~LidarCloud_CloudPoint() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.LidarCloud.CloudPoint)
  SharedDtor();
}

void LidarCloud_CloudPoint::SharedDtor() {
}

void LidarCloud_CloudPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarCloud_CloudPoint& LidarCloud_CloudPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarCloud_CloudPoint_lidar_5fcloud_2eproto.base);
  return *internal_default_instance();
}


void LidarCloud_CloudPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&layer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&layer_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarCloud_CloudPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 layer = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer(&has_bits);
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarCloud_CloudPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_layer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.LidarCloud.CloudPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.LidarCloud.CloudPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarCloud_CloudPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional float x = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.LidarCloud.CloudPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarCloud_CloudPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional float x = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.LidarCloud.CloudPoint)
  return target;
}

size_t LidarCloud_CloudPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 layer = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional float x = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarCloud_CloudPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarCloud_CloudPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarCloud_CloudPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.LidarCloud.CloudPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.LidarCloud.CloudPoint)
    MergeFrom(*source);
  }
}

void LidarCloud_CloudPoint::MergeFrom(const LidarCloud_CloudPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      layer_ = from.layer_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarCloud_CloudPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarCloud_CloudPoint::CopyFrom(const LidarCloud_CloudPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.LidarCloud.CloudPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarCloud_CloudPoint::IsInitialized() const {
  return true;
}

void LidarCloud_CloudPoint::InternalSwap(LidarCloud_CloudPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer_, other->layer_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarCloud_CloudPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarCloud::InitAsDefaultInstance() {
  ::phoenix::msg::perception::_LidarCloud_default_instance_._instance.get_mutable()->header_ = const_cast< ::phoenix::msg::common::Header*>(
      ::phoenix::msg::common::Header::internal_default_instance());
}
class LidarCloud::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarCloud>()._has_bits_);
  static const ::phoenix::msg::common::Header& header(const LidarCloud* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lidar_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::phoenix::msg::common::Header&
LidarCloud::_Internal::header(const LidarCloud* msg) {
  return *msg->header_;
}
void LidarCloud::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LidarCloud::LidarCloud()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:phoenix.msg.perception.LidarCloud)
}
LidarCloud::LidarCloud(const LidarCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::phoenix::msg::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  lidar_type_ = from.lidar_type_;
  // @@protoc_insertion_point(copy_constructor:phoenix.msg.perception.LidarCloud)
}

void LidarCloud::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarCloud_lidar_5fcloud_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lidar_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lidar_type_));
}

LidarCloud::~LidarCloud() {
  // @@protoc_insertion_point(destructor:phoenix.msg.perception.LidarCloud)
  SharedDtor();
}

void LidarCloud::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LidarCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarCloud& LidarCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarCloud_lidar_5fcloud_2eproto.base);
  return *internal_default_instance();
}


void LidarCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:phoenix.msg.perception.LidarCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  lidar_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .phoenix.msg.perception.LidarCloud.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::phoenix::msg::perception::LidarCloud_LidarType_IsValid(val))) {
            set_lidar_type(static_cast<::phoenix::msg::perception::LidarCloud_LidarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .phoenix.msg.perception.LidarCloud.CloudPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarCloud::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:phoenix.msg.perception.LidarCloud)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .phoenix.msg.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .phoenix.msg.perception.LidarCloud.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::phoenix::msg::perception::LidarCloud_LidarType_IsValid(value)) {
            set_lidar_type(static_cast< ::phoenix::msg::perception::LidarCloud_LidarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .phoenix.msg.perception.LidarCloud.CloudPoint points = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phoenix.msg.perception.LidarCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phoenix.msg.perception.LidarCloud)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarCloud::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phoenix.msg.perception.LidarCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // optional .phoenix.msg.perception.LidarCloud.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->lidar_type(), output);
  }

  // repeated .phoenix.msg.perception.LidarCloud.CloudPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:phoenix.msg.perception.LidarCloud)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarCloud::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:phoenix.msg.perception.LidarCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .phoenix.msg.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // optional .phoenix.msg.perception.LidarCloud.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->lidar_type(), target);
  }

  // repeated .phoenix.msg.perception.LidarCloud.CloudPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phoenix.msg.perception.LidarCloud)
  return target;
}

size_t LidarCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phoenix.msg.perception.LidarCloud)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phoenix.msg.perception.LidarCloud.CloudPoint points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .phoenix.msg.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .phoenix.msg.perception.LidarCloud.LidarType lidar_type = 2 [default = LIDAR_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lidar_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phoenix.msg.perception.LidarCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phoenix.msg.perception.LidarCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phoenix.msg.perception.LidarCloud)
    MergeFrom(*source);
  }
}

void LidarCloud::MergeFrom(const LidarCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phoenix.msg.perception.LidarCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::phoenix::msg::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      lidar_type_ = from.lidar_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phoenix.msg.perception.LidarCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarCloud::CopyFrom(const LidarCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phoenix.msg.perception.LidarCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarCloud::IsInitialized() const {
  return true;
}

void LidarCloud::InternalSwap(LidarCloud* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(header_, other->header_);
  swap(lidar_type_, other->lidar_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::LidarCloud_CloudPoint* Arena::CreateMaybeMessage< ::phoenix::msg::perception::LidarCloud_CloudPoint >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::LidarCloud_CloudPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::phoenix::msg::perception::LidarCloud* Arena::CreateMaybeMessage< ::phoenix::msg::perception::LidarCloud >(Arena* arena) {
  return Arena::CreateInternal< ::phoenix::msg::perception::LidarCloud >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
