// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles_radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacles_5fradar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacles_5fradar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacles_5fradar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacles_5fradar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_5fradar_2eproto;
namespace phoenix {
namespace msg {
namespace perception {
class ObstacleRadar;
class ObstacleRadarDefaultTypeInternal;
extern ObstacleRadarDefaultTypeInternal _ObstacleRadar_default_instance_;
class ObstacleRadarList;
class ObstacleRadarListDefaultTypeInternal;
extern ObstacleRadarListDefaultTypeInternal _ObstacleRadarList_default_instance_;
}  // namespace perception
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::perception::ObstacleRadar* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleRadar>(Arena*);
template<> ::phoenix::msg::perception::ObstacleRadarList* Arena::CreateMaybeMessage<::phoenix::msg::perception::ObstacleRadarList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace perception {

enum ObstacleRadar_ObjType : int {
  ObstacleRadar_ObjType_OBJ_TYPE_UNKNOWN = 0,
  ObstacleRadar_ObjType_OBJ_TYPE_PASSENGER_VEHICLE = 1,
  ObstacleRadar_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE = 2,
  ObstacleRadar_ObjType_OBJ_TYPE_SPECIAL_VEHICLE = 3,
  ObstacleRadar_ObjType_OBJ_TYPE_OTHER_VEHICLE = 4,
  ObstacleRadar_ObjType_OBJ_TYPE_PEDESTRIAN = 5,
  ObstacleRadar_ObjType_OBJ_TYPE_BICYCLE = 6,
  ObstacleRadar_ObjType_OBJ_TYPE_ANIMAL = 7,
  ObstacleRadar_ObjType_OBJ_TYPE_DISCARD = 8,
  ObstacleRadar_ObjType_OBJ_TYPE_CURB = 9
};
bool ObstacleRadar_ObjType_IsValid(int value);
constexpr ObstacleRadar_ObjType ObstacleRadar_ObjType_ObjType_MIN = ObstacleRadar_ObjType_OBJ_TYPE_UNKNOWN;
constexpr ObstacleRadar_ObjType ObstacleRadar_ObjType_ObjType_MAX = ObstacleRadar_ObjType_OBJ_TYPE_CURB;
constexpr int ObstacleRadar_ObjType_ObjType_ARRAYSIZE = ObstacleRadar_ObjType_ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_ObjType_descriptor();
template<typename T>
inline const std::string& ObstacleRadar_ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRadar_ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRadar_ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRadar_ObjType_descriptor(), enum_t_value);
}
inline bool ObstacleRadar_ObjType_Parse(
    const std::string& name, ObstacleRadar_ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRadar_ObjType>(
    ObstacleRadar_ObjType_descriptor(), name, value);
}
enum ObstacleRadar_TrackStatus : int {
  ObstacleRadar_TrackStatus_TRACK_STATUS_NO_TARGET = 0,
  ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_TARGET = 1,
  ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_UPDATED_TARGET = 2,
  ObstacleRadar_TrackStatus_TRACK_STATUS_UPDATED_TARGET = 3,
  ObstacleRadar_TrackStatus_TRACK_STATUS_COASTED_TARGET = 4,
  ObstacleRadar_TrackStatus_TRACK_STATUS_MERGED_TARGET = 5,
  ObstacleRadar_TrackStatus_TRACK_STATUS_INVALID_COASTED_TARGET = 6,
  ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_COASTED_TARGET = 7
};
bool ObstacleRadar_TrackStatus_IsValid(int value);
constexpr ObstacleRadar_TrackStatus ObstacleRadar_TrackStatus_TrackStatus_MIN = ObstacleRadar_TrackStatus_TRACK_STATUS_NO_TARGET;
constexpr ObstacleRadar_TrackStatus ObstacleRadar_TrackStatus_TrackStatus_MAX = ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_COASTED_TARGET;
constexpr int ObstacleRadar_TrackStatus_TrackStatus_ARRAYSIZE = ObstacleRadar_TrackStatus_TrackStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_TrackStatus_descriptor();
template<typename T>
inline const std::string& ObstacleRadar_TrackStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRadar_TrackStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRadar_TrackStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRadar_TrackStatus_descriptor(), enum_t_value);
}
inline bool ObstacleRadar_TrackStatus_Parse(
    const std::string& name, ObstacleRadar_TrackStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRadar_TrackStatus>(
    ObstacleRadar_TrackStatus_descriptor(), name, value);
}
enum ObstacleRadar_MergedStatus : int {
  ObstacleRadar_MergedStatus_MERGED_STATUS_NO_TARGET = 0,
  ObstacleRadar_MergedStatus_MERGED_STATUS_MR_TARGET = 1,
  ObstacleRadar_MergedStatus_MERGED_STATUS_LR_TARGET = 2,
  ObstacleRadar_MergedStatus_MERGED_STATUS_MR_LR_TARGET = 3
};
bool ObstacleRadar_MergedStatus_IsValid(int value);
constexpr ObstacleRadar_MergedStatus ObstacleRadar_MergedStatus_MergedStatus_MIN = ObstacleRadar_MergedStatus_MERGED_STATUS_NO_TARGET;
constexpr ObstacleRadar_MergedStatus ObstacleRadar_MergedStatus_MergedStatus_MAX = ObstacleRadar_MergedStatus_MERGED_STATUS_MR_LR_TARGET;
constexpr int ObstacleRadar_MergedStatus_MergedStatus_ARRAYSIZE = ObstacleRadar_MergedStatus_MergedStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadar_MergedStatus_descriptor();
template<typename T>
inline const std::string& ObstacleRadar_MergedStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRadar_MergedStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRadar_MergedStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRadar_MergedStatus_descriptor(), enum_t_value);
}
inline bool ObstacleRadar_MergedStatus_Parse(
    const std::string& name, ObstacleRadar_MergedStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRadar_MergedStatus>(
    ObstacleRadar_MergedStatus_descriptor(), name, value);
}
enum ObstacleRadarList_RadarType : int {
  ObstacleRadarList_RadarType_RADAR_TYPE_UNKNOWN = 0,
  ObstacleRadarList_RadarType_RADAR_TYPE_ESR = 1,
  ObstacleRadarList_RadarType_RADAR_TYPE_SRR2 = 2,
  ObstacleRadarList_RadarType_RADAR_TYPE_RR51W = 3,
  ObstacleRadarList_RadarType_RADAR_TYPE_ARS430 = 4
};
bool ObstacleRadarList_RadarType_IsValid(int value);
constexpr ObstacleRadarList_RadarType ObstacleRadarList_RadarType_RadarType_MIN = ObstacleRadarList_RadarType_RADAR_TYPE_UNKNOWN;
constexpr ObstacleRadarList_RadarType ObstacleRadarList_RadarType_RadarType_MAX = ObstacleRadarList_RadarType_RADAR_TYPE_ARS430;
constexpr int ObstacleRadarList_RadarType_RadarType_ARRAYSIZE = ObstacleRadarList_RadarType_RadarType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleRadarList_RadarType_descriptor();
template<typename T>
inline const std::string& ObstacleRadarList_RadarType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleRadarList_RadarType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleRadarList_RadarType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleRadarList_RadarType_descriptor(), enum_t_value);
}
inline bool ObstacleRadarList_RadarType_Parse(
    const std::string& name, ObstacleRadarList_RadarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleRadarList_RadarType>(
    ObstacleRadarList_RadarType_descriptor(), name, value);
}
// ===================================================================

class ObstacleRadar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleRadar) */ {
 public:
  ObstacleRadar();
  virtual ~ObstacleRadar();

  ObstacleRadar(const ObstacleRadar& from);
  ObstacleRadar(ObstacleRadar&& from) noexcept
    : ObstacleRadar() {
    *this = ::std::move(from);
  }

  inline ObstacleRadar& operator=(const ObstacleRadar& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRadar& operator=(ObstacleRadar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRadar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleRadar* internal_default_instance() {
    return reinterpret_cast<const ObstacleRadar*>(
               &_ObstacleRadar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleRadar& a, ObstacleRadar& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleRadar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRadar* New() const final {
    return CreateMaybeMessage<ObstacleRadar>(nullptr);
  }

  ObstacleRadar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRadar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRadar& from);
  void MergeFrom(const ObstacleRadar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRadar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleRadar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5fradar_2eproto);
    return ::descriptor_table_obstacles_5fradar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleRadar_ObjType ObjType;
  static constexpr ObjType OBJ_TYPE_UNKNOWN =
    ObstacleRadar_ObjType_OBJ_TYPE_UNKNOWN;
  static constexpr ObjType OBJ_TYPE_PASSENGER_VEHICLE =
    ObstacleRadar_ObjType_OBJ_TYPE_PASSENGER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_COMMERCIAL_VEHICLE =
    ObstacleRadar_ObjType_OBJ_TYPE_COMMERCIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_SPECIAL_VEHICLE =
    ObstacleRadar_ObjType_OBJ_TYPE_SPECIAL_VEHICLE;
  static constexpr ObjType OBJ_TYPE_OTHER_VEHICLE =
    ObstacleRadar_ObjType_OBJ_TYPE_OTHER_VEHICLE;
  static constexpr ObjType OBJ_TYPE_PEDESTRIAN =
    ObstacleRadar_ObjType_OBJ_TYPE_PEDESTRIAN;
  static constexpr ObjType OBJ_TYPE_BICYCLE =
    ObstacleRadar_ObjType_OBJ_TYPE_BICYCLE;
  static constexpr ObjType OBJ_TYPE_ANIMAL =
    ObstacleRadar_ObjType_OBJ_TYPE_ANIMAL;
  static constexpr ObjType OBJ_TYPE_DISCARD =
    ObstacleRadar_ObjType_OBJ_TYPE_DISCARD;
  static constexpr ObjType OBJ_TYPE_CURB =
    ObstacleRadar_ObjType_OBJ_TYPE_CURB;
  static inline bool ObjType_IsValid(int value) {
    return ObstacleRadar_ObjType_IsValid(value);
  }
  static constexpr ObjType ObjType_MIN =
    ObstacleRadar_ObjType_ObjType_MIN;
  static constexpr ObjType ObjType_MAX =
    ObstacleRadar_ObjType_ObjType_MAX;
  static constexpr int ObjType_ARRAYSIZE =
    ObstacleRadar_ObjType_ObjType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjType_descriptor() {
    return ObstacleRadar_ObjType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjType_Name.");
    return ObstacleRadar_ObjType_Name(enum_t_value);
  }
  static inline bool ObjType_Parse(const std::string& name,
      ObjType* value) {
    return ObstacleRadar_ObjType_Parse(name, value);
  }

  typedef ObstacleRadar_TrackStatus TrackStatus;
  static constexpr TrackStatus TRACK_STATUS_NO_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_NO_TARGET;
  static constexpr TrackStatus TRACK_STATUS_NEW_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_TARGET;
  static constexpr TrackStatus TRACK_STATUS_NEW_UPDATED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_UPDATED_TARGET;
  static constexpr TrackStatus TRACK_STATUS_UPDATED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_UPDATED_TARGET;
  static constexpr TrackStatus TRACK_STATUS_COASTED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_COASTED_TARGET;
  static constexpr TrackStatus TRACK_STATUS_MERGED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_MERGED_TARGET;
  static constexpr TrackStatus TRACK_STATUS_INVALID_COASTED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_INVALID_COASTED_TARGET;
  static constexpr TrackStatus TRACK_STATUS_NEW_COASTED_TARGET =
    ObstacleRadar_TrackStatus_TRACK_STATUS_NEW_COASTED_TARGET;
  static inline bool TrackStatus_IsValid(int value) {
    return ObstacleRadar_TrackStatus_IsValid(value);
  }
  static constexpr TrackStatus TrackStatus_MIN =
    ObstacleRadar_TrackStatus_TrackStatus_MIN;
  static constexpr TrackStatus TrackStatus_MAX =
    ObstacleRadar_TrackStatus_TrackStatus_MAX;
  static constexpr int TrackStatus_ARRAYSIZE =
    ObstacleRadar_TrackStatus_TrackStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrackStatus_descriptor() {
    return ObstacleRadar_TrackStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TrackStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrackStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrackStatus_Name.");
    return ObstacleRadar_TrackStatus_Name(enum_t_value);
  }
  static inline bool TrackStatus_Parse(const std::string& name,
      TrackStatus* value) {
    return ObstacleRadar_TrackStatus_Parse(name, value);
  }

  typedef ObstacleRadar_MergedStatus MergedStatus;
  static constexpr MergedStatus MERGED_STATUS_NO_TARGET =
    ObstacleRadar_MergedStatus_MERGED_STATUS_NO_TARGET;
  static constexpr MergedStatus MERGED_STATUS_MR_TARGET =
    ObstacleRadar_MergedStatus_MERGED_STATUS_MR_TARGET;
  static constexpr MergedStatus MERGED_STATUS_LR_TARGET =
    ObstacleRadar_MergedStatus_MERGED_STATUS_LR_TARGET;
  static constexpr MergedStatus MERGED_STATUS_MR_LR_TARGET =
    ObstacleRadar_MergedStatus_MERGED_STATUS_MR_LR_TARGET;
  static inline bool MergedStatus_IsValid(int value) {
    return ObstacleRadar_MergedStatus_IsValid(value);
  }
  static constexpr MergedStatus MergedStatus_MIN =
    ObstacleRadar_MergedStatus_MergedStatus_MIN;
  static constexpr MergedStatus MergedStatus_MAX =
    ObstacleRadar_MergedStatus_MergedStatus_MAX;
  static constexpr int MergedStatus_ARRAYSIZE =
    ObstacleRadar_MergedStatus_MergedStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MergedStatus_descriptor() {
    return ObstacleRadar_MergedStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& MergedStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MergedStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MergedStatus_Name.");
    return ObstacleRadar_MergedStatus_Name(enum_t_value);
  }
  static inline bool MergedStatus_Parse(const std::string& name,
      MergedStatus* value) {
    return ObstacleRadar_MergedStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTrackStatusFieldNumber = 3,
    kMergedStatusFieldNumber = 4,
    kOncommingFieldNumber = 5,
    kBridgeFieldNumber = 6,
    kRangeFieldNumber = 7,
    kAngleFieldNumber = 8,
    kRangeRateFieldNumber = 9,
    kRangeAccelerationFieldNumber = 10,
    kLateralRateFieldNumber = 11,
    kWidthFieldNumber = 12,
    kXFieldNumber = 13,
    kYFieldNumber = 14,
    kVXFieldNumber = 15,
    kVYFieldNumber = 16,
    kAccelXFieldNumber = 17,
    kAccelYFieldNumber = 18,
    kYawRateFieldNumber = 19,
  };
  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::phoenix::msg::perception::ObstacleRadar_ObjType type() const;
  void set_type(::phoenix::msg::perception::ObstacleRadar_ObjType value);

  // optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
  bool has_track_status() const;
  void clear_track_status();
  ::phoenix::msg::perception::ObstacleRadar_TrackStatus track_status() const;
  void set_track_status(::phoenix::msg::perception::ObstacleRadar_TrackStatus value);

  // optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
  bool has_merged_status() const;
  void clear_merged_status();
  ::phoenix::msg::perception::ObstacleRadar_MergedStatus merged_status() const;
  void set_merged_status(::phoenix::msg::perception::ObstacleRadar_MergedStatus value);

  // optional bool oncomming = 5 [default = false];
  bool has_oncomming() const;
  void clear_oncomming();
  bool oncomming() const;
  void set_oncomming(bool value);

  // optional bool bridge = 6 [default = false];
  bool has_bridge() const;
  void clear_bridge();
  bool bridge() const;
  void set_bridge(bool value);

  // optional float range = 7 [default = 0];
  bool has_range() const;
  void clear_range();
  float range() const;
  void set_range(float value);

  // optional float angle = 8 [default = 0];
  bool has_angle() const;
  void clear_angle();
  float angle() const;
  void set_angle(float value);

  // optional float range_rate = 9 [default = 0];
  bool has_range_rate() const;
  void clear_range_rate();
  float range_rate() const;
  void set_range_rate(float value);

  // optional float range_acceleration = 10 [default = 0];
  bool has_range_acceleration() const;
  void clear_range_acceleration();
  float range_acceleration() const;
  void set_range_acceleration(float value);

  // optional float lateral_rate = 11 [default = 0];
  bool has_lateral_rate() const;
  void clear_lateral_rate();
  float lateral_rate() const;
  void set_lateral_rate(float value);

  // optional float width = 12 [default = 0];
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // optional float x = 13 [default = 0];
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // optional float y = 14 [default = 0];
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // optional float v_x = 15 [default = 0];
  bool has_v_x() const;
  void clear_v_x();
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 16 [default = 0];
  bool has_v_y() const;
  void clear_v_y();
  float v_y() const;
  void set_v_y(float value);

  // optional float accel_x = 17 [default = 0];
  bool has_accel_x() const;
  void clear_accel_x();
  float accel_x() const;
  void set_accel_x(float value);

  // optional float accel_y = 18 [default = 0];
  bool has_accel_y() const;
  void clear_accel_y();
  float accel_y() const;
  void set_accel_y(float value);

  // optional float yaw_rate = 19 [default = 0];
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleRadar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  int track_status_;
  int merged_status_;
  bool oncomming_;
  bool bridge_;
  float range_;
  float angle_;
  float range_rate_;
  float range_acceleration_;
  float lateral_rate_;
  float width_;
  float x_;
  float y_;
  float v_x_;
  float v_y_;
  float accel_x_;
  float accel_y_;
  float yaw_rate_;
  friend struct ::TableStruct_obstacles_5fradar_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRadarList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.perception.ObstacleRadarList) */ {
 public:
  ObstacleRadarList();
  virtual ~ObstacleRadarList();

  ObstacleRadarList(const ObstacleRadarList& from);
  ObstacleRadarList(ObstacleRadarList&& from) noexcept
    : ObstacleRadarList() {
    *this = ::std::move(from);
  }

  inline ObstacleRadarList& operator=(const ObstacleRadarList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRadarList& operator=(ObstacleRadarList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRadarList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleRadarList* internal_default_instance() {
    return reinterpret_cast<const ObstacleRadarList*>(
               &_ObstacleRadarList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObstacleRadarList& a, ObstacleRadarList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleRadarList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRadarList* New() const final {
    return CreateMaybeMessage<ObstacleRadarList>(nullptr);
  }

  ObstacleRadarList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRadarList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRadarList& from);
  void MergeFrom(const ObstacleRadarList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRadarList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.perception.ObstacleRadarList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_5fradar_2eproto);
    return ::descriptor_table_obstacles_5fradar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleRadarList_RadarType RadarType;
  static constexpr RadarType RADAR_TYPE_UNKNOWN =
    ObstacleRadarList_RadarType_RADAR_TYPE_UNKNOWN;
  static constexpr RadarType RADAR_TYPE_ESR =
    ObstacleRadarList_RadarType_RADAR_TYPE_ESR;
  static constexpr RadarType RADAR_TYPE_SRR2 =
    ObstacleRadarList_RadarType_RADAR_TYPE_SRR2;
  static constexpr RadarType RADAR_TYPE_RR51W =
    ObstacleRadarList_RadarType_RADAR_TYPE_RR51W;
  static constexpr RadarType RADAR_TYPE_ARS430 =
    ObstacleRadarList_RadarType_RADAR_TYPE_ARS430;
  static inline bool RadarType_IsValid(int value) {
    return ObstacleRadarList_RadarType_IsValid(value);
  }
  static constexpr RadarType RadarType_MIN =
    ObstacleRadarList_RadarType_RadarType_MIN;
  static constexpr RadarType RadarType_MAX =
    ObstacleRadarList_RadarType_RadarType_MAX;
  static constexpr int RadarType_ARRAYSIZE =
    ObstacleRadarList_RadarType_RadarType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RadarType_descriptor() {
    return ObstacleRadarList_RadarType_descriptor();
  }
  template<typename T>
  static inline const std::string& RadarType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RadarType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RadarType_Name.");
    return ObstacleRadarList_RadarType_Name(enum_t_value);
  }
  static inline bool RadarType_Parse(const std::string& name,
      RadarType* value) {
    return ObstacleRadarList_RadarType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kRadarTypeFieldNumber = 2,
    kObstaclesNumFieldNumber = 3,
  };
  // repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
  int obstacles_size() const;
  void clear_obstacles();
  ::phoenix::msg::perception::ObstacleRadar* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleRadar >*
      mutable_obstacles();
  const ::phoenix::msg::perception::ObstacleRadar& obstacles(int index) const;
  ::phoenix::msg::perception::ObstacleRadar* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleRadar >&
      obstacles() const;

  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
  bool has_radar_type() const;
  void clear_radar_type();
  ::phoenix::msg::perception::ObstacleRadarList_RadarType radar_type() const;
  void set_radar_type(::phoenix::msg::perception::ObstacleRadarList_RadarType value);

  // optional int32 obstacles_num = 3 [default = 0];
  bool has_obstacles_num() const;
  void clear_obstacles_num();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacles_num() const;
  void set_obstacles_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.perception.ObstacleRadarList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleRadar > obstacles_;
  ::phoenix::msg::common::Header* header_;
  int radar_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacles_num_;
  friend struct ::TableStruct_obstacles_5fradar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleRadar

// optional int32 id = 1 [default = 0];
inline bool ObstacleRadar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleRadar::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRadar::id() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.id)
  return id_;
}
inline void ObstacleRadar::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.id)
}

// optional .phoenix.msg.perception.ObstacleRadar.ObjType type = 2 [default = OBJ_TYPE_UNKNOWN];
inline bool ObstacleRadar::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleRadar::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::ObstacleRadar_ObjType ObstacleRadar::type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.type)
  return static_cast< ::phoenix::msg::perception::ObstacleRadar_ObjType >(type_);
}
inline void ObstacleRadar::set_type(::phoenix::msg::perception::ObstacleRadar_ObjType value) {
  assert(::phoenix::msg::perception::ObstacleRadar_ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.type)
}

// optional .phoenix.msg.perception.ObstacleRadar.TrackStatus track_status = 3 [default = TRACK_STATUS_NO_TARGET];
inline bool ObstacleRadar::has_track_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleRadar::clear_track_status() {
  track_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::phoenix::msg::perception::ObstacleRadar_TrackStatus ObstacleRadar::track_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.track_status)
  return static_cast< ::phoenix::msg::perception::ObstacleRadar_TrackStatus >(track_status_);
}
inline void ObstacleRadar::set_track_status(::phoenix::msg::perception::ObstacleRadar_TrackStatus value) {
  assert(::phoenix::msg::perception::ObstacleRadar_TrackStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  track_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.track_status)
}

// optional .phoenix.msg.perception.ObstacleRadar.MergedStatus merged_status = 4 [default = MERGED_STATUS_NO_TARGET];
inline bool ObstacleRadar::has_merged_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleRadar::clear_merged_status() {
  merged_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::phoenix::msg::perception::ObstacleRadar_MergedStatus ObstacleRadar::merged_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.merged_status)
  return static_cast< ::phoenix::msg::perception::ObstacleRadar_MergedStatus >(merged_status_);
}
inline void ObstacleRadar::set_merged_status(::phoenix::msg::perception::ObstacleRadar_MergedStatus value) {
  assert(::phoenix::msg::perception::ObstacleRadar_MergedStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  merged_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.merged_status)
}

// optional bool oncomming = 5 [default = false];
inline bool ObstacleRadar::has_oncomming() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleRadar::clear_oncomming() {
  oncomming_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObstacleRadar::oncomming() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.oncomming)
  return oncomming_;
}
inline void ObstacleRadar::set_oncomming(bool value) {
  _has_bits_[0] |= 0x00000010u;
  oncomming_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.oncomming)
}

// optional bool bridge = 6 [default = false];
inline bool ObstacleRadar::has_bridge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObstacleRadar::clear_bridge() {
  bridge_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObstacleRadar::bridge() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.bridge)
  return bridge_;
}
inline void ObstacleRadar::set_bridge(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bridge_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.bridge)
}

// optional float range = 7 [default = 0];
inline bool ObstacleRadar::has_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObstacleRadar::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ObstacleRadar::range() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.range)
  return range_;
}
inline void ObstacleRadar::set_range(float value) {
  _has_bits_[0] |= 0x00000040u;
  range_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.range)
}

// optional float angle = 8 [default = 0];
inline bool ObstacleRadar::has_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObstacleRadar::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ObstacleRadar::angle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.angle)
  return angle_;
}
inline void ObstacleRadar::set_angle(float value) {
  _has_bits_[0] |= 0x00000080u;
  angle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.angle)
}

// optional float range_rate = 9 [default = 0];
inline bool ObstacleRadar::has_range_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObstacleRadar::clear_range_rate() {
  range_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ObstacleRadar::range_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.range_rate)
  return range_rate_;
}
inline void ObstacleRadar::set_range_rate(float value) {
  _has_bits_[0] |= 0x00000100u;
  range_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.range_rate)
}

// optional float range_acceleration = 10 [default = 0];
inline bool ObstacleRadar::has_range_acceleration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObstacleRadar::clear_range_acceleration() {
  range_acceleration_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ObstacleRadar::range_acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.range_acceleration)
  return range_acceleration_;
}
inline void ObstacleRadar::set_range_acceleration(float value) {
  _has_bits_[0] |= 0x00000200u;
  range_acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.range_acceleration)
}

// optional float lateral_rate = 11 [default = 0];
inline bool ObstacleRadar::has_lateral_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObstacleRadar::clear_lateral_rate() {
  lateral_rate_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ObstacleRadar::lateral_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.lateral_rate)
  return lateral_rate_;
}
inline void ObstacleRadar::set_lateral_rate(float value) {
  _has_bits_[0] |= 0x00000400u;
  lateral_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.lateral_rate)
}

// optional float width = 12 [default = 0];
inline bool ObstacleRadar::has_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObstacleRadar::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ObstacleRadar::width() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.width)
  return width_;
}
inline void ObstacleRadar::set_width(float value) {
  _has_bits_[0] |= 0x00000800u;
  width_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.width)
}

// optional float x = 13 [default = 0];
inline bool ObstacleRadar::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObstacleRadar::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ObstacleRadar::x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.x)
  return x_;
}
inline void ObstacleRadar::set_x(float value) {
  _has_bits_[0] |= 0x00001000u;
  x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.x)
}

// optional float y = 14 [default = 0];
inline bool ObstacleRadar::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObstacleRadar::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ObstacleRadar::y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.y)
  return y_;
}
inline void ObstacleRadar::set_y(float value) {
  _has_bits_[0] |= 0x00002000u;
  y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.y)
}

// optional float v_x = 15 [default = 0];
inline bool ObstacleRadar::has_v_x() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ObstacleRadar::clear_v_x() {
  v_x_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ObstacleRadar::v_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.v_x)
  return v_x_;
}
inline void ObstacleRadar::set_v_x(float value) {
  _has_bits_[0] |= 0x00004000u;
  v_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.v_x)
}

// optional float v_y = 16 [default = 0];
inline bool ObstacleRadar::has_v_y() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ObstacleRadar::clear_v_y() {
  v_y_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ObstacleRadar::v_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.v_y)
  return v_y_;
}
inline void ObstacleRadar::set_v_y(float value) {
  _has_bits_[0] |= 0x00008000u;
  v_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.v_y)
}

// optional float accel_x = 17 [default = 0];
inline bool ObstacleRadar::has_accel_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ObstacleRadar::clear_accel_x() {
  accel_x_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ObstacleRadar::accel_x() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.accel_x)
  return accel_x_;
}
inline void ObstacleRadar::set_accel_x(float value) {
  _has_bits_[0] |= 0x00010000u;
  accel_x_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.accel_x)
}

// optional float accel_y = 18 [default = 0];
inline bool ObstacleRadar::has_accel_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ObstacleRadar::clear_accel_y() {
  accel_y_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ObstacleRadar::accel_y() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.accel_y)
  return accel_y_;
}
inline void ObstacleRadar::set_accel_y(float value) {
  _has_bits_[0] |= 0x00020000u;
  accel_y_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.accel_y)
}

// optional float yaw_rate = 19 [default = 0];
inline bool ObstacleRadar::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ObstacleRadar::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ObstacleRadar::yaw_rate() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadar.yaw_rate)
  return yaw_rate_;
}
inline void ObstacleRadar::set_yaw_rate(float value) {
  _has_bits_[0] |= 0x00040000u;
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadar.yaw_rate)
}

// -------------------------------------------------------------------

// ObstacleRadarList

// optional .phoenix.msg.common.Header header = 1;
inline bool ObstacleRadarList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& ObstacleRadarList::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadarList.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ObstacleRadarList::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.perception.ObstacleRadarList.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* ObstacleRadarList::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleRadarList.header)
  return header_;
}
inline void ObstacleRadarList::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.perception.ObstacleRadarList.header)
}

// optional .phoenix.msg.perception.ObstacleRadarList.RadarType radar_type = 2 [default = RADAR_TYPE_UNKNOWN];
inline bool ObstacleRadarList::has_radar_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleRadarList::clear_radar_type() {
  radar_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::phoenix::msg::perception::ObstacleRadarList_RadarType ObstacleRadarList::radar_type() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadarList.radar_type)
  return static_cast< ::phoenix::msg::perception::ObstacleRadarList_RadarType >(radar_type_);
}
inline void ObstacleRadarList::set_radar_type(::phoenix::msg::perception::ObstacleRadarList_RadarType value) {
  assert(::phoenix::msg::perception::ObstacleRadarList_RadarType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  radar_type_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadarList.radar_type)
}

// optional int32 obstacles_num = 3 [default = 0];
inline bool ObstacleRadarList::has_obstacles_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleRadarList::clear_obstacles_num() {
  obstacles_num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleRadarList::obstacles_num() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadarList.obstacles_num)
  return obstacles_num_;
}
inline void ObstacleRadarList::set_obstacles_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  obstacles_num_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.perception.ObstacleRadarList.obstacles_num)
}

// repeated .phoenix.msg.perception.ObstacleRadar obstacles = 4;
inline int ObstacleRadarList::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstacleRadarList::clear_obstacles() {
  obstacles_.Clear();
}
inline ::phoenix::msg::perception::ObstacleRadar* ObstacleRadarList::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:phoenix.msg.perception.ObstacleRadarList.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleRadar >*
ObstacleRadarList::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:phoenix.msg.perception.ObstacleRadarList.obstacles)
  return &obstacles_;
}
inline const ::phoenix::msg::perception::ObstacleRadar& ObstacleRadarList::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:phoenix.msg.perception.ObstacleRadarList.obstacles)
  return obstacles_.Get(index);
}
inline ::phoenix::msg::perception::ObstacleRadar* ObstacleRadarList::add_obstacles() {
  // @@protoc_insertion_point(field_add:phoenix.msg.perception.ObstacleRadarList.obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phoenix::msg::perception::ObstacleRadar >&
ObstacleRadarList::obstacles() const {
  // @@protoc_insertion_point(field_list:phoenix.msg.perception.ObstacleRadarList.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleRadar_ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleRadar_ObjType>() {
  return ::phoenix::msg::perception::ObstacleRadar_ObjType_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleRadar_TrackStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleRadar_TrackStatus>() {
  return ::phoenix::msg::perception::ObstacleRadar_TrackStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleRadar_MergedStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleRadar_MergedStatus>() {
  return ::phoenix::msg::perception::ObstacleRadar_MergedStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::perception::ObstacleRadarList_RadarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::perception::ObstacleRadarList_RadarType>() {
  return ::phoenix::msg::perception::ObstacleRadarList_RadarType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacles_5fradar_2eproto
