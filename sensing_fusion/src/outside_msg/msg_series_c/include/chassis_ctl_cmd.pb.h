// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis_ctl_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chassis_5fctl_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chassis_5fctl_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_5fctl_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_5fctl_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chassis_5fctl_5fcmd_2eproto;
namespace phoenix {
namespace msg {
namespace control {
class ChassisCtlCmd;
class ChassisCtlCmdDefaultTypeInternal;
extern ChassisCtlCmdDefaultTypeInternal _ChassisCtlCmd_default_instance_;
}  // namespace control
}  // namespace msg
}  // namespace phoenix
PROTOBUF_NAMESPACE_OPEN
template<> ::phoenix::msg::control::ChassisCtlCmd* Arena::CreateMaybeMessage<::phoenix::msg::control::ChassisCtlCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phoenix {
namespace msg {
namespace control {

enum ChassisCtlCmd_GearPosition : int {
  ChassisCtlCmd_GearPosition_GEAR_INVALID = 0,
  ChassisCtlCmd_GearPosition_GEAR_P = 1,
  ChassisCtlCmd_GearPosition_GEAR_N = 2,
  ChassisCtlCmd_GearPosition_GEAR_R = 3,
  ChassisCtlCmd_GearPosition_GEAR_D = 4
};
bool ChassisCtlCmd_GearPosition_IsValid(int value);
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd_GearPosition_GearPosition_MIN = ChassisCtlCmd_GearPosition_GEAR_INVALID;
constexpr ChassisCtlCmd_GearPosition ChassisCtlCmd_GearPosition_GearPosition_MAX = ChassisCtlCmd_GearPosition_GEAR_D;
constexpr int ChassisCtlCmd_GearPosition_GearPosition_ARRAYSIZE = ChassisCtlCmd_GearPosition_GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_GearPosition_descriptor();
template<typename T>
inline const std::string& ChassisCtlCmd_GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChassisCtlCmd_GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChassisCtlCmd_GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChassisCtlCmd_GearPosition_descriptor(), enum_t_value);
}
inline bool ChassisCtlCmd_GearPosition_Parse(
    const std::string& name, ChassisCtlCmd_GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChassisCtlCmd_GearPosition>(
    ChassisCtlCmd_GearPosition_descriptor(), name, value);
}
enum ChassisCtlCmd_SignalLamp : int {
  ChassisCtlCmd_SignalLamp_LAMP_INVALID = 0,
  ChassisCtlCmd_SignalLamp_LAMP_OFF = 1,
  ChassisCtlCmd_SignalLamp_LAMP_ON = 2
};
bool ChassisCtlCmd_SignalLamp_IsValid(int value);
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd_SignalLamp_SignalLamp_MIN = ChassisCtlCmd_SignalLamp_LAMP_INVALID;
constexpr ChassisCtlCmd_SignalLamp ChassisCtlCmd_SignalLamp_SignalLamp_MAX = ChassisCtlCmd_SignalLamp_LAMP_ON;
constexpr int ChassisCtlCmd_SignalLamp_SignalLamp_ARRAYSIZE = ChassisCtlCmd_SignalLamp_SignalLamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_SignalLamp_descriptor();
template<typename T>
inline const std::string& ChassisCtlCmd_SignalLamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChassisCtlCmd_SignalLamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChassisCtlCmd_SignalLamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChassisCtlCmd_SignalLamp_descriptor(), enum_t_value);
}
inline bool ChassisCtlCmd_SignalLamp_Parse(
    const std::string& name, ChassisCtlCmd_SignalLamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChassisCtlCmd_SignalLamp>(
    ChassisCtlCmd_SignalLamp_descriptor(), name, value);
}
enum ChassisCtlCmd_SignalTurnLamp : int {
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID = 0,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_OFF = 1,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_LEFT = 2,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_RIGHT = 3,
  ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY = 4
};
bool ChassisCtlCmd_SignalTurnLamp_IsValid(int value);
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MIN = ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID;
constexpr ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX = ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY;
constexpr int ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE = ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_SignalTurnLamp_descriptor();
template<typename T>
inline const std::string& ChassisCtlCmd_SignalTurnLamp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChassisCtlCmd_SignalTurnLamp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChassisCtlCmd_SignalTurnLamp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChassisCtlCmd_SignalTurnLamp_descriptor(), enum_t_value);
}
inline bool ChassisCtlCmd_SignalTurnLamp_Parse(
    const std::string& name, ChassisCtlCmd_SignalTurnLamp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChassisCtlCmd_SignalTurnLamp>(
    ChassisCtlCmd_SignalTurnLamp_descriptor(), name, value);
}
enum ChassisCtlCmd_EpbStatus : int {
  ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID = 0,
  ChassisCtlCmd_EpbStatus_EPB_STATUS_OFF = 1,
  ChassisCtlCmd_EpbStatus_EPB_STATUS_ON = 2
};
bool ChassisCtlCmd_EpbStatus_IsValid(int value);
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd_EpbStatus_EpbStatus_MIN = ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID;
constexpr ChassisCtlCmd_EpbStatus ChassisCtlCmd_EpbStatus_EpbStatus_MAX = ChassisCtlCmd_EpbStatus_EPB_STATUS_ON;
constexpr int ChassisCtlCmd_EpbStatus_EpbStatus_ARRAYSIZE = ChassisCtlCmd_EpbStatus_EpbStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_EpbStatus_descriptor();
template<typename T>
inline const std::string& ChassisCtlCmd_EpbStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChassisCtlCmd_EpbStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChassisCtlCmd_EpbStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChassisCtlCmd_EpbStatus_descriptor(), enum_t_value);
}
inline bool ChassisCtlCmd_EpbStatus_Parse(
    const std::string& name, ChassisCtlCmd_EpbStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChassisCtlCmd_EpbStatus>(
    ChassisCtlCmd_EpbStatus_descriptor(), name, value);
}
enum ChassisCtlCmd_WiperStatus : int {
  ChassisCtlCmd_WiperStatus_WIPER_INVALID = 0,
  ChassisCtlCmd_WiperStatus_WIPER_OFF = 1,
  ChassisCtlCmd_WiperStatus_WIPER_SHORT_PRESS_WITH_CLICK = 2,
  ChassisCtlCmd_WiperStatus_WIPER_LONG_PRESS_WITH_CLICK = 3,
  ChassisCtlCmd_WiperStatus_WIPER_INT_1 = 4,
  ChassisCtlCmd_WiperStatus_WIPER_INT_2 = 5,
  ChassisCtlCmd_WiperStatus_WIPER_INT_3 = 6,
  ChassisCtlCmd_WiperStatus_WIPER_INT_4 = 7,
  ChassisCtlCmd_WiperStatus_WIPER_LO = 8,
  ChassisCtlCmd_WiperStatus_WIPER_HI = 9
};
bool ChassisCtlCmd_WiperStatus_IsValid(int value);
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd_WiperStatus_WiperStatus_MIN = ChassisCtlCmd_WiperStatus_WIPER_INVALID;
constexpr ChassisCtlCmd_WiperStatus ChassisCtlCmd_WiperStatus_WiperStatus_MAX = ChassisCtlCmd_WiperStatus_WIPER_HI;
constexpr int ChassisCtlCmd_WiperStatus_WiperStatus_ARRAYSIZE = ChassisCtlCmd_WiperStatus_WiperStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisCtlCmd_WiperStatus_descriptor();
template<typename T>
inline const std::string& ChassisCtlCmd_WiperStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChassisCtlCmd_WiperStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChassisCtlCmd_WiperStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChassisCtlCmd_WiperStatus_descriptor(), enum_t_value);
}
inline bool ChassisCtlCmd_WiperStatus_Parse(
    const std::string& name, ChassisCtlCmd_WiperStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChassisCtlCmd_WiperStatus>(
    ChassisCtlCmd_WiperStatus_descriptor(), name, value);
}
// ===================================================================

class ChassisCtlCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phoenix.msg.control.ChassisCtlCmd) */ {
 public:
  ChassisCtlCmd();
  virtual ~ChassisCtlCmd();

  ChassisCtlCmd(const ChassisCtlCmd& from);
  ChassisCtlCmd(ChassisCtlCmd&& from) noexcept
    : ChassisCtlCmd() {
    *this = ::std::move(from);
  }

  inline ChassisCtlCmd& operator=(const ChassisCtlCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisCtlCmd& operator=(ChassisCtlCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisCtlCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisCtlCmd* internal_default_instance() {
    return reinterpret_cast<const ChassisCtlCmd*>(
               &_ChassisCtlCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChassisCtlCmd& a, ChassisCtlCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisCtlCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisCtlCmd* New() const final {
    return CreateMaybeMessage<ChassisCtlCmd>(nullptr);
  }

  ChassisCtlCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisCtlCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisCtlCmd& from);
  void MergeFrom(const ChassisCtlCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisCtlCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phoenix.msg.control.ChassisCtlCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chassis_5fctl_5fcmd_2eproto);
    return ::descriptor_table_chassis_5fctl_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChassisCtlCmd_GearPosition GearPosition;
  static constexpr GearPosition GEAR_INVALID =
    ChassisCtlCmd_GearPosition_GEAR_INVALID;
  static constexpr GearPosition GEAR_P =
    ChassisCtlCmd_GearPosition_GEAR_P;
  static constexpr GearPosition GEAR_N =
    ChassisCtlCmd_GearPosition_GEAR_N;
  static constexpr GearPosition GEAR_R =
    ChassisCtlCmd_GearPosition_GEAR_R;
  static constexpr GearPosition GEAR_D =
    ChassisCtlCmd_GearPosition_GEAR_D;
  static inline bool GearPosition_IsValid(int value) {
    return ChassisCtlCmd_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN =
    ChassisCtlCmd_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX =
    ChassisCtlCmd_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE =
    ChassisCtlCmd_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GearPosition_descriptor() {
    return ChassisCtlCmd_GearPosition_descriptor();
  }
  template<typename T>
  static inline const std::string& GearPosition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GearPosition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GearPosition_Name.");
    return ChassisCtlCmd_GearPosition_Name(enum_t_value);
  }
  static inline bool GearPosition_Parse(const std::string& name,
      GearPosition* value) {
    return ChassisCtlCmd_GearPosition_Parse(name, value);
  }

  typedef ChassisCtlCmd_SignalLamp SignalLamp;
  static constexpr SignalLamp LAMP_INVALID =
    ChassisCtlCmd_SignalLamp_LAMP_INVALID;
  static constexpr SignalLamp LAMP_OFF =
    ChassisCtlCmd_SignalLamp_LAMP_OFF;
  static constexpr SignalLamp LAMP_ON =
    ChassisCtlCmd_SignalLamp_LAMP_ON;
  static inline bool SignalLamp_IsValid(int value) {
    return ChassisCtlCmd_SignalLamp_IsValid(value);
  }
  static constexpr SignalLamp SignalLamp_MIN =
    ChassisCtlCmd_SignalLamp_SignalLamp_MIN;
  static constexpr SignalLamp SignalLamp_MAX =
    ChassisCtlCmd_SignalLamp_SignalLamp_MAX;
  static constexpr int SignalLamp_ARRAYSIZE =
    ChassisCtlCmd_SignalLamp_SignalLamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalLamp_descriptor() {
    return ChassisCtlCmd_SignalLamp_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalLamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalLamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalLamp_Name.");
    return ChassisCtlCmd_SignalLamp_Name(enum_t_value);
  }
  static inline bool SignalLamp_Parse(const std::string& name,
      SignalLamp* value) {
    return ChassisCtlCmd_SignalLamp_Parse(name, value);
  }

  typedef ChassisCtlCmd_SignalTurnLamp SignalTurnLamp;
  static constexpr SignalTurnLamp TURN_LAMP_INVALID =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_INVALID;
  static constexpr SignalTurnLamp TURN_LAMP_OFF =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_OFF;
  static constexpr SignalTurnLamp TURN_LAMP_LEFT =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_LEFT;
  static constexpr SignalTurnLamp TURN_LAMP_RIGHT =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_RIGHT;
  static constexpr SignalTurnLamp TURN_LAMP_EMERGENCY =
    ChassisCtlCmd_SignalTurnLamp_TURN_LAMP_EMERGENCY;
  static inline bool SignalTurnLamp_IsValid(int value) {
    return ChassisCtlCmd_SignalTurnLamp_IsValid(value);
  }
  static constexpr SignalTurnLamp SignalTurnLamp_MIN =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MIN;
  static constexpr SignalTurnLamp SignalTurnLamp_MAX =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_MAX;
  static constexpr int SignalTurnLamp_ARRAYSIZE =
    ChassisCtlCmd_SignalTurnLamp_SignalTurnLamp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalTurnLamp_descriptor() {
    return ChassisCtlCmd_SignalTurnLamp_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalTurnLamp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalTurnLamp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalTurnLamp_Name.");
    return ChassisCtlCmd_SignalTurnLamp_Name(enum_t_value);
  }
  static inline bool SignalTurnLamp_Parse(const std::string& name,
      SignalTurnLamp* value) {
    return ChassisCtlCmd_SignalTurnLamp_Parse(name, value);
  }

  typedef ChassisCtlCmd_EpbStatus EpbStatus;
  static constexpr EpbStatus EPB_STATUS_INVALID =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_INVALID;
  static constexpr EpbStatus EPB_STATUS_OFF =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_OFF;
  static constexpr EpbStatus EPB_STATUS_ON =
    ChassisCtlCmd_EpbStatus_EPB_STATUS_ON;
  static inline bool EpbStatus_IsValid(int value) {
    return ChassisCtlCmd_EpbStatus_IsValid(value);
  }
  static constexpr EpbStatus EpbStatus_MIN =
    ChassisCtlCmd_EpbStatus_EpbStatus_MIN;
  static constexpr EpbStatus EpbStatus_MAX =
    ChassisCtlCmd_EpbStatus_EpbStatus_MAX;
  static constexpr int EpbStatus_ARRAYSIZE =
    ChassisCtlCmd_EpbStatus_EpbStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbStatus_descriptor() {
    return ChassisCtlCmd_EpbStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbStatus_Name.");
    return ChassisCtlCmd_EpbStatus_Name(enum_t_value);
  }
  static inline bool EpbStatus_Parse(const std::string& name,
      EpbStatus* value) {
    return ChassisCtlCmd_EpbStatus_Parse(name, value);
  }

  typedef ChassisCtlCmd_WiperStatus WiperStatus;
  static constexpr WiperStatus WIPER_INVALID =
    ChassisCtlCmd_WiperStatus_WIPER_INVALID;
  static constexpr WiperStatus WIPER_OFF =
    ChassisCtlCmd_WiperStatus_WIPER_OFF;
  static constexpr WiperStatus WIPER_SHORT_PRESS_WITH_CLICK =
    ChassisCtlCmd_WiperStatus_WIPER_SHORT_PRESS_WITH_CLICK;
  static constexpr WiperStatus WIPER_LONG_PRESS_WITH_CLICK =
    ChassisCtlCmd_WiperStatus_WIPER_LONG_PRESS_WITH_CLICK;
  static constexpr WiperStatus WIPER_INT_1 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_1;
  static constexpr WiperStatus WIPER_INT_2 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_2;
  static constexpr WiperStatus WIPER_INT_3 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_3;
  static constexpr WiperStatus WIPER_INT_4 =
    ChassisCtlCmd_WiperStatus_WIPER_INT_4;
  static constexpr WiperStatus WIPER_LO =
    ChassisCtlCmd_WiperStatus_WIPER_LO;
  static constexpr WiperStatus WIPER_HI =
    ChassisCtlCmd_WiperStatus_WIPER_HI;
  static inline bool WiperStatus_IsValid(int value) {
    return ChassisCtlCmd_WiperStatus_IsValid(value);
  }
  static constexpr WiperStatus WiperStatus_MIN =
    ChassisCtlCmd_WiperStatus_WiperStatus_MIN;
  static constexpr WiperStatus WiperStatus_MAX =
    ChassisCtlCmd_WiperStatus_WiperStatus_MAX;
  static constexpr int WiperStatus_ARRAYSIZE =
    ChassisCtlCmd_WiperStatus_WiperStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WiperStatus_descriptor() {
    return ChassisCtlCmd_WiperStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& WiperStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WiperStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WiperStatus_Name.");
    return ChassisCtlCmd_WiperStatus_Name(enum_t_value);
  }
  static inline bool WiperStatus_Parse(const std::string& name,
      WiperStatus* value) {
    return ChassisCtlCmd_WiperStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStartRoboticCtlFieldNumber = 2,
    kEnableEpsFieldNumber = 3,
    kEnableThrottleSysFieldNumber = 4,
    kEnableEbsFieldNumber = 5,
    kEnableRemoteCtlFieldNumber = 6,
    kEnableDirectCtlFieldNumber = 7,
    kEnableAccFieldNumber = 8,
    kReleaseThrottleFieldNumber = 9,
    kSteeringWheelAngleFieldNumber = 10,
    kSteeringWheelSpeedFieldNumber = 11,
    kSteeringWheelTorqueFieldNumber = 12,
    kVelocityFieldNumber = 13,
    kAccelerationFieldNumber = 14,
    kAccValueFieldNumber = 15,
    kBrakeValueFieldNumber = 16,
    kGearFieldNumber = 17,
    kTurnLampFieldNumber = 18,
    kBrakeLampFieldNumber = 19,
    kWiperFieldNumber = 20,
    kEpbStatusFieldNumber = 21,
  };
  // optional .phoenix.msg.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::phoenix::msg::common::Header& header() const;
  ::phoenix::msg::common::Header* release_header();
  ::phoenix::msg::common::Header* mutable_header();
  void set_allocated_header(::phoenix::msg::common::Header* header);

  // optional int32 start_robotic_ctl = 2 [default = 0];
  bool has_start_robotic_ctl() const;
  void clear_start_robotic_ctl();
  ::PROTOBUF_NAMESPACE_ID::int32 start_robotic_ctl() const;
  void set_start_robotic_ctl(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enable_eps = 3 [default = false];
  bool has_enable_eps() const;
  void clear_enable_eps();
  bool enable_eps() const;
  void set_enable_eps(bool value);

  // optional bool enable_throttle_sys = 4 [default = false];
  bool has_enable_throttle_sys() const;
  void clear_enable_throttle_sys();
  bool enable_throttle_sys() const;
  void set_enable_throttle_sys(bool value);

  // optional bool enable_ebs = 5 [default = false];
  bool has_enable_ebs() const;
  void clear_enable_ebs();
  bool enable_ebs() const;
  void set_enable_ebs(bool value);

  // optional bool enable_remote_ctl = 6 [default = false];
  bool has_enable_remote_ctl() const;
  void clear_enable_remote_ctl();
  bool enable_remote_ctl() const;
  void set_enable_remote_ctl(bool value);

  // optional bool enable_direct_ctl = 7 [default = false];
  bool has_enable_direct_ctl() const;
  void clear_enable_direct_ctl();
  bool enable_direct_ctl() const;
  void set_enable_direct_ctl(bool value);

  // optional bool enable_acc = 8 [default = false];
  bool has_enable_acc() const;
  void clear_enable_acc();
  bool enable_acc() const;
  void set_enable_acc(bool value);

  // optional bool release_throttle = 9 [default = false];
  bool has_release_throttle() const;
  void clear_release_throttle();
  bool release_throttle() const;
  void set_release_throttle(bool value);

  // optional float steering_wheel_angle = 10 [default = 0];
  bool has_steering_wheel_angle() const;
  void clear_steering_wheel_angle();
  float steering_wheel_angle() const;
  void set_steering_wheel_angle(float value);

  // optional float steering_wheel_speed = 11 [default = 0];
  bool has_steering_wheel_speed() const;
  void clear_steering_wheel_speed();
  float steering_wheel_speed() const;
  void set_steering_wheel_speed(float value);

  // optional float steering_wheel_torque = 12 [default = 0];
  bool has_steering_wheel_torque() const;
  void clear_steering_wheel_torque();
  float steering_wheel_torque() const;
  void set_steering_wheel_torque(float value);

  // optional float velocity = 13 [default = 0];
  bool has_velocity() const;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);

  // optional float acceleration = 14 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  float acceleration() const;
  void set_acceleration(float value);

  // optional float acc_value = 15 [default = 0];
  bool has_acc_value() const;
  void clear_acc_value();
  float acc_value() const;
  void set_acc_value(float value);

  // optional float brake_value = 16 [default = 0];
  bool has_brake_value() const;
  void clear_brake_value();
  float brake_value() const;
  void set_brake_value(float value);

  // optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
  bool has_gear() const;
  void clear_gear();
  ::phoenix::msg::control::ChassisCtlCmd_GearPosition gear() const;
  void set_gear(::phoenix::msg::control::ChassisCtlCmd_GearPosition value);

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
  bool has_turn_lamp() const;
  void clear_turn_lamp();
  ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp turn_lamp() const;
  void set_turn_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp value);

  // optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
  bool has_brake_lamp() const;
  void clear_brake_lamp();
  ::phoenix::msg::control::ChassisCtlCmd_SignalLamp brake_lamp() const;
  void set_brake_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalLamp value);

  // optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
  bool has_wiper() const;
  void clear_wiper();
  ::phoenix::msg::control::ChassisCtlCmd_WiperStatus wiper() const;
  void set_wiper(::phoenix::msg::control::ChassisCtlCmd_WiperStatus value);

  // optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
  bool has_epb_status() const;
  void clear_epb_status();
  ::phoenix::msg::control::ChassisCtlCmd_EpbStatus epb_status() const;
  void set_epb_status(::phoenix::msg::control::ChassisCtlCmd_EpbStatus value);

  // @@protoc_insertion_point(class_scope:phoenix.msg.control.ChassisCtlCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::phoenix::msg::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_robotic_ctl_;
  bool enable_eps_;
  bool enable_throttle_sys_;
  bool enable_ebs_;
  bool enable_remote_ctl_;
  bool enable_direct_ctl_;
  bool enable_acc_;
  bool release_throttle_;
  float steering_wheel_angle_;
  float steering_wheel_speed_;
  float steering_wheel_torque_;
  float velocity_;
  float acceleration_;
  float acc_value_;
  float brake_value_;
  int gear_;
  int turn_lamp_;
  int brake_lamp_;
  int wiper_;
  int epb_status_;
  friend struct ::TableStruct_chassis_5fctl_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChassisCtlCmd

// optional .phoenix.msg.common.Header header = 1;
inline bool ChassisCtlCmd::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::phoenix::msg::common::Header& ChassisCtlCmd::header() const {
  const ::phoenix::msg::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::phoenix::msg::common::Header*>(
      &::phoenix::msg::common::_Header_default_instance_);
}
inline ::phoenix::msg::common::Header* ChassisCtlCmd::release_header() {
  // @@protoc_insertion_point(field_release:phoenix.msg.control.ChassisCtlCmd.header)
  _has_bits_[0] &= ~0x00000001u;
  ::phoenix::msg::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::phoenix::msg::common::Header* ChassisCtlCmd::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::phoenix::msg::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:phoenix.msg.control.ChassisCtlCmd.header)
  return header_;
}
inline void ChassisCtlCmd::set_allocated_header(::phoenix::msg::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:phoenix.msg.control.ChassisCtlCmd.header)
}

// optional int32 start_robotic_ctl = 2 [default = 0];
inline bool ChassisCtlCmd::has_start_robotic_ctl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisCtlCmd::clear_start_robotic_ctl() {
  start_robotic_ctl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisCtlCmd::start_robotic_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.start_robotic_ctl)
  return start_robotic_ctl_;
}
inline void ChassisCtlCmd::set_start_robotic_ctl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_robotic_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.start_robotic_ctl)
}

// optional bool enable_eps = 3 [default = false];
inline bool ChassisCtlCmd::has_enable_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisCtlCmd::clear_enable_eps() {
  enable_eps_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChassisCtlCmd::enable_eps() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_eps)
  return enable_eps_;
}
inline void ChassisCtlCmd::set_enable_eps(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_eps_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_eps)
}

// optional bool enable_throttle_sys = 4 [default = false];
inline bool ChassisCtlCmd::has_enable_throttle_sys() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisCtlCmd::clear_enable_throttle_sys() {
  enable_throttle_sys_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChassisCtlCmd::enable_throttle_sys() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_throttle_sys)
  return enable_throttle_sys_;
}
inline void ChassisCtlCmd::set_enable_throttle_sys(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_throttle_sys_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_throttle_sys)
}

// optional bool enable_ebs = 5 [default = false];
inline bool ChassisCtlCmd::has_enable_ebs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisCtlCmd::clear_enable_ebs() {
  enable_ebs_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChassisCtlCmd::enable_ebs() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_ebs)
  return enable_ebs_;
}
inline void ChassisCtlCmd::set_enable_ebs(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_ebs_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_ebs)
}

// optional bool enable_remote_ctl = 6 [default = false];
inline bool ChassisCtlCmd::has_enable_remote_ctl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisCtlCmd::clear_enable_remote_ctl() {
  enable_remote_ctl_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ChassisCtlCmd::enable_remote_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_remote_ctl)
  return enable_remote_ctl_;
}
inline void ChassisCtlCmd::set_enable_remote_ctl(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_remote_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_remote_ctl)
}

// optional bool enable_direct_ctl = 7 [default = false];
inline bool ChassisCtlCmd::has_enable_direct_ctl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisCtlCmd::clear_enable_direct_ctl() {
  enable_direct_ctl_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ChassisCtlCmd::enable_direct_ctl() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_direct_ctl)
  return enable_direct_ctl_;
}
inline void ChassisCtlCmd::set_enable_direct_ctl(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enable_direct_ctl_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_direct_ctl)
}

// optional bool enable_acc = 8 [default = false];
inline bool ChassisCtlCmd::has_enable_acc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisCtlCmd::clear_enable_acc() {
  enable_acc_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ChassisCtlCmd::enable_acc() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.enable_acc)
  return enable_acc_;
}
inline void ChassisCtlCmd::set_enable_acc(bool value) {
  _has_bits_[0] |= 0x00000080u;
  enable_acc_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.enable_acc)
}

// optional bool release_throttle = 9 [default = false];
inline bool ChassisCtlCmd::has_release_throttle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisCtlCmd::clear_release_throttle() {
  release_throttle_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ChassisCtlCmd::release_throttle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.release_throttle)
  return release_throttle_;
}
inline void ChassisCtlCmd::set_release_throttle(bool value) {
  _has_bits_[0] |= 0x00000100u;
  release_throttle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.release_throttle)
}

// optional float steering_wheel_angle = 10 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisCtlCmd::clear_steering_wheel_angle() {
  steering_wheel_angle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ChassisCtlCmd::steering_wheel_angle() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_angle)
  return steering_wheel_angle_;
}
inline void ChassisCtlCmd::set_steering_wheel_angle(float value) {
  _has_bits_[0] |= 0x00000200u;
  steering_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_angle)
}

// optional float steering_wheel_speed = 11 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisCtlCmd::clear_steering_wheel_speed() {
  steering_wheel_speed_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ChassisCtlCmd::steering_wheel_speed() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_speed)
  return steering_wheel_speed_;
}
inline void ChassisCtlCmd::set_steering_wheel_speed(float value) {
  _has_bits_[0] |= 0x00000400u;
  steering_wheel_speed_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_speed)
}

// optional float steering_wheel_torque = 12 [default = 0];
inline bool ChassisCtlCmd::has_steering_wheel_torque() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisCtlCmd::clear_steering_wheel_torque() {
  steering_wheel_torque_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ChassisCtlCmd::steering_wheel_torque() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.steering_wheel_torque)
  return steering_wheel_torque_;
}
inline void ChassisCtlCmd::set_steering_wheel_torque(float value) {
  _has_bits_[0] |= 0x00000800u;
  steering_wheel_torque_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.steering_wheel_torque)
}

// optional float velocity = 13 [default = 0];
inline bool ChassisCtlCmd::has_velocity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisCtlCmd::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ChassisCtlCmd::velocity() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.velocity)
  return velocity_;
}
inline void ChassisCtlCmd::set_velocity(float value) {
  _has_bits_[0] |= 0x00001000u;
  velocity_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.velocity)
}

// optional float acceleration = 14 [default = 0];
inline bool ChassisCtlCmd::has_acceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisCtlCmd::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ChassisCtlCmd::acceleration() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.acceleration)
  return acceleration_;
}
inline void ChassisCtlCmd::set_acceleration(float value) {
  _has_bits_[0] |= 0x00002000u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.acceleration)
}

// optional float acc_value = 15 [default = 0];
inline bool ChassisCtlCmd::has_acc_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisCtlCmd::clear_acc_value() {
  acc_value_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ChassisCtlCmd::acc_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.acc_value)
  return acc_value_;
}
inline void ChassisCtlCmd::set_acc_value(float value) {
  _has_bits_[0] |= 0x00004000u;
  acc_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.acc_value)
}

// optional float brake_value = 16 [default = 0];
inline bool ChassisCtlCmd::has_brake_value() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChassisCtlCmd::clear_brake_value() {
  brake_value_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ChassisCtlCmd::brake_value() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.brake_value)
  return brake_value_;
}
inline void ChassisCtlCmd::set_brake_value(float value) {
  _has_bits_[0] |= 0x00008000u;
  brake_value_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.brake_value)
}

// optional .phoenix.msg.control.ChassisCtlCmd.GearPosition gear = 17 [default = GEAR_INVALID];
inline bool ChassisCtlCmd::has_gear() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChassisCtlCmd::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::phoenix::msg::control::ChassisCtlCmd_GearPosition ChassisCtlCmd::gear() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.gear)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_GearPosition >(gear_);
}
inline void ChassisCtlCmd::set_gear(::phoenix::msg::control::ChassisCtlCmd_GearPosition value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.gear)
}

// optional .phoenix.msg.control.ChassisCtlCmd.SignalTurnLamp turn_lamp = 18 [default = TURN_LAMP_INVALID];
inline bool ChassisCtlCmd::has_turn_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChassisCtlCmd::clear_turn_lamp() {
  turn_lamp_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp ChassisCtlCmd::turn_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.turn_lamp)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp >(turn_lamp_);
}
inline void ChassisCtlCmd::set_turn_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  turn_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.turn_lamp)
}

// optional .phoenix.msg.control.ChassisCtlCmd.SignalLamp brake_lamp = 19 [default = LAMP_INVALID];
inline bool ChassisCtlCmd::has_brake_lamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChassisCtlCmd::clear_brake_lamp() {
  brake_lamp_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::phoenix::msg::control::ChassisCtlCmd_SignalLamp ChassisCtlCmd::brake_lamp() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.brake_lamp)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp >(brake_lamp_);
}
inline void ChassisCtlCmd::set_brake_lamp(::phoenix::msg::control::ChassisCtlCmd_SignalLamp value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_SignalLamp_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  brake_lamp_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.brake_lamp)
}

// optional .phoenix.msg.control.ChassisCtlCmd.WiperStatus wiper = 20 [default = WIPER_INVALID];
inline bool ChassisCtlCmd::has_wiper() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChassisCtlCmd::clear_wiper() {
  wiper_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::phoenix::msg::control::ChassisCtlCmd_WiperStatus ChassisCtlCmd::wiper() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.wiper)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus >(wiper_);
}
inline void ChassisCtlCmd::set_wiper(::phoenix::msg::control::ChassisCtlCmd_WiperStatus value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_WiperStatus_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  wiper_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.wiper)
}

// optional .phoenix.msg.control.ChassisCtlCmd.EpbStatus epb_status = 21 [default = EPB_STATUS_INVALID];
inline bool ChassisCtlCmd::has_epb_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChassisCtlCmd::clear_epb_status() {
  epb_status_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::phoenix::msg::control::ChassisCtlCmd_EpbStatus ChassisCtlCmd::epb_status() const {
  // @@protoc_insertion_point(field_get:phoenix.msg.control.ChassisCtlCmd.epb_status)
  return static_cast< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus >(epb_status_);
}
inline void ChassisCtlCmd::set_epb_status(::phoenix::msg::control::ChassisCtlCmd_EpbStatus value) {
  assert(::phoenix::msg::control::ChassisCtlCmd_EpbStatus_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:phoenix.msg.control.ChassisCtlCmd.epb_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace msg
}  // namespace phoenix

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_GearPosition>() {
  return ::phoenix::msg::control::ChassisCtlCmd_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_SignalLamp>() {
  return ::phoenix::msg::control::ChassisCtlCmd_SignalLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp>() {
  return ::phoenix::msg::control::ChassisCtlCmd_SignalTurnLamp_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_EpbStatus>() {
  return ::phoenix::msg::control::ChassisCtlCmd_EpbStatus_descriptor();
}
template <> struct is_proto_enum< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phoenix::msg::control::ChassisCtlCmd_WiperStatus>() {
  return ::phoenix::msg::control::ChassisCtlCmd_WiperStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chassis_5fctl_5fcmd_2eproto
