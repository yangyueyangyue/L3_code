// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MpuState.proto

#include "MpuState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MpuState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorSignal_MpuState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MpuState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorState_MpuState_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MpuState_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorTraj_MpuState_2eproto;
namespace MpuState {
class MonitorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorState> _instance;
} _MonitorState_default_instance_;
class MonitorSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorSignal> _instance;
} _MonitorSignal_default_instance_;
class MonitorTrajDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorTraj> _instance;
} _MonitorTraj_default_instance_;
class MonitorMpuStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorMpuState> _instance;
} _MonitorMpuState_default_instance_;
}  // namespace MpuState
static void InitDefaultsscc_info_MonitorMpuState_MpuState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MpuState::_MonitorMpuState_default_instance_;
    new (ptr) ::MpuState::MonitorMpuState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MpuState::MonitorMpuState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MonitorMpuState_MpuState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MonitorMpuState_MpuState_2eproto}, {
      &scc_info_MonitorTraj_MpuState_2eproto.base,
      &scc_info_MonitorState_MpuState_2eproto.base,
      &scc_info_MonitorSignal_MpuState_2eproto.base,}};

static void InitDefaultsscc_info_MonitorSignal_MpuState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MpuState::_MonitorSignal_default_instance_;
    new (ptr) ::MpuState::MonitorSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MpuState::MonitorSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorSignal_MpuState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MonitorSignal_MpuState_2eproto}, {}};

static void InitDefaultsscc_info_MonitorState_MpuState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MpuState::_MonitorState_default_instance_;
    new (ptr) ::MpuState::MonitorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MpuState::MonitorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorState_MpuState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MonitorState_MpuState_2eproto}, {}};

static void InitDefaultsscc_info_MonitorTraj_MpuState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MpuState::_MonitorTraj_default_instance_;
    new (ptr) ::MpuState::MonitorTraj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MpuState::MonitorTraj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorTraj_MpuState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MonitorTraj_MpuState_2eproto}, {}};

namespace MpuState {
bool EMPUState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EMPUState_strings[2] = {};

static const char EMPUState_names[] =
  "MPUERR"
  "MPUOK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EMPUState_entries[] = {
  { {EMPUState_names + 0, 6}, 0 },
  { {EMPUState_names + 6, 5}, 1 },
};

static const int EMPUState_entries_by_number[] = {
  0, // 0 -> MPUERR
  1, // 1 -> MPUOK
};

const std::string& EMPUState_Name(
    EMPUState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EMPUState_entries,
          EMPUState_entries_by_number,
          2, EMPUState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EMPUState_entries,
      EMPUState_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EMPUState_strings[idx].get();
}
bool EMPUState_Parse(
    const std::string& name, EMPUState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EMPUState_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EMPUState>(int_value);
  }
  return success;
}
bool PlanningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlanningType_strings[2] = {};

static const char PlanningType_names[] =
  "PlanningTypeIn"
  "PlanningTypeOut";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlanningType_entries[] = {
  { {PlanningType_names + 0, 14}, 1 },
  { {PlanningType_names + 14, 15}, 0 },
};

static const int PlanningType_entries_by_number[] = {
  1, // 0 -> PlanningTypeOut
  0, // 1 -> PlanningTypeIn
};

const std::string& PlanningType_Name(
    PlanningType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlanningType_entries,
          PlanningType_entries_by_number,
          2, PlanningType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlanningType_entries,
      PlanningType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlanningType_strings[idx].get();
}
bool PlanningType_Parse(
    const std::string& name, PlanningType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlanningType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlanningType>(int_value);
  }
  return success;
}
bool HighWayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HighWayType_strings[3] = {};

static const char HighWayType_names[] =
  "HighWayTypeDefault"
  "HighWayTypeIn"
  "HighWayTypeOut";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HighWayType_entries[] = {
  { {HighWayType_names + 0, 18}, 2 },
  { {HighWayType_names + 18, 13}, 1 },
  { {HighWayType_names + 31, 14}, 0 },
};

static const int HighWayType_entries_by_number[] = {
  2, // 0 -> HighWayTypeOut
  1, // 1 -> HighWayTypeIn
  0, // 2 -> HighWayTypeDefault
};

const std::string& HighWayType_Name(
    HighWayType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HighWayType_entries,
          HighWayType_entries_by_number,
          3, HighWayType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HighWayType_entries,
      HighWayType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HighWayType_strings[idx].get();
}
bool HighWayType_Parse(
    const std::string& name, HighWayType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HighWayType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<HighWayType>(int_value);
  }
  return success;
}
bool GeofenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GeofenceType_strings[7] = {};

static const char GeofenceType_names[] =
  "GeofenceTypeDefault"
  "GeofenceTypeExceCurvature"
  "GeofenceTypeInRamp"
  "GeofenceTypeInTunnel"
  "GeofenceTypeOutTunnel"
  "GeofenceTypeRamp150"
  "GeofenceTypeTunnel200";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GeofenceType_entries[] = {
  { {GeofenceType_names + 0, 19}, 15 },
  { {GeofenceType_names + 19, 25}, 5 },
  { {GeofenceType_names + 44, 18}, 1 },
  { {GeofenceType_names + 62, 20}, 3 },
  { {GeofenceType_names + 82, 21}, 4 },
  { {GeofenceType_names + 103, 19}, 0 },
  { {GeofenceType_names + 122, 21}, 2 },
};

static const int GeofenceType_entries_by_number[] = {
  5, // 0 -> GeofenceTypeRamp150
  2, // 1 -> GeofenceTypeInRamp
  6, // 2 -> GeofenceTypeTunnel200
  3, // 3 -> GeofenceTypeInTunnel
  4, // 4 -> GeofenceTypeOutTunnel
  1, // 5 -> GeofenceTypeExceCurvature
  0, // 15 -> GeofenceTypeDefault
};

const std::string& GeofenceType_Name(
    GeofenceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GeofenceType_entries,
          GeofenceType_entries_by_number,
          7, GeofenceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GeofenceType_entries,
      GeofenceType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GeofenceType_strings[idx].get();
}
bool GeofenceType_Parse(
    const std::string& name, GeofenceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GeofenceType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<GeofenceType>(int_value);
  }
  return success;
}

// ===================================================================

void MonitorState::InitAsDefaultInstance() {
}
class MonitorState::_Internal {
 public:
};

MonitorState::MonitorState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpuState.MonitorState)
}
MonitorState::MonitorState(const MonitorState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&antennaconnectstatus_, &from.antennaconnectstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&frontcameralinestatus_) -
    reinterpret_cast<char*>(&antennaconnectstatus_)) + sizeof(frontcameralinestatus_));
  // @@protoc_insertion_point(copy_constructor:MpuState.MonitorState)
}

void MonitorState::SharedCtor() {
  ::memset(&antennaconnectstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frontcameralinestatus_) -
      reinterpret_cast<char*>(&antennaconnectstatus_)) + sizeof(frontcameralinestatus_));
}

MonitorState::~MonitorState() {
  // @@protoc_insertion_point(destructor:MpuState.MonitorState)
  SharedDtor();
}

void MonitorState::SharedDtor() {
}

void MonitorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorState& MonitorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorState_MpuState_2eproto.base);
  return *internal_default_instance();
}


void MonitorState::Clear() {
// @@protoc_insertion_point(message_clear_start:MpuState.MonitorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antennaconnectstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frontcameralinestatus_) -
      reinterpret_cast<char*>(&antennaconnectstatus_)) + sizeof(frontcameralinestatus_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonitorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool AntennaConnectStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antennaconnectstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool MpuMCURunStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mpumcurunstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool MpuSOCRunStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mpusocrunstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool F9KDemarcateStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          f9kdemarcatestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool MpuEngineRunStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mpuenginerunstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsHasMapData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ishasmapdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool VehicleCANData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vehiclecandata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FrontCameraLineStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          frontcameralinestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonitorState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MpuState.MonitorState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool AntennaConnectStatus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antennaconnectstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool MpuMCURunStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mpumcurunstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool MpuSOCRunStatus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mpusocrunstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool F9KDemarcateStatus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &f9kdemarcatestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool MpuEngineRunStatus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mpuenginerunstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsHasMapData = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasmapdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool VehicleCANData = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehiclecandata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FrontCameraLineStatus = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frontcameralinestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpuState.MonitorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpuState.MonitorState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonitorState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpuState.MonitorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AntennaConnectStatus = 1;
  if (this->antennaconnectstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->antennaconnectstatus(), output);
  }

  // bool MpuMCURunStatus = 2;
  if (this->mpumcurunstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->mpumcurunstatus(), output);
  }

  // bool MpuSOCRunStatus = 3;
  if (this->mpusocrunstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->mpusocrunstatus(), output);
  }

  // bool F9KDemarcateStatus = 4;
  if (this->f9kdemarcatestatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->f9kdemarcatestatus(), output);
  }

  // bool MpuEngineRunStatus = 5;
  if (this->mpuenginerunstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->mpuenginerunstatus(), output);
  }

  // bool IsHasMapData = 6;
  if (this->ishasmapdata() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->ishasmapdata(), output);
  }

  // bool VehicleCANData = 7;
  if (this->vehiclecandata() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->vehiclecandata(), output);
  }

  // bool FrontCameraLineStatus = 8;
  if (this->frontcameralinestatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->frontcameralinestatus(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MpuState.MonitorState)
}

size_t MonitorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpuState.MonitorState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool AntennaConnectStatus = 1;
  if (this->antennaconnectstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool MpuMCURunStatus = 2;
  if (this->mpumcurunstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool MpuSOCRunStatus = 3;
  if (this->mpusocrunstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool F9KDemarcateStatus = 4;
  if (this->f9kdemarcatestatus() != 0) {
    total_size += 1 + 1;
  }

  // bool MpuEngineRunStatus = 5;
  if (this->mpuenginerunstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool IsHasMapData = 6;
  if (this->ishasmapdata() != 0) {
    total_size += 1 + 1;
  }

  // bool VehicleCANData = 7;
  if (this->vehiclecandata() != 0) {
    total_size += 1 + 1;
  }

  // bool FrontCameraLineStatus = 8;
  if (this->frontcameralinestatus() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MonitorState*>(
      &from));
}

void MonitorState::MergeFrom(const MonitorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpuState.MonitorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antennaconnectstatus() != 0) {
    set_antennaconnectstatus(from.antennaconnectstatus());
  }
  if (from.mpumcurunstatus() != 0) {
    set_mpumcurunstatus(from.mpumcurunstatus());
  }
  if (from.mpusocrunstatus() != 0) {
    set_mpusocrunstatus(from.mpusocrunstatus());
  }
  if (from.f9kdemarcatestatus() != 0) {
    set_f9kdemarcatestatus(from.f9kdemarcatestatus());
  }
  if (from.mpuenginerunstatus() != 0) {
    set_mpuenginerunstatus(from.mpuenginerunstatus());
  }
  if (from.ishasmapdata() != 0) {
    set_ishasmapdata(from.ishasmapdata());
  }
  if (from.vehiclecandata() != 0) {
    set_vehiclecandata(from.vehiclecandata());
  }
  if (from.frontcameralinestatus() != 0) {
    set_frontcameralinestatus(from.frontcameralinestatus());
  }
}

void MonitorState::CopyFrom(const MonitorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpuState.MonitorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorState::IsInitialized() const {
  return true;
}

void MonitorState::InternalSwap(MonitorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(antennaconnectstatus_, other->antennaconnectstatus_);
  swap(mpumcurunstatus_, other->mpumcurunstatus_);
  swap(mpusocrunstatus_, other->mpusocrunstatus_);
  swap(f9kdemarcatestatus_, other->f9kdemarcatestatus_);
  swap(mpuenginerunstatus_, other->mpuenginerunstatus_);
  swap(ishasmapdata_, other->ishasmapdata_);
  swap(vehiclecandata_, other->vehiclecandata_);
  swap(frontcameralinestatus_, other->frontcameralinestatus_);
}

std::string MonitorState::GetTypeName() const {
  return "MpuState.MonitorState";
}


// ===================================================================

void MonitorSignal::InitAsDefaultInstance() {
}
class MonitorSignal::_Internal {
 public:
};

MonitorSignal::MonitorSignal()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpuState.MonitorSignal)
}
MonitorSignal::MonitorSignal(const MonitorSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f9kgnssweakenstatus_, &from.f9kgnssweakenstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&fusiionconfidencestatus_) -
    reinterpret_cast<char*>(&f9kgnssweakenstatus_)) + sizeof(fusiionconfidencestatus_));
  // @@protoc_insertion_point(copy_constructor:MpuState.MonitorSignal)
}

void MonitorSignal::SharedCtor() {
  ::memset(&f9kgnssweakenstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fusiionconfidencestatus_) -
      reinterpret_cast<char*>(&f9kgnssweakenstatus_)) + sizeof(fusiionconfidencestatus_));
}

MonitorSignal::~MonitorSignal() {
  // @@protoc_insertion_point(destructor:MpuState.MonitorSignal)
  SharedDtor();
}

void MonitorSignal::SharedDtor() {
}

void MonitorSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorSignal& MonitorSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorSignal_MpuState_2eproto.base);
  return *internal_default_instance();
}


void MonitorSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:MpuState.MonitorSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f9kgnssweakenstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fusiionconfidencestatus_) -
      reinterpret_cast<char*>(&f9kgnssweakenstatus_)) + sizeof(fusiionconfidencestatus_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonitorSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool F9KGnssWeakenStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          f9kgnssweakenstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool F9kRTKStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          f9krtkstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool F9kImuInitStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          f9kimuinitstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FrontCameraConfidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frontcameraconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FusiionConfidenceStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fusiionconfidencestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonitorSignal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MpuState.MonitorSignal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool F9KGnssWeakenStatus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &f9kgnssweakenstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool F9kRTKStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &f9krtkstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool F9kImuInitStatus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &f9kimuinitstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FrontCameraConfidence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frontcameraconfidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool FusiionConfidenceStatus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fusiionconfidencestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpuState.MonitorSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpuState.MonitorSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonitorSignal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpuState.MonitorSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool F9KGnssWeakenStatus = 1;
  if (this->f9kgnssweakenstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->f9kgnssweakenstatus(), output);
  }

  // bool F9kRTKStatus = 2;
  if (this->f9krtkstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->f9krtkstatus(), output);
  }

  // bool F9kImuInitStatus = 3;
  if (this->f9kimuinitstatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->f9kimuinitstatus(), output);
  }

  // bool FrontCameraConfidence = 4;
  if (this->frontcameraconfidence() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->frontcameraconfidence(), output);
  }

  // bool FusiionConfidenceStatus = 5;
  if (this->fusiionconfidencestatus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->fusiionconfidencestatus(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MpuState.MonitorSignal)
}

size_t MonitorSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpuState.MonitorSignal)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool F9KGnssWeakenStatus = 1;
  if (this->f9kgnssweakenstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool F9kRTKStatus = 2;
  if (this->f9krtkstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool F9kImuInitStatus = 3;
  if (this->f9kimuinitstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool FrontCameraConfidence = 4;
  if (this->frontcameraconfidence() != 0) {
    total_size += 1 + 1;
  }

  // bool FusiionConfidenceStatus = 5;
  if (this->fusiionconfidencestatus() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorSignal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MonitorSignal*>(
      &from));
}

void MonitorSignal::MergeFrom(const MonitorSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpuState.MonitorSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f9kgnssweakenstatus() != 0) {
    set_f9kgnssweakenstatus(from.f9kgnssweakenstatus());
  }
  if (from.f9krtkstatus() != 0) {
    set_f9krtkstatus(from.f9krtkstatus());
  }
  if (from.f9kimuinitstatus() != 0) {
    set_f9kimuinitstatus(from.f9kimuinitstatus());
  }
  if (from.frontcameraconfidence() != 0) {
    set_frontcameraconfidence(from.frontcameraconfidence());
  }
  if (from.fusiionconfidencestatus() != 0) {
    set_fusiionconfidencestatus(from.fusiionconfidencestatus());
  }
}

void MonitorSignal::CopyFrom(const MonitorSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpuState.MonitorSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorSignal::IsInitialized() const {
  return true;
}

void MonitorSignal::InternalSwap(MonitorSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(f9kgnssweakenstatus_, other->f9kgnssweakenstatus_);
  swap(f9krtkstatus_, other->f9krtkstatus_);
  swap(f9kimuinitstatus_, other->f9kimuinitstatus_);
  swap(frontcameraconfidence_, other->frontcameraconfidence_);
  swap(fusiionconfidencestatus_, other->fusiionconfidencestatus_);
}

std::string MonitorSignal::GetTypeName() const {
  return "MpuState.MonitorSignal";
}


// ===================================================================

void MonitorTraj::InitAsDefaultInstance() {
}
class MonitorTraj::_Internal {
 public:
};

MonitorTraj::MonitorTraj()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpuState.MonitorTraj)
}
MonitorTraj::MonitorTraj(const MonitorTraj& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&planningstate_, &from.planningstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&geofencestate_) -
    reinterpret_cast<char*>(&planningstate_)) + sizeof(geofencestate_));
  // @@protoc_insertion_point(copy_constructor:MpuState.MonitorTraj)
}

void MonitorTraj::SharedCtor() {
  ::memset(&planningstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geofencestate_) -
      reinterpret_cast<char*>(&planningstate_)) + sizeof(geofencestate_));
}

MonitorTraj::~MonitorTraj() {
  // @@protoc_insertion_point(destructor:MpuState.MonitorTraj)
  SharedDtor();
}

void MonitorTraj::SharedDtor() {
}

void MonitorTraj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorTraj& MonitorTraj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorTraj_MpuState_2eproto.base);
  return *internal_default_instance();
}


void MonitorTraj::Clear() {
// @@protoc_insertion_point(message_clear_start:MpuState.MonitorTraj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&planningstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geofencestate_) -
      reinterpret_cast<char*>(&planningstate_)) + sizeof(geofencestate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonitorTraj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MpuState.PlanningType planningState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_planningstate(static_cast<::MpuState::PlanningType>(val));
        } else goto handle_unusual;
        continue;
      // .MpuState.GeofenceType geofenceState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_geofencestate(static_cast<::MpuState::GeofenceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonitorTraj::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MpuState.MonitorTraj)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpuState.PlanningType planningState = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_planningstate(static_cast< ::MpuState::PlanningType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.GeofenceType geofenceState = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geofencestate(static_cast< ::MpuState::GeofenceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpuState.MonitorTraj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpuState.MonitorTraj)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonitorTraj::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpuState.MonitorTraj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpuState.PlanningType planningState = 1;
  if (this->planningstate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->planningstate(), output);
  }

  // .MpuState.GeofenceType geofenceState = 2;
  if (this->geofencestate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->geofencestate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MpuState.MonitorTraj)
}

size_t MonitorTraj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpuState.MonitorTraj)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MpuState.PlanningType planningState = 1;
  if (this->planningstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->planningstate());
  }

  // .MpuState.GeofenceType geofenceState = 2;
  if (this->geofencestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->geofencestate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorTraj::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MonitorTraj*>(
      &from));
}

void MonitorTraj::MergeFrom(const MonitorTraj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpuState.MonitorTraj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.planningstate() != 0) {
    set_planningstate(from.planningstate());
  }
  if (from.geofencestate() != 0) {
    set_geofencestate(from.geofencestate());
  }
}

void MonitorTraj::CopyFrom(const MonitorTraj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpuState.MonitorTraj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorTraj::IsInitialized() const {
  return true;
}

void MonitorTraj::InternalSwap(MonitorTraj* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(planningstate_, other->planningstate_);
  swap(geofencestate_, other->geofencestate_);
}

std::string MonitorTraj::GetTypeName() const {
  return "MpuState.MonitorTraj";
}


// ===================================================================

void MonitorMpuState::InitAsDefaultInstance() {
  ::MpuState::_MonitorMpuState_default_instance_._instance.get_mutable()->trajvalue_ = const_cast< ::MpuState::MonitorTraj*>(
      ::MpuState::MonitorTraj::internal_default_instance());
  ::MpuState::_MonitorMpuState_default_instance_._instance.get_mutable()->statevalue_ = const_cast< ::MpuState::MonitorState*>(
      ::MpuState::MonitorState::internal_default_instance());
  ::MpuState::_MonitorMpuState_default_instance_._instance.get_mutable()->singlvalue_ = const_cast< ::MpuState::MonitorSignal*>(
      ::MpuState::MonitorSignal::internal_default_instance());
}
class MonitorMpuState::_Internal {
 public:
  static const ::MpuState::MonitorTraj& trajvalue(const MonitorMpuState* msg);
  static const ::MpuState::MonitorState& statevalue(const MonitorMpuState* msg);
  static const ::MpuState::MonitorSignal& singlvalue(const MonitorMpuState* msg);
};

const ::MpuState::MonitorTraj&
MonitorMpuState::_Internal::trajvalue(const MonitorMpuState* msg) {
  return *msg->trajvalue_;
}
const ::MpuState::MonitorState&
MonitorMpuState::_Internal::statevalue(const MonitorMpuState* msg) {
  return *msg->statevalue_;
}
const ::MpuState::MonitorSignal&
MonitorMpuState::_Internal::singlvalue(const MonitorMpuState* msg) {
  return *msg->singlvalue_;
}
MonitorMpuState::MonitorMpuState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpuState.MonitorMpuState)
}
MonitorMpuState::MonitorMpuState(const MonitorMpuState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajvalue()) {
    trajvalue_ = new ::MpuState::MonitorTraj(*from.trajvalue_);
  } else {
    trajvalue_ = nullptr;
  }
  if (from.has_statevalue()) {
    statevalue_ = new ::MpuState::MonitorState(*from.statevalue_);
  } else {
    statevalue_ = nullptr;
  }
  if (from.has_singlvalue()) {
    singlvalue_ = new ::MpuState::MonitorSignal(*from.singlvalue_);
  } else {
    singlvalue_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&limitspeedmin_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(limitspeedmin_));
  // @@protoc_insertion_point(copy_constructor:MpuState.MonitorMpuState)
}

void MonitorMpuState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorMpuState_MpuState_2eproto.base);
  ::memset(&trajvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitspeedmin_) -
      reinterpret_cast<char*>(&trajvalue_)) + sizeof(limitspeedmin_));
}

MonitorMpuState::~MonitorMpuState() {
  // @@protoc_insertion_point(destructor:MpuState.MonitorMpuState)
  SharedDtor();
}

void MonitorMpuState::SharedDtor() {
  if (this != internal_default_instance()) delete trajvalue_;
  if (this != internal_default_instance()) delete statevalue_;
  if (this != internal_default_instance()) delete singlvalue_;
}

void MonitorMpuState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorMpuState& MonitorMpuState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorMpuState_MpuState_2eproto.base);
  return *internal_default_instance();
}


void MonitorMpuState::Clear() {
// @@protoc_insertion_point(message_clear_start:MpuState.MonitorMpuState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajvalue_ != nullptr) {
    delete trajvalue_;
  }
  trajvalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && statevalue_ != nullptr) {
    delete statevalue_;
  }
  statevalue_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && singlvalue_ != nullptr) {
    delete singlvalue_;
  }
  singlvalue_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limitspeedmin_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(limitspeedmin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonitorMpuState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MpuState.EMPUState State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::MpuState::EMPUState>(val));
        } else goto handle_unusual;
        continue;
      // .MpuState.EMPUState Single = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_single(static_cast<::MpuState::EMPUState>(val));
        } else goto handle_unusual;
        continue;
      // .MpuState.EMPUState Traj = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traj(static_cast<::MpuState::EMPUState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 FussValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fussvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MpuState.MonitorTraj TrajValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_trajvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MpuState.MonitorState StateValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_statevalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MpuState.MonitorSignal SinglValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_singlvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MpuState.HighWayType HighWay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_highway(static_cast<::MpuState::HighWayType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 LimitSpeedMax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          limitspeedmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LimitSpeedMin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          limitspeedmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonitorMpuState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MpuState.MonitorMpuState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 TimeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.EMPUState State = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::MpuState::EMPUState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.EMPUState Single = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_single(static_cast< ::MpuState::EMPUState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.EMPUState Traj = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traj(static_cast< ::MpuState::EMPUState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FussValue = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fussvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.MonitorTraj TrajValue = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.MonitorState StateValue = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_statevalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.MonitorSignal SinglValue = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_singlvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpuState.HighWayType HighWay = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_highway(static_cast< ::MpuState::HighWayType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LimitSpeedMax = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitspeedmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LimitSpeedMin = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitspeedmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpuState.MonitorMpuState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpuState.MonitorMpuState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonitorMpuState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpuState.MonitorMpuState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 TimeStamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // .MpuState.EMPUState State = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // .MpuState.EMPUState Single = 3;
  if (this->single() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->single(), output);
  }

  // .MpuState.EMPUState Traj = 4;
  if (this->traj() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->traj(), output);
  }

  // uint32 FussValue = 5;
  if (this->fussvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->fussvalue(), output);
  }

  // .MpuState.MonitorTraj TrajValue = 6;
  if (this->has_trajvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::trajvalue(this), output);
  }

  // .MpuState.MonitorState StateValue = 7;
  if (this->has_statevalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::statevalue(this), output);
  }

  // .MpuState.MonitorSignal SinglValue = 8;
  if (this->has_singlvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::singlvalue(this), output);
  }

  // .MpuState.HighWayType HighWay = 9;
  if (this->highway() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->highway(), output);
  }

  // uint32 LimitSpeedMax = 10;
  if (this->limitspeedmax() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->limitspeedmax(), output);
  }

  // uint32 LimitSpeedMin = 11;
  if (this->limitspeedmin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->limitspeedmin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MpuState.MonitorMpuState)
}

size_t MonitorMpuState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpuState.MonitorMpuState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MpuState.MonitorTraj TrajValue = 6;
  if (this->has_trajvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajvalue_);
  }

  // .MpuState.MonitorState StateValue = 7;
  if (this->has_statevalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statevalue_);
  }

  // .MpuState.MonitorSignal SinglValue = 8;
  if (this->has_singlvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *singlvalue_);
  }

  // uint64 TimeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // .MpuState.EMPUState State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // .MpuState.EMPUState Single = 3;
  if (this->single() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->single());
  }

  // .MpuState.EMPUState Traj = 4;
  if (this->traj() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traj());
  }

  // uint32 FussValue = 5;
  if (this->fussvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->fussvalue());
  }

  // .MpuState.HighWayType HighWay = 9;
  if (this->highway() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->highway());
  }

  // uint32 LimitSpeedMax = 10;
  if (this->limitspeedmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limitspeedmax());
  }

  // uint32 LimitSpeedMin = 11;
  if (this->limitspeedmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limitspeedmin());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorMpuState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MonitorMpuState*>(
      &from));
}

void MonitorMpuState::MergeFrom(const MonitorMpuState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpuState.MonitorMpuState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajvalue()) {
    mutable_trajvalue()->::MpuState::MonitorTraj::MergeFrom(from.trajvalue());
  }
  if (from.has_statevalue()) {
    mutable_statevalue()->::MpuState::MonitorState::MergeFrom(from.statevalue());
  }
  if (from.has_singlvalue()) {
    mutable_singlvalue()->::MpuState::MonitorSignal::MergeFrom(from.singlvalue());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.single() != 0) {
    set_single(from.single());
  }
  if (from.traj() != 0) {
    set_traj(from.traj());
  }
  if (from.fussvalue() != 0) {
    set_fussvalue(from.fussvalue());
  }
  if (from.highway() != 0) {
    set_highway(from.highway());
  }
  if (from.limitspeedmax() != 0) {
    set_limitspeedmax(from.limitspeedmax());
  }
  if (from.limitspeedmin() != 0) {
    set_limitspeedmin(from.limitspeedmin());
  }
}

void MonitorMpuState::CopyFrom(const MonitorMpuState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpuState.MonitorMpuState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMpuState::IsInitialized() const {
  return true;
}

void MonitorMpuState::InternalSwap(MonitorMpuState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajvalue_, other->trajvalue_);
  swap(statevalue_, other->statevalue_);
  swap(singlvalue_, other->singlvalue_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(single_, other->single_);
  swap(traj_, other->traj_);
  swap(fussvalue_, other->fussvalue_);
  swap(highway_, other->highway_);
  swap(limitspeedmax_, other->limitspeedmax_);
  swap(limitspeedmin_, other->limitspeedmin_);
}

std::string MonitorMpuState::GetTypeName() const {
  return "MpuState.MonitorMpuState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MpuState
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MpuState::MonitorState* Arena::CreateMaybeMessage< ::MpuState::MonitorState >(Arena* arena) {
  return Arena::CreateInternal< ::MpuState::MonitorState >(arena);
}
template<> PROTOBUF_NOINLINE ::MpuState::MonitorSignal* Arena::CreateMaybeMessage< ::MpuState::MonitorSignal >(Arena* arena) {
  return Arena::CreateInternal< ::MpuState::MonitorSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::MpuState::MonitorTraj* Arena::CreateMaybeMessage< ::MpuState::MonitorTraj >(Arena* arena) {
  return Arena::CreateInternal< ::MpuState::MonitorTraj >(arena);
}
template<> PROTOBUF_NOINLINE ::MpuState::MonitorMpuState* Arena::CreateMaybeMessage< ::MpuState::MonitorMpuState >(Arena* arena) {
  return Arena::CreateInternal< ::MpuState::MonitorMpuState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
